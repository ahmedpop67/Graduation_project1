
bluebil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002f04  08002f04  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002f04  08002f04  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08002f04  08002f04  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f04  08002f04  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f08  08002f08  00012f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08002f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  200000cc  08002fd8  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08002fd8  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022e2  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cbc  00000000  00000000  000223d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003f8  00000000  00000000  00023098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000330  00000000  00000000  00023490  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002184  00000000  00000000  000237c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002091  00000000  00000000  00025944  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008372e  00000000  00000000  000279d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ab103  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e34  00000000  00000000  000ab180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08002eec 	.word	0x08002eec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	08002eec 	.word	0x08002eec

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__gedf2>:
 80004c4:	f04f 3cff 	mov.w	ip, #4294967295
 80004c8:	e006      	b.n	80004d8 <__cmpdf2+0x4>
 80004ca:	bf00      	nop

080004cc <__ledf2>:
 80004cc:	f04f 0c01 	mov.w	ip, #1
 80004d0:	e002      	b.n	80004d8 <__cmpdf2+0x4>
 80004d2:	bf00      	nop

080004d4 <__cmpdf2>:
 80004d4:	f04f 0c01 	mov.w	ip, #1
 80004d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004e8:	bf18      	it	ne
 80004ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004ee:	d01b      	beq.n	8000528 <__cmpdf2+0x54>
 80004f0:	b001      	add	sp, #4
 80004f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004f6:	bf0c      	ite	eq
 80004f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80004fc:	ea91 0f03 	teqne	r1, r3
 8000500:	bf02      	ittt	eq
 8000502:	ea90 0f02 	teqeq	r0, r2
 8000506:	2000      	moveq	r0, #0
 8000508:	4770      	bxeq	lr
 800050a:	f110 0f00 	cmn.w	r0, #0
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf58      	it	pl
 8000514:	4299      	cmppl	r1, r3
 8000516:	bf08      	it	eq
 8000518:	4290      	cmpeq	r0, r2
 800051a:	bf2c      	ite	cs
 800051c:	17d8      	asrcs	r0, r3, #31
 800051e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000522:	f040 0001 	orr.w	r0, r0, #1
 8000526:	4770      	bx	lr
 8000528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800052c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000530:	d102      	bne.n	8000538 <__cmpdf2+0x64>
 8000532:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000536:	d107      	bne.n	8000548 <__cmpdf2+0x74>
 8000538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800053c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000540:	d1d6      	bne.n	80004f0 <__cmpdf2+0x1c>
 8000542:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000546:	d0d3      	beq.n	80004f0 <__cmpdf2+0x1c>
 8000548:	f85d 0b04 	ldr.w	r0, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <__aeabi_cdrcmple>:
 8000550:	4684      	mov	ip, r0
 8000552:	4610      	mov	r0, r2
 8000554:	4662      	mov	r2, ip
 8000556:	468c      	mov	ip, r1
 8000558:	4619      	mov	r1, r3
 800055a:	4663      	mov	r3, ip
 800055c:	e000      	b.n	8000560 <__aeabi_cdcmpeq>
 800055e:	bf00      	nop

08000560 <__aeabi_cdcmpeq>:
 8000560:	b501      	push	{r0, lr}
 8000562:	f7ff ffb7 	bl	80004d4 <__cmpdf2>
 8000566:	2800      	cmp	r0, #0
 8000568:	bf48      	it	mi
 800056a:	f110 0f00 	cmnmi.w	r0, #0
 800056e:	bd01      	pop	{r0, pc}

08000570 <__aeabi_dcmpeq>:
 8000570:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000574:	f7ff fff4 	bl	8000560 <__aeabi_cdcmpeq>
 8000578:	bf0c      	ite	eq
 800057a:	2001      	moveq	r0, #1
 800057c:	2000      	movne	r0, #0
 800057e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000582:	bf00      	nop

08000584 <__aeabi_dcmplt>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff ffea 	bl	8000560 <__aeabi_cdcmpeq>
 800058c:	bf34      	ite	cc
 800058e:	2001      	movcc	r0, #1
 8000590:	2000      	movcs	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmple>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffe0 	bl	8000560 <__aeabi_cdcmpeq>
 80005a0:	bf94      	ite	ls
 80005a2:	2001      	movls	r0, #1
 80005a4:	2000      	movhi	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmpge>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffce 	bl	8000550 <__aeabi_cdrcmple>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpgt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffc4 	bl	8000550 <__aeabi_cdrcmple>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <EXTI0_IRQHandler>:
	EXTI0_CallBack = ptr ;
	
}	

void EXTI0_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <EXTI0_IRQHandler+0x1c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4798      	blx	r3
	/*	Clear pending Bit For EXTI0		*/
	SET_BIT(EXTI -> PR , 0);	
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <EXTI0_IRQHandler+0x20>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <EXTI0_IRQHandler+0x20>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6153      	str	r3, [r2, #20]
}	
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000e8 	.word	0x200000e8
 80005f4:	40010400 	.word	0x40010400

080005f8 <GPIO_voidSetPinMode>:
					
}
void  GPIO_VoidDeInit();

u8 GPIO_voidSetPinMode(u8 copy_u8portID,u8 copy_u8PinID,u8 copy_u8Mode)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	460b      	mov	r3, r1
 8000604:	71bb      	strb	r3, [r7, #6]
 8000606:	4613      	mov	r3, r2
 8000608:	717b      	strb	r3, [r7, #5]
	u8 lacal_u8ErrorState = STD_TYPE_OK;
 800060a:	2301      	movs	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15 && copy_u8Mode <= GPIO_OUTPUT_50M_AF_OD)
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b07      	cmp	r3, #7
 8000612:	f200 817a 	bhi.w	800090a <GPIO_voidSetPinMode+0x312>
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	2b0f      	cmp	r3, #15
 800061a:	f200 8176 	bhi.w	800090a <GPIO_voidSetPinMode+0x312>
 800061e:	797b      	ldrb	r3, [r7, #5]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	f200 8172 	bhi.w	800090a <GPIO_voidSetPinMode+0x312>
	{
		switch(copy_u8portID)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3b01      	subs	r3, #1
 800062a:	2b06      	cmp	r3, #6
 800062c:	f200 8170 	bhi.w	8000910 <GPIO_voidSetPinMode+0x318>
 8000630:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <GPIO_voidSetPinMode+0x40>)
 8000632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000636:	bf00      	nop
 8000638:	08000655 	.word	0x08000655
 800063c:	080006b5 	.word	0x080006b5
 8000640:	08000715 	.word	0x08000715
 8000644:	08000775 	.word	0x08000775
 8000648:	080007d5 	.word	0x080007d5
 800064c:	08000833 	.word	0x08000833
 8000650:	08000891 	.word	0x08000891
		{
			case GPIO_PORTA: 
				if(copy_u8PinID<=7)
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	2b07      	cmp	r3, #7
 8000658:	d812      	bhi.n	8000680 <GPIO_voidSetPinMode+0x88>
				{
					SET_4BIT_Val(GPIOA->CRL,copy_u8PinID*4,copy_u8Mode);
 800065a:	4bb1      	ldr	r3, [pc, #708]	; (8000920 <GPIO_voidSetPinMode+0x328>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	79ba      	ldrb	r2, [r7, #6]
 8000660:	0092      	lsls	r2, r2, #2
 8000662:	210f      	movs	r1, #15
 8000664:	fa01 f202 	lsl.w	r2, r1, r2
 8000668:	43d2      	mvns	r2, r2
 800066a:	4013      	ands	r3, r2
 800066c:	7979      	ldrb	r1, [r7, #5]
 800066e:	79ba      	ldrb	r2, [r7, #6]
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	fa01 f202 	lsl.w	r2, r1, r2
 8000676:	4611      	mov	r1, r2
 8000678:	4aa9      	ldr	r2, [pc, #676]	; (8000920 <GPIO_voidSetPinMode+0x328>)
 800067a:	430b      	orrs	r3, r1
 800067c:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOA->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 800067e:	e136      	b.n	80008ee <GPIO_voidSetPinMode+0x2f6>
				else if(copy_u8PinID <=15)
 8000680:	79bb      	ldrb	r3, [r7, #6]
 8000682:	2b0f      	cmp	r3, #15
 8000684:	f200 8133 	bhi.w	80008ee <GPIO_voidSetPinMode+0x2f6>
					copy_u8PinID-=8;
 8000688:	79bb      	ldrb	r3, [r7, #6]
 800068a:	3b08      	subs	r3, #8
 800068c:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOA->CRH,copy_u8PinID*4,copy_u8Mode);
 800068e:	4ba4      	ldr	r3, [pc, #656]	; (8000920 <GPIO_voidSetPinMode+0x328>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	79ba      	ldrb	r2, [r7, #6]
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	210f      	movs	r1, #15
 8000698:	fa01 f202 	lsl.w	r2, r1, r2
 800069c:	43d2      	mvns	r2, r2
 800069e:	4013      	ands	r3, r2
 80006a0:	7979      	ldrb	r1, [r7, #5]
 80006a2:	79ba      	ldrb	r2, [r7, #6]
 80006a4:	0092      	lsls	r2, r2, #2
 80006a6:	fa01 f202 	lsl.w	r2, r1, r2
 80006aa:	4611      	mov	r1, r2
 80006ac:	4a9c      	ldr	r2, [pc, #624]	; (8000920 <GPIO_voidSetPinMode+0x328>)
 80006ae:	430b      	orrs	r3, r1
 80006b0:	6053      	str	r3, [r2, #4]
				break;
 80006b2:	e11c      	b.n	80008ee <GPIO_voidSetPinMode+0x2f6>
			case GPIO_PORTB: 
				if(copy_u8PinID<=7)
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	2b07      	cmp	r3, #7
 80006b8:	d812      	bhi.n	80006e0 <GPIO_voidSetPinMode+0xe8>
				{
					SET_4BIT_Val(GPIOB->CRL,copy_u8PinID*4,copy_u8Mode);
 80006ba:	4b9a      	ldr	r3, [pc, #616]	; (8000924 <GPIO_voidSetPinMode+0x32c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	79ba      	ldrb	r2, [r7, #6]
 80006c0:	0092      	lsls	r2, r2, #2
 80006c2:	210f      	movs	r1, #15
 80006c4:	fa01 f202 	lsl.w	r2, r1, r2
 80006c8:	43d2      	mvns	r2, r2
 80006ca:	4013      	ands	r3, r2
 80006cc:	7979      	ldrb	r1, [r7, #5]
 80006ce:	79ba      	ldrb	r2, [r7, #6]
 80006d0:	0092      	lsls	r2, r2, #2
 80006d2:	fa01 f202 	lsl.w	r2, r1, r2
 80006d6:	4611      	mov	r1, r2
 80006d8:	4a92      	ldr	r2, [pc, #584]	; (8000924 <GPIO_voidSetPinMode+0x32c>)
 80006da:	430b      	orrs	r3, r1
 80006dc:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOB->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 80006de:	e108      	b.n	80008f2 <GPIO_voidSetPinMode+0x2fa>
				else if(copy_u8PinID <=15)
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	2b0f      	cmp	r3, #15
 80006e4:	f200 8105 	bhi.w	80008f2 <GPIO_voidSetPinMode+0x2fa>
					copy_u8PinID-=8;
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	3b08      	subs	r3, #8
 80006ec:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOB->CRH,copy_u8PinID*4,copy_u8Mode);
 80006ee:	4b8d      	ldr	r3, [pc, #564]	; (8000924 <GPIO_voidSetPinMode+0x32c>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	79ba      	ldrb	r2, [r7, #6]
 80006f4:	0092      	lsls	r2, r2, #2
 80006f6:	210f      	movs	r1, #15
 80006f8:	fa01 f202 	lsl.w	r2, r1, r2
 80006fc:	43d2      	mvns	r2, r2
 80006fe:	4013      	ands	r3, r2
 8000700:	7979      	ldrb	r1, [r7, #5]
 8000702:	79ba      	ldrb	r2, [r7, #6]
 8000704:	0092      	lsls	r2, r2, #2
 8000706:	fa01 f202 	lsl.w	r2, r1, r2
 800070a:	4611      	mov	r1, r2
 800070c:	4a85      	ldr	r2, [pc, #532]	; (8000924 <GPIO_voidSetPinMode+0x32c>)
 800070e:	430b      	orrs	r3, r1
 8000710:	6053      	str	r3, [r2, #4]
				break;
 8000712:	e0ee      	b.n	80008f2 <GPIO_voidSetPinMode+0x2fa>
			case GPIO_PORTC: 
				if(copy_u8PinID<=7)
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	2b07      	cmp	r3, #7
 8000718:	d812      	bhi.n	8000740 <GPIO_voidSetPinMode+0x148>
				{
					SET_4BIT_Val(GPIOC->CRL,copy_u8PinID*4,copy_u8Mode);
 800071a:	4b83      	ldr	r3, [pc, #524]	; (8000928 <GPIO_voidSetPinMode+0x330>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	79ba      	ldrb	r2, [r7, #6]
 8000720:	0092      	lsls	r2, r2, #2
 8000722:	210f      	movs	r1, #15
 8000724:	fa01 f202 	lsl.w	r2, r1, r2
 8000728:	43d2      	mvns	r2, r2
 800072a:	4013      	ands	r3, r2
 800072c:	7979      	ldrb	r1, [r7, #5]
 800072e:	79ba      	ldrb	r2, [r7, #6]
 8000730:	0092      	lsls	r2, r2, #2
 8000732:	fa01 f202 	lsl.w	r2, r1, r2
 8000736:	4611      	mov	r1, r2
 8000738:	4a7b      	ldr	r2, [pc, #492]	; (8000928 <GPIO_voidSetPinMode+0x330>)
 800073a:	430b      	orrs	r3, r1
 800073c:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOC->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 800073e:	e0da      	b.n	80008f6 <GPIO_voidSetPinMode+0x2fe>
				else if(copy_u8PinID <=15)
 8000740:	79bb      	ldrb	r3, [r7, #6]
 8000742:	2b0f      	cmp	r3, #15
 8000744:	f200 80d7 	bhi.w	80008f6 <GPIO_voidSetPinMode+0x2fe>
					copy_u8PinID-=8;
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	3b08      	subs	r3, #8
 800074c:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOC->CRH,copy_u8PinID*4,copy_u8Mode);
 800074e:	4b76      	ldr	r3, [pc, #472]	; (8000928 <GPIO_voidSetPinMode+0x330>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	79ba      	ldrb	r2, [r7, #6]
 8000754:	0092      	lsls	r2, r2, #2
 8000756:	210f      	movs	r1, #15
 8000758:	fa01 f202 	lsl.w	r2, r1, r2
 800075c:	43d2      	mvns	r2, r2
 800075e:	4013      	ands	r3, r2
 8000760:	7979      	ldrb	r1, [r7, #5]
 8000762:	79ba      	ldrb	r2, [r7, #6]
 8000764:	0092      	lsls	r2, r2, #2
 8000766:	fa01 f202 	lsl.w	r2, r1, r2
 800076a:	4611      	mov	r1, r2
 800076c:	4a6e      	ldr	r2, [pc, #440]	; (8000928 <GPIO_voidSetPinMode+0x330>)
 800076e:	430b      	orrs	r3, r1
 8000770:	6053      	str	r3, [r2, #4]
				break;
 8000772:	e0c0      	b.n	80008f6 <GPIO_voidSetPinMode+0x2fe>
			case GPIO_PORTD: 
				if(copy_u8PinID<=7)
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	2b07      	cmp	r3, #7
 8000778:	d812      	bhi.n	80007a0 <GPIO_voidSetPinMode+0x1a8>
				{
					SET_4BIT_Val(GPIOD->CRL,copy_u8PinID*4,copy_u8Mode);
 800077a:	4b6c      	ldr	r3, [pc, #432]	; (800092c <GPIO_voidSetPinMode+0x334>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	79ba      	ldrb	r2, [r7, #6]
 8000780:	0092      	lsls	r2, r2, #2
 8000782:	210f      	movs	r1, #15
 8000784:	fa01 f202 	lsl.w	r2, r1, r2
 8000788:	43d2      	mvns	r2, r2
 800078a:	4013      	ands	r3, r2
 800078c:	7979      	ldrb	r1, [r7, #5]
 800078e:	79ba      	ldrb	r2, [r7, #6]
 8000790:	0092      	lsls	r2, r2, #2
 8000792:	fa01 f202 	lsl.w	r2, r1, r2
 8000796:	4611      	mov	r1, r2
 8000798:	4a64      	ldr	r2, [pc, #400]	; (800092c <GPIO_voidSetPinMode+0x334>)
 800079a:	430b      	orrs	r3, r1
 800079c:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOD->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 800079e:	e0ac      	b.n	80008fa <GPIO_voidSetPinMode+0x302>
				else if(copy_u8PinID <=15)
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	2b0f      	cmp	r3, #15
 80007a4:	f200 80a9 	bhi.w	80008fa <GPIO_voidSetPinMode+0x302>
					copy_u8PinID-=8;
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	3b08      	subs	r3, #8
 80007ac:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOD->CRH,copy_u8PinID*4,copy_u8Mode);
 80007ae:	4b5f      	ldr	r3, [pc, #380]	; (800092c <GPIO_voidSetPinMode+0x334>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	79ba      	ldrb	r2, [r7, #6]
 80007b4:	0092      	lsls	r2, r2, #2
 80007b6:	210f      	movs	r1, #15
 80007b8:	fa01 f202 	lsl.w	r2, r1, r2
 80007bc:	43d2      	mvns	r2, r2
 80007be:	4013      	ands	r3, r2
 80007c0:	7979      	ldrb	r1, [r7, #5]
 80007c2:	79ba      	ldrb	r2, [r7, #6]
 80007c4:	0092      	lsls	r2, r2, #2
 80007c6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ca:	4611      	mov	r1, r2
 80007cc:	4a57      	ldr	r2, [pc, #348]	; (800092c <GPIO_voidSetPinMode+0x334>)
 80007ce:	430b      	orrs	r3, r1
 80007d0:	6053      	str	r3, [r2, #4]
				break;
 80007d2:	e092      	b.n	80008fa <GPIO_voidSetPinMode+0x302>
			case GPIO_PORTE: 
				if(copy_u8PinID<=7)
 80007d4:	79bb      	ldrb	r3, [r7, #6]
 80007d6:	2b07      	cmp	r3, #7
 80007d8:	d812      	bhi.n	8000800 <GPIO_voidSetPinMode+0x208>
				{
					SET_4BIT_Val(GPIOE->CRL,copy_u8PinID*4,copy_u8Mode);
 80007da:	4b55      	ldr	r3, [pc, #340]	; (8000930 <GPIO_voidSetPinMode+0x338>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	79ba      	ldrb	r2, [r7, #6]
 80007e0:	0092      	lsls	r2, r2, #2
 80007e2:	210f      	movs	r1, #15
 80007e4:	fa01 f202 	lsl.w	r2, r1, r2
 80007e8:	43d2      	mvns	r2, r2
 80007ea:	4013      	ands	r3, r2
 80007ec:	7979      	ldrb	r1, [r7, #5]
 80007ee:	79ba      	ldrb	r2, [r7, #6]
 80007f0:	0092      	lsls	r2, r2, #2
 80007f2:	fa01 f202 	lsl.w	r2, r1, r2
 80007f6:	4611      	mov	r1, r2
 80007f8:	4a4d      	ldr	r2, [pc, #308]	; (8000930 <GPIO_voidSetPinMode+0x338>)
 80007fa:	430b      	orrs	r3, r1
 80007fc:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOE->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 80007fe:	e07e      	b.n	80008fe <GPIO_voidSetPinMode+0x306>
				else if(copy_u8PinID <=15)
 8000800:	79bb      	ldrb	r3, [r7, #6]
 8000802:	2b0f      	cmp	r3, #15
 8000804:	d87b      	bhi.n	80008fe <GPIO_voidSetPinMode+0x306>
					copy_u8PinID-=8;
 8000806:	79bb      	ldrb	r3, [r7, #6]
 8000808:	3b08      	subs	r3, #8
 800080a:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOE->CRH,copy_u8PinID*4,copy_u8Mode);
 800080c:	4b48      	ldr	r3, [pc, #288]	; (8000930 <GPIO_voidSetPinMode+0x338>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	79ba      	ldrb	r2, [r7, #6]
 8000812:	0092      	lsls	r2, r2, #2
 8000814:	210f      	movs	r1, #15
 8000816:	fa01 f202 	lsl.w	r2, r1, r2
 800081a:	43d2      	mvns	r2, r2
 800081c:	4013      	ands	r3, r2
 800081e:	7979      	ldrb	r1, [r7, #5]
 8000820:	79ba      	ldrb	r2, [r7, #6]
 8000822:	0092      	lsls	r2, r2, #2
 8000824:	fa01 f202 	lsl.w	r2, r1, r2
 8000828:	4611      	mov	r1, r2
 800082a:	4a41      	ldr	r2, [pc, #260]	; (8000930 <GPIO_voidSetPinMode+0x338>)
 800082c:	430b      	orrs	r3, r1
 800082e:	6053      	str	r3, [r2, #4]
				break;
 8000830:	e065      	b.n	80008fe <GPIO_voidSetPinMode+0x306>
		    case GPIO_PORTF: 
				if(copy_u8PinID<=7)
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	2b07      	cmp	r3, #7
 8000836:	d812      	bhi.n	800085e <GPIO_voidSetPinMode+0x266>
				{
					SET_4BIT_Val(GPIOF->CRL,copy_u8PinID*4,copy_u8Mode);
 8000838:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <GPIO_voidSetPinMode+0x33c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	79ba      	ldrb	r2, [r7, #6]
 800083e:	0092      	lsls	r2, r2, #2
 8000840:	210f      	movs	r1, #15
 8000842:	fa01 f202 	lsl.w	r2, r1, r2
 8000846:	43d2      	mvns	r2, r2
 8000848:	4013      	ands	r3, r2
 800084a:	7979      	ldrb	r1, [r7, #5]
 800084c:	79ba      	ldrb	r2, [r7, #6]
 800084e:	0092      	lsls	r2, r2, #2
 8000850:	fa01 f202 	lsl.w	r2, r1, r2
 8000854:	4611      	mov	r1, r2
 8000856:	4a37      	ldr	r2, [pc, #220]	; (8000934 <GPIO_voidSetPinMode+0x33c>)
 8000858:	430b      	orrs	r3, r1
 800085a:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOF->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 800085c:	e051      	b.n	8000902 <GPIO_voidSetPinMode+0x30a>
				else if(copy_u8PinID <=15)
 800085e:	79bb      	ldrb	r3, [r7, #6]
 8000860:	2b0f      	cmp	r3, #15
 8000862:	d84e      	bhi.n	8000902 <GPIO_voidSetPinMode+0x30a>
					copy_u8PinID-=8;
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	3b08      	subs	r3, #8
 8000868:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOF->CRH,copy_u8PinID*4,copy_u8Mode);
 800086a:	4b32      	ldr	r3, [pc, #200]	; (8000934 <GPIO_voidSetPinMode+0x33c>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	79ba      	ldrb	r2, [r7, #6]
 8000870:	0092      	lsls	r2, r2, #2
 8000872:	210f      	movs	r1, #15
 8000874:	fa01 f202 	lsl.w	r2, r1, r2
 8000878:	43d2      	mvns	r2, r2
 800087a:	4013      	ands	r3, r2
 800087c:	7979      	ldrb	r1, [r7, #5]
 800087e:	79ba      	ldrb	r2, [r7, #6]
 8000880:	0092      	lsls	r2, r2, #2
 8000882:	fa01 f202 	lsl.w	r2, r1, r2
 8000886:	4611      	mov	r1, r2
 8000888:	4a2a      	ldr	r2, [pc, #168]	; (8000934 <GPIO_voidSetPinMode+0x33c>)
 800088a:	430b      	orrs	r3, r1
 800088c:	6053      	str	r3, [r2, #4]
				break;
 800088e:	e038      	b.n	8000902 <GPIO_voidSetPinMode+0x30a>
			case GPIO_PORTG: 
				if(copy_u8PinID<=7)
 8000890:	79bb      	ldrb	r3, [r7, #6]
 8000892:	2b07      	cmp	r3, #7
 8000894:	d812      	bhi.n	80008bc <GPIO_voidSetPinMode+0x2c4>
				{
					SET_4BIT_Val(GPIOG->CRL,copy_u8PinID*4,copy_u8Mode);
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <GPIO_voidSetPinMode+0x340>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	79ba      	ldrb	r2, [r7, #6]
 800089c:	0092      	lsls	r2, r2, #2
 800089e:	210f      	movs	r1, #15
 80008a0:	fa01 f202 	lsl.w	r2, r1, r2
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	4013      	ands	r3, r2
 80008a8:	7979      	ldrb	r1, [r7, #5]
 80008aa:	79ba      	ldrb	r2, [r7, #6]
 80008ac:	0092      	lsls	r2, r2, #2
 80008ae:	fa01 f202 	lsl.w	r2, r1, r2
 80008b2:	4611      	mov	r1, r2
 80008b4:	4a20      	ldr	r2, [pc, #128]	; (8000938 <GPIO_voidSetPinMode+0x340>)
 80008b6:	430b      	orrs	r3, r1
 80008b8:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOG->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 80008ba:	e024      	b.n	8000906 <GPIO_voidSetPinMode+0x30e>
				else if(copy_u8PinID <=15)
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	2b0f      	cmp	r3, #15
 80008c0:	d821      	bhi.n	8000906 <GPIO_voidSetPinMode+0x30e>
					copy_u8PinID-=8;
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	3b08      	subs	r3, #8
 80008c6:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOG->CRH,copy_u8PinID*4,copy_u8Mode);
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <GPIO_voidSetPinMode+0x340>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	79ba      	ldrb	r2, [r7, #6]
 80008ce:	0092      	lsls	r2, r2, #2
 80008d0:	210f      	movs	r1, #15
 80008d2:	fa01 f202 	lsl.w	r2, r1, r2
 80008d6:	43d2      	mvns	r2, r2
 80008d8:	4013      	ands	r3, r2
 80008da:	7979      	ldrb	r1, [r7, #5]
 80008dc:	79ba      	ldrb	r2, [r7, #6]
 80008de:	0092      	lsls	r2, r2, #2
 80008e0:	fa01 f202 	lsl.w	r2, r1, r2
 80008e4:	4611      	mov	r1, r2
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <GPIO_voidSetPinMode+0x340>)
 80008e8:	430b      	orrs	r3, r1
 80008ea:	6053      	str	r3, [r2, #4]
				break;
 80008ec:	e00b      	b.n	8000906 <GPIO_voidSetPinMode+0x30e>
				break;
 80008ee:	bf00      	nop
 80008f0:	e00e      	b.n	8000910 <GPIO_voidSetPinMode+0x318>
				break;
 80008f2:	bf00      	nop
 80008f4:	e00c      	b.n	8000910 <GPIO_voidSetPinMode+0x318>
				break;
 80008f6:	bf00      	nop
 80008f8:	e00a      	b.n	8000910 <GPIO_voidSetPinMode+0x318>
				break;
 80008fa:	bf00      	nop
 80008fc:	e008      	b.n	8000910 <GPIO_voidSetPinMode+0x318>
				break;
 80008fe:	bf00      	nop
 8000900:	e006      	b.n	8000910 <GPIO_voidSetPinMode+0x318>
				break;
 8000902:	bf00      	nop
 8000904:	e004      	b.n	8000910 <GPIO_voidSetPinMode+0x318>
				break;
 8000906:	bf00      	nop
		}
	}
 8000908:	e002      	b.n	8000910 <GPIO_voidSetPinMode+0x318>
	else 
		lacal_u8ErrorState = STD_TYPE_NOK;
 800090a:	2300      	movs	r3, #0
 800090c:	73fb      	strb	r3, [r7, #15]
 800090e:	e000      	b.n	8000912 <GPIO_voidSetPinMode+0x31a>
	}
 8000910:	bf00      	nop
	return lacal_u8ErrorState;
 8000912:	7bfb      	ldrb	r3, [r7, #15]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40010800 	.word	0x40010800
 8000924:	40010c00 	.word	0x40010c00
 8000928:	40011000 	.word	0x40011000
 800092c:	40011400 	.word	0x40011400
 8000930:	40011800 	.word	0x40011800
 8000934:	40011c00 	.word	0x40011c00
 8000938:	40012000 	.word	0x40012000

0800093c <GPIO_voidSetPinValue>:


u8 GPIO_voidSetPinValue(u8 copy_u8portID,u8 copy_u8PinID,u8 copy_u8PinValue)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	460b      	mov	r3, r1
 8000948:	71bb      	strb	r3, [r7, #6]
 800094a:	4613      	mov	r3, r2
 800094c:	717b      	strb	r3, [r7, #5]
	u8 lacal_u8ErrorState = STD_TYPE_OK;
 800094e:	2301      	movs	r3, #1
 8000950:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15 && (copy_u8PinValue == 1 || copy_u8PinValue ==0 ))
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b07      	cmp	r3, #7
 8000956:	f200 80a7 	bhi.w	8000aa8 <GPIO_voidSetPinValue+0x16c>
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	f200 80a3 	bhi.w	8000aa8 <GPIO_voidSetPinValue+0x16c>
 8000962:	797b      	ldrb	r3, [r7, #5]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d003      	beq.n	8000970 <GPIO_voidSetPinValue+0x34>
 8000968:	797b      	ldrb	r3, [r7, #5]
 800096a:	2b00      	cmp	r3, #0
 800096c:	f040 809c 	bne.w	8000aa8 <GPIO_voidSetPinValue+0x16c>
	{
		switch(copy_u8portID)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	3b01      	subs	r3, #1
 8000974:	2b06      	cmp	r3, #6
 8000976:	f200 809a 	bhi.w	8000aae <GPIO_voidSetPinValue+0x172>
 800097a:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <GPIO_voidSetPinValue+0x44>)
 800097c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000980:	0800099d 	.word	0x0800099d
 8000984:	080009c3 	.word	0x080009c3
 8000988:	080009e9 	.word	0x080009e9
 800098c:	08000a0f 	.word	0x08000a0f
 8000990:	08000a35 	.word	0x08000a35
 8000994:	08000a5b 	.word	0x08000a5b
 8000998:	08000a81 	.word	0x08000a81
		{
			case GPIO_PORTA:
				switch(copy_u8PinValue){
 800099c:	797b      	ldrb	r3, [r7, #5]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <GPIO_voidSetPinValue+0x6c>
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d006      	beq.n	80009b4 <GPIO_voidSetPinValue+0x78>
				case 0:WRITE_BIT(GPIOA->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOA->BSRR,copy_u8PinID);break;}
				break;
 80009a6:	e07e      	b.n	8000aa6 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOA->BRR,copy_u8PinID);break;
 80009a8:	79bb      	ldrb	r3, [r7, #6]
 80009aa:	2201      	movs	r2, #1
 80009ac:	409a      	lsls	r2, r3
 80009ae:	4b43      	ldr	r3, [pc, #268]	; (8000abc <GPIO_voidSetPinValue+0x180>)
 80009b0:	615a      	str	r2, [r3, #20]
 80009b2:	e005      	b.n	80009c0 <GPIO_voidSetPinValue+0x84>
				case 1:WRITE_BIT(GPIOA->BSRR,copy_u8PinID);break;}
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	2201      	movs	r2, #1
 80009b8:	409a      	lsls	r2, r3
 80009ba:	4b40      	ldr	r3, [pc, #256]	; (8000abc <GPIO_voidSetPinValue+0x180>)
 80009bc:	611a      	str	r2, [r3, #16]
 80009be:	bf00      	nop
				break;
 80009c0:	e071      	b.n	8000aa6 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTB:
				switch(copy_u8PinValue){
 80009c2:	797b      	ldrb	r3, [r7, #5]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <GPIO_voidSetPinValue+0x92>
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d006      	beq.n	80009da <GPIO_voidSetPinValue+0x9e>
				case 0:WRITE_BIT(GPIOB->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOB->BSRR,copy_u8PinID);break;}
				break;
 80009cc:	e06b      	b.n	8000aa6 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOB->BRR,copy_u8PinID);break;
 80009ce:	79bb      	ldrb	r3, [r7, #6]
 80009d0:	2201      	movs	r2, #1
 80009d2:	409a      	lsls	r2, r3
 80009d4:	4b3a      	ldr	r3, [pc, #232]	; (8000ac0 <GPIO_voidSetPinValue+0x184>)
 80009d6:	615a      	str	r2, [r3, #20]
 80009d8:	e005      	b.n	80009e6 <GPIO_voidSetPinValue+0xaa>
				case 1:WRITE_BIT(GPIOB->BSRR,copy_u8PinID);break;}
 80009da:	79bb      	ldrb	r3, [r7, #6]
 80009dc:	2201      	movs	r2, #1
 80009de:	409a      	lsls	r2, r3
 80009e0:	4b37      	ldr	r3, [pc, #220]	; (8000ac0 <GPIO_voidSetPinValue+0x184>)
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	bf00      	nop
				break;
 80009e6:	e05e      	b.n	8000aa6 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTC:
				switch(copy_u8PinValue){
 80009e8:	797b      	ldrb	r3, [r7, #5]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d002      	beq.n	80009f4 <GPIO_voidSetPinValue+0xb8>
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d006      	beq.n	8000a00 <GPIO_voidSetPinValue+0xc4>
				case 0:WRITE_BIT(GPIOC->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOC->BSRR,copy_u8PinID);break;}
				break;
 80009f2:	e058      	b.n	8000aa6 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOC->BRR,copy_u8PinID);break;
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	2201      	movs	r2, #1
 80009f8:	409a      	lsls	r2, r3
 80009fa:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <GPIO_voidSetPinValue+0x188>)
 80009fc:	615a      	str	r2, [r3, #20]
 80009fe:	e005      	b.n	8000a0c <GPIO_voidSetPinValue+0xd0>
				case 1:WRITE_BIT(GPIOC->BSRR,copy_u8PinID);break;}
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	2201      	movs	r2, #1
 8000a04:	409a      	lsls	r2, r3
 8000a06:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <GPIO_voidSetPinValue+0x188>)
 8000a08:	611a      	str	r2, [r3, #16]
 8000a0a:	bf00      	nop
				break;
 8000a0c:	e04b      	b.n	8000aa6 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTD:
				switch(copy_u8PinValue){
 8000a0e:	797b      	ldrb	r3, [r7, #5]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <GPIO_voidSetPinValue+0xde>
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d006      	beq.n	8000a26 <GPIO_voidSetPinValue+0xea>
				case 0:WRITE_BIT(GPIOD->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOD->BSRR,copy_u8PinID);break;}
				break;
 8000a18:	e045      	b.n	8000aa6 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOD->BRR,copy_u8PinID);break;
 8000a1a:	79bb      	ldrb	r3, [r7, #6]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <GPIO_voidSetPinValue+0x18c>)
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	e005      	b.n	8000a32 <GPIO_voidSetPinValue+0xf6>
				case 1:WRITE_BIT(GPIOD->BSRR,copy_u8PinID);break;}
 8000a26:	79bb      	ldrb	r3, [r7, #6]
 8000a28:	2201      	movs	r2, #1
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <GPIO_voidSetPinValue+0x18c>)
 8000a2e:	611a      	str	r2, [r3, #16]
 8000a30:	bf00      	nop
				break;
 8000a32:	e038      	b.n	8000aa6 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTE:
				switch(copy_u8PinValue){
 8000a34:	797b      	ldrb	r3, [r7, #5]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d002      	beq.n	8000a40 <GPIO_voidSetPinValue+0x104>
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d006      	beq.n	8000a4c <GPIO_voidSetPinValue+0x110>
				case 0:WRITE_BIT(GPIOE->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOE->BSRR,copy_u8PinID);break;}
				break;
 8000a3e:	e032      	b.n	8000aa6 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOE->BRR,copy_u8PinID);break;
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	2201      	movs	r2, #1
 8000a44:	409a      	lsls	r2, r3
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <GPIO_voidSetPinValue+0x190>)
 8000a48:	615a      	str	r2, [r3, #20]
 8000a4a:	e005      	b.n	8000a58 <GPIO_voidSetPinValue+0x11c>
				case 1:WRITE_BIT(GPIOE->BSRR,copy_u8PinID);break;}
 8000a4c:	79bb      	ldrb	r3, [r7, #6]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	409a      	lsls	r2, r3
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <GPIO_voidSetPinValue+0x190>)
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	bf00      	nop
				break;
 8000a58:	e025      	b.n	8000aa6 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTF:
				switch(copy_u8PinValue){
 8000a5a:	797b      	ldrb	r3, [r7, #5]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <GPIO_voidSetPinValue+0x12a>
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d006      	beq.n	8000a72 <GPIO_voidSetPinValue+0x136>
				case 0:WRITE_BIT(GPIOF->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOF->BSRR,copy_u8PinID);break;}
				break;
 8000a64:	e01f      	b.n	8000aa6 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOF->BRR,copy_u8PinID);break;
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <GPIO_voidSetPinValue+0x194>)
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	e005      	b.n	8000a7e <GPIO_voidSetPinValue+0x142>
				case 1:WRITE_BIT(GPIOF->BSRR,copy_u8PinID);break;}
 8000a72:	79bb      	ldrb	r3, [r7, #6]
 8000a74:	2201      	movs	r2, #1
 8000a76:	409a      	lsls	r2, r3
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <GPIO_voidSetPinValue+0x194>)
 8000a7a:	611a      	str	r2, [r3, #16]
 8000a7c:	bf00      	nop
				break;
 8000a7e:	e012      	b.n	8000aa6 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTG:
				switch(copy_u8PinValue){
 8000a80:	797b      	ldrb	r3, [r7, #5]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <GPIO_voidSetPinValue+0x150>
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d006      	beq.n	8000a98 <GPIO_voidSetPinValue+0x15c>
				case 0:WRITE_BIT(GPIOG->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOG->BSRR,copy_u8PinID);break;}
				break;
 8000a8a:	e00b      	b.n	8000aa4 <GPIO_voidSetPinValue+0x168>
				case 0:WRITE_BIT(GPIOG->BRR,copy_u8PinID);break;
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	409a      	lsls	r2, r3
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <GPIO_voidSetPinValue+0x198>)
 8000a94:	615a      	str	r2, [r3, #20]
 8000a96:	e005      	b.n	8000aa4 <GPIO_voidSetPinValue+0x168>
				case 1:WRITE_BIT(GPIOG->BSRR,copy_u8PinID);break;}
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <GPIO_voidSetPinValue+0x198>)
 8000aa0:	611a      	str	r2, [r3, #16]
 8000aa2:	bf00      	nop
				break;
 8000aa4:	bf00      	nop
		}
	}
 8000aa6:	e002      	b.n	8000aae <GPIO_voidSetPinValue+0x172>
    else 
		lacal_u8ErrorState = STD_TYPE_NOK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	e000      	b.n	8000ab0 <GPIO_voidSetPinValue+0x174>
	}
 8000aae:	bf00      	nop
	return lacal_u8ErrorState;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	40010800 	.word	0x40010800
 8000ac0:	40010c00 	.word	0x40010c00
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	40011400 	.word	0x40011400
 8000acc:	40011800 	.word	0x40011800
 8000ad0:	40011c00 	.word	0x40011c00
 8000ad4:	40012000 	.word	0x40012000

08000ad8 <MOTOR_init>:
#include "PWM_DCmotor_init.h"
#include "GPIO_interface.h"


void MOTOR_init (u8 A_u8MotorNum)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	if (A_u8MotorNum>0)
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d021      	beq.n	8000b2c <MOTOR_init+0x54>
	{
		switch(A_u8MotorNum)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d002      	beq.n	8000af4 <MOTOR_init+0x1c>
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d00e      	beq.n	8000b10 <MOTOR_init+0x38>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINL,GPIO_OUTPUT_10M_PP);
//			MTimer_voidInit(MOTOR2_SecondTimerType);
			break;
		}
	}
}
 8000af2:	e01b      	b.n	8000b2c <MOTOR_init+0x54>
			MTimer_voidInit(MOTOR1_FirstTimerType);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f000 f9a3 	bl	8000e40 <MTimer_voidInit>
			GPIO_voidSetPinMode(MOTOR1_PORT,MOTOR1_PINR,GPIO_OUTPUT_10M_PP);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2103      	movs	r1, #3
 8000afe:	2002      	movs	r0, #2
 8000b00:	f7ff fd7a 	bl	80005f8 <GPIO_voidSetPinMode>
		    GPIO_voidSetPinMode(MOTOR1_PORT,MOTOR1_PINL,GPIO_OUTPUT_10M_PP);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2104      	movs	r1, #4
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f7ff fd75 	bl	80005f8 <GPIO_voidSetPinMode>
			break;
 8000b0e:	e00d      	b.n	8000b2c <MOTOR_init+0x54>
			MTimer_voidInit(MOTOR2_FirstTimerType);
 8000b10:	2001      	movs	r0, #1
 8000b12:	f000 f995 	bl	8000e40 <MTimer_voidInit>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINR,GPIO_OUTPUT_10M_PP);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2105      	movs	r1, #5
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f7ff fd6c 	bl	80005f8 <GPIO_voidSetPinMode>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINL,GPIO_OUTPUT_10M_PP);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2106      	movs	r1, #6
 8000b24:	2002      	movs	r0, #2
 8000b26:	f7ff fd67 	bl	80005f8 <GPIO_voidSetPinMode>
			break;
 8000b2a:	bf00      	nop
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <MOTOR_CounterClockWise>:

void MOTOR_CounterClockWise  (u8 A_u8MotorNum , u16 A_u16CaptureValue )
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	4613      	mov	r3, r2
 8000b42:	80bb      	strh	r3, [r7, #4]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d02a      	beq.n	8000ba0 <MOTOR_CounterClockWise+0x6c>
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d827      	bhi.n	8000ba0 <MOTOR_CounterClockWise+0x6c>
	{
		switch(A_u8MotorNum)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d002      	beq.n	8000b5c <MOTOR_CounterClockWise+0x28>
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d011      	beq.n	8000b7e <MOTOR_CounterClockWise+0x4a>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_LOW);
//			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_SecondChannelNumber,0);
			break;
		}
	}
}
 8000b5a:	e021      	b.n	8000ba0 <MOTOR_CounterClockWise+0x6c>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,A_u16CaptureValue);
 8000b5c:	88bb      	ldrh	r3, [r7, #4]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	2101      	movs	r1, #1
 8000b62:	2001      	movs	r0, #1
 8000b64:	f000 fa86 	bl	8001074 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINR, GPIO_HIGH);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f7ff fee5 	bl	800093c <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINL, GPIO_LOW);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2104      	movs	r1, #4
 8000b76:	2002      	movs	r0, #2
 8000b78:	f7ff fee0 	bl	800093c <GPIO_voidSetPinValue>
			break;
 8000b7c:	e010      	b.n	8000ba0 <MOTOR_CounterClockWise+0x6c>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,A_u16CaptureValue);
 8000b7e:	88bb      	ldrh	r3, [r7, #4]
 8000b80:	461a      	mov	r2, r3
 8000b82:	2102      	movs	r1, #2
 8000b84:	2001      	movs	r0, #1
 8000b86:	f000 fa75 	bl	8001074 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINR, GPIO_HIGH);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	2002      	movs	r0, #2
 8000b90:	f7ff fed4 	bl	800093c <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_LOW);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2106      	movs	r1, #6
 8000b98:	2002      	movs	r0, #2
 8000b9a:	f7ff fecf 	bl	800093c <GPIO_voidSetPinValue>
			break;
 8000b9e:	bf00      	nop
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <MOTOR_ClockWise>:

void MOTOR_ClockWise  (u8 A_u8MotorNum , u16 A_u16CaptureValue)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	460a      	mov	r2, r1
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	80bb      	strh	r3, [r7, #4]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d028      	beq.n	8000c10 <MOTOR_ClockWise+0x68>
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d825      	bhi.n	8000c10 <MOTOR_ClockWise+0x68>
	{
		switch(A_u8MotorNum)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d002      	beq.n	8000bd0 <MOTOR_ClockWise+0x28>
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d010      	beq.n	8000bf0 <MOTOR_ClockWise+0x48>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_HIGH);
//			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR2_SecondChannelNumber,A_u16CaptureValue);
			break;
		}
	}
}
 8000bce:	e01f      	b.n	8000c10 <MOTOR_ClockWise+0x68>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 fa4d 	bl	8001074 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINR, GPIO_LOW);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2103      	movs	r1, #3
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff feac 	bl	800093c <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINL, GPIO_HIGH);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2104      	movs	r1, #4
 8000be8:	2002      	movs	r0, #2
 8000bea:	f7ff fea7 	bl	800093c <GPIO_voidSetPinValue>
			break;
 8000bee:	e00f      	b.n	8000c10 <MOTOR_ClockWise+0x68>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR2_FirstChannelNumber,0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f000 fa3d 	bl	8001074 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINR, GPIO_LOW);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2105      	movs	r1, #5
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f7ff fe9c 	bl	800093c <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_HIGH);
 8000c04:	2201      	movs	r2, #1
 8000c06:	2106      	movs	r1, #6
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f7ff fe97 	bl	800093c <GPIO_voidSetPinValue>
			break;
 8000c0e:	bf00      	nop
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <MOTOR_Stop>:

void MOTOR_Stop  (u8 A_u8MotorNum)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d014      	beq.n	8000c52 <MOTOR_Stop+0x3a>
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d811      	bhi.n	8000c52 <MOTOR_Stop+0x3a>
	{
		switch(A_u8MotorNum)
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d002      	beq.n	8000c3a <MOTOR_Stop+0x22>
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d006      	beq.n	8000c46 <MOTOR_Stop+0x2e>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,0);
//			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_SecondChannelNumber,0);
			break;
		}
	}
}
 8000c38:	e00b      	b.n	8000c52 <MOTOR_Stop+0x3a>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f000 fa18 	bl	8001074 <MTimer_voidPWM>
			break;
 8000c44:	e005      	b.n	8000c52 <MOTOR_Stop+0x3a>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2102      	movs	r1, #2
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f000 fa12 	bl	8001074 <MTimer_voidPWM>
			break;
 8000c50:	bf00      	nop
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <RCC_voidInitSysClock>:
#include "RCC_interface.h"
#include "RCC_config.h"


void RCC_voidInitSysClock(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	#if RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		SET_BIT(RCC->RCC_CR,16);
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <RCC_voidInitSysClock+0x60>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <RCC_voidInitSysClock+0x60>)
 8000c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6a:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CR,18);
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <RCC_voidInitSysClock+0x60>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <RCC_voidInitSysClock+0x60>)
 8000c72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c76:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CFGR,0);
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <RCC_voidInitSysClock+0x60>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <RCC_voidInitSysClock+0x60>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->RCC_CFGR,1);
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <RCC_voidInitSysClock+0x60>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <RCC_voidInitSysClock+0x60>)
 8000c8a:	f023 0302 	bic.w	r3, r3, #2
 8000c8e:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->RCC_CFGR,1);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_AHP_PRESCALER   ==RCC_AHP_DIV_1
		CLR_BIT(RCC->RCC_CFGR,7);
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <RCC_voidInitSysClock+0x60>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <RCC_voidInitSysClock+0x60>)
 8000c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c9a:	6053      	str	r3, [r2, #4]
	     SET_BIT(RCC->RCC_CFGR,7);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_APB1_PRESCALER   ==RCC_APB1_DIV_1
		CLR_BIT(RCC->RCC_CFGR,8);
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <RCC_voidInitSysClock+0x60>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <RCC_voidInitSysClock+0x60>)
 8000ca2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ca6:	6053      	str	r3, [r2, #4]
	    SET_BIT(RCC->RCC_CFGR,10);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_APB2_PRESCALER   ==RCC_APB2_DIV_1
		CLR_BIT(RCC->RCC_CFGR,11);
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <RCC_voidInitSysClock+0x60>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	4a03      	ldr	r2, [pc, #12]	; (8000cbc <RCC_voidInitSysClock+0x60>)
 8000cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000cb2:	6053      	str	r3, [r2, #4]
	    SET_BIT(RCC->RCC_CFGR,12);
	    SET_BIT(RCC->RCC_CFGR,13);
	#else 
		#error("wrong choise")
	#endif
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <RCC_voidEnablePeripheral>:
	#endif
}


void RCC_voidEnablePeripheral(u8 Copy_u8Bus, u8 Copy_u8Peripheral)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	460a      	mov	r2, r1
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8Bus)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d00f      	beq.n	8000cf6 <RCC_voidEnablePeripheral+0x36>
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d018      	beq.n	8000d0c <RCC_voidEnablePeripheral+0x4c>
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d000      	beq.n	8000ce0 <RCC_voidEnablePeripheral+0x20>
			break;
		case RCC_APB2:
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
			break;
	}
}
 8000cde:	e020      	b.n	8000d22 <RCC_voidEnablePeripheral+0x62>
			SET_BIT(RCC->RCC_AHBENR,Copy_u8Peripheral);
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <RCC_voidEnablePeripheral+0x6c>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	79ba      	ldrb	r2, [r7, #6]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	4611      	mov	r1, r2
 8000cee:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <RCC_voidEnablePeripheral+0x6c>)
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	6153      	str	r3, [r2, #20]
			break;
 8000cf4:	e015      	b.n	8000d22 <RCC_voidEnablePeripheral+0x62>
			SET_BIT(RCC->RCC_APB1ENR,Copy_u8Peripheral);
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <RCC_voidEnablePeripheral+0x6c>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	79ba      	ldrb	r2, [r7, #6]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000d02:	4611      	mov	r1, r2
 8000d04:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <RCC_voidEnablePeripheral+0x6c>)
 8000d06:	430b      	orrs	r3, r1
 8000d08:	61d3      	str	r3, [r2, #28]
			break;
 8000d0a:	e00a      	b.n	8000d22 <RCC_voidEnablePeripheral+0x62>
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <RCC_voidEnablePeripheral+0x6c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	79ba      	ldrb	r2, [r7, #6]
 8000d12:	2101      	movs	r1, #1
 8000d14:	fa01 f202 	lsl.w	r2, r1, r2
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <RCC_voidEnablePeripheral+0x6c>)
 8000d1c:	430b      	orrs	r3, r1
 8000d1e:	6193      	str	r3, [r2, #24]
			break;
 8000d20:	bf00      	nop
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	40021000 	.word	0x40021000

08000d30 <truncate_queue>:
}


// function to handle dequeue operation
static SPI_ERROR_STATUS_t truncate_queue(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
	
	//status code
    SPI_ERROR_STATUS_t loc_enu_StatusCode = SPI_OKAY;
 8000d36:	2300      	movs	r3, #0
 8000d38:	71fb      	strb	r3, [r7, #7]
	
	// check if all bytes has been sent OR queue is empty
	if((gl_SPI_data_queue.s16_front_queue > gl_SPI_data_queue.s16_rear_queue) || (gl_SPI_data_queue.s16_front_queue == EMPTY_POSITOIN))
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <truncate_queue+0x70>)
 8000d3c:	f993 20c8 	ldrsb.w	r2, [r3, #200]	; 0xc8
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <truncate_queue+0x70>)
 8000d42:	f993 30c9 	ldrsb.w	r3, [r3, #201]	; 0xc9
 8000d46:	429a      	cmp	r2, r3
 8000d48:	dc05      	bgt.n	8000d56 <truncate_queue+0x26>
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <truncate_queue+0x70>)
 8000d4c:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d10a      	bne.n	8000d6c <truncate_queue+0x3c>
	{
		// set front and rear to defaults
		gl_SPI_data_queue.s16_front_queue = EMPTY_POSITOIN;
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <truncate_queue+0x70>)
 8000d58:	22ff      	movs	r2, #255	; 0xff
 8000d5a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		gl_SPI_data_queue.s16_rear_queue  = EMPTY_POSITOIN;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <truncate_queue+0x70>)
 8000d60:	22ff      	movs	r2, #255	; 0xff
 8000d62:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		
		//status code queue is empty
		loc_enu_StatusCode = QUEUE_EMPTY;
 8000d66:	2302      	movs	r3, #2
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	e012      	b.n	8000d92 <truncate_queue+0x62>
	}
	else
	{
		//send current byte and increment front
		SPI1->DR = gl_SPI_data_queue.u16_arr_data[gl_SPI_data_queue.s16_front_queue];
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <truncate_queue+0x70>)
 8000d6e:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <truncate_queue+0x70>)
 8000d76:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <truncate_queue+0x74>)
 8000d7c:	60da      	str	r2, [r3, #12]
		gl_SPI_data_queue.s16_front_queue++;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <truncate_queue+0x70>)
 8000d80:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	3301      	adds	r3, #1
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	b25a      	sxtb	r2, r3
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <truncate_queue+0x70>)
 8000d8e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	}
	return loc_enu_StatusCode;
 8000d92:	79fb      	ldrb	r3, [r7, #7]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000000 	.word	0x20000000
 8000da4:	40013000 	.word	0x40013000

08000da8 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    // TODO HANDLE ISR FOR RECEPTION
	#if   SPI1_MASTER_SLAVE == SPI_SLAVE
       sgl_Recieve_Index = (u8)SPI1->DR;
       gl_ptr_Function();
    #elif SPI1_MASTER_SLAVE == SPI_MASTER
      if (truncate_queue() == QUEUE_EMPTY)
 8000dac:	f7ff ffc0 	bl	8000d30 <truncate_queue>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d106      	bne.n	8000dc4 <SPI1_IRQHandler+0x1c>
      {
        if (gl_ptr_Function != PTR_NULL)
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SPI1_IRQHandler+0x20>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <SPI1_IRQHandler+0x1c>
        {
            gl_ptr_Function();
 8000dbe:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <SPI1_IRQHandler+0x20>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4798      	blx	r3
        }
      }
    #endif

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200000ec 	.word	0x200000ec

08000dcc <MSTK_voidInit>:

/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;

void MSTK_voidInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
#if MSTK_CLK_SRC == MSTK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	MSTK -> CTRL = 0x00000004;
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	MSTK -> CTRL = 0;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <MSTK_voidInit+0x14>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]

#endif
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <SysTick_Handler>:

	return Local_u32RemainTime;
}

void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary ;

	if (MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <SysTick_Handler+0x50>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d111      	bne.n	8000e16 <SysTick_Handler+0x32>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK->CTRL, 1);
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <SysTick_Handler+0x54>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <SysTick_Handler+0x54>)
 8000df8:	f023 0302 	bic.w	r3, r3, #2
 8000dfc:	6013      	str	r3, [r2, #0]

		/* Stop Timer */
		SET_BIT(MSTK->CTRL, 0);
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <SysTick_Handler+0x54>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <SysTick_Handler+0x54>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD = 0;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <SysTick_Handler+0x54>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
		MSTK -> VAL  = 0;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <SysTick_Handler+0x54>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
	}

	/* Callback notification */
	MSTK_CallBack();
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <SysTick_Handler+0x58>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4798      	blx	r3

	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(MSTK->CTRL,16);
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <SysTick_Handler+0x54>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	0c1b      	lsrs	r3, r3, #16
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	71fb      	strb	r3, [r7, #7]
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200000f4 	.word	0x200000f4
 8000e38:	e000e010 	.word	0xe000e010
 8000e3c:	200000f0 	.word	0x200000f0

08000e40 <MTimer_voidInit>:

u8 channel1_set=0;
u8 channel2_set=0;

void MTimer_voidInit (u8 A_u8TimerSelected)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]

	/* Enable pinout of ADC (PortA , PORTB) from RCC */
	//MRCC_voidEnablePerephiralClock(RCC_AHB1 , RCC_EN_GPIOA) ;
	//MRCC_voidEnablePerephiralClock(RCC_AHB1 , RCC_EN_GPIOB) ;

	switch (A_u8TimerSelected)
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	f200 8107 	bhi.w	8001062 <MTimer_voidInit+0x222>
 8000e54:	a201      	add	r2, pc, #4	; (adr r2, 8000e5c <MTimer_voidInit+0x1c>)
 8000e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5a:	bf00      	nop
 8000e5c:	08000e6d 	.word	0x08000e6d
 8000e60:	08000ed1 	.word	0x08000ed1
 8000e64:	08000f63 	.word	0x08000f63
 8000e68:	08000ff5 	.word	0x08000ff5
		/**                             Init TIM1                                    **/
		/******************************************************************************/

			/* Select the Direction */
            #if   TIM1_DIRECTION == UP_COUNTER
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_DIR_BIT) ;
 8000e6c:	4b7f      	ldr	r3, [pc, #508]	; (800106c <MTimer_voidInit+0x22c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a7e      	ldr	r2, [pc, #504]	; (800106c <MTimer_voidInit+0x22c>)
 8000e72:	f023 0310 	bic.w	r3, r3, #16
 8000e76:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM1_DIRECTION"
            #endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_1->CR1 , TIM1_CR1_CMS_BIT0) ;
 8000e78:	4b7c      	ldr	r3, [pc, #496]	; (800106c <MTimer_voidInit+0x22c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a7b      	ldr	r2, [pc, #492]	; (800106c <MTimer_voidInit+0x22c>)
 8000e7e:	f023 0320 	bic.w	r3, r3, #32
 8000e82:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_1->CR1 , TIM1_CR1_CMS_BIT1) ;
 8000e84:	4b79      	ldr	r3, [pc, #484]	; (800106c <MTimer_voidInit+0x22c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a78      	ldr	r2, [pc, #480]	; (800106c <MTimer_voidInit+0x22c>)
 8000e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e8e:	6013      	str	r3, [r2, #0]

			/* set the timer division */
            #if   TIM1_DIVISION == tCK_INT_x_1
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_CKD_BIT0) ;
 8000e90:	4b76      	ldr	r3, [pc, #472]	; (800106c <MTimer_voidInit+0x22c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a75      	ldr	r2, [pc, #468]	; (800106c <MTimer_voidInit+0x22c>)
 8000e96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_CKD_BIT1) ;
 8000e9c:	4b73      	ldr	r3, [pc, #460]	; (800106c <MTimer_voidInit+0x22c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a72      	ldr	r2, [pc, #456]	; (800106c <MTimer_voidInit+0x22c>)
 8000ea2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
                  #error "Invalid Selection of TIM1_DIVISION"
            #endif

			/* set the timer prescaller */
            #if    TIM1_PRESCALLER <= MAX_TIM_PRESCALLER
            	   TIM_1 ->PSC = TIM1_PRESCALLER ;
 8000ea8:	4b70      	ldr	r3, [pc, #448]	; (800106c <MTimer_voidInit+0x22c>)
 8000eaa:	2208      	movs	r2, #8
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
            #else
                   #error "TIM1_PRESCALLER out of range"
            #endif

            /* Enable auto-reload preload */
            SET_BIT(TIM_1->CR1 , TIM1_CR1_ARPE_BIT) ;
 8000eae:	4b6f      	ldr	r3, [pc, #444]	; (800106c <MTimer_voidInit+0x22c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a6e      	ldr	r2, [pc, #440]	; (800106c <MTimer_voidInit+0x22c>)
 8000eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb8:	6013      	str	r3, [r2, #0]

            /* Set the Auto-reload value */
            #if  TIM1_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
            	   TIM_1->ARR = TIM1_PRELOAD_VALUE ;
 8000eba:	4b6c      	ldr	r3, [pc, #432]	; (800106c <MTimer_voidInit+0x22c>)
 8000ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c
           //       #error "REPETATION_COUNTER out of range"
           // #endif

            /* Generate an update event to reload the Prescaler
            and the repetition counter(only for TIM1 and TIM5) value immediately */
            SET_BIT(TIM_1->EGR , TIM1_EGR_UG_BIT );
 8000ec2:	4b6a      	ldr	r3, [pc, #424]	; (800106c <MTimer_voidInit+0x22c>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	4a69      	ldr	r2, [pc, #420]	; (800106c <MTimer_voidInit+0x22c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6153      	str	r3, [r2, #20]

		break ;
 8000ece:	e0c8      	b.n	8001062 <MTimer_voidInit+0x222>
		/******************************************************************************/
		/**                             Init TIM2                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_2 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8000ed0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ede:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
            #if   TIM2_DIRECTION == UP_COUNTER
			      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 8000ee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eea:	f023 0310 	bic.w	r3, r3, #16
 8000eee:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM2_DIRECTION"
            #endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8000ef0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000efa:	f023 0320 	bic.w	r3, r3, #32
 8000efe:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8000f00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f0e:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM2_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8000f10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 8000f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f2e:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM2_DIVISION"
			#endif

		    /* set the timer prescaller */
	        #if    TIM2_PRESCALLER <= MAX_TIM_PRESCALLER
	        	   TIM_2 ->PSC = TIM2_PRESCALLER ;
 8000f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f34:	2208      	movs	r2, #8
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
	        #else
	               #error "TIM2_PRESCALLER out of range"
	        #endif

	        /* Enable auto-reload preload */
	        SET_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 8000f38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f46:	6013      	str	r3, [r2, #0]

	        /* Set the Auto-reload value */
	        #if  TIM2_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
	        	   TIM_2->ARR = TIM2_PRELOAD_VALUE ;
 8000f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
	              #error "TIM2_PRELOAD_VALUE out of range"
	        #endif

	        /* Generate an update event to reload the Prescaler
	         and the repetition counter(only for TIM1 and TIM5) value immediately */
	        SET_BIT(TIM_2->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8000f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6153      	str	r3, [r2, #20]

		break ;
 8000f60:	e07f      	b.n	8001062 <MTimer_voidInit+0x222>
		/******************************************************************************/
		/**                             Init TIM3                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_3 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8000f62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f70:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
            #if   TIM3_DIRECTION == UP_COUNTER
	           CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 8000f72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000f7c:	f023 0310 	bic.w	r3, r3, #16
 8000f80:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM3_DIRECTION"
            #endif

	        /* Edge-aligned mode */
	        CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8000f82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000f8c:	f023 0320 	bic.w	r3, r3, #32
 8000f90:	6013      	str	r3, [r2, #0]
	        CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8000f92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fa0:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM3_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8000fa2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fb0:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 8000fb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000fc0:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM3_DIVISION"
			#endif

			/* set the timer prescaller */
		    #if    TIM3_PRESCALLER <= MAX_TIM_PRESCALLER
		    	   TIM_3 ->PSC = TIM3_PRESCALLER ;
 8000fc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
		    #else
		           #error "TIM3_PRESCALLER out of range"
		    #endif

		    /* Enable auto-reload preload */
			SET_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 8000fca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd8:	6013      	str	r3, [r2, #0]

			/* Set the Auto-reload value */
			#if  TIM3_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
				   TIM_3->ARR = TIM3_PRELOAD_VALUE ;
 8000fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000fde:	220f      	movs	r2, #15
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
			      #error "TIM3_PRELOAD_VALUE out of range"
			#endif

			/* Generate an update event to reload the Prescaler
			 and the repetition counter(only for TIM1 and TIM5) value immediately */
			SET_BIT(TIM_3->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8000fe2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6153      	str	r3, [r2, #20]

		break ;
 8000ff2:	e036      	b.n	8001062 <MTimer_voidInit+0x222>
		/******************************************************************************/
		/**                             Init TIM4                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_4 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MTimer_voidInit+0x230>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <MTimer_voidInit+0x230>)
 8000ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffe:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
			#if   TIM4_DIRECTION == UP_COUNTER
			     CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MTimer_voidInit+0x230>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1a      	ldr	r2, [pc, #104]	; (8001070 <MTimer_voidInit+0x230>)
 8001006:	f023 0310 	bic.w	r3, r3, #16
 800100a:	6013      	str	r3, [r2, #0]
			#else
			      #error "Invalid Selection of TIM4_DIRECTION"
			#endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MTimer_voidInit+0x230>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <MTimer_voidInit+0x230>)
 8001012:	f023 0320 	bic.w	r3, r3, #32
 8001016:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MTimer_voidInit+0x230>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <MTimer_voidInit+0x230>)
 800101e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001022:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM4_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MTimer_voidInit+0x230>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a11      	ldr	r2, [pc, #68]	; (8001070 <MTimer_voidInit+0x230>)
 800102a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800102e:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MTimer_voidInit+0x230>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <MTimer_voidInit+0x230>)
 8001036:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800103a:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM4_DIVISION"
			#endif

		    /* set the timer prescaller */
			#if    TIM4_PRESCALLER <= MAX_TIM_PRESCALLER
				   TIM_4 ->PSC = TIM4_PRESCALLER ;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MTimer_voidInit+0x230>)
 800103e:	2208      	movs	r2, #8
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
			#else
			       #error "TIM4_PRESCALLER out of range"
			#endif

			/* Enable auto-reload preload */
			SET_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MTimer_voidInit+0x230>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <MTimer_voidInit+0x230>)
 8001048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800104c:	6013      	str	r3, [r2, #0]

			/* Set the Auto-reload value */
			#if  TIM4_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
				   TIM_4->ARR = TIM4_PRELOAD_VALUE ;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MTimer_voidInit+0x230>)
 8001050:	220f      	movs	r2, #15
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
			      #error "TIM4_PRELOAD_VALUE out of range"
			#endif

		    /* Generate an update event to reload the Prescaler
		    	  and the repetition counter(only for TIM1 and TIM5) value immediately */
		    SET_BIT(TIM_4->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MTimer_voidInit+0x230>)
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	4a05      	ldr	r2, [pc, #20]	; (8001070 <MTimer_voidInit+0x230>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6153      	str	r3, [r2, #20]
		break ;
 8001060:	bf00      	nop
	}
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	40012c00 	.word	0x40012c00
 8001070:	40008000 	.word	0x40008000

08001074 <MTimer_voidPWM>:

void MTimer_voidPWM (u8 A_u8TimerSelected , u8 A_u8Channel , u16 A_u16CompareValue)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0b2      	sub	sp, #200	; 0xc8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	460b      	mov	r3, r1
 8001080:	71bb      	strb	r3, [r7, #6]
 8001082:	4613      	mov	r3, r2
 8001084:	80bb      	strh	r3, [r7, #4]
	if (A_u8TimerSelected == TIM1_TYPE)
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b01      	cmp	r3, #1
 800108a:	f040 81d0 	bne.w	800142e <MTimer_voidPWM+0x3ba>
	{
		if (A_u8Channel == TIM_CHANNEL_1)
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d178      	bne.n	8001186 <MTimer_voidPWM+0x112>
		{
			if (channel1_set==0)
 8001094:	4b7a      	ldr	r3, [pc, #488]	; (8001280 <MTimer_voidPWM+0x20c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d107      	bne.n	80010ac <MTimer_voidPWM+0x38>
			{
				GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN8,GPIO_OUTPUT_10M_AF_PP);
 800109c:	2209      	movs	r2, #9
 800109e:	2108      	movs	r1, #8
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff faa9 	bl	80005f8 <GPIO_voidSetPinMode>
				channel1_set=1;
 80010a6:	4b76      	ldr	r3, [pc, #472]	; (8001280 <MTimer_voidPWM+0x20c>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
			}

			u32 L_u32TempCCMRX = 0 ;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
			u32 L_u32TempCCER  = 0 ;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
		    u32 L_u32TempCR2   = 0 ;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]

			/* Disable the Channel 1: Reset the CC1E Bit */
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC1E_BIT) ;
 80010b8:	4b72      	ldr	r3, [pc, #456]	; (8001284 <MTimer_voidPWM+0x210>)
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	4a71      	ldr	r2, [pc, #452]	; (8001284 <MTimer_voidPWM+0x210>)
 80010be:	f023 0301 	bic.w	r3, r3, #1
 80010c2:	6213      	str	r3, [r2, #32]

			/* Get the TIM CCER register value */
			L_u32TempCCMRX = TIM_1->CCER;
 80010c4:	4b6f      	ldr	r3, [pc, #444]	; (8001284 <MTimer_voidPWM+0x210>)
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	613b      	str	r3, [r7, #16]
			/* Get the TIM CR2 register value */
			L_u32TempCR2 = TIM_1->CR2;
 80010ca:	4b6e      	ldr	r3, [pc, #440]	; (8001284 <MTimer_voidPWM+0x210>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	60bb      	str	r3, [r7, #8]

			/* Get the TIM CCMR1 register value */
			L_u32TempCCMRX = TIM_1->CCMR1;
 80010d0:	4b6c      	ldr	r3, [pc, #432]	; (8001284 <MTimer_voidPWM+0x210>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	613b      	str	r3, [r7, #16]

			/* Reset the Output Compare Mode Bits */
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT0) ;
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	f023 0310 	bic.w	r3, r3, #16
 80010dc:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT1) ;
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	f023 0320 	bic.w	r3, r3, #32
 80010e4:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT2) ;
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010ec:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC1S_BIT0) ;
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC1S_BIT1) ;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	f023 0302 	bic.w	r3, r3, #2
 80010fc:	613b      	str	r3, [r7, #16]
			/* Select the Output Compare Mode1 */
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001104:	613b      	str	r3, [r7, #16]

			/* Set the Output Compare Polarity as active high */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1P_BIT);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f023 0302 	bic.w	r3, r3, #2
 800110c:	60fb      	str	r3, [r7, #12]

			/* Set the Output N Polarity as active high */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1NP_BIT) ;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f023 0308 	bic.w	r3, r3, #8
 8001114:	60fb      	str	r3, [r7, #12]
			/* Reset the Output N State */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1NE_BIT) ;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f023 0304 	bic.w	r3, r3, #4
 800111c:	60fb      	str	r3, [r7, #12]

			/* Reset the Output Compare and Output Compare N IDLE State */
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS1N_BIT) ;
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001124:	60bb      	str	r3, [r7, #8]
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS1N_BIT) ;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800112c:	60bb      	str	r3, [r7, #8]

			/* Write to TIM CR2 */
			TIM_1->CR2 = L_u32TempCR2;
 800112e:	4a55      	ldr	r2, [pc, #340]	; (8001284 <MTimer_voidPWM+0x210>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	6053      	str	r3, [r2, #4]

			/* Write to TIM CCMR1 */
			TIM_1->CCMR1 = L_u32TempCCMRX;
 8001134:	4a53      	ldr	r2, [pc, #332]	; (8001284 <MTimer_voidPWM+0x210>)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	6193      	str	r3, [r2, #24]

			/* Set the Capture Compare Register value */
			TIM_1->CCR1 = A_u16CompareValue ;
 800113a:	4a52      	ldr	r2, [pc, #328]	; (8001284 <MTimer_voidPWM+0x210>)
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	6353      	str	r3, [r2, #52]	; 0x34

			/* Write to TIM CCER */
			TIM_1->CCER = L_u32TempCCER;
 8001140:	4a50      	ldr	r2, [pc, #320]	; (8001284 <MTimer_voidPWM+0x210>)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6213      	str	r3, [r2, #32]

			/* Set the Preload enable bit for channel1 */
			SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC1PE_BIT);
 8001146:	4b4f      	ldr	r3, [pc, #316]	; (8001284 <MTimer_voidPWM+0x210>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	4a4e      	ldr	r2, [pc, #312]	; (8001284 <MTimer_voidPWM+0x210>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	6193      	str	r3, [r2, #24]

			/* Configure the Output Fast mode */
			SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC1FE_BIT) ;
 8001152:	4b4c      	ldr	r3, [pc, #304]	; (8001284 <MTimer_voidPWM+0x210>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	4a4b      	ldr	r2, [pc, #300]	; (8001284 <MTimer_voidPWM+0x210>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6193      	str	r3, [r2, #24]

			/* Enable the Capture compare channel */
			SET_BIT(TIM_1-> CCER , TIM1_CCER_CC1E_BIT) ;
 800115e:	4b49      	ldr	r3, [pc, #292]	; (8001284 <MTimer_voidPWM+0x210>)
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	4a48      	ldr	r2, [pc, #288]	; (8001284 <MTimer_voidPWM+0x210>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6213      	str	r3, [r2, #32]

			/* Enable the main output */
			SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <MTimer_voidPWM+0x210>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a45      	ldr	r2, [pc, #276]	; (8001284 <MTimer_voidPWM+0x210>)
 8001170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44

			/* Enable the timer */
			SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8001176:	4b43      	ldr	r3, [pc, #268]	; (8001284 <MTimer_voidPWM+0x210>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a42      	ldr	r2, [pc, #264]	; (8001284 <MTimer_voidPWM+0x210>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6013      	str	r3, [r2, #0]
	}
	else
	{
		// error type of A_u8TimerSelected
	}
}
 8001182:	f000 be96 	b.w	8001eb2 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_2)
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d17f      	bne.n	800128c <MTimer_voidPWM+0x218>
			if (channel2_set==0)
 800118c:	4b3e      	ldr	r3, [pc, #248]	; (8001288 <MTimer_voidPWM+0x214>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d107      	bne.n	80011a4 <MTimer_voidPWM+0x130>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN9,GPIO_OUTPUT_10M_AF_PP);
 8001194:	2209      	movs	r2, #9
 8001196:	2109      	movs	r1, #9
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff fa2d 	bl	80005f8 <GPIO_voidSetPinMode>
					channel2_set=1;
 800119e:	4b3a      	ldr	r3, [pc, #232]	; (8001288 <MTimer_voidPWM+0x214>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
			u32 L_u32TempCCER  = 0 ;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
		    u32 L_u32TempCR2   = 0 ;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
		    CLR_BIT(TIM_1->CCER , TIM1_CCER_CC2E_BIT);
 80011b0:	4b34      	ldr	r3, [pc, #208]	; (8001284 <MTimer_voidPWM+0x210>)
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	4a33      	ldr	r2, [pc, #204]	; (8001284 <MTimer_voidPWM+0x210>)
 80011b6:	f023 0310 	bic.w	r3, r3, #16
 80011ba:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_1->CCER;
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <MTimer_voidPWM+0x210>)
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	61bb      	str	r3, [r7, #24]
		    L_u32TempCR2 = TIM_1->CR2;
 80011c2:	4b30      	ldr	r3, [pc, #192]	; (8001284 <MTimer_voidPWM+0x210>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	617b      	str	r3, [r7, #20]
		    L_u32TempCCMRX = TIM_1->CCMR1;
 80011c8:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <MTimer_voidPWM+0x210>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT0);
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011d4:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT1);
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011dc:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT0);
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011e4:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT1);
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011ec:	61fb      	str	r3, [r7, #28]
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80011f4:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2P_BIT);
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	f023 0320 	bic.w	r3, r3, #32
 80011fc:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NP_BIT) ;
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001204:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NP_BIT) ;
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800120c:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NE_BIT);
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001214:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS2_BIT);
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800121c:	617b      	str	r3, [r7, #20]
		    CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS2N_BIT);
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001224:	617b      	str	r3, [r7, #20]
		    TIM_1->CR2 = L_u32TempCR2;
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <MTimer_voidPWM+0x210>)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	6053      	str	r3, [r2, #4]
		    TIM_1->CCMR1 = L_u32TempCCMRX;
 800122c:	4a15      	ldr	r2, [pc, #84]	; (8001284 <MTimer_voidPWM+0x210>)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	6193      	str	r3, [r2, #24]
		    TIM_1->CCR2 = A_u16CompareValue;
 8001232:	4a14      	ldr	r2, [pc, #80]	; (8001284 <MTimer_voidPWM+0x210>)
 8001234:	88bb      	ldrh	r3, [r7, #4]
 8001236:	6393      	str	r3, [r2, #56]	; 0x38
		    TIM_1->CCER = L_u32TempCCER;
 8001238:	4a12      	ldr	r2, [pc, #72]	; (8001284 <MTimer_voidPWM+0x210>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC2PE_BIT);
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MTimer_voidPWM+0x210>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <MTimer_voidPWM+0x210>)
 8001244:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001248:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC2FE_BIT) ;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MTimer_voidPWM+0x210>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <MTimer_voidPWM+0x210>)
 8001250:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001254:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_1-> CCER , TIM1_CCER_CC2E_BIT) ;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MTimer_voidPWM+0x210>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <MTimer_voidPWM+0x210>)
 800125c:	f043 0310 	orr.w	r3, r3, #16
 8001260:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MTimer_voidPWM+0x210>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a07      	ldr	r2, [pc, #28]	; (8001284 <MTimer_voidPWM+0x210>)
 8001268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
		    SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <MTimer_voidPWM+0x210>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <MTimer_voidPWM+0x210>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6013      	str	r3, [r2, #0]
}
 800127a:	f000 be1a 	b.w	8001eb2 <MTimer_voidPWM+0xe3e>
 800127e:	bf00      	nop
 8001280:	200000f5 	.word	0x200000f5
 8001284:	40012c00 	.word	0x40012c00
 8001288:	200000f6 	.word	0x200000f6
		else if (A_u8Channel == TIM_CHANNEL_3)
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d16c      	bne.n	800136c <MTimer_voidPWM+0x2f8>
			u32 L_u32TempCCMRX = 0 ;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
			u32 L_u32TempCCER  = 0 ;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
			u32 L_u32TempCR2   = 0 ;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC3E_BIT);
 800129e:	4b9b      	ldr	r3, [pc, #620]	; (800150c <MTimer_voidPWM+0x498>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	4a9a      	ldr	r2, [pc, #616]	; (800150c <MTimer_voidPWM+0x498>)
 80012a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012a8:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_1->CCER;
 80012aa:	4b98      	ldr	r3, [pc, #608]	; (800150c <MTimer_voidPWM+0x498>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
			L_u32TempCR2 = TIM_1->CR2;
 80012b0:	4b96      	ldr	r3, [pc, #600]	; (800150c <MTimer_voidPWM+0x498>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	623b      	str	r3, [r7, #32]
			L_u32TempCCMRX = TIM_1->CCMR2;
 80012b6:	4b95      	ldr	r3, [pc, #596]	; (800150c <MTimer_voidPWM+0x498>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_OC3M_BIT0);
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	f023 0310 	bic.w	r3, r3, #16
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_OC3M_BIT1);
 80012c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c6:	f023 0320 	bic.w	r3, r3, #32
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_CC3S_BIT0);
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ce:	f023 0301 	bic.w	r3, r3, #1
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_CC3S_BIT1);
 80012d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d6:	f023 0302 	bic.w	r3, r3, #2
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U);
 80012dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3P_BIT);
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NP_BIT) ;
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NP_BIT) ;
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NE_BIT);
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS3_BIT);
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800130a:	623b      	str	r3, [r7, #32]
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS3N_BIT);
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001312:	623b      	str	r3, [r7, #32]
			TIM_1->CR2 = L_u32TempCR2;
 8001314:	4a7d      	ldr	r2, [pc, #500]	; (800150c <MTimer_voidPWM+0x498>)
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	6053      	str	r3, [r2, #4]
			TIM_1->CCMR2 = L_u32TempCCMRX;
 800131a:	4a7c      	ldr	r2, [pc, #496]	; (800150c <MTimer_voidPWM+0x498>)
 800131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131e:	61d3      	str	r3, [r2, #28]
			TIM_1->CCR3 = A_u16CompareValue;
 8001320:	4a7a      	ldr	r2, [pc, #488]	; (800150c <MTimer_voidPWM+0x498>)
 8001322:	88bb      	ldrh	r3, [r7, #4]
 8001324:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM_1->CCER = L_u32TempCCER;
 8001326:	4a79      	ldr	r2, [pc, #484]	; (800150c <MTimer_voidPWM+0x498>)
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC3PE_BIT);
 800132c:	4b77      	ldr	r3, [pc, #476]	; (800150c <MTimer_voidPWM+0x498>)
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	4a76      	ldr	r2, [pc, #472]	; (800150c <MTimer_voidPWM+0x498>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	61d3      	str	r3, [r2, #28]
		    SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC3FE_BIT) ;
 8001338:	4b74      	ldr	r3, [pc, #464]	; (800150c <MTimer_voidPWM+0x498>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	4a73      	ldr	r2, [pc, #460]	; (800150c <MTimer_voidPWM+0x498>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	61d3      	str	r3, [r2, #28]
		    SET_BIT(TIM_1-> CCER , TIM1_CCER_CC3E_BIT) ;
 8001344:	4b71      	ldr	r3, [pc, #452]	; (800150c <MTimer_voidPWM+0x498>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4a70      	ldr	r2, [pc, #448]	; (800150c <MTimer_voidPWM+0x498>)
 800134a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134e:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8001350:	4b6e      	ldr	r3, [pc, #440]	; (800150c <MTimer_voidPWM+0x498>)
 8001352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001354:	4a6d      	ldr	r2, [pc, #436]	; (800150c <MTimer_voidPWM+0x498>)
 8001356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800135a:	6453      	str	r3, [r2, #68]	; 0x44
		    SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 800135c:	4b6b      	ldr	r3, [pc, #428]	; (800150c <MTimer_voidPWM+0x498>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a6a      	ldr	r2, [pc, #424]	; (800150c <MTimer_voidPWM+0x498>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	f000 bda3 	b.w	8001eb2 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_4)
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	2b04      	cmp	r3, #4
 8001370:	f040 859f 	bne.w	8001eb2 <MTimer_voidPWM+0xe3e>
			u32 L_u32TempCCMRX = 0 ;
 8001374:	2300      	movs	r3, #0
 8001376:	637b      	str	r3, [r7, #52]	; 0x34
			u32 L_u32TempCCER  = 0 ;
 8001378:	2300      	movs	r3, #0
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
			u32 L_u32TempCR2   = 0 ;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC4E_BIT);
 8001380:	4b62      	ldr	r3, [pc, #392]	; (800150c <MTimer_voidPWM+0x498>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	4a61      	ldr	r2, [pc, #388]	; (800150c <MTimer_voidPWM+0x498>)
 8001386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800138a:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_1->CCER;
 800138c:	4b5f      	ldr	r3, [pc, #380]	; (800150c <MTimer_voidPWM+0x498>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
			L_u32TempCR2 = TIM_1->CR2;
 8001392:	4b5e      	ldr	r3, [pc, #376]	; (800150c <MTimer_voidPWM+0x498>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
			L_u32TempCCMRX = TIM_1->CCMR2;
 8001398:	4b5c      	ldr	r3, [pc, #368]	; (800150c <MTimer_voidPWM+0x498>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT0);
 800139e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT1);
 80013a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT0);
 80013ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT1);
 80013b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 80013be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c0:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC4P_BIT);
 80013c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS4_BIT);
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
			TIM_1->CR2 = L_u32TempCR2;
 80013d6:	4a4d      	ldr	r2, [pc, #308]	; (800150c <MTimer_voidPWM+0x498>)
 80013d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013da:	6053      	str	r3, [r2, #4]
			TIM_1->CCMR2 = L_u32TempCCMRX;
 80013dc:	4a4b      	ldr	r2, [pc, #300]	; (800150c <MTimer_voidPWM+0x498>)
 80013de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e0:	61d3      	str	r3, [r2, #28]
			TIM_1->CCR4 = A_u16CompareValue;
 80013e2:	4a4a      	ldr	r2, [pc, #296]	; (800150c <MTimer_voidPWM+0x498>)
 80013e4:	88bb      	ldrh	r3, [r7, #4]
 80013e6:	6413      	str	r3, [r2, #64]	; 0x40
			TIM_1->CCER = L_u32TempCCER;
 80013e8:	4a48      	ldr	r2, [pc, #288]	; (800150c <MTimer_voidPWM+0x498>)
 80013ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ec:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC4PE_BIT);
 80013ee:	4b47      	ldr	r3, [pc, #284]	; (800150c <MTimer_voidPWM+0x498>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a46      	ldr	r2, [pc, #280]	; (800150c <MTimer_voidPWM+0x498>)
 80013f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013f8:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC4FE_BIT) ;
 80013fa:	4b44      	ldr	r3, [pc, #272]	; (800150c <MTimer_voidPWM+0x498>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a43      	ldr	r2, [pc, #268]	; (800150c <MTimer_voidPWM+0x498>)
 8001400:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001404:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_1-> CCER , TIM1_CCER_CC4E_BIT) ;
 8001406:	4b41      	ldr	r3, [pc, #260]	; (800150c <MTimer_voidPWM+0x498>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4a40      	ldr	r2, [pc, #256]	; (800150c <MTimer_voidPWM+0x498>)
 800140c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001410:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8001412:	4b3e      	ldr	r3, [pc, #248]	; (800150c <MTimer_voidPWM+0x498>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a3d      	ldr	r2, [pc, #244]	; (800150c <MTimer_voidPWM+0x498>)
 8001418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
			SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 800141e:	4b3b      	ldr	r3, [pc, #236]	; (800150c <MTimer_voidPWM+0x498>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a3a      	ldr	r2, [pc, #232]	; (800150c <MTimer_voidPWM+0x498>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6013      	str	r3, [r2, #0]
}
 800142a:	f000 bd42 	b.w	8001eb2 <MTimer_voidPWM+0xe3e>
	else if (A_u8TimerSelected == TIM2_TYPE)
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b02      	cmp	r3, #2
 8001432:	f040 81a9 	bne.w	8001788 <MTimer_voidPWM+0x714>
		if (A_u8Channel == TIM_CHANNEL_1)
 8001436:	79bb      	ldrb	r3, [r7, #6]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d169      	bne.n	8001510 <MTimer_voidPWM+0x49c>
			u32 L_u32TempCCMRX = 0 ;
 800143c:	2300      	movs	r3, #0
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
			u32 L_u32TempCCER  = 0 ;
 8001440:	2300      	movs	r3, #0
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
			u32 L_u32TempCR2   = 0 ;
 8001444:	2300      	movs	r3, #0
 8001446:	63bb      	str	r3, [r7, #56]	; 0x38
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001452:	f023 0301 	bic.w	r3, r3, #1
 8001456:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_2->CCER;
 8001458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
			L_u32TempCR2 = TIM_2->CR2;
 8001460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
			L_u32TempCCMRX = TIM_2->CCMR1;
 8001468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	643b      	str	r3, [r7, #64]	; 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 8001470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001472:	f023 0310 	bic.w	r3, r3, #16
 8001476:	643b      	str	r3, [r7, #64]	; 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 8001478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800147a:	f023 0320 	bic.w	r3, r3, #32
 800147e:	643b      	str	r3, [r7, #64]	; 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 8001480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001486:	643b      	str	r3, [r7, #64]	; 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 8001488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800148a:	f023 0301 	bic.w	r3, r3, #1
 800148e:	643b      	str	r3, [r7, #64]	; 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 8001490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001492:	f023 0302 	bic.w	r3, r3, #2
 8001496:	643b      	str	r3, [r7, #64]	; 0x40
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8001498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800149a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800149e:	643b      	str	r3, [r7, #64]	; 0x40
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 80014a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014a2:	f023 0302 	bic.w	r3, r3, #2
 80014a6:	63fb      	str	r3, [r7, #60]	; 0x3c
			TIM_2->CR2 = L_u32TempCR2;
 80014a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ae:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR1 = L_u32TempCCMRX;
 80014b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014b6:	6193      	str	r3, [r2, #24]
			TIM_2->CCR1 = A_u16CompareValue;
 80014b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014bc:	88bb      	ldrh	r3, [r7, #4]
 80014be:	6353      	str	r3, [r2, #52]	; 0x34
			TIM_2->CCER = L_u32TempCCER;
 80014c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014c6:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 80014c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d2:	f043 0308 	orr.w	r3, r3, #8
 80014d6:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 80014d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 80014e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80014f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	f000 bcd3 	b.w	8001eb2 <MTimer_voidPWM+0xe3e>
 800150c:	40012c00 	.word	0x40012c00
		else if (A_u8Channel == TIM_CHANNEL_2)
 8001510:	79bb      	ldrb	r3, [r7, #6]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d167      	bne.n	80015e6 <MTimer_voidPWM+0x572>
			u32 L_u32TempCCMRX = 0 ;
 8001516:	2300      	movs	r3, #0
 8001518:	64fb      	str	r3, [r7, #76]	; 0x4c
			u32 L_u32TempCCER  = 0 ;
 800151a:	2300      	movs	r3, #0
 800151c:	64bb      	str	r3, [r7, #72]	; 0x48
		    u32 L_u32TempCR2   = 0 ;
 800151e:	2300      	movs	r3, #0
 8001520:	647b      	str	r3, [r7, #68]	; 0x44
		    CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 8001522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152c:	f023 0310 	bic.w	r3, r3, #16
 8001530:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_2->CCER;
 8001532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	64bb      	str	r3, [r7, #72]	; 0x48
		    L_u32TempCR2 = TIM_2->CR2;
 800153a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	647b      	str	r3, [r7, #68]	; 0x44
		    L_u32TempCCMRX = TIM_2->CCMR1;
 8001542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	64fb      	str	r3, [r7, #76]	; 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 800154a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800154c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001550:	64fb      	str	r3, [r7, #76]	; 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8001552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001554:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001558:	64fb      	str	r3, [r7, #76]	; 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 800155a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800155c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001560:	64fb      	str	r3, [r7, #76]	; 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8001562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001568:	64fb      	str	r3, [r7, #76]	; 0x4c
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 800156a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800156c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001570:	64fb      	str	r3, [r7, #76]	; 0x4c
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 8001572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001574:	f023 0320 	bic.w	r3, r3, #32
 8001578:	64bb      	str	r3, [r7, #72]	; 0x48
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 800157a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800157c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001580:	64bb      	str	r3, [r7, #72]	; 0x48
		    TIM_2->CR2 = L_u32TempCR2;
 8001582:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001588:	6053      	str	r3, [r2, #4]
		    TIM_2->CCMR1 = L_u32TempCCMRX;
 800158a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800158e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001590:	6193      	str	r3, [r2, #24]
		    TIM_2->CCR2 = A_u16CompareValue;
 8001592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	6393      	str	r3, [r2, #56]	; 0x38
		    TIM_2->CCER = L_u32TempCCER;
 800159a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015a0:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 80015a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015b0:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 80015b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c0:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 80015c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015cc:	f043 0310 	orr.w	r3, r3, #16
 80015d0:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80015d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6013      	str	r3, [r2, #0]
}
 80015e2:	f000 bc66 	b.w	8001eb2 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_3)
 80015e6:	79bb      	ldrb	r3, [r7, #6]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d166      	bne.n	80016ba <MTimer_voidPWM+0x646>
			u32 L_u32TempCCMRX = 0 ;
 80015ec:	2300      	movs	r3, #0
 80015ee:	65bb      	str	r3, [r7, #88]	; 0x58
			u32 L_u32TempCCER  = 0 ;
 80015f0:	2300      	movs	r3, #0
 80015f2:	657b      	str	r3, [r7, #84]	; 0x54
			u32 L_u32TempCR2   = 0 ;
 80015f4:	2300      	movs	r3, #0
 80015f6:	653b      	str	r3, [r7, #80]	; 0x50
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 80015f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001602:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001606:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_2->CCER;
 8001608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	657b      	str	r3, [r7, #84]	; 0x54
			L_u32TempCR2 = TIM_2->CR2;
 8001610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	653b      	str	r3, [r7, #80]	; 0x50
			L_u32TempCCMRX = TIM_2->CCMR2;
 8001618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	65bb      	str	r3, [r7, #88]	; 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 8001620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001622:	f023 0310 	bic.w	r3, r3, #16
 8001626:	65bb      	str	r3, [r7, #88]	; 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 8001628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800162a:	f023 0320 	bic.w	r3, r3, #32
 800162e:	65bb      	str	r3, [r7, #88]	; 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 8001630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001632:	f023 0301 	bic.w	r3, r3, #1
 8001636:	65bb      	str	r3, [r7, #88]	; 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 8001638:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800163a:	f023 0302 	bic.w	r3, r3, #2
 800163e:	65bb      	str	r3, [r7, #88]	; 0x58
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8001640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001642:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001646:	65bb      	str	r3, [r7, #88]	; 0x58
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 8001648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800164a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800164e:	657b      	str	r3, [r7, #84]	; 0x54
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 8001650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001656:	657b      	str	r3, [r7, #84]	; 0x54
			TIM_2->CR2 = L_u32TempCR2;
 8001658:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800165c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800165e:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR2 = L_u32TempCCMRX;
 8001660:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001666:	61d3      	str	r3, [r2, #28]
			TIM_2->CCR3 = A_u16CompareValue;
 8001668:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166c:	88bb      	ldrh	r3, [r7, #4]
 800166e:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM_2->CCER = L_u32TempCCER;
 8001670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001676:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 8001678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001682:	f043 0308 	orr.w	r3, r3, #8
 8001686:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 8001688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 8001698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a6:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80016a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	e3fb      	b.n	8001eb2 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_4)
 80016ba:	79bb      	ldrb	r3, [r7, #6]
 80016bc:	2b04      	cmp	r3, #4
 80016be:	f040 83f8 	bne.w	8001eb2 <MTimer_voidPWM+0xe3e>
			u32 L_u32TempCCMRX = 0 ;
 80016c2:	2300      	movs	r3, #0
 80016c4:	667b      	str	r3, [r7, #100]	; 0x64
			u32 L_u32TempCCER  = 0 ;
 80016c6:	2300      	movs	r3, #0
 80016c8:	663b      	str	r3, [r7, #96]	; 0x60
			u32 L_u32TempCR2   = 0 ;
 80016ca:	2300      	movs	r3, #0
 80016cc:	65fb      	str	r3, [r7, #92]	; 0x5c
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 80016ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016dc:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_2->CCER;
 80016de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	663b      	str	r3, [r7, #96]	; 0x60
			L_u32TempCR2 = TIM_2->CR2;
 80016e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	65fb      	str	r3, [r7, #92]	; 0x5c
			L_u32TempCCMRX = TIM_2->CCMR2;
 80016ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	667b      	str	r3, [r7, #100]	; 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC4M_BIT0);
 80016f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016fc:	667b      	str	r3, [r7, #100]	; 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC4M_BIT1);
 80016fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001700:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001704:	667b      	str	r3, [r7, #100]	; 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC4S_BIT0);
 8001706:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800170c:	667b      	str	r3, [r7, #100]	; 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC4S_BIT1);
 800170e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001714:	667b      	str	r3, [r7, #100]	; 0x64
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001718:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800171c:	667b      	str	r3, [r7, #100]	; 0x64
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 800171e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001720:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001724:	663b      	str	r3, [r7, #96]	; 0x60
			TIM_2->CR2 = L_u32TempCR2;
 8001726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800172c:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR2 = L_u32TempCCMRX;
 800172e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001734:	61d3      	str	r3, [r2, #28]
			TIM_2->CCR4 = A_u16CompareValue;
 8001736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800173a:	88bb      	ldrh	r3, [r7, #4]
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
			TIM_2->CCER = L_u32TempCCER;
 800173e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001744:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 8001746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001754:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 8001756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001760:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001764:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 8001766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001770:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001774:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6013      	str	r3, [r2, #0]
}
 8001786:	e394      	b.n	8001eb2 <MTimer_voidPWM+0xe3e>
	else if (A_u8TimerSelected == TIM3_TYPE)
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	2b03      	cmp	r3, #3
 800178c:	f040 81d1 	bne.w	8001b32 <MTimer_voidPWM+0xabe>
		if (A_u8Channel == TIM_CHANNEL_1)
 8001790:	79bb      	ldrb	r3, [r7, #6]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d166      	bne.n	8001864 <MTimer_voidPWM+0x7f0>
			u32 L_u32TempCCMRX = 0 ;
 8001796:	2300      	movs	r3, #0
 8001798:	673b      	str	r3, [r7, #112]	; 0x70
			u32 L_u32TempCCER  = 0 ;
 800179a:	2300      	movs	r3, #0
 800179c:	66fb      	str	r3, [r7, #108]	; 0x6c
			u32 L_u32TempCR2   = 0 ;
 800179e:	2300      	movs	r3, #0
 80017a0:	66bb      	str	r3, [r7, #104]	; 0x68
			CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 80017a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_3->CCER;
 80017b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	673b      	str	r3, [r7, #112]	; 0x70
			L_u32TempCR2 = TIM_3->CR2;
 80017ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	66bb      	str	r3, [r7, #104]	; 0x68
			L_u32TempCCMRX = TIM_3->CCMR1;
 80017c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	673b      	str	r3, [r7, #112]	; 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 80017ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017cc:	f023 0310 	bic.w	r3, r3, #16
 80017d0:	673b      	str	r3, [r7, #112]	; 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 80017d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017d4:	f023 0320 	bic.w	r3, r3, #32
 80017d8:	673b      	str	r3, [r7, #112]	; 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 80017da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017e0:	673b      	str	r3, [r7, #112]	; 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 80017e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	673b      	str	r3, [r7, #112]	; 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 80017ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017ec:	f023 0302 	bic.w	r3, r3, #2
 80017f0:	673b      	str	r3, [r7, #112]	; 0x70
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 80017f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017f8:	673b      	str	r3, [r7, #112]	; 0x70
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 80017fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017fc:	f023 0302 	bic.w	r3, r3, #2
 8001800:	66fb      	str	r3, [r7, #108]	; 0x6c
			TIM_3->CR2 = L_u32TempCR2;
 8001802:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001808:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR1 = L_u32TempCCMRX;
 800180a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800180e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001810:	6193      	str	r3, [r2, #24]
			TIM_3->CCR1 = A_u16CompareValue;
 8001812:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001816:	88bb      	ldrh	r3, [r7, #4]
 8001818:	6353      	str	r3, [r2, #52]	; 0x34
			TIM_3->CCER = L_u32TempCCER;
 800181a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800181e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001820:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 8001822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 8001832:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001842:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6013      	str	r3, [r2, #0]
}
 8001862:	e326      	b.n	8001eb2 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_2)
 8001864:	79bb      	ldrb	r3, [r7, #6]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d166      	bne.n	8001938 <MTimer_voidPWM+0x8c4>
			u32 L_u32TempCCMRX = 0 ;
 800186a:	2300      	movs	r3, #0
 800186c:	67fb      	str	r3, [r7, #124]	; 0x7c
			u32 L_u32TempCCER  = 0 ;
 800186e:	2300      	movs	r3, #0
 8001870:	67bb      	str	r3, [r7, #120]	; 0x78
		    u32 L_u32TempCR2   = 0 ;
 8001872:	2300      	movs	r3, #0
 8001874:	677b      	str	r3, [r7, #116]	; 0x74
		    CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 8001876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001880:	f023 0310 	bic.w	r3, r3, #16
 8001884:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_3->CCER;
 8001886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	67bb      	str	r3, [r7, #120]	; 0x78
		    L_u32TempCR2 = TIM_3->CR2;
 800188e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	677b      	str	r3, [r7, #116]	; 0x74
		    L_u32TempCCMRX = TIM_3->CCMR1;
 8001896:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	67fb      	str	r3, [r7, #124]	; 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 800189e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018a4:	67fb      	str	r3, [r7, #124]	; 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 80018a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018ac:	67fb      	str	r3, [r7, #124]	; 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 80018ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b4:	67fb      	str	r3, [r7, #124]	; 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 80018b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018bc:	67fb      	str	r3, [r7, #124]	; 0x7c
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 80018be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018c0:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80018c4:	67fb      	str	r3, [r7, #124]	; 0x7c
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 80018c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018c8:	f023 0320 	bic.w	r3, r3, #32
 80018cc:	67bb      	str	r3, [r7, #120]	; 0x78
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 80018ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018d4:	67bb      	str	r3, [r7, #120]	; 0x78
		    TIM_3->CR2 = L_u32TempCR2;
 80018d6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80018da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018dc:	6053      	str	r3, [r2, #4]
		    TIM_3->CCMR1 = L_u32TempCCMRX;
 80018de:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80018e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018e4:	6193      	str	r3, [r2, #24]
		    TIM_3->CCR2 = A_u16CompareValue;
 80018e6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80018ea:	88bb      	ldrh	r3, [r7, #4]
 80018ec:	6393      	str	r3, [r2, #56]	; 0x38
		    TIM_3->CCER = L_u32TempCCER;
 80018ee:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80018f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018f4:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 80018f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001900:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001904:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 8001906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001910:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001914:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 8001916:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001920:	f043 0310 	orr.w	r3, r3, #16
 8001924:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6013      	str	r3, [r2, #0]
}
 8001936:	e2bc      	b.n	8001eb2 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_3)
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d17d      	bne.n	8001a3a <MTimer_voidPWM+0x9c6>
			u32 L_u32TempCCMRX = 0 ;
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			u32 L_u32TempCCER  = 0 ;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			u32 L_u32TempCR2   = 0 ;
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 8001950:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800195a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800195e:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_3->CCER;
 8001960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			L_u32TempCR2 = TIM_3->CR2;
 800196a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			L_u32TempCCMRX = TIM_3->CCMR2;
 8001974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 800197e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001982:	f023 0310 	bic.w	r3, r3, #16
 8001986:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 800198a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800198e:	f023 0320 	bic.w	r3, r3, #32
 8001992:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 8001996:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800199a:	f023 0301 	bic.w	r3, r3, #1
 800199e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 80019a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019a6:	f023 0302 	bic.w	r3, r3, #2
 80019aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			L_u32TempCCMRX |= (TIM_PWM_MODE1 <<4U) ;
 80019ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 80019ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 80019c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			TIM_3->CR2 = L_u32TempCR2;
 80019d2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80019d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019da:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR2 = L_u32TempCCMRX;
 80019dc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80019e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019e4:	61d3      	str	r3, [r2, #28]
			TIM_3->CCR3 = A_u16CompareValue;
 80019e6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80019ea:	88bb      	ldrh	r3, [r7, #4]
 80019ec:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM_3->CCER = L_u32TempCCER;
 80019ee:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80019f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019f6:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 80019f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 8001a08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 8001a18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001a28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	e23b      	b.n	8001eb2 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_4)
 8001a3a:	79bb      	ldrb	r3, [r7, #6]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	f040 8238 	bne.w	8001eb2 <MTimer_voidPWM+0xe3e>
			u32 L_u32TempCCMRX = 0 ;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			u32 L_u32TempCCER  = 0 ;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			u32 L_u32TempCR2   = 0 ;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 8001a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a62:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_3->CCER;
 8001a64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			L_u32TempCR2 = TIM_3->CR2;
 8001a6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			L_u32TempCCMRX = TIM_3->CCMR2;
 8001a78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8001a82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8001a8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8001a9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8001aa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001aaa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001aae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001ab2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ab6:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001aba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 8001abe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ac6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			TIM_3->CR2 = L_u32TempCR2;
 8001aca:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ad2:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR2 = L_u32TempCCMRX;
 8001ad4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ad8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001adc:	61d3      	str	r3, [r2, #28]
			TIM_3->CCR4 = A_u16CompareValue;
 8001ade:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ae2:	88bb      	ldrh	r3, [r7, #4]
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
			TIM_3->CCER = L_u32TempCCER;
 8001ae6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001aee:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 8001af0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001afa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001afe:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 8001b00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b0e:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 8001b10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001b1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b1e:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6013      	str	r3, [r2, #0]
}
 8001b30:	e1bf      	b.n	8001eb2 <MTimer_voidPWM+0xe3e>
	else if (A_u8TimerSelected == TIM4_TYPE)
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	f040 81bc 	bne.w	8001eb2 <MTimer_voidPWM+0xe3e>
		if (A_u8Channel == TIM_CHANNEL_1)
 8001b3a:	79bb      	ldrb	r3, [r7, #6]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d16c      	bne.n	8001c1a <MTimer_voidPWM+0xba6>
			u32 L_u32TempCCMRX = 0 ;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			u32 L_u32TempCCER  = 0 ;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			u32 L_u32TempCR2   = 0 ;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001b52:	4ba2      	ldr	r3, [pc, #648]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4aa1      	ldr	r2, [pc, #644]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_4->CCER;
 8001b5e:	4b9f      	ldr	r3, [pc, #636]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			L_u32TempCR2 = TIM_4->CR2;
 8001b66:	4b9d      	ldr	r3, [pc, #628]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			L_u32TempCCMRX = TIM_4->CCMR1;
 8001b6e:	4b9b      	ldr	r3, [pc, #620]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 8001b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b7a:	f023 0310 	bic.w	r3, r3, #16
 8001b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 8001b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b86:	f023 0320 	bic.w	r3, r3, #32
 8001b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 8001b8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 8001b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 8001ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001baa:	f023 0302 	bic.w	r3, r3, #2
 8001bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8001bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bb6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 8001bbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bc2:	f023 0302 	bic.w	r3, r3, #2
 8001bc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			TIM_4->CR2 = L_u32TempCR2;
 8001bca:	4a84      	ldr	r2, [pc, #528]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bd0:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR1 = L_u32TempCCMRX;
 8001bd2:	4a82      	ldr	r2, [pc, #520]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001bd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bd8:	6193      	str	r3, [r2, #24]
			TIM_4->CCR1 = A_u16CompareValue;
 8001bda:	4a80      	ldr	r2, [pc, #512]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001bdc:	88bb      	ldrh	r3, [r7, #4]
 8001bde:	6353      	str	r3, [r2, #52]	; 0x34
			TIM_4->CCER = L_u32TempCCER;
 8001be0:	4a7e      	ldr	r2, [pc, #504]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001be2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001be6:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 8001be8:	4b7c      	ldr	r3, [pc, #496]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a7b      	ldr	r2, [pc, #492]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001bee:	f043 0308 	orr.w	r3, r3, #8
 8001bf2:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 8001bf4:	4b79      	ldr	r3, [pc, #484]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a78      	ldr	r2, [pc, #480]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001c00:	4b76      	ldr	r3, [pc, #472]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a75      	ldr	r2, [pc, #468]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001c0c:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a72      	ldr	r2, [pc, #456]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	e14b      	b.n	8001eb2 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_2)
 8001c1a:	79bb      	ldrb	r3, [r7, #6]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d16c      	bne.n	8001cfa <MTimer_voidPWM+0xc86>
			u32 L_u32TempCCMRX = 0 ;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			u32 L_u32TempCCER  = 0 ;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		    u32 L_u32TempCR2   = 0 ;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		    CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 8001c32:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a69      	ldr	r2, [pc, #420]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001c38:	f023 0310 	bic.w	r3, r3, #16
 8001c3c:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_4->CCER;
 8001c3e:	4b67      	ldr	r3, [pc, #412]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		    L_u32TempCR2 = TIM_4->CR2;
 8001c46:	4b65      	ldr	r3, [pc, #404]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		    L_u32TempCCMRX = TIM_4->CCMR1;
 8001c4e:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8001c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8001c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8001c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8001c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c8a:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 8001c92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c96:	f023 0320 	bic.w	r3, r3, #32
 8001c9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 8001c9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		    TIM_4->CR2 = L_u32TempCR2;
 8001caa:	4a4c      	ldr	r2, [pc, #304]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001cac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cb0:	6053      	str	r3, [r2, #4]
		    TIM_4->CCMR1 = L_u32TempCCMRX;
 8001cb2:	4a4a      	ldr	r2, [pc, #296]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cb8:	6193      	str	r3, [r2, #24]
		    TIM_4->CCR2 = A_u16CompareValue;
 8001cba:	4a48      	ldr	r2, [pc, #288]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001cbc:	88bb      	ldrh	r3, [r7, #4]
 8001cbe:	6393      	str	r3, [r2, #56]	; 0x38
		    TIM_4->CCER = L_u32TempCCER;
 8001cc0:	4a46      	ldr	r2, [pc, #280]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001cc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cc6:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 8001cc8:	4b44      	ldr	r3, [pc, #272]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a43      	ldr	r2, [pc, #268]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001cce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cd2:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 8001cd4:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a40      	ldr	r2, [pc, #256]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cde:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 8001ce0:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4a3d      	ldr	r2, [pc, #244]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001ce6:	f043 0310 	orr.w	r3, r3, #16
 8001cea:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001cec:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a3a      	ldr	r2, [pc, #232]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	e0db      	b.n	8001eb2 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_3)
 8001cfa:	79bb      	ldrb	r3, [r7, #6]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d16f      	bne.n	8001de0 <MTimer_voidPWM+0xd6c>
			u32 L_u32TempCCMRX = 0 ;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			u32 L_u32TempCCER  = 0 ;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			u32 L_u32TempCR2   = 0 ;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 8001d12:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a31      	ldr	r2, [pc, #196]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d1c:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_4->CCER;
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			L_u32TempCR2 = TIM_4->CR2;
 8001d26:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			L_u32TempCCMRX = TIM_4->CCMR2;
 8001d2e:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 8001d36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d3a:	f023 0310 	bic.w	r3, r3, #16
 8001d3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 8001d42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d46:	f023 0320 	bic.w	r3, r3, #32
 8001d4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 8001d4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 8001d5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d5e:	f023 0302 	bic.w	r3, r3, #2
 8001d62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8001d66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 8001d72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d76:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 8001d7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			TIM_4->CR2 = L_u32TempCR2;
 8001d8a:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001d8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d90:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR2 = L_u32TempCCMRX;
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001d94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d98:	61d3      	str	r3, [r2, #28]
			TIM_4->CCR3 = A_u16CompareValue;
 8001d9a:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001d9c:	88bb      	ldrh	r3, [r7, #4]
 8001d9e:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM_4->CCER = L_u32TempCCER;
 8001da0:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001da6:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001dae:	f043 0308 	orr.w	r3, r3, #8
 8001db2:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dca:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a02      	ldr	r2, [pc, #8]	; (8001ddc <MTimer_voidPWM+0xd68>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6013      	str	r3, [r2, #0]
}
 8001dd8:	e06b      	b.n	8001eb2 <MTimer_voidPWM+0xe3e>
 8001dda:	bf00      	nop
 8001ddc:	40008000 	.word	0x40008000
		else if (A_u8Channel == TIM_CHANNEL_4)
 8001de0:	79bb      	ldrb	r3, [r7, #6]
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d165      	bne.n	8001eb2 <MTimer_voidPWM+0xe3e>
			u32 L_u32TempCCMRX = 0 ;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			u32 L_u32TempCCER  = 0 ;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			u32 L_u32TempCR2   = 0 ;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 8001df8:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a2f      	ldr	r2, [pc, #188]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001dfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e02:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_4->CCER;
 8001e04:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			L_u32TempCR2 = TIM_4->CR2;
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			L_u32TempCCMRX = TIM_4->CCMR2;
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8001e1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8001e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8001e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8001e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e50:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001e54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 8001e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			TIM_4->CR2 = L_u32TempCR2;
 8001e64:	4a15      	ldr	r2, [pc, #84]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001e66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e6a:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR2 = L_u32TempCCMRX;
 8001e6c:	4a13      	ldr	r2, [pc, #76]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001e6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e72:	61d3      	str	r3, [r2, #28]
			TIM_4->CCR4 = A_u16CompareValue;
 8001e74:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001e76:	88bb      	ldrh	r3, [r7, #4]
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
			TIM_4->CCER = L_u32TempCCER;
 8001e7a:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001e7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e80:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001e88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e8c:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001e94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e98:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001ea0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ea4:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <MTimer_voidPWM+0xe48>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6013      	str	r3, [r2, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	37c8      	adds	r7, #200	; 0xc8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40008000 	.word	0x40008000

08001ec0 <MUART_voidEnable>:

    A_xUART_Type->SR = 0;				    	          							             ;
}

void MUART_voidEnable( USART_t *A_xUART_Type)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	SET_BIT(A_xUART_Type->CR1,MUSART_CR1_UE_BIT);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	60da      	str	r2, [r3, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
	...

08001ee0 <MUART_u8ReceiveByteASynch>:
	}
	return L_u8Data;
}

void MUART_u8ReceiveByteASynch (  USART_t *A_xUART_Type )
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	if(local_u8_RX_Busyflag == 0)
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <MUART_u8ReceiveByteASynch+0x2c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d108      	bne.n	8001f02 <MUART_u8ReceiveByteASynch+0x22>
	{
		local_u8_RX_Busyflag=1;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MUART_u8ReceiveByteASynch+0x2c>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
		SET_BIT(A_xUART_Type->CR1 , MUSART_CR1_RXNEIE_BIT);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f043 0220 	orr.w	r2, r3, #32
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60da      	str	r2, [r3, #12]
	}
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	200000f7 	.word	0x200000f7

08001f10 <MUART_u8ReadDataRegister>:
{
	USARTx->SR = 0;
}

u8 MUART_u8ReadDataRegister(USART_t *USARTx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	return USARTx -> DR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	b2db      	uxtb	r3, r3
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <MUART1_voidSetCallBack>:

void MUART1_voidSetCallBack( Buffer_state (*ptr) (void) )
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

	MUSART1_CallBack =ptr;
 8001f30:	4a03      	ldr	r2, [pc, #12]	; (8001f40 <MUART1_voidSetCallBack+0x18>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6013      	str	r3, [r2, #0]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	200001d4 	.word	0x200001d4

08001f44 <USART1_IRQHandler>:
	MUSART2_CallBack = ptr;
}

/*IRQ of UART1*/
void USART1_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
    UART1->SR = 0;
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <USART1_IRQHandler+0x24>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
    //G_u8DataFromUART = MUART_u8ReadDataRegister(UART1);
    local_u8_RX_Busyflag=0;
 8001f4e:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <USART1_IRQHandler+0x28>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
	if(MUSART1_CallBack!=NULL)
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <USART1_IRQHandler+0x2c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <USART1_IRQHandler+0x1e>
	{
		MUSART1_CallBack();
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <USART1_IRQHandler+0x2c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4798      	blx	r3
	}
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40013800 	.word	0x40013800
 8001f6c:	200000f7 	.word	0x200000f7
 8001f70:	200001d4 	.word	0x200001d4

08001f74 <USART2_IRQHandler>:

/*IRQ of UART2*/
void USART2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	UART2->SR = 0;
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <USART2_IRQHandler+0x24>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
	//G_u8DataFromUART = MUART_u8ReadDataRegister(UART2);
	local_u8_RX_Busyflag=0;
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <USART2_IRQHandler+0x28>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
	if(MUSART2_CallBack!=NULL)
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <USART2_IRQHandler+0x2c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <USART2_IRQHandler+0x1e>
	{
		MUSART2_CallBack();
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <USART2_IRQHandler+0x2c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4798      	blx	r3
	}
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40004400 	.word	0x40004400
 8001f9c:	200000f7 	.word	0x200000f7
 8001fa0:	200001d0 	.word	0x200001d0

08001fa4 <HUltrasonic_voidInit>:
	return 0;
}


void HUltrasonic_voidInit (u8 Ultra_Num)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
	switch(Ultra_Num)
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d84a      	bhi.n	800204c <HUltrasonic_voidInit+0xa8>
 8001fb6:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <HUltrasonic_voidInit+0x18>)
 8001fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbc:	08001fcd 	.word	0x08001fcd
 8001fc0:	08001fed 	.word	0x08001fed
 8001fc4:	0800200d 	.word	0x0800200d
 8001fc8:	0800202d 	.word	0x0800202d
	{
	case 1:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic1_TrigPort,Ultrasonic1_TrigPin,GPIO_OUTPUT_2M_PP);
 8001fcc:	2202      	movs	r2, #2
 8001fce:	2109      	movs	r1, #9
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f7fe fb11 	bl	80005f8 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic1_TrigPort, Ultrasonic1_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic1_EchoPort,Ultrasonic1_EchoPin,GPIO_INPUT_PU_PD);
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	210a      	movs	r1, #10
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f7fe fb0c 	bl	80005f8 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic1_EchoPort, Ultrasonic1_EchoPin, GPIO_INPUT_PD);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	210a      	movs	r1, #10
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7fe fca9 	bl	800093c <GPIO_voidSetPinValue>
		break;
 8001fea:	e02f      	b.n	800204c <HUltrasonic_voidInit+0xa8>
	case 2:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic2_TrigPort,Ultrasonic2_TrigPin,GPIO_OUTPUT_2M_PP);
 8001fec:	2202      	movs	r2, #2
 8001fee:	2102      	movs	r1, #2
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f7fe fb01 	bl	80005f8 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic2_TrigPort, Ultrasonic2_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic2_EchoPort,Ultrasonic2_EchoPin,GPIO_INPUT_PU_PD);
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	2103      	movs	r1, #3
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f7fe fafc 	bl	80005f8 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic2_EchoPort, Ultrasonic2_EchoPin, GPIO_INPUT_PD);
 8002000:	2200      	movs	r2, #0
 8002002:	2103      	movs	r1, #3
 8002004:	2001      	movs	r0, #1
 8002006:	f7fe fc99 	bl	800093c <GPIO_voidSetPinValue>
		break;
 800200a:	e01f      	b.n	800204c <HUltrasonic_voidInit+0xa8>
	case 3:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic3_TrigPort,Ultrasonic3_TrigPin,GPIO_OUTPUT_2M_PP);
 800200c:	2202      	movs	r2, #2
 800200e:	2104      	movs	r1, #4
 8002010:	2001      	movs	r0, #1
 8002012:	f7fe faf1 	bl	80005f8 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic3_TrigPort, Ultrasonic3_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic3_EchoPort,Ultrasonic3_EchoPin,GPIO_INPUT_PU_PD);
 8002016:	2208      	movs	r2, #8
 8002018:	2105      	movs	r1, #5
 800201a:	2001      	movs	r0, #1
 800201c:	f7fe faec 	bl	80005f8 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic3_EchoPort, Ultrasonic3_EchoPin, GPIO_INPUT_PD);
 8002020:	2200      	movs	r2, #0
 8002022:	2105      	movs	r1, #5
 8002024:	2001      	movs	r0, #1
 8002026:	f7fe fc89 	bl	800093c <GPIO_voidSetPinValue>
		break;
 800202a:	e00f      	b.n	800204c <HUltrasonic_voidInit+0xa8>
	case 4:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic4_TrigPort,Ultrasonic4_TrigPin,GPIO_OUTPUT_2M_PP);
 800202c:	2202      	movs	r2, #2
 800202e:	2107      	movs	r1, #7
 8002030:	2001      	movs	r0, #1
 8002032:	f7fe fae1 	bl	80005f8 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic3_TrigPort, Ultrasonic3_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic4_EchoPort,Ultrasonic4_EchoPin,GPIO_INPUT_PU_PD);
 8002036:	2208      	movs	r2, #8
 8002038:	2108      	movs	r1, #8
 800203a:	2001      	movs	r0, #1
 800203c:	f7fe fadc 	bl	80005f8 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic4_EchoPort, Ultrasonic4_EchoPin, GPIO_INPUT_PD);
 8002040:	2200      	movs	r2, #0
 8002042:	2108      	movs	r1, #8
 8002044:	2001      	movs	r0, #1
 8002046:	f7fe fc79 	bl	800093c <GPIO_voidSetPinValue>
		break;
 800204a:	bf00      	nop
	}
	/*initialize systick timer*/
	MSTK_voidInit() ;
 800204c:	f7fe febe 	bl	8000dcc <MSTK_voidInit>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <init_conf>:




void init_conf()
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 800205c:	f7fe fdfe 	bl	8000c5c <RCC_voidInitSysClock>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOA);
 8002060:	2102      	movs	r1, #2
 8002062:	2002      	movs	r0, #2
 8002064:	f7fe fe2c 	bl	8000cc0 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOB);
 8002068:	2103      	movs	r1, #3
 800206a:	2002      	movs	r0, #2
 800206c:	f7fe fe28 	bl	8000cc0 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOC);
 8002070:	2104      	movs	r1, #4
 8002072:	2002      	movs	r0, #2
 8002074:	f7fe fe24 	bl	8000cc0 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,TIM1);
 8002078:	210b      	movs	r1, #11
 800207a:	2002      	movs	r0, #2
 800207c:	f7fe fe20 	bl	8000cc0 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,USART1);
 8002080:	210e      	movs	r1, #14
 8002082:	2002      	movs	r0, #2
 8002084:	f7fe fe1c 	bl	8000cc0 <RCC_voidEnablePeripheral>
	MSTK_voidInit();
 8002088:	f7fe fea0 	bl	8000dcc <MSTK_voidInit>
	MOTOR_init(MOTOR_1);
 800208c:	2001      	movs	r0, #1
 800208e:	f7fe fd23 	bl	8000ad8 <MOTOR_init>
	MOTOR_init(MOTOR_2);
 8002092:	2002      	movs	r0, #2
 8002094:	f7fe fd20 	bl	8000ad8 <MOTOR_init>
	HUltrasonic_voidInit(ULTR_1);
 8002098:	2001      	movs	r0, #1
 800209a:	f7ff ff83 	bl	8001fa4 <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_2);
 800209e:	2002      	movs	r0, #2
 80020a0:	f7ff ff80 	bl	8001fa4 <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_3);
 80020a4:	2003      	movs	r0, #3
 80020a6:	f7ff ff7d 	bl	8001fa4 <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_4);
 80020aa:	2004      	movs	r0, #4
 80020ac:	f7ff ff7a 	bl	8001fa4 <HUltrasonic_voidInit>
	MUART1_voidSetCallBack(&APP_Buffer_Write);
 80020b0:	4805      	ldr	r0, [pc, #20]	; (80020c8 <init_conf+0x70>)
 80020b2:	f7ff ff39 	bl	8001f28 <MUART1_voidSetCallBack>
	MUART_voidEnable(UART1);
 80020b6:	4805      	ldr	r0, [pc, #20]	; (80020cc <init_conf+0x74>)
 80020b8:	f7ff ff02 	bl	8001ec0 <MUART_voidEnable>
	MUART_u8ReceiveByteASynch(UART1);
 80020bc:	4803      	ldr	r0, [pc, #12]	; (80020cc <init_conf+0x74>)
 80020be:	f7ff ff0f 	bl	8001ee0 <MUART_u8ReceiveByteASynch>
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	080028b9 	.word	0x080028b9
 80020cc:	40013800 	.word	0x40013800

080020d0 <main>:


int main()
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
	u16  L_u16Speed = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	80fb      	strh	r3, [r7, #6]
	u8  L_u8Direction = 0 ;
 80020da:	2300      	movs	r3, #0
 80020dc:	717b      	strb	r3, [r7, #5]
	u8  L_u8Flag = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	713b      	strb	r3, [r7, #4]

	init_conf();
 80020e2:	f7ff ffb9 	bl	8002058 <init_conf>

	while(1)
	{
		ProcessingFun();
 80020e6:	f000 fc67 	bl	80029b8 <ProcessingFun>

		/*Encoding received data and take Direction (second 3bits)*/
		L_u8Direction = G_u16DataAfterProccing.Direction;
 80020ea:	4b46      	ldr	r3, [pc, #280]	; (8002204 <main+0x134>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	717b      	strb	r3, [r7, #5]
		/*Encoding received data and take Speed (first 4bits)*/
		L_u16Speed = G_u16DataAfterProccing.Speed;
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <main+0x134>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	80fb      	strh	r3, [r7, #6]
		/*Encoding received data and take Flag (last bit)*/
		L_u8Flag = G_u16DataAfterProccing.Flag;
 8002102:	4b40      	ldr	r3, [pc, #256]	; (8002204 <main+0x134>)
 8002104:	785b      	ldrb	r3, [r3, #1]
 8002106:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800210a:	b2db      	uxtb	r3, r3
 800210c:	713b      	strb	r3, [r7, #4]

		if (L_u8Direction == Stop){
 800210e:	797b      	ldrb	r3, [r7, #5]
 8002110:	2b08      	cmp	r3, #8
 8002112:	d106      	bne.n	8002122 <main+0x52>
			MOTOR_Stop(MOTOR_1) ;
 8002114:	2001      	movs	r0, #1
 8002116:	f7fe fd7f 	bl	8000c18 <MOTOR_Stop>
			MOTOR_Stop(MOTOR_2) ;
 800211a:	2002      	movs	r0, #2
 800211c:	f7fe fd7c 	bl	8000c18 <MOTOR_Stop>
 8002120:	e7e1      	b.n	80020e6 <main+0x16>
			/*
			 * first speed  = 1 +  =
			 * second speed = 2 +  =
			 * third speed  = 3 +  =
			 */
			L_u16Speed = (0Xff<<G_xMy_Data.Speed) + 0xf0;
 8002122:	4b39      	ldr	r3, [pc, #228]	; (8002208 <main+0x138>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	23ff      	movs	r3, #255	; 0xff
 8002130:	4093      	lsls	r3, r2
 8002132:	b29b      	uxth	r3, r3
 8002134:	33f0      	adds	r3, #240	; 0xf0
 8002136:	80fb      	strh	r3, [r7, #6]

			if (L_u8Direction == Go)  //Forward direction
 8002138:	797b      	ldrb	r3, [r7, #5]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10a      	bne.n	8002154 <main+0x84>
			{
				MOTOR_ClockWise(MOTOR_1 , L_u16Speed) ;
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	4619      	mov	r1, r3
 8002142:	2001      	movs	r0, #1
 8002144:	f7fe fd30 	bl	8000ba8 <MOTOR_ClockWise>
				MOTOR_ClockWise(MOTOR_2 , L_u16Speed) ;
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	4619      	mov	r1, r3
 800214c:	2002      	movs	r0, #2
 800214e:	f7fe fd2b 	bl	8000ba8 <MOTOR_ClockWise>
 8002152:	e7c8      	b.n	80020e6 <main+0x16>
			}
			else if (L_u8Direction == Back)  //Backward direction
 8002154:	797b      	ldrb	r3, [r7, #5]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d10a      	bne.n	8002170 <main+0xa0>
			{
				MOTOR_CounterClockWise(MOTOR_1 , L_u16Speed) ;
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	4619      	mov	r1, r3
 800215e:	2001      	movs	r0, #1
 8002160:	f7fe fce8 	bl	8000b34 <MOTOR_CounterClockWise>
				MOTOR_CounterClockWise(MOTOR_2 , L_u16Speed) ;
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	4619      	mov	r1, r3
 8002168:	2002      	movs	r0, #2
 800216a:	f7fe fce3 	bl	8000b34 <MOTOR_CounterClockWise>
 800216e:	e7ba      	b.n	80020e6 <main+0x16>
			}
			else if (L_u8Direction == Right)  //Right direction
 8002170:	797b      	ldrb	r3, [r7, #5]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d108      	bne.n	8002188 <main+0xb8>
			{
				MOTOR_Stop(MOTOR_1) ;
 8002176:	2001      	movs	r0, #1
 8002178:	f7fe fd4e 	bl	8000c18 <MOTOR_Stop>
				MOTOR_ClockWise(MOTOR_2 , L_u16Speed) ;
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	4619      	mov	r1, r3
 8002180:	2002      	movs	r0, #2
 8002182:	f7fe fd11 	bl	8000ba8 <MOTOR_ClockWise>
 8002186:	e7ae      	b.n	80020e6 <main+0x16>
			}
			else if (L_u8Direction == Left)  //Left direction
 8002188:	797b      	ldrb	r3, [r7, #5]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d108      	bne.n	80021a0 <main+0xd0>
			{
				MOTOR_ClockWise(MOTOR_1 , L_u16Speed) ;
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	4619      	mov	r1, r3
 8002192:	2001      	movs	r0, #1
 8002194:	f7fe fd08 	bl	8000ba8 <MOTOR_ClockWise>
				MOTOR_Stop(MOTOR_2) ;
 8002198:	2002      	movs	r0, #2
 800219a:	f7fe fd3d 	bl	8000c18 <MOTOR_Stop>
 800219e:	e7a2      	b.n	80020e6 <main+0x16>
			}
			else if (L_u8Direction == Forward_Right)  //forward right
 80021a0:	797b      	ldrb	r3, [r7, #5]
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d108      	bne.n	80021b8 <main+0xe8>
			{
				MOTOR_ClockWise(MOTOR_1 , 0xa) ;
 80021a6:	210a      	movs	r1, #10
 80021a8:	2001      	movs	r0, #1
 80021aa:	f7fe fcfd 	bl	8000ba8 <MOTOR_ClockWise>
				MOTOR_ClockWise(MOTOR_2 , 0xc) ;
 80021ae:	210c      	movs	r1, #12
 80021b0:	2002      	movs	r0, #2
 80021b2:	f7fe fcf9 	bl	8000ba8 <MOTOR_ClockWise>
 80021b6:	e796      	b.n	80020e6 <main+0x16>
			}
			else if (L_u8Direction == Forward_Left)  //forward left
 80021b8:	797b      	ldrb	r3, [r7, #5]
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d108      	bne.n	80021d0 <main+0x100>
			{
				MOTOR_ClockWise(MOTOR_1 , 0xa) ;
 80021be:	210a      	movs	r1, #10
 80021c0:	2001      	movs	r0, #1
 80021c2:	f7fe fcf1 	bl	8000ba8 <MOTOR_ClockWise>
				MOTOR_ClockWise(MOTOR_2 , 0xc) ;
 80021c6:	210c      	movs	r1, #12
 80021c8:	2002      	movs	r0, #2
 80021ca:	f7fe fced 	bl	8000ba8 <MOTOR_ClockWise>
 80021ce:	e78a      	b.n	80020e6 <main+0x16>
			}
			else if (L_u8Direction == Backward_Right)  //backward right
 80021d0:	797b      	ldrb	r3, [r7, #5]
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d108      	bne.n	80021e8 <main+0x118>
			{
				MOTOR_CounterClockWise(MOTOR_1 , 0xa) ;
 80021d6:	210a      	movs	r1, #10
 80021d8:	2001      	movs	r0, #1
 80021da:	f7fe fcab 	bl	8000b34 <MOTOR_CounterClockWise>
				MOTOR_CounterClockWise(MOTOR_2 , 0xc) ;
 80021de:	210c      	movs	r1, #12
 80021e0:	2002      	movs	r0, #2
 80021e2:	f7fe fca7 	bl	8000b34 <MOTOR_CounterClockWise>
 80021e6:	e77e      	b.n	80020e6 <main+0x16>
			}
			else if (L_u8Direction == Backward_Left)  //backward left
 80021e8:	797b      	ldrb	r3, [r7, #5]
 80021ea:	2b07      	cmp	r3, #7
 80021ec:	f47f af7b 	bne.w	80020e6 <main+0x16>
			{
				MOTOR_CounterClockWise(MOTOR_1 , 0xa) ;
 80021f0:	210a      	movs	r1, #10
 80021f2:	2001      	movs	r0, #1
 80021f4:	f7fe fc9e 	bl	8000b34 <MOTOR_CounterClockWise>
				MOTOR_CounterClockWise(MOTOR_2 , 0xc) ;
 80021f8:	210c      	movs	r1, #12
 80021fa:	2002      	movs	r0, #2
 80021fc:	f7fe fc9a 	bl	8000b34 <MOTOR_CounterClockWise>
		ProcessingFun();
 8002200:	e771      	b.n	80020e6 <main+0x16>
 8002202:	bf00      	nop
 8002204:	20000104 	.word	0x20000104
 8002208:	200000fc 	.word	0x200000fc

0800220c <APP_VoidStop>:
}



void APP_VoidStop()
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
	//direction = stop
	G_u16DataAfterProccing.Direction = Stop;
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <APP_VoidStop+0x24>)
 8002212:	7813      	ldrb	r3, [r2, #0]
 8002214:	2108      	movs	r1, #8
 8002216:	f361 0303 	bfi	r3, r1, #0, #4
 800221a:	7013      	strb	r3, [r2, #0]
	/*flag = 3*/
	G_u16DataAfterProccing.Flag = 3;
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <APP_VoidStop+0x24>)
 800221e:	7853      	ldrb	r3, [r2, #1]
 8002220:	f043 0303 	orr.w	r3, r3, #3
 8002224:	7053      	strb	r3, [r2, #1]
	/*stop car + alarm*/
//	G_u16DataAfterProccing = G_u16DataAfterProccing & 0xFF8F ;
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000104 	.word	0x20000104

08002234 <APP_voidGoTasks>:

void APP_voidGoTasks ()
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Forword  <= SO_SHORT_DISTANCE) // stop car
 8002238:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <APP_voidGoTasks+0xfc>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe f8d7 	bl	80003f0 <__aeabi_i2d>
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <APP_voidGoTasks+0x100>)
 8002248:	f7fe f9a6 	bl	8000598 <__aeabi_dcmple>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <APP_voidGoTasks+0x36>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8002252:	4a39      	ldr	r2, [pc, #228]	; (8002338 <APP_voidGoTasks+0x104>)
 8002254:	7813      	ldrb	r3, [r2, #0]
 8002256:	2108      	movs	r1, #8
 8002258:	f361 0303 	bfi	r3, r1, #0, #4
 800225c:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 800225e:	4a36      	ldr	r2, [pc, #216]	; (8002338 <APP_voidGoTasks+0x104>)
 8002260:	7853      	ldrb	r3, [r2, #1]
 8002262:	f043 0303 	orr.w	r3, r3, #3
 8002266:	7053      	strb	r3, [r2, #1]
			if (speed_control_Automatic == Automatic_ON)
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed;
		}
}
 8002268:	e060      	b.n	800232c <APP_voidGoTasks+0xf8>
	else if (G_xNear_Distance.Distance_Forword <= UN_SAFE_DISTANCE) //Un Safed Distance
 800226a:	4b31      	ldr	r3, [pc, #196]	; (8002330 <APP_voidGoTasks+0xfc>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f8be 	bl	80003f0 <__aeabi_i2d>
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	4b30      	ldr	r3, [pc, #192]	; (800233c <APP_voidGoTasks+0x108>)
 800227a:	f7fe f98d 	bl	8000598 <__aeabi_dcmple>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d03f      	beq.n	8002304 <APP_voidGoTasks+0xd0>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002284:	4b2e      	ldr	r3, [pc, #184]	; (8002340 <APP_voidGoTasks+0x10c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <APP_voidGoTasks+0x110>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	dc1a      	bgt.n	80022ce <APP_voidGoTasks+0x9a>
				G_u16DataAfterProccing.Flag = 1;
 8002298:	4a27      	ldr	r2, [pc, #156]	; (8002338 <APP_voidGoTasks+0x104>)
 800229a:	7853      	ldrb	r3, [r2, #1]
 800229c:	2101      	movs	r1, #1
 800229e:	f361 0301 	bfi	r3, r1, #0, #2
 80022a2:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 80022a4:	4b26      	ldr	r3, [pc, #152]	; (8002340 <APP_voidGoTasks+0x10c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80022ac:	b2d9      	uxtb	r1, r3
 80022ae:	4a22      	ldr	r2, [pc, #136]	; (8002338 <APP_voidGoTasks+0x104>)
 80022b0:	7813      	ldrb	r3, [r2, #0]
 80022b2:	f361 0303 	bfi	r3, r1, #0, #4
 80022b6:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed;
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <APP_voidGoTasks+0x10c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80022c0:	b2d9      	uxtb	r1, r3
 80022c2:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <APP_voidGoTasks+0x104>)
 80022c4:	7813      	ldrb	r3, [r2, #0]
 80022c6:	f361 1306 	bfi	r3, r1, #4, #3
 80022ca:	7013      	strb	r3, [r2, #0]
}
 80022cc:	e02e      	b.n	800232c <APP_voidGoTasks+0xf8>
				G_u16DataAfterProccing.Flag = 2;
 80022ce:	4a1a      	ldr	r2, [pc, #104]	; (8002338 <APP_voidGoTasks+0x104>)
 80022d0:	7853      	ldrb	r3, [r2, #1]
 80022d2:	2102      	movs	r1, #2
 80022d4:	f361 0301 	bfi	r3, r1, #0, #2
 80022d8:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <APP_voidGoTasks+0x10c>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80022e2:	b2d9      	uxtb	r1, r3
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <APP_voidGoTasks+0x104>)
 80022e6:	7813      	ldrb	r3, [r2, #0]
 80022e8:	f361 0303 	bfi	r3, r1, #0, #4
 80022ec:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed;
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <APP_voidGoTasks+0x10c>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80022f6:	b2d9      	uxtb	r1, r3
 80022f8:	4a0f      	ldr	r2, [pc, #60]	; (8002338 <APP_voidGoTasks+0x104>)
 80022fa:	7813      	ldrb	r3, [r2, #0]
 80022fc:	f361 1306 	bfi	r3, r1, #4, #3
 8002300:	7013      	strb	r3, [r2, #0]
}
 8002302:	e013      	b.n	800232c <APP_voidGoTasks+0xf8>
			G_u16DataAfterProccing.Flag = 0;
 8002304:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <APP_voidGoTasks+0x104>)
 8002306:	7853      	ldrb	r3, [r2, #1]
 8002308:	f36f 0301 	bfc	r3, #0, #2
 800230c:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <APP_voidGoTasks+0x10c>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002316:	b2d9      	uxtb	r1, r3
 8002318:	4a07      	ldr	r2, [pc, #28]	; (8002338 <APP_voidGoTasks+0x104>)
 800231a:	7813      	ldrb	r3, [r2, #0]
 800231c:	f361 0303 	bfi	r3, r1, #0, #4
 8002320:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <APP_voidGoTasks+0x104>)
 8002324:	7813      	ldrb	r3, [r2, #0]
 8002326:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800232a:	7013      	strb	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000100 	.word	0x20000100
 8002334:	40240000 	.word	0x40240000
 8002338:	20000104 	.word	0x20000104
 800233c:	40340000 	.word	0x40340000
 8002340:	200000fc 	.word	0x200000fc
 8002344:	200000ca 	.word	0x200000ca

08002348 <APP_voidBackTasks>:
void APP_voidBackTasks ()
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Back  <= SO_SHORT_DISTANCE) // stop car
 800234c:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <APP_voidBackTasks+0xfc>)
 800234e:	785b      	ldrb	r3, [r3, #1]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe f84d 	bl	80003f0 <__aeabi_i2d>
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <APP_voidBackTasks+0x100>)
 800235c:	f7fe f91c 	bl	8000598 <__aeabi_dcmple>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <APP_voidBackTasks+0x36>
	{
		//direction = stop
		G_u16DataAfterProccing.Direction = Stop;
 8002366:	4a39      	ldr	r2, [pc, #228]	; (800244c <APP_voidBackTasks+0x104>)
 8002368:	7813      	ldrb	r3, [r2, #0]
 800236a:	2108      	movs	r1, #8
 800236c:	f361 0303 	bfi	r3, r1, #0, #4
 8002370:	7013      	strb	r3, [r2, #0]
		/*flag = 3*/
		G_u16DataAfterProccing.Flag = 3;
 8002372:	4a36      	ldr	r2, [pc, #216]	; (800244c <APP_voidBackTasks+0x104>)
 8002374:	7853      	ldrb	r3, [r2, #1]
 8002376:	f043 0303 	orr.w	r3, r3, #3
 800237a:	7053      	strb	r3, [r2, #1]
		if (speed_control_Automatic == Automatic_ON)
			G_u16DataAfterProccing.Speed = max_speed;
		else
			G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
	}
}
 800237c:	e060      	b.n	8002440 <APP_voidBackTasks+0xf8>
	else if (G_xNear_Distance.Distance_Back <= UN_SAFE_DISTANCE) //Un Safed Distance
 800237e:	4b31      	ldr	r3, [pc, #196]	; (8002444 <APP_voidBackTasks+0xfc>)
 8002380:	785b      	ldrb	r3, [r3, #1]
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe f834 	bl	80003f0 <__aeabi_i2d>
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	4b30      	ldr	r3, [pc, #192]	; (8002450 <APP_voidBackTasks+0x108>)
 800238e:	f7fe f903 	bl	8000598 <__aeabi_dcmple>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d03f      	beq.n	8002418 <APP_voidBackTasks+0xd0>
		if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002398:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <APP_voidBackTasks+0x10c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <APP_voidBackTasks+0x110>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	dc1a      	bgt.n	80023e2 <APP_voidBackTasks+0x9a>
			G_u16DataAfterProccing.Flag = 1; ;
 80023ac:	4a27      	ldr	r2, [pc, #156]	; (800244c <APP_voidBackTasks+0x104>)
 80023ae:	7853      	ldrb	r3, [r2, #1]
 80023b0:	2101      	movs	r1, #1
 80023b2:	f361 0301 	bfi	r3, r1, #0, #2
 80023b6:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <APP_voidBackTasks+0x10c>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80023c0:	b2d9      	uxtb	r1, r3
 80023c2:	4a22      	ldr	r2, [pc, #136]	; (800244c <APP_voidBackTasks+0x104>)
 80023c4:	7813      	ldrb	r3, [r2, #0]
 80023c6:	f361 0303 	bfi	r3, r1, #0, #4
 80023ca:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <APP_voidBackTasks+0x10c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80023d4:	b2d9      	uxtb	r1, r3
 80023d6:	4a1d      	ldr	r2, [pc, #116]	; (800244c <APP_voidBackTasks+0x104>)
 80023d8:	7813      	ldrb	r3, [r2, #0]
 80023da:	f361 1306 	bfi	r3, r1, #4, #3
 80023de:	7013      	strb	r3, [r2, #0]
}
 80023e0:	e02e      	b.n	8002440 <APP_voidBackTasks+0xf8>
			G_u16DataAfterProccing.Flag = 2;
 80023e2:	4a1a      	ldr	r2, [pc, #104]	; (800244c <APP_voidBackTasks+0x104>)
 80023e4:	7853      	ldrb	r3, [r2, #1]
 80023e6:	2102      	movs	r1, #2
 80023e8:	f361 0301 	bfi	r3, r1, #0, #2
 80023ec:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <APP_voidBackTasks+0x10c>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80023f6:	b2d9      	uxtb	r1, r3
 80023f8:	4a14      	ldr	r2, [pc, #80]	; (800244c <APP_voidBackTasks+0x104>)
 80023fa:	7813      	ldrb	r3, [r2, #0]
 80023fc:	f361 0303 	bfi	r3, r1, #0, #4
 8002400:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <APP_voidBackTasks+0x110>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	b2d9      	uxtb	r1, r3
 800240c:	4a0f      	ldr	r2, [pc, #60]	; (800244c <APP_voidBackTasks+0x104>)
 800240e:	7813      	ldrb	r3, [r2, #0]
 8002410:	f361 1306 	bfi	r3, r1, #4, #3
 8002414:	7013      	strb	r3, [r2, #0]
}
 8002416:	e013      	b.n	8002440 <APP_voidBackTasks+0xf8>
		G_u16DataAfterProccing.Flag = 0;
 8002418:	4a0c      	ldr	r2, [pc, #48]	; (800244c <APP_voidBackTasks+0x104>)
 800241a:	7853      	ldrb	r3, [r2, #1]
 800241c:	f36f 0301 	bfc	r3, #0, #2
 8002420:	7053      	strb	r3, [r2, #1]
		G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <APP_voidBackTasks+0x10c>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800242a:	b2d9      	uxtb	r1, r3
 800242c:	4a07      	ldr	r2, [pc, #28]	; (800244c <APP_voidBackTasks+0x104>)
 800242e:	7813      	ldrb	r3, [r2, #0]
 8002430:	f361 0303 	bfi	r3, r1, #0, #4
 8002434:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = max_speed;
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <APP_voidBackTasks+0x104>)
 8002438:	7813      	ldrb	r3, [r2, #0]
 800243a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800243e:	7013      	strb	r3, [r2, #0]
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000100 	.word	0x20000100
 8002448:	40240000 	.word	0x40240000
 800244c:	20000104 	.word	0x20000104
 8002450:	40340000 	.word	0x40340000
 8002454:	200000fc 	.word	0x200000fc
 8002458:	200000ca 	.word	0x200000ca

0800245c <APP_voidBackward_RightTasks>:
void APP_voidBackward_RightTasks ()
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Left  <= SO_SHORT_DISTANCE) // stop car
 8002460:	4b3d      	ldr	r3, [pc, #244]	; (8002558 <APP_voidBackward_RightTasks+0xfc>)
 8002462:	789b      	ldrb	r3, [r3, #2]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fd ffc3 	bl	80003f0 <__aeabi_i2d>
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	4b3b      	ldr	r3, [pc, #236]	; (800255c <APP_voidBackward_RightTasks+0x100>)
 8002470:	f7fe f892 	bl	8000598 <__aeabi_dcmple>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <APP_voidBackward_RightTasks+0x36>
	{
		//direction = stop
		G_u16DataAfterProccing.Direction = Stop;
 800247a:	4a39      	ldr	r2, [pc, #228]	; (8002560 <APP_voidBackward_RightTasks+0x104>)
 800247c:	7813      	ldrb	r3, [r2, #0]
 800247e:	2108      	movs	r1, #8
 8002480:	f361 0303 	bfi	r3, r1, #0, #4
 8002484:	7013      	strb	r3, [r2, #0]
		/*flag = 3*/
		G_u16DataAfterProccing.Flag = 3;
 8002486:	4a36      	ldr	r2, [pc, #216]	; (8002560 <APP_voidBackward_RightTasks+0x104>)
 8002488:	7853      	ldrb	r3, [r2, #1]
 800248a:	f043 0303 	orr.w	r3, r3, #3
 800248e:	7053      	strb	r3, [r2, #1]
		if (speed_control_Automatic == Automatic_ON)
			G_u16DataAfterProccing.Speed = max_speed;
		else
			G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
	}
}
 8002490:	e060      	b.n	8002554 <APP_voidBackward_RightTasks+0xf8>
	else if (G_xNear_Distance.Distance_Left <= UN_SAFE_DISTANCE) //Un Safed Distance
 8002492:	4b31      	ldr	r3, [pc, #196]	; (8002558 <APP_voidBackward_RightTasks+0xfc>)
 8002494:	789b      	ldrb	r3, [r3, #2]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fd ffaa 	bl	80003f0 <__aeabi_i2d>
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	4b30      	ldr	r3, [pc, #192]	; (8002564 <APP_voidBackward_RightTasks+0x108>)
 80024a2:	f7fe f879 	bl	8000598 <__aeabi_dcmple>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d03f      	beq.n	800252c <APP_voidBackward_RightTasks+0xd0>
		if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 80024ac:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <APP_voidBackward_RightTasks+0x10c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b2c      	ldr	r3, [pc, #176]	; (800256c <APP_voidBackward_RightTasks+0x110>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	dc1a      	bgt.n	80024f6 <APP_voidBackward_RightTasks+0x9a>
			G_u16DataAfterProccing.Flag = 1; ;
 80024c0:	4a27      	ldr	r2, [pc, #156]	; (8002560 <APP_voidBackward_RightTasks+0x104>)
 80024c2:	7853      	ldrb	r3, [r2, #1]
 80024c4:	2101      	movs	r1, #1
 80024c6:	f361 0301 	bfi	r3, r1, #0, #2
 80024ca:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <APP_voidBackward_RightTasks+0x10c>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80024d4:	b2d9      	uxtb	r1, r3
 80024d6:	4a22      	ldr	r2, [pc, #136]	; (8002560 <APP_voidBackward_RightTasks+0x104>)
 80024d8:	7813      	ldrb	r3, [r2, #0]
 80024da:	f361 0303 	bfi	r3, r1, #0, #4
 80024de:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 80024e0:	4b21      	ldr	r3, [pc, #132]	; (8002568 <APP_voidBackward_RightTasks+0x10c>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80024e8:	b2d9      	uxtb	r1, r3
 80024ea:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <APP_voidBackward_RightTasks+0x104>)
 80024ec:	7813      	ldrb	r3, [r2, #0]
 80024ee:	f361 1306 	bfi	r3, r1, #4, #3
 80024f2:	7013      	strb	r3, [r2, #0]
}
 80024f4:	e02e      	b.n	8002554 <APP_voidBackward_RightTasks+0xf8>
			G_u16DataAfterProccing.Flag = 2;
 80024f6:	4a1a      	ldr	r2, [pc, #104]	; (8002560 <APP_voidBackward_RightTasks+0x104>)
 80024f8:	7853      	ldrb	r3, [r2, #1]
 80024fa:	2102      	movs	r1, #2
 80024fc:	f361 0301 	bfi	r3, r1, #0, #2
 8002500:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <APP_voidBackward_RightTasks+0x10c>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800250a:	b2d9      	uxtb	r1, r3
 800250c:	4a14      	ldr	r2, [pc, #80]	; (8002560 <APP_voidBackward_RightTasks+0x104>)
 800250e:	7813      	ldrb	r3, [r2, #0]
 8002510:	f361 0303 	bfi	r3, r1, #0, #4
 8002514:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <APP_voidBackward_RightTasks+0x110>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	b2d9      	uxtb	r1, r3
 8002520:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <APP_voidBackward_RightTasks+0x104>)
 8002522:	7813      	ldrb	r3, [r2, #0]
 8002524:	f361 1306 	bfi	r3, r1, #4, #3
 8002528:	7013      	strb	r3, [r2, #0]
}
 800252a:	e013      	b.n	8002554 <APP_voidBackward_RightTasks+0xf8>
		G_u16DataAfterProccing.Flag = 0;
 800252c:	4a0c      	ldr	r2, [pc, #48]	; (8002560 <APP_voidBackward_RightTasks+0x104>)
 800252e:	7853      	ldrb	r3, [r2, #1]
 8002530:	f36f 0301 	bfc	r3, #0, #2
 8002534:	7053      	strb	r3, [r2, #1]
		G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <APP_voidBackward_RightTasks+0x10c>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800253e:	b2d9      	uxtb	r1, r3
 8002540:	4a07      	ldr	r2, [pc, #28]	; (8002560 <APP_voidBackward_RightTasks+0x104>)
 8002542:	7813      	ldrb	r3, [r2, #0]
 8002544:	f361 0303 	bfi	r3, r1, #0, #4
 8002548:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = max_speed;
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <APP_voidBackward_RightTasks+0x104>)
 800254c:	7813      	ldrb	r3, [r2, #0]
 800254e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002552:	7013      	strb	r3, [r2, #0]
}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000100 	.word	0x20000100
 800255c:	40240000 	.word	0x40240000
 8002560:	20000104 	.word	0x20000104
 8002564:	40340000 	.word	0x40340000
 8002568:	200000fc 	.word	0x200000fc
 800256c:	200000ca 	.word	0x200000ca

08002570 <APP_voidBackward_LEFTTasks>:
void APP_voidBackward_LEFTTasks ()
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Right  <= SO_SHORT_DISTANCE) // stop car
 8002574:	4b3d      	ldr	r3, [pc, #244]	; (800266c <APP_voidBackward_LEFTTasks+0xfc>)
 8002576:	78db      	ldrb	r3, [r3, #3]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ff39 	bl	80003f0 <__aeabi_i2d>
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <APP_voidBackward_LEFTTasks+0x100>)
 8002584:	f7fe f808 	bl	8000598 <__aeabi_dcmple>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00b      	beq.n	80025a6 <APP_voidBackward_LEFTTasks+0x36>
	{
		//direction = stop
		G_u16DataAfterProccing.Direction = Stop;
 800258e:	4a39      	ldr	r2, [pc, #228]	; (8002674 <APP_voidBackward_LEFTTasks+0x104>)
 8002590:	7813      	ldrb	r3, [r2, #0]
 8002592:	2108      	movs	r1, #8
 8002594:	f361 0303 	bfi	r3, r1, #0, #4
 8002598:	7013      	strb	r3, [r2, #0]
		/*flag = 3*/
		G_u16DataAfterProccing.Flag = 3;
 800259a:	4a36      	ldr	r2, [pc, #216]	; (8002674 <APP_voidBackward_LEFTTasks+0x104>)
 800259c:	7853      	ldrb	r3, [r2, #1]
 800259e:	f043 0303 	orr.w	r3, r3, #3
 80025a2:	7053      	strb	r3, [r2, #1]
		if (speed_control_Automatic == Automatic_ON)
			G_u16DataAfterProccing.Speed = max_speed;
		else
			G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
	}
}
 80025a4:	e060      	b.n	8002668 <APP_voidBackward_LEFTTasks+0xf8>
	else if (G_xNear_Distance.Distance_Right <= UN_SAFE_DISTANCE) //Un Safed Distance
 80025a6:	4b31      	ldr	r3, [pc, #196]	; (800266c <APP_voidBackward_LEFTTasks+0xfc>)
 80025a8:	78db      	ldrb	r3, [r3, #3]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ff20 	bl	80003f0 <__aeabi_i2d>
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	4b30      	ldr	r3, [pc, #192]	; (8002678 <APP_voidBackward_LEFTTasks+0x108>)
 80025b6:	f7fd ffef 	bl	8000598 <__aeabi_dcmple>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d03f      	beq.n	8002640 <APP_voidBackward_LEFTTasks+0xd0>
		if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 80025c0:	4b2e      	ldr	r3, [pc, #184]	; (800267c <APP_voidBackward_LEFTTasks+0x10c>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <APP_voidBackward_LEFTTasks+0x110>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	dc1a      	bgt.n	800260a <APP_voidBackward_LEFTTasks+0x9a>
			G_u16DataAfterProccing.Flag = 1;
 80025d4:	4a27      	ldr	r2, [pc, #156]	; (8002674 <APP_voidBackward_LEFTTasks+0x104>)
 80025d6:	7853      	ldrb	r3, [r2, #1]
 80025d8:	2101      	movs	r1, #1
 80025da:	f361 0301 	bfi	r3, r1, #0, #2
 80025de:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 80025e0:	4b26      	ldr	r3, [pc, #152]	; (800267c <APP_voidBackward_LEFTTasks+0x10c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80025e8:	b2d9      	uxtb	r1, r3
 80025ea:	4a22      	ldr	r2, [pc, #136]	; (8002674 <APP_voidBackward_LEFTTasks+0x104>)
 80025ec:	7813      	ldrb	r3, [r2, #0]
 80025ee:	f361 0303 	bfi	r3, r1, #0, #4
 80025f2:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 80025f4:	4b21      	ldr	r3, [pc, #132]	; (800267c <APP_voidBackward_LEFTTasks+0x10c>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80025fc:	b2d9      	uxtb	r1, r3
 80025fe:	4a1d      	ldr	r2, [pc, #116]	; (8002674 <APP_voidBackward_LEFTTasks+0x104>)
 8002600:	7813      	ldrb	r3, [r2, #0]
 8002602:	f361 1306 	bfi	r3, r1, #4, #3
 8002606:	7013      	strb	r3, [r2, #0]
}
 8002608:	e02e      	b.n	8002668 <APP_voidBackward_LEFTTasks+0xf8>
			G_u16DataAfterProccing.Flag = 2;
 800260a:	4a1a      	ldr	r2, [pc, #104]	; (8002674 <APP_voidBackward_LEFTTasks+0x104>)
 800260c:	7853      	ldrb	r3, [r2, #1]
 800260e:	2102      	movs	r1, #2
 8002610:	f361 0301 	bfi	r3, r1, #0, #2
 8002614:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8002616:	4b19      	ldr	r3, [pc, #100]	; (800267c <APP_voidBackward_LEFTTasks+0x10c>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800261e:	b2d9      	uxtb	r1, r3
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <APP_voidBackward_LEFTTasks+0x104>)
 8002622:	7813      	ldrb	r3, [r2, #0]
 8002624:	f361 0303 	bfi	r3, r1, #0, #4
 8002628:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <APP_voidBackward_LEFTTasks+0x110>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	b2d9      	uxtb	r1, r3
 8002634:	4a0f      	ldr	r2, [pc, #60]	; (8002674 <APP_voidBackward_LEFTTasks+0x104>)
 8002636:	7813      	ldrb	r3, [r2, #0]
 8002638:	f361 1306 	bfi	r3, r1, #4, #3
 800263c:	7013      	strb	r3, [r2, #0]
}
 800263e:	e013      	b.n	8002668 <APP_voidBackward_LEFTTasks+0xf8>
		G_u16DataAfterProccing.Flag = 0;
 8002640:	4a0c      	ldr	r2, [pc, #48]	; (8002674 <APP_voidBackward_LEFTTasks+0x104>)
 8002642:	7853      	ldrb	r3, [r2, #1]
 8002644:	f36f 0301 	bfc	r3, #0, #2
 8002648:	7053      	strb	r3, [r2, #1]
		G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 800264a:	4b0c      	ldr	r3, [pc, #48]	; (800267c <APP_voidBackward_LEFTTasks+0x10c>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002652:	b2d9      	uxtb	r1, r3
 8002654:	4a07      	ldr	r2, [pc, #28]	; (8002674 <APP_voidBackward_LEFTTasks+0x104>)
 8002656:	7813      	ldrb	r3, [r2, #0]
 8002658:	f361 0303 	bfi	r3, r1, #0, #4
 800265c:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = max_speed;
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <APP_voidBackward_LEFTTasks+0x104>)
 8002660:	7813      	ldrb	r3, [r2, #0]
 8002662:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002666:	7013      	strb	r3, [r2, #0]
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000100 	.word	0x20000100
 8002670:	40240000 	.word	0x40240000
 8002674:	20000104 	.word	0x20000104
 8002678:	40340000 	.word	0x40340000
 800267c:	200000fc 	.word	0x200000fc
 8002680:	200000ca 	.word	0x200000ca

08002684 <APP_voidRight_LeftTasks>:
void APP_voidRight_LeftTasks ()
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0

}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <APP_voidForward_RightTasks>:
void APP_voidForward_RightTasks ()
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Right  <= SO_SHORT_DISTANCE) // stop car
 8002694:	4b3d      	ldr	r3, [pc, #244]	; (800278c <APP_voidForward_RightTasks+0xfc>)
 8002696:	78db      	ldrb	r3, [r3, #3]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd fea9 	bl	80003f0 <__aeabi_i2d>
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <APP_voidForward_RightTasks+0x100>)
 80026a4:	f7fd ff78 	bl	8000598 <__aeabi_dcmple>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <APP_voidForward_RightTasks+0x36>
	{
		//direction = stop
		G_u16DataAfterProccing.Direction = Stop;
 80026ae:	4a39      	ldr	r2, [pc, #228]	; (8002794 <APP_voidForward_RightTasks+0x104>)
 80026b0:	7813      	ldrb	r3, [r2, #0]
 80026b2:	2108      	movs	r1, #8
 80026b4:	f361 0303 	bfi	r3, r1, #0, #4
 80026b8:	7013      	strb	r3, [r2, #0]
		/*flag = 3*/
		G_u16DataAfterProccing.Flag = 3;
 80026ba:	4a36      	ldr	r2, [pc, #216]	; (8002794 <APP_voidForward_RightTasks+0x104>)
 80026bc:	7853      	ldrb	r3, [r2, #1]
 80026be:	f043 0303 	orr.w	r3, r3, #3
 80026c2:	7053      	strb	r3, [r2, #1]
		if (speed_control_Automatic == Automatic_ON)
			G_u16DataAfterProccing.Speed = max_speed;
		else
			G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
	}
}
 80026c4:	e060      	b.n	8002788 <APP_voidForward_RightTasks+0xf8>
	else if (G_xNear_Distance.Distance_Right <= UN_SAFE_DISTANCE) //Un Safed Distance
 80026c6:	4b31      	ldr	r3, [pc, #196]	; (800278c <APP_voidForward_RightTasks+0xfc>)
 80026c8:	78db      	ldrb	r3, [r3, #3]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd fe90 	bl	80003f0 <__aeabi_i2d>
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	4b30      	ldr	r3, [pc, #192]	; (8002798 <APP_voidForward_RightTasks+0x108>)
 80026d6:	f7fd ff5f 	bl	8000598 <__aeabi_dcmple>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d03f      	beq.n	8002760 <APP_voidForward_RightTasks+0xd0>
		if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 80026e0:	4b2e      	ldr	r3, [pc, #184]	; (800279c <APP_voidForward_RightTasks+0x10c>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <APP_voidForward_RightTasks+0x110>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	dc1a      	bgt.n	800272a <APP_voidForward_RightTasks+0x9a>
			G_u16DataAfterProccing.Flag = 1;
 80026f4:	4a27      	ldr	r2, [pc, #156]	; (8002794 <APP_voidForward_RightTasks+0x104>)
 80026f6:	7853      	ldrb	r3, [r2, #1]
 80026f8:	2101      	movs	r1, #1
 80026fa:	f361 0301 	bfi	r3, r1, #0, #2
 80026fe:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8002700:	4b26      	ldr	r3, [pc, #152]	; (800279c <APP_voidForward_RightTasks+0x10c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002708:	b2d9      	uxtb	r1, r3
 800270a:	4a22      	ldr	r2, [pc, #136]	; (8002794 <APP_voidForward_RightTasks+0x104>)
 800270c:	7813      	ldrb	r3, [r2, #0]
 800270e:	f361 0303 	bfi	r3, r1, #0, #4
 8002712:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8002714:	4b21      	ldr	r3, [pc, #132]	; (800279c <APP_voidForward_RightTasks+0x10c>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800271c:	b2d9      	uxtb	r1, r3
 800271e:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <APP_voidForward_RightTasks+0x104>)
 8002720:	7813      	ldrb	r3, [r2, #0]
 8002722:	f361 1306 	bfi	r3, r1, #4, #3
 8002726:	7013      	strb	r3, [r2, #0]
}
 8002728:	e02e      	b.n	8002788 <APP_voidForward_RightTasks+0xf8>
			G_u16DataAfterProccing.Flag = 2;
 800272a:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <APP_voidForward_RightTasks+0x104>)
 800272c:	7853      	ldrb	r3, [r2, #1]
 800272e:	2102      	movs	r1, #2
 8002730:	f361 0301 	bfi	r3, r1, #0, #2
 8002734:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8002736:	4b19      	ldr	r3, [pc, #100]	; (800279c <APP_voidForward_RightTasks+0x10c>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800273e:	b2d9      	uxtb	r1, r3
 8002740:	4a14      	ldr	r2, [pc, #80]	; (8002794 <APP_voidForward_RightTasks+0x104>)
 8002742:	7813      	ldrb	r3, [r2, #0]
 8002744:	f361 0303 	bfi	r3, r1, #0, #4
 8002748:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <APP_voidForward_RightTasks+0x110>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	b2d9      	uxtb	r1, r3
 8002754:	4a0f      	ldr	r2, [pc, #60]	; (8002794 <APP_voidForward_RightTasks+0x104>)
 8002756:	7813      	ldrb	r3, [r2, #0]
 8002758:	f361 1306 	bfi	r3, r1, #4, #3
 800275c:	7013      	strb	r3, [r2, #0]
}
 800275e:	e013      	b.n	8002788 <APP_voidForward_RightTasks+0xf8>
		G_u16DataAfterProccing.Flag = 0;
 8002760:	4a0c      	ldr	r2, [pc, #48]	; (8002794 <APP_voidForward_RightTasks+0x104>)
 8002762:	7853      	ldrb	r3, [r2, #1]
 8002764:	f36f 0301 	bfc	r3, #0, #2
 8002768:	7053      	strb	r3, [r2, #1]
		G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <APP_voidForward_RightTasks+0x10c>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002772:	b2d9      	uxtb	r1, r3
 8002774:	4a07      	ldr	r2, [pc, #28]	; (8002794 <APP_voidForward_RightTasks+0x104>)
 8002776:	7813      	ldrb	r3, [r2, #0]
 8002778:	f361 0303 	bfi	r3, r1, #0, #4
 800277c:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = max_speed;
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <APP_voidForward_RightTasks+0x104>)
 8002780:	7813      	ldrb	r3, [r2, #0]
 8002782:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002786:	7013      	strb	r3, [r2, #0]
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000100 	.word	0x20000100
 8002790:	40240000 	.word	0x40240000
 8002794:	20000104 	.word	0x20000104
 8002798:	40340000 	.word	0x40340000
 800279c:	200000fc 	.word	0x200000fc
 80027a0:	200000ca 	.word	0x200000ca

080027a4 <APP_voidForward_LeftTasks>:
void APP_voidForward_LeftTasks ()
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Left  <= SO_SHORT_DISTANCE) // stop car
 80027a8:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <APP_voidForward_LeftTasks+0xfc>)
 80027aa:	789b      	ldrb	r3, [r3, #2]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd fe1f 	bl	80003f0 <__aeabi_i2d>
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	4b3b      	ldr	r3, [pc, #236]	; (80028a4 <APP_voidForward_LeftTasks+0x100>)
 80027b8:	f7fd feee 	bl	8000598 <__aeabi_dcmple>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <APP_voidForward_LeftTasks+0x36>
	{
		//direction = stop
		G_u16DataAfterProccing.Direction = Stop;
 80027c2:	4a39      	ldr	r2, [pc, #228]	; (80028a8 <APP_voidForward_LeftTasks+0x104>)
 80027c4:	7813      	ldrb	r3, [r2, #0]
 80027c6:	2108      	movs	r1, #8
 80027c8:	f361 0303 	bfi	r3, r1, #0, #4
 80027cc:	7013      	strb	r3, [r2, #0]
		/*flag = 3*/
		G_u16DataAfterProccing.Flag = 3;
 80027ce:	4a36      	ldr	r2, [pc, #216]	; (80028a8 <APP_voidForward_LeftTasks+0x104>)
 80027d0:	7853      	ldrb	r3, [r2, #1]
 80027d2:	f043 0303 	orr.w	r3, r3, #3
 80027d6:	7053      	strb	r3, [r2, #1]
		if (speed_control_Automatic == Automatic_ON)
			G_u16DataAfterProccing.Speed = max_speed;
		else
			G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
	}
}
 80027d8:	e060      	b.n	800289c <APP_voidForward_LeftTasks+0xf8>
	else if (G_xNear_Distance.Distance_Left <= UN_SAFE_DISTANCE) //Un Safed Distance
 80027da:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <APP_voidForward_LeftTasks+0xfc>)
 80027dc:	789b      	ldrb	r3, [r3, #2]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd fe06 	bl	80003f0 <__aeabi_i2d>
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	4b30      	ldr	r3, [pc, #192]	; (80028ac <APP_voidForward_LeftTasks+0x108>)
 80027ea:	f7fd fed5 	bl	8000598 <__aeabi_dcmple>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d03f      	beq.n	8002874 <APP_voidForward_LeftTasks+0xd0>
		if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 80027f4:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <APP_voidForward_LeftTasks+0x10c>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <APP_voidForward_LeftTasks+0x110>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	dc1a      	bgt.n	800283e <APP_voidForward_LeftTasks+0x9a>
			G_u16DataAfterProccing.Flag = 1;
 8002808:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <APP_voidForward_LeftTasks+0x104>)
 800280a:	7853      	ldrb	r3, [r2, #1]
 800280c:	2101      	movs	r1, #1
 800280e:	f361 0301 	bfi	r3, r1, #0, #2
 8002812:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8002814:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <APP_voidForward_LeftTasks+0x10c>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800281c:	b2d9      	uxtb	r1, r3
 800281e:	4a22      	ldr	r2, [pc, #136]	; (80028a8 <APP_voidForward_LeftTasks+0x104>)
 8002820:	7813      	ldrb	r3, [r2, #0]
 8002822:	f361 0303 	bfi	r3, r1, #0, #4
 8002826:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <APP_voidForward_LeftTasks+0x10c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002830:	b2d9      	uxtb	r1, r3
 8002832:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <APP_voidForward_LeftTasks+0x104>)
 8002834:	7813      	ldrb	r3, [r2, #0]
 8002836:	f361 1306 	bfi	r3, r1, #4, #3
 800283a:	7013      	strb	r3, [r2, #0]
}
 800283c:	e02e      	b.n	800289c <APP_voidForward_LeftTasks+0xf8>
			G_u16DataAfterProccing.Flag = 2;
 800283e:	4a1a      	ldr	r2, [pc, #104]	; (80028a8 <APP_voidForward_LeftTasks+0x104>)
 8002840:	7853      	ldrb	r3, [r2, #1]
 8002842:	2102      	movs	r1, #2
 8002844:	f361 0301 	bfi	r3, r1, #0, #2
 8002848:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <APP_voidForward_LeftTasks+0x10c>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002852:	b2d9      	uxtb	r1, r3
 8002854:	4a14      	ldr	r2, [pc, #80]	; (80028a8 <APP_voidForward_LeftTasks+0x104>)
 8002856:	7813      	ldrb	r3, [r2, #0]
 8002858:	f361 0303 	bfi	r3, r1, #0, #4
 800285c:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed;
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <APP_voidForward_LeftTasks+0x110>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	b2d9      	uxtb	r1, r3
 8002868:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <APP_voidForward_LeftTasks+0x104>)
 800286a:	7813      	ldrb	r3, [r2, #0]
 800286c:	f361 1306 	bfi	r3, r1, #4, #3
 8002870:	7013      	strb	r3, [r2, #0]
}
 8002872:	e013      	b.n	800289c <APP_voidForward_LeftTasks+0xf8>
		G_u16DataAfterProccing.Flag = 0;
 8002874:	4a0c      	ldr	r2, [pc, #48]	; (80028a8 <APP_voidForward_LeftTasks+0x104>)
 8002876:	7853      	ldrb	r3, [r2, #1]
 8002878:	f36f 0301 	bfc	r3, #0, #2
 800287c:	7053      	strb	r3, [r2, #1]
		G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <APP_voidForward_LeftTasks+0x10c>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002886:	b2d9      	uxtb	r1, r3
 8002888:	4a07      	ldr	r2, [pc, #28]	; (80028a8 <APP_voidForward_LeftTasks+0x104>)
 800288a:	7813      	ldrb	r3, [r2, #0]
 800288c:	f361 0303 	bfi	r3, r1, #0, #4
 8002890:	7013      	strb	r3, [r2, #0]
			G_u16DataAfterProccing.Speed = max_speed;
 8002892:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <APP_voidForward_LeftTasks+0x104>)
 8002894:	7813      	ldrb	r3, [r2, #0]
 8002896:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800289a:	7013      	strb	r3, [r2, #0]
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000100 	.word	0x20000100
 80028a4:	40240000 	.word	0x40240000
 80028a8:	20000104 	.word	0x20000104
 80028ac:	40340000 	.word	0x40340000
 80028b0:	200000fc 	.word	0x200000fc
 80028b4:	200000ca 	.word	0x200000ca

080028b8 <APP_Buffer_Write>:


}

Buffer_state APP_Buffer_Write()
{
 80028b8:	b598      	push	{r3, r4, r7, lr}
 80028ba:	af00      	add	r7, sp, #0
	if (G_u8Counter == BUFFER_SIZE)
 80028bc:	4b15      	ldr	r3, [pc, #84]	; (8002914 <APP_Buffer_Write+0x5c>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b32      	cmp	r3, #50	; 0x32
 80028c2:	d101      	bne.n	80028c8 <APP_Buffer_Write+0x10>
	{
		return Buffer_is_full;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e022      	b.n	800290e <APP_Buffer_Write+0x56>
	}
	G_Au8UART_Buffer[G_u8Head_Ptr] = MUART_u8ReadDataRegister(UART1);
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <APP_Buffer_Write+0x60>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461c      	mov	r4, r3
 80028ce:	4813      	ldr	r0, [pc, #76]	; (800291c <APP_Buffer_Write+0x64>)
 80028d0:	f7ff fb1e 	bl	8001f10 <MUART_u8ReadDataRegister>
 80028d4:	4603      	mov	r3, r0
 80028d6:	461a      	mov	r2, r3
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <APP_Buffer_Write+0x68>)
 80028da:	551a      	strb	r2, [r3, r4]
	G_u8Head_Ptr = (G_u8Head_Ptr+1) % BUFFER_SIZE;
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <APP_Buffer_Write+0x60>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	3301      	adds	r3, #1
 80028e2:	4a10      	ldr	r2, [pc, #64]	; (8002924 <APP_Buffer_Write+0x6c>)
 80028e4:	fb82 1203 	smull	r1, r2, r2, r3
 80028e8:	1111      	asrs	r1, r2, #4
 80028ea:	17da      	asrs	r2, r3, #31
 80028ec:	1a8a      	subs	r2, r1, r2
 80028ee:	2132      	movs	r1, #50	; 0x32
 80028f0:	fb01 f202 	mul.w	r2, r1, r2
 80028f4:	1a9a      	subs	r2, r3, r2
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	4b07      	ldr	r3, [pc, #28]	; (8002918 <APP_Buffer_Write+0x60>)
 80028fa:	701a      	strb	r2, [r3, #0]
	G_u8Counter++;
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <APP_Buffer_Write+0x5c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <APP_Buffer_Write+0x5c>)
 8002906:	701a      	strb	r2, [r3, #0]
	APP_Sort_Buffer();
 8002908:	f000 f80e 	bl	8002928 <APP_Sort_Buffer>
	return Buffer_is_success;
 800290c:	2302      	movs	r3, #2
}
 800290e:	4618      	mov	r0, r3
 8002910:	bd98      	pop	{r3, r4, r7, pc}
 8002912:	bf00      	nop
 8002914:	200000fa 	.word	0x200000fa
 8002918:	200000f8 	.word	0x200000f8
 800291c:	40013800 	.word	0x40013800
 8002920:	200001d8 	.word	0x200001d8
 8002924:	51eb851f 	.word	0x51eb851f

08002928 <APP_Sort_Buffer>:
	return Buffer_is_success;
}


void APP_Sort_Buffer()
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
	u8 L_u8Start_index  =  G_u8Current_ptr;
 800292e:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <APP_Sort_Buffer+0x84>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	717b      	strb	r3, [r7, #5]
	u8 L_u8Element_NUM  =  G_u8Counter;
 8002934:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <APP_Sort_Buffer+0x88>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	713b      	strb	r3, [r7, #4]

	for (u8 i = L_u8Start_index ; i < ( L_u8Start_index + L_u8Element_NUM ) ; i++ )
 800293a:	797b      	ldrb	r3, [r7, #5]
 800293c:	71fb      	strb	r3, [r7, #7]
 800293e:	e02a      	b.n	8002996 <APP_Sort_Buffer+0x6e>
	{
		for(u8 j = L_u8Start_index ; j < ( L_u8Start_index + L_u8Element_NUM - i - 1 ) ; j++)
 8002940:	797b      	ldrb	r3, [r7, #5]
 8002942:	71bb      	strb	r3, [r7, #6]
 8002944:	e01b      	b.n	800297e <APP_Sort_Buffer+0x56>
		{
			if(G_Au8UART_Buffer[j] > G_Au8UART_Buffer[j+1])
 8002946:	79bb      	ldrb	r3, [r7, #6]
 8002948:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <APP_Sort_Buffer+0x8c>)
 800294a:	5cd2      	ldrb	r2, [r2, r3]
 800294c:	79bb      	ldrb	r3, [r7, #6]
 800294e:	3301      	adds	r3, #1
 8002950:	4918      	ldr	r1, [pc, #96]	; (80029b4 <APP_Sort_Buffer+0x8c>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	429a      	cmp	r2, r3
 8002956:	d90f      	bls.n	8002978 <APP_Sort_Buffer+0x50>
			{
				u8 L_u8Temp = G_Au8UART_Buffer[j];
 8002958:	79bb      	ldrb	r3, [r7, #6]
 800295a:	4a16      	ldr	r2, [pc, #88]	; (80029b4 <APP_Sort_Buffer+0x8c>)
 800295c:	5cd3      	ldrb	r3, [r2, r3]
 800295e:	70fb      	strb	r3, [r7, #3]
				G_Au8UART_Buffer[j] = G_Au8UART_Buffer[j+1];
 8002960:	79bb      	ldrb	r3, [r7, #6]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	79bb      	ldrb	r3, [r7, #6]
 8002966:	4913      	ldr	r1, [pc, #76]	; (80029b4 <APP_Sort_Buffer+0x8c>)
 8002968:	5c89      	ldrb	r1, [r1, r2]
 800296a:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <APP_Sort_Buffer+0x8c>)
 800296c:	54d1      	strb	r1, [r2, r3]
				G_Au8UART_Buffer[j+1] = L_u8Temp;
 800296e:	79bb      	ldrb	r3, [r7, #6]
 8002970:	3301      	adds	r3, #1
 8002972:	4910      	ldr	r1, [pc, #64]	; (80029b4 <APP_Sort_Buffer+0x8c>)
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	54ca      	strb	r2, [r1, r3]
		for(u8 j = L_u8Start_index ; j < ( L_u8Start_index + L_u8Element_NUM - i - 1 ) ; j++)
 8002978:	79bb      	ldrb	r3, [r7, #6]
 800297a:	3301      	adds	r3, #1
 800297c:	71bb      	strb	r3, [r7, #6]
 800297e:	79ba      	ldrb	r2, [r7, #6]
 8002980:	7979      	ldrb	r1, [r7, #5]
 8002982:	793b      	ldrb	r3, [r7, #4]
 8002984:	4419      	add	r1, r3
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	1acb      	subs	r3, r1, r3
 800298a:	3b01      	subs	r3, #1
 800298c:	429a      	cmp	r2, r3
 800298e:	dbda      	blt.n	8002946 <APP_Sort_Buffer+0x1e>
	for (u8 i = L_u8Start_index ; i < ( L_u8Start_index + L_u8Element_NUM ) ; i++ )
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	3301      	adds	r3, #1
 8002994:	71fb      	strb	r3, [r7, #7]
 8002996:	79fa      	ldrb	r2, [r7, #7]
 8002998:	7979      	ldrb	r1, [r7, #5]
 800299a:	793b      	ldrb	r3, [r7, #4]
 800299c:	440b      	add	r3, r1
 800299e:	429a      	cmp	r2, r3
 80029a0:	dbce      	blt.n	8002940 <APP_Sort_Buffer+0x18>
			}
		}
	}
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	200000f9 	.word	0x200000f9
 80029b0:	200000fa 	.word	0x200000fa
 80029b4:	200001d8 	.word	0x200001d8

080029b8 <ProcessingFun>:


void ProcessingFun (void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
	/*Mapping data from UART*/
	switch (APP_G_u8DataFromUART)
 80029bc:	4bd5      	ldr	r3, [pc, #852]	; (8002d14 <ProcessingFun+0x35c>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	3b10      	subs	r3, #16
 80029c2:	2b6c      	cmp	r3, #108	; 0x6c
 80029c4:	f200 81cd 	bhi.w	8002d62 <ProcessingFun+0x3aa>
 80029c8:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <ProcessingFun+0x18>)
 80029ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ce:	bf00      	nop
 80029d0:	08002b85 	.word	0x08002b85
 80029d4:	08002d63 	.word	0x08002d63
 80029d8:	08002d63 	.word	0x08002d63
 80029dc:	08002d63 	.word	0x08002d63
 80029e0:	08002d63 	.word	0x08002d63
 80029e4:	08002d63 	.word	0x08002d63
 80029e8:	08002d63 	.word	0x08002d63
 80029ec:	08002d63 	.word	0x08002d63
 80029f0:	08002d63 	.word	0x08002d63
 80029f4:	08002d63 	.word	0x08002d63
 80029f8:	08002d63 	.word	0x08002d63
 80029fc:	08002d63 	.word	0x08002d63
 8002a00:	08002d63 	.word	0x08002d63
 8002a04:	08002d63 	.word	0x08002d63
 8002a08:	08002d63 	.word	0x08002d63
 8002a0c:	08002d63 	.word	0x08002d63
 8002a10:	08002b93 	.word	0x08002b93
 8002a14:	08002d63 	.word	0x08002d63
 8002a18:	08002d63 	.word	0x08002d63
 8002a1c:	08002d63 	.word	0x08002d63
 8002a20:	08002d63 	.word	0x08002d63
 8002a24:	08002d63 	.word	0x08002d63
 8002a28:	08002d63 	.word	0x08002d63
 8002a2c:	08002d63 	.word	0x08002d63
 8002a30:	08002d63 	.word	0x08002d63
 8002a34:	08002d63 	.word	0x08002d63
 8002a38:	08002d63 	.word	0x08002d63
 8002a3c:	08002d63 	.word	0x08002d63
 8002a40:	08002d63 	.word	0x08002d63
 8002a44:	08002d63 	.word	0x08002d63
 8002a48:	08002d63 	.word	0x08002d63
 8002a4c:	08002d63 	.word	0x08002d63
 8002a50:	08002d63 	.word	0x08002d63
 8002a54:	08002d63 	.word	0x08002d63
 8002a58:	08002d63 	.word	0x08002d63
 8002a5c:	08002d63 	.word	0x08002d63
 8002a60:	08002d63 	.word	0x08002d63
 8002a64:	08002d63 	.word	0x08002d63
 8002a68:	08002d63 	.word	0x08002d63
 8002a6c:	08002d63 	.word	0x08002d63
 8002a70:	08002d63 	.word	0x08002d63
 8002a74:	08002d63 	.word	0x08002d63
 8002a78:	08002d63 	.word	0x08002d63
 8002a7c:	08002d63 	.word	0x08002d63
 8002a80:	08002d63 	.word	0x08002d63
 8002a84:	08002d63 	.word	0x08002d63
 8002a88:	08002d63 	.word	0x08002d63
 8002a8c:	08002d63 	.word	0x08002d63
 8002a90:	08002ba1 	.word	0x08002ba1
 8002a94:	08002d63 	.word	0x08002d63
 8002a98:	08002d63 	.word	0x08002d63
 8002a9c:	08002d63 	.word	0x08002d63
 8002aa0:	08002d63 	.word	0x08002d63
 8002aa4:	08002d63 	.word	0x08002d63
 8002aa8:	08002d63 	.word	0x08002d63
 8002aac:	08002d63 	.word	0x08002d63
 8002ab0:	08002baf 	.word	0x08002baf
 8002ab4:	08002d63 	.word	0x08002d63
 8002ab8:	08002d63 	.word	0x08002d63
 8002abc:	08002d63 	.word	0x08002d63
 8002ac0:	08002bbd 	.word	0x08002bbd
 8002ac4:	08002d63 	.word	0x08002d63
 8002ac8:	08002d63 	.word	0x08002d63
 8002acc:	08002d63 	.word	0x08002d63
 8002ad0:	08002bcb 	.word	0x08002bcb
 8002ad4:	08002d63 	.word	0x08002d63
 8002ad8:	08002d63 	.word	0x08002d63
 8002adc:	08002d63 	.word	0x08002d63
 8002ae0:	08002d63 	.word	0x08002d63
 8002ae4:	08002d63 	.word	0x08002d63
 8002ae8:	08002d63 	.word	0x08002d63
 8002aec:	08002d63 	.word	0x08002d63
 8002af0:	08002bd9 	.word	0x08002bd9
 8002af4:	08002d63 	.word	0x08002d63
 8002af8:	08002d63 	.word	0x08002d63
 8002afc:	08002d63 	.word	0x08002d63
 8002b00:	08002be7 	.word	0x08002be7
 8002b04:	08002d63 	.word	0x08002d63
 8002b08:	08002d63 	.word	0x08002d63
 8002b0c:	08002d63 	.word	0x08002d63
 8002b10:	08002bf5 	.word	0x08002bf5
 8002b14:	08002d63 	.word	0x08002d63
 8002b18:	08002d63 	.word	0x08002d63
 8002b1c:	08002d63 	.word	0x08002d63
 8002b20:	08002d63 	.word	0x08002d63
 8002b24:	08002d63 	.word	0x08002d63
 8002b28:	08002d63 	.word	0x08002d63
 8002b2c:	08002d63 	.word	0x08002d63
 8002b30:	08002c31 	.word	0x08002c31
 8002b34:	08002d63 	.word	0x08002d63
 8002b38:	08002d63 	.word	0x08002d63
 8002b3c:	08002d63 	.word	0x08002d63
 8002b40:	08002c6d 	.word	0x08002c6d
 8002b44:	08002d63 	.word	0x08002d63
 8002b48:	08002d63 	.word	0x08002d63
 8002b4c:	08002d63 	.word	0x08002d63
 8002b50:	08002ca9 	.word	0x08002ca9
 8002b54:	08002d63 	.word	0x08002d63
 8002b58:	08002d63 	.word	0x08002d63
 8002b5c:	08002d63 	.word	0x08002d63
 8002b60:	08002d63 	.word	0x08002d63
 8002b64:	08002d63 	.word	0x08002d63
 8002b68:	08002d63 	.word	0x08002d63
 8002b6c:	08002d63 	.word	0x08002d63
 8002b70:	08002ce5 	.word	0x08002ce5
 8002b74:	08002d63 	.word	0x08002d63
 8002b78:	08002d63 	.word	0x08002d63
 8002b7c:	08002d63 	.word	0x08002d63
 8002b80:	08002d29 	.word	0x08002d29
	{
	case 0x10: //forced stop
		G_xMy_Data.Direction = Stop ;
 8002b84:	4a64      	ldr	r2, [pc, #400]	; (8002d18 <ProcessingFun+0x360>)
 8002b86:	7813      	ldrb	r3, [r2, #0]
 8002b88:	2108      	movs	r1, #8
 8002b8a:	f361 0303 	bfi	r3, r1, #0, #4
 8002b8e:	7013      	strb	r3, [r2, #0]
		//TODO make it forced
		break;
 8002b90:	e0e7      	b.n	8002d62 <ProcessingFun+0x3aa>
	case 0x20: //normal stop
		G_xMy_Data.Direction = Stop ;
 8002b92:	4a61      	ldr	r2, [pc, #388]	; (8002d18 <ProcessingFun+0x360>)
 8002b94:	7813      	ldrb	r3, [r2, #0]
 8002b96:	2108      	movs	r1, #8
 8002b98:	f361 0303 	bfi	r3, r1, #0, #4
 8002b9c:	7013      	strb	r3, [r2, #0]
		break;
 8002b9e:	e0e0      	b.n	8002d62 <ProcessingFun+0x3aa>
	case 0x40: //turn left extremely
		G_xMy_Data.Direction = Left;
 8002ba0:	4a5d      	ldr	r2, [pc, #372]	; (8002d18 <ProcessingFun+0x360>)
 8002ba2:	7813      	ldrb	r3, [r2, #0]
 8002ba4:	2103      	movs	r1, #3
 8002ba6:	f361 0303 	bfi	r3, r1, #0, #4
 8002baa:	7013      	strb	r3, [r2, #0]
		break;
 8002bac:	e0d9      	b.n	8002d62 <ProcessingFun+0x3aa>
	case 0x48: //turn left normal (forward left)
		G_xMy_Data.Direction = Forward_Left;
 8002bae:	4a5a      	ldr	r2, [pc, #360]	; (8002d18 <ProcessingFun+0x360>)
 8002bb0:	7813      	ldrb	r3, [r2, #0]
 8002bb2:	2105      	movs	r1, #5
 8002bb4:	f361 0303 	bfi	r3, r1, #0, #4
 8002bb8:	7013      	strb	r3, [r2, #0]
		break;
 8002bba:	e0d2      	b.n	8002d62 <ProcessingFun+0x3aa>
	case 0x4c: //turn left slightly
		G_xMy_Data.Direction = Forward_Left;
 8002bbc:	4a56      	ldr	r2, [pc, #344]	; (8002d18 <ProcessingFun+0x360>)
 8002bbe:	7813      	ldrb	r3, [r2, #0]
 8002bc0:	2105      	movs	r1, #5
 8002bc2:	f361 0303 	bfi	r3, r1, #0, #4
 8002bc6:	7013      	strb	r3, [r2, #0]
		//TODO make it slight
		break;
 8002bc8:	e0cb      	b.n	8002d62 <ProcessingFun+0x3aa>
	case 0x50: //turn Right extremely
		G_xMy_Data.Direction = Right;
 8002bca:	4a53      	ldr	r2, [pc, #332]	; (8002d18 <ProcessingFun+0x360>)
 8002bcc:	7813      	ldrb	r3, [r2, #0]
 8002bce:	2102      	movs	r1, #2
 8002bd0:	f361 0303 	bfi	r3, r1, #0, #4
 8002bd4:	7013      	strb	r3, [r2, #0]
		break;
 8002bd6:	e0c4      	b.n	8002d62 <ProcessingFun+0x3aa>
	case 0x58: //turn Right normal (forward Right)
		G_xMy_Data.Direction = Forward_Right;
 8002bd8:	4a4f      	ldr	r2, [pc, #316]	; (8002d18 <ProcessingFun+0x360>)
 8002bda:	7813      	ldrb	r3, [r2, #0]
 8002bdc:	2104      	movs	r1, #4
 8002bde:	f361 0303 	bfi	r3, r1, #0, #4
 8002be2:	7013      	strb	r3, [r2, #0]
		break;
 8002be4:	e0bd      	b.n	8002d62 <ProcessingFun+0x3aa>
	case 0x5c: //turn Right slightly
		G_xMy_Data.Direction = Forward_Right;
 8002be6:	4a4c      	ldr	r2, [pc, #304]	; (8002d18 <ProcessingFun+0x360>)
 8002be8:	7813      	ldrb	r3, [r2, #0]
 8002bea:	2104      	movs	r1, #4
 8002bec:	f361 0303 	bfi	r3, r1, #0, #4
 8002bf0:	7013      	strb	r3, [r2, #0]
		//TODO make it slight
		break;
 8002bf2:	e0b6      	b.n	8002d62 <ProcessingFun+0x3aa>
	case 0x60: //Decrease speed greatly
		//TODO
		if(G_xMy_Data.Speed > 4){
 8002bf4:	4b48      	ldr	r3, [pc, #288]	; (8002d18 <ProcessingFun+0x360>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d90f      	bls.n	8002c22 <ProcessingFun+0x26a>
			G_xMy_Data.Speed -= 4;
 8002c02:	4b45      	ldr	r3, [pc, #276]	; (8002d18 <ProcessingFun+0x360>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3b04      	subs	r3, #4
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	b2d9      	uxtb	r1, r3
 8002c16:	4a40      	ldr	r2, [pc, #256]	; (8002d18 <ProcessingFun+0x360>)
 8002c18:	7813      	ldrb	r3, [r2, #0]
 8002c1a:	f361 1306 	bfi	r3, r1, #4, #3
 8002c1e:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed1;
		}
		break;
 8002c20:	e09f      	b.n	8002d62 <ProcessingFun+0x3aa>
			G_xMy_Data.Speed = Speed1;
 8002c22:	4a3d      	ldr	r2, [pc, #244]	; (8002d18 <ProcessingFun+0x360>)
 8002c24:	7813      	ldrb	r3, [r2, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	f361 1306 	bfi	r3, r1, #4, #3
 8002c2c:	7013      	strb	r3, [r2, #0]
		break;
 8002c2e:	e098      	b.n	8002d62 <ProcessingFun+0x3aa>
	case 0x68: //Decrease speed
		//TODO
		if(G_xMy_Data.Speed > 2){
 8002c30:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <ProcessingFun+0x360>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d90f      	bls.n	8002c5e <ProcessingFun+0x2a6>
			G_xMy_Data.Speed -= 2;
 8002c3e:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <ProcessingFun+0x360>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	3b02      	subs	r3, #2
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	b2d9      	uxtb	r1, r3
 8002c52:	4a31      	ldr	r2, [pc, #196]	; (8002d18 <ProcessingFun+0x360>)
 8002c54:	7813      	ldrb	r3, [r2, #0]
 8002c56:	f361 1306 	bfi	r3, r1, #4, #3
 8002c5a:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed1;
		}
		break;
 8002c5c:	e081      	b.n	8002d62 <ProcessingFun+0x3aa>
			G_xMy_Data.Speed = Speed1;
 8002c5e:	4a2e      	ldr	r2, [pc, #184]	; (8002d18 <ProcessingFun+0x360>)
 8002c60:	7813      	ldrb	r3, [r2, #0]
 8002c62:	2101      	movs	r1, #1
 8002c64:	f361 1306 	bfi	r3, r1, #4, #3
 8002c68:	7013      	strb	r3, [r2, #0]
		break;
 8002c6a:	e07a      	b.n	8002d62 <ProcessingFun+0x3aa>
	case 0x6c: //Decrease speed lightly
		//TODO
		if(G_xMy_Data.Speed > 1){
 8002c6c:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <ProcessingFun+0x360>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d90f      	bls.n	8002c9a <ProcessingFun+0x2e2>
			G_xMy_Data.Speed -= 1;
 8002c7a:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <ProcessingFun+0x360>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	b2d9      	uxtb	r1, r3
 8002c8e:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <ProcessingFun+0x360>)
 8002c90:	7813      	ldrb	r3, [r2, #0]
 8002c92:	f361 1306 	bfi	r3, r1, #4, #3
 8002c96:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Direction = Stop;
		}
		break;
 8002c98:	e063      	b.n	8002d62 <ProcessingFun+0x3aa>
			G_xMy_Data.Direction = Stop;
 8002c9a:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <ProcessingFun+0x360>)
 8002c9c:	7813      	ldrb	r3, [r2, #0]
 8002c9e:	2108      	movs	r1, #8
 8002ca0:	f361 0303 	bfi	r3, r1, #0, #4
 8002ca4:	7013      	strb	r3, [r2, #0]
		break;
 8002ca6:	e05c      	b.n	8002d62 <ProcessingFun+0x3aa>
	case 0x70: //Increase speed greatly
		//TODO
		if(G_xMy_Data.Speed+4 < 8){
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <ProcessingFun+0x360>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	2b07      	cmp	r3, #7
 8002cb6:	dc0f      	bgt.n	8002cd8 <ProcessingFun+0x320>
			G_xMy_Data.Speed += 4;
 8002cb8:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <ProcessingFun+0x360>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	b2d9      	uxtb	r1, r3
 8002ccc:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <ProcessingFun+0x360>)
 8002cce:	7813      	ldrb	r3, [r2, #0]
 8002cd0:	f361 1306 	bfi	r3, r1, #4, #3
 8002cd4:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed7;
		}
		break;
 8002cd6:	e044      	b.n	8002d62 <ProcessingFun+0x3aa>
			G_xMy_Data.Speed = Speed7;
 8002cd8:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <ProcessingFun+0x360>)
 8002cda:	7813      	ldrb	r3, [r2, #0]
 8002cdc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002ce0:	7013      	strb	r3, [r2, #0]
		break;
 8002ce2:	e03e      	b.n	8002d62 <ProcessingFun+0x3aa>
	case 0x78: //Increase speed
		//TODO
		if(G_xMy_Data.Speed+2 < 8){
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <ProcessingFun+0x360>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	3302      	adds	r3, #2
 8002cf0:	2b07      	cmp	r3, #7
 8002cf2:	dc13      	bgt.n	8002d1c <ProcessingFun+0x364>
			G_xMy_Data.Speed += 2;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <ProcessingFun+0x360>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	3302      	adds	r3, #2
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	b2d9      	uxtb	r1, r3
 8002d08:	4a03      	ldr	r2, [pc, #12]	; (8002d18 <ProcessingFun+0x360>)
 8002d0a:	7813      	ldrb	r3, [r2, #0]
 8002d0c:	f361 1306 	bfi	r3, r1, #4, #3
 8002d10:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed7;
		}
		break;
 8002d12:	e026      	b.n	8002d62 <ProcessingFun+0x3aa>
 8002d14:	2000020a 	.word	0x2000020a
 8002d18:	200000fc 	.word	0x200000fc
			G_xMy_Data.Speed = Speed7;
 8002d1c:	4a37      	ldr	r2, [pc, #220]	; (8002dfc <ProcessingFun+0x444>)
 8002d1e:	7813      	ldrb	r3, [r2, #0]
 8002d20:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002d24:	7013      	strb	r3, [r2, #0]
		break;
 8002d26:	e01c      	b.n	8002d62 <ProcessingFun+0x3aa>
	case 0x7c: //Increase speed lightly
		//TODO
		if(G_xMy_Data.Speed != Speed7){
 8002d28:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <ProcessingFun+0x444>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b70      	cmp	r3, #112	; 0x70
 8002d34:	d00f      	beq.n	8002d56 <ProcessingFun+0x39e>
			G_xMy_Data.Speed += 1;
 8002d36:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <ProcessingFun+0x444>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	b2d9      	uxtb	r1, r3
 8002d4a:	4a2c      	ldr	r2, [pc, #176]	; (8002dfc <ProcessingFun+0x444>)
 8002d4c:	7813      	ldrb	r3, [r2, #0]
 8002d4e:	f361 1306 	bfi	r3, r1, #4, #3
 8002d52:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed7;
		}
		break;
 8002d54:	e004      	b.n	8002d60 <ProcessingFun+0x3a8>
			G_xMy_Data.Speed = Speed7;
 8002d56:	4a29      	ldr	r2, [pc, #164]	; (8002dfc <ProcessingFun+0x444>)
 8002d58:	7813      	ldrb	r3, [r2, #0]
 8002d5a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002d5e:	7013      	strb	r3, [r2, #0]
		break;
 8002d60:	bf00      	nop
	}

	G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 8002d62:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <ProcessingFun+0x444>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002d6a:	b2d9      	uxtb	r1, r3
 8002d6c:	4a24      	ldr	r2, [pc, #144]	; (8002e00 <ProcessingFun+0x448>)
 8002d6e:	7813      	ldrb	r3, [r2, #0]
 8002d70:	f361 0303 	bfi	r3, r1, #0, #4
 8002d74:	7013      	strb	r3, [r2, #0]
	G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8002d76:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <ProcessingFun+0x444>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002d7e:	b2d9      	uxtb	r1, r3
 8002d80:	4a1f      	ldr	r2, [pc, #124]	; (8002e00 <ProcessingFun+0x448>)
 8002d82:	7813      	ldrb	r3, [r2, #0]
 8002d84:	f361 1306 	bfi	r3, r1, #4, #3
 8002d88:	7013      	strb	r3, [r2, #0]
	switch(G_xMy_Data.Direction){
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <ProcessingFun+0x444>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d82d      	bhi.n	8002df4 <ProcessingFun+0x43c>
 8002d98:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <ProcessingFun+0x3e8>)
 8002d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9e:	bf00      	nop
 8002da0:	08002dc5 	.word	0x08002dc5
 8002da4:	08002dd1 	.word	0x08002dd1
 8002da8:	08002def 	.word	0x08002def
 8002dac:	08002def 	.word	0x08002def
 8002db0:	08002de3 	.word	0x08002de3
 8002db4:	08002de9 	.word	0x08002de9
 8002db8:	08002dd7 	.word	0x08002dd7
 8002dbc:	08002ddd 	.word	0x08002ddd
 8002dc0:	08002dcb 	.word	0x08002dcb
	case Go:
		APP_voidGoTasks();
 8002dc4:	f7ff fa36 	bl	8002234 <APP_voidGoTasks>
		break;
 8002dc8:	e015      	b.n	8002df6 <ProcessingFun+0x43e>
	case Stop:
		APP_VoidStop();
 8002dca:	f7ff fa1f 	bl	800220c <APP_VoidStop>
		break;
 8002dce:	e012      	b.n	8002df6 <ProcessingFun+0x43e>
	case Back:
		APP_voidBackTasks();
 8002dd0:	f7ff faba 	bl	8002348 <APP_voidBackTasks>
		break;
 8002dd4:	e00f      	b.n	8002df6 <ProcessingFun+0x43e>
	case Backward_Right:
		APP_voidBackward_RightTasks();
 8002dd6:	f7ff fb41 	bl	800245c <APP_voidBackward_RightTasks>
		break;
 8002dda:	e00c      	b.n	8002df6 <ProcessingFun+0x43e>
	case Backward_Left:
		APP_voidBackward_LEFTTasks();
 8002ddc:	f7ff fbc8 	bl	8002570 <APP_voidBackward_LEFTTasks>
		break;
 8002de0:	e009      	b.n	8002df6 <ProcessingFun+0x43e>
	case Forward_Right:
		APP_voidForward_RightTasks();
 8002de2:	f7ff fc55 	bl	8002690 <APP_voidForward_RightTasks>
		break;
 8002de6:	e006      	b.n	8002df6 <ProcessingFun+0x43e>
	case Forward_Left:
		APP_voidForward_LeftTasks();
 8002de8:	f7ff fcdc 	bl	80027a4 <APP_voidForward_LeftTasks>
		break;
 8002dec:	e003      	b.n	8002df6 <ProcessingFun+0x43e>
	case Right:
	case Left:
		APP_voidRight_LeftTasks();
 8002dee:	f7ff fc49 	bl	8002684 <APP_voidRight_LeftTasks>
		break;
 8002df2:	e000      	b.n	8002df6 <ProcessingFun+0x43e>
	default:
		//do nothing
		break;
 8002df4:	bf00      	nop
	}
	return;
 8002df6:	bf00      	nop

}
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200000fc 	.word	0x200000fc
 8002e00:	20000104 	.word	0x20000104

08002e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e14:	e7fe      	b.n	8002e14 <HardFault_Handler+0x4>

08002e16 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e1a:	e7fe      	b.n	8002e1a <MemManage_Handler+0x4>

08002e1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e20:	e7fe      	b.n	8002e20 <BusFault_Handler+0x4>

08002e22 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e26:	e7fe      	b.n	8002e26 <UsageFault_Handler+0x4>

08002e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e58:	480c      	ldr	r0, [pc, #48]	; (8002e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e5a:	490d      	ldr	r1, [pc, #52]	; (8002e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e60:	e002      	b.n	8002e68 <LoopCopyDataInit>

08002e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e66:	3304      	adds	r3, #4

08002e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e6c:	d3f9      	bcc.n	8002e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e70:	4c0a      	ldr	r4, [pc, #40]	; (8002e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e74:	e001      	b.n	8002e7a <LoopFillZerobss>

08002e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e78:	3204      	adds	r2, #4

08002e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e7c:	d3fb      	bcc.n	8002e76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e7e:	f7ff ffe5 	bl	8002e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e82:	f000 f80f 	bl	8002ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e86:	f7ff f923 	bl	80020d0 <main>
  bx lr
 8002e8a:	4770      	bx	lr
  ldr r0, =_sdata
 8002e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e90:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002e94:	08002f0c 	.word	0x08002f0c
  ldr r2, =_sbss
 8002e98:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8002e9c:	2000020c 	.word	0x2000020c

08002ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ea0:	e7fe      	b.n	8002ea0 <ADC1_2_IRQHandler>
	...

08002ea4 <__libc_init_array>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	2500      	movs	r5, #0
 8002ea8:	4e0c      	ldr	r6, [pc, #48]	; (8002edc <__libc_init_array+0x38>)
 8002eaa:	4c0d      	ldr	r4, [pc, #52]	; (8002ee0 <__libc_init_array+0x3c>)
 8002eac:	1ba4      	subs	r4, r4, r6
 8002eae:	10a4      	asrs	r4, r4, #2
 8002eb0:	42a5      	cmp	r5, r4
 8002eb2:	d109      	bne.n	8002ec8 <__libc_init_array+0x24>
 8002eb4:	f000 f81a 	bl	8002eec <_init>
 8002eb8:	2500      	movs	r5, #0
 8002eba:	4e0a      	ldr	r6, [pc, #40]	; (8002ee4 <__libc_init_array+0x40>)
 8002ebc:	4c0a      	ldr	r4, [pc, #40]	; (8002ee8 <__libc_init_array+0x44>)
 8002ebe:	1ba4      	subs	r4, r4, r6
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	42a5      	cmp	r5, r4
 8002ec4:	d105      	bne.n	8002ed2 <__libc_init_array+0x2e>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ecc:	4798      	blx	r3
 8002ece:	3501      	adds	r5, #1
 8002ed0:	e7ee      	b.n	8002eb0 <__libc_init_array+0xc>
 8002ed2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ed6:	4798      	blx	r3
 8002ed8:	3501      	adds	r5, #1
 8002eda:	e7f2      	b.n	8002ec2 <__libc_init_array+0x1e>
 8002edc:	08002f04 	.word	0x08002f04
 8002ee0:	08002f04 	.word	0x08002f04
 8002ee4:	08002f04 	.word	0x08002f04
 8002ee8:	08002f08 	.word	0x08002f08

08002eec <_init>:
 8002eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eee:	bf00      	nop
 8002ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef2:	bc08      	pop	{r3}
 8002ef4:	469e      	mov	lr, r3
 8002ef6:	4770      	bx	lr

08002ef8 <_fini>:
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efa:	bf00      	nop
 8002efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efe:	bc08      	pop	{r3}
 8002f00:	469e      	mov	lr, r3
 8002f02:	4770      	bx	lr
