
bluebil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a88  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002b94  08002b94  000040cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002b94  08002b94  000040cc  2**0
                  CONTENTS
  4 .ARM          00000000  08002b94  08002b94  000040cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b94  08002b94  000040cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b94  08002b94  00003b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b98  08002b98  00003b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08002b9c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200000cc  08002c68  000040cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08002c68  000041dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000040cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000260e  00000000  00000000  000040f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fe0  00000000  00000000  00006703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000450  00000000  00000000  000076e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000310  00000000  00000000  00007b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002261  00000000  00000000  00007e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000032bc  00000000  00000000  0000a0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d6e  00000000  00000000  0000d365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000910d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e48  00000000  00000000  00091118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00091f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b7c 	.word	0x08002b7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	08002b7c 	.word	0x08002b7c

0800014c <EXTI0_IRQHandler>:
	EXTI0_CallBack = ptr ;
	
}	

void EXTI0_IRQHandler(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 8000150:	4b05      	ldr	r3, [pc, #20]	@ (8000168 <EXTI0_IRQHandler+0x1c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4798      	blx	r3
	/*	Clear pending Bit For EXTI0		*/
	SET_BIT(EXTI -> PR , 0);	
 8000156:	4b05      	ldr	r3, [pc, #20]	@ (800016c <EXTI0_IRQHandler+0x20>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a04      	ldr	r2, [pc, #16]	@ (800016c <EXTI0_IRQHandler+0x20>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
}	
 8000162:	bf00      	nop
 8000164:	bd80      	pop	{r7, pc}
 8000166:	bf00      	nop
 8000168:	200000e8 	.word	0x200000e8
 800016c:	40010400 	.word	0x40010400

08000170 <GPIO_voidSetPinMode>:
					
}
void  GPIO_VoidDeInit();

u8 GPIO_voidSetPinMode(u8 copy_u8portID,u8 copy_u8PinID,u8 copy_u8Mode)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
	u8 lacal_u8ErrorState = STD_TYPE_OK;
 8000182:	2301      	movs	r3, #1
 8000184:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15 && copy_u8Mode <= GPIO_OUTPUT_50M_AF_OD)
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b07      	cmp	r3, #7
 800018a:	f200 817a 	bhi.w	8000482 <GPIO_voidSetPinMode+0x312>
 800018e:	79bb      	ldrb	r3, [r7, #6]
 8000190:	2b0f      	cmp	r3, #15
 8000192:	f200 8176 	bhi.w	8000482 <GPIO_voidSetPinMode+0x312>
 8000196:	797b      	ldrb	r3, [r7, #5]
 8000198:	2b0f      	cmp	r3, #15
 800019a:	f200 8172 	bhi.w	8000482 <GPIO_voidSetPinMode+0x312>
	{
		switch(copy_u8portID)
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	3b01      	subs	r3, #1
 80001a2:	2b06      	cmp	r3, #6
 80001a4:	f200 816f 	bhi.w	8000486 <GPIO_voidSetPinMode+0x316>
 80001a8:	a201      	add	r2, pc, #4	@ (adr r2, 80001b0 <GPIO_voidSetPinMode+0x40>)
 80001aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ae:	bf00      	nop
 80001b0:	080001cd 	.word	0x080001cd
 80001b4:	0800022d 	.word	0x0800022d
 80001b8:	0800028d 	.word	0x0800028d
 80001bc:	080002ed 	.word	0x080002ed
 80001c0:	0800034d 	.word	0x0800034d
 80001c4:	080003ab 	.word	0x080003ab
 80001c8:	08000409 	.word	0x08000409
		{
			case GPIO_PORTA: 
				if(copy_u8PinID<=7)
 80001cc:	79bb      	ldrb	r3, [r7, #6]
 80001ce:	2b07      	cmp	r3, #7
 80001d0:	d812      	bhi.n	80001f8 <GPIO_voidSetPinMode+0x88>
				{
					SET_4BIT_Val(GPIOA->CRL,copy_u8PinID*4,copy_u8Mode);
 80001d2:	4bb0      	ldr	r3, [pc, #704]	@ (8000494 <GPIO_voidSetPinMode+0x324>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	79ba      	ldrb	r2, [r7, #6]
 80001d8:	0092      	lsls	r2, r2, #2
 80001da:	210f      	movs	r1, #15
 80001dc:	fa01 f202 	lsl.w	r2, r1, r2
 80001e0:	43d2      	mvns	r2, r2
 80001e2:	4013      	ands	r3, r2
 80001e4:	7979      	ldrb	r1, [r7, #5]
 80001e6:	79ba      	ldrb	r2, [r7, #6]
 80001e8:	0092      	lsls	r2, r2, #2
 80001ea:	fa01 f202 	lsl.w	r2, r1, r2
 80001ee:	4611      	mov	r1, r2
 80001f0:	4aa8      	ldr	r2, [pc, #672]	@ (8000494 <GPIO_voidSetPinMode+0x324>)
 80001f2:	430b      	orrs	r3, r1
 80001f4:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOA->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 80001f6:	e136      	b.n	8000466 <GPIO_voidSetPinMode+0x2f6>
				else if(copy_u8PinID <=15)
 80001f8:	79bb      	ldrb	r3, [r7, #6]
 80001fa:	2b0f      	cmp	r3, #15
 80001fc:	f200 8133 	bhi.w	8000466 <GPIO_voidSetPinMode+0x2f6>
					copy_u8PinID-=8;
 8000200:	79bb      	ldrb	r3, [r7, #6]
 8000202:	3b08      	subs	r3, #8
 8000204:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOA->CRH,copy_u8PinID*4,copy_u8Mode);
 8000206:	4ba3      	ldr	r3, [pc, #652]	@ (8000494 <GPIO_voidSetPinMode+0x324>)
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	79ba      	ldrb	r2, [r7, #6]
 800020c:	0092      	lsls	r2, r2, #2
 800020e:	210f      	movs	r1, #15
 8000210:	fa01 f202 	lsl.w	r2, r1, r2
 8000214:	43d2      	mvns	r2, r2
 8000216:	4013      	ands	r3, r2
 8000218:	7979      	ldrb	r1, [r7, #5]
 800021a:	79ba      	ldrb	r2, [r7, #6]
 800021c:	0092      	lsls	r2, r2, #2
 800021e:	fa01 f202 	lsl.w	r2, r1, r2
 8000222:	4611      	mov	r1, r2
 8000224:	4a9b      	ldr	r2, [pc, #620]	@ (8000494 <GPIO_voidSetPinMode+0x324>)
 8000226:	430b      	orrs	r3, r1
 8000228:	6053      	str	r3, [r2, #4]
				break;
 800022a:	e11c      	b.n	8000466 <GPIO_voidSetPinMode+0x2f6>
			case GPIO_PORTB: 
				if(copy_u8PinID<=7)
 800022c:	79bb      	ldrb	r3, [r7, #6]
 800022e:	2b07      	cmp	r3, #7
 8000230:	d812      	bhi.n	8000258 <GPIO_voidSetPinMode+0xe8>
				{
					SET_4BIT_Val(GPIOB->CRL,copy_u8PinID*4,copy_u8Mode);
 8000232:	4b99      	ldr	r3, [pc, #612]	@ (8000498 <GPIO_voidSetPinMode+0x328>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	79ba      	ldrb	r2, [r7, #6]
 8000238:	0092      	lsls	r2, r2, #2
 800023a:	210f      	movs	r1, #15
 800023c:	fa01 f202 	lsl.w	r2, r1, r2
 8000240:	43d2      	mvns	r2, r2
 8000242:	4013      	ands	r3, r2
 8000244:	7979      	ldrb	r1, [r7, #5]
 8000246:	79ba      	ldrb	r2, [r7, #6]
 8000248:	0092      	lsls	r2, r2, #2
 800024a:	fa01 f202 	lsl.w	r2, r1, r2
 800024e:	4611      	mov	r1, r2
 8000250:	4a91      	ldr	r2, [pc, #580]	@ (8000498 <GPIO_voidSetPinMode+0x328>)
 8000252:	430b      	orrs	r3, r1
 8000254:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOB->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000256:	e108      	b.n	800046a <GPIO_voidSetPinMode+0x2fa>
				else if(copy_u8PinID <=15)
 8000258:	79bb      	ldrb	r3, [r7, #6]
 800025a:	2b0f      	cmp	r3, #15
 800025c:	f200 8105 	bhi.w	800046a <GPIO_voidSetPinMode+0x2fa>
					copy_u8PinID-=8;
 8000260:	79bb      	ldrb	r3, [r7, #6]
 8000262:	3b08      	subs	r3, #8
 8000264:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOB->CRH,copy_u8PinID*4,copy_u8Mode);
 8000266:	4b8c      	ldr	r3, [pc, #560]	@ (8000498 <GPIO_voidSetPinMode+0x328>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	79ba      	ldrb	r2, [r7, #6]
 800026c:	0092      	lsls	r2, r2, #2
 800026e:	210f      	movs	r1, #15
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	43d2      	mvns	r2, r2
 8000276:	4013      	ands	r3, r2
 8000278:	7979      	ldrb	r1, [r7, #5]
 800027a:	79ba      	ldrb	r2, [r7, #6]
 800027c:	0092      	lsls	r2, r2, #2
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	4611      	mov	r1, r2
 8000284:	4a84      	ldr	r2, [pc, #528]	@ (8000498 <GPIO_voidSetPinMode+0x328>)
 8000286:	430b      	orrs	r3, r1
 8000288:	6053      	str	r3, [r2, #4]
				break;
 800028a:	e0ee      	b.n	800046a <GPIO_voidSetPinMode+0x2fa>
			case GPIO_PORTC: 
				if(copy_u8PinID<=7)
 800028c:	79bb      	ldrb	r3, [r7, #6]
 800028e:	2b07      	cmp	r3, #7
 8000290:	d812      	bhi.n	80002b8 <GPIO_voidSetPinMode+0x148>
				{
					SET_4BIT_Val(GPIOC->CRL,copy_u8PinID*4,copy_u8Mode);
 8000292:	4b82      	ldr	r3, [pc, #520]	@ (800049c <GPIO_voidSetPinMode+0x32c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79ba      	ldrb	r2, [r7, #6]
 8000298:	0092      	lsls	r2, r2, #2
 800029a:	210f      	movs	r1, #15
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	43d2      	mvns	r2, r2
 80002a2:	4013      	ands	r3, r2
 80002a4:	7979      	ldrb	r1, [r7, #5]
 80002a6:	79ba      	ldrb	r2, [r7, #6]
 80002a8:	0092      	lsls	r2, r2, #2
 80002aa:	fa01 f202 	lsl.w	r2, r1, r2
 80002ae:	4611      	mov	r1, r2
 80002b0:	4a7a      	ldr	r2, [pc, #488]	@ (800049c <GPIO_voidSetPinMode+0x32c>)
 80002b2:	430b      	orrs	r3, r1
 80002b4:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOC->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 80002b6:	e0da      	b.n	800046e <GPIO_voidSetPinMode+0x2fe>
				else if(copy_u8PinID <=15)
 80002b8:	79bb      	ldrb	r3, [r7, #6]
 80002ba:	2b0f      	cmp	r3, #15
 80002bc:	f200 80d7 	bhi.w	800046e <GPIO_voidSetPinMode+0x2fe>
					copy_u8PinID-=8;
 80002c0:	79bb      	ldrb	r3, [r7, #6]
 80002c2:	3b08      	subs	r3, #8
 80002c4:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOC->CRH,copy_u8PinID*4,copy_u8Mode);
 80002c6:	4b75      	ldr	r3, [pc, #468]	@ (800049c <GPIO_voidSetPinMode+0x32c>)
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	79ba      	ldrb	r2, [r7, #6]
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	210f      	movs	r1, #15
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	43d2      	mvns	r2, r2
 80002d6:	4013      	ands	r3, r2
 80002d8:	7979      	ldrb	r1, [r7, #5]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	0092      	lsls	r2, r2, #2
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	4611      	mov	r1, r2
 80002e4:	4a6d      	ldr	r2, [pc, #436]	@ (800049c <GPIO_voidSetPinMode+0x32c>)
 80002e6:	430b      	orrs	r3, r1
 80002e8:	6053      	str	r3, [r2, #4]
				break;
 80002ea:	e0c0      	b.n	800046e <GPIO_voidSetPinMode+0x2fe>
			case GPIO_PORTD: 
				if(copy_u8PinID<=7)
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	2b07      	cmp	r3, #7
 80002f0:	d812      	bhi.n	8000318 <GPIO_voidSetPinMode+0x1a8>
				{
					SET_4BIT_Val(GPIOD->CRL,copy_u8PinID*4,copy_u8Mode);
 80002f2:	4b6b      	ldr	r3, [pc, #428]	@ (80004a0 <GPIO_voidSetPinMode+0x330>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	210f      	movs	r1, #15
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	43d2      	mvns	r2, r2
 8000302:	4013      	ands	r3, r2
 8000304:	7979      	ldrb	r1, [r7, #5]
 8000306:	79ba      	ldrb	r2, [r7, #6]
 8000308:	0092      	lsls	r2, r2, #2
 800030a:	fa01 f202 	lsl.w	r2, r1, r2
 800030e:	4611      	mov	r1, r2
 8000310:	4a63      	ldr	r2, [pc, #396]	@ (80004a0 <GPIO_voidSetPinMode+0x330>)
 8000312:	430b      	orrs	r3, r1
 8000314:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOD->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000316:	e0ac      	b.n	8000472 <GPIO_voidSetPinMode+0x302>
				else if(copy_u8PinID <=15)
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	2b0f      	cmp	r3, #15
 800031c:	f200 80a9 	bhi.w	8000472 <GPIO_voidSetPinMode+0x302>
					copy_u8PinID-=8;
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	3b08      	subs	r3, #8
 8000324:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOD->CRH,copy_u8PinID*4,copy_u8Mode);
 8000326:	4b5e      	ldr	r3, [pc, #376]	@ (80004a0 <GPIO_voidSetPinMode+0x330>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	79ba      	ldrb	r2, [r7, #6]
 800032c:	0092      	lsls	r2, r2, #2
 800032e:	210f      	movs	r1, #15
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	43d2      	mvns	r2, r2
 8000336:	4013      	ands	r3, r2
 8000338:	7979      	ldrb	r1, [r7, #5]
 800033a:	79ba      	ldrb	r2, [r7, #6]
 800033c:	0092      	lsls	r2, r2, #2
 800033e:	fa01 f202 	lsl.w	r2, r1, r2
 8000342:	4611      	mov	r1, r2
 8000344:	4a56      	ldr	r2, [pc, #344]	@ (80004a0 <GPIO_voidSetPinMode+0x330>)
 8000346:	430b      	orrs	r3, r1
 8000348:	6053      	str	r3, [r2, #4]
				break;
 800034a:	e092      	b.n	8000472 <GPIO_voidSetPinMode+0x302>
			case GPIO_PORTE: 
				if(copy_u8PinID<=7)
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	2b07      	cmp	r3, #7
 8000350:	d812      	bhi.n	8000378 <GPIO_voidSetPinMode+0x208>
				{
					SET_4BIT_Val(GPIOE->CRL,copy_u8PinID*4,copy_u8Mode);
 8000352:	4b54      	ldr	r3, [pc, #336]	@ (80004a4 <GPIO_voidSetPinMode+0x334>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	79ba      	ldrb	r2, [r7, #6]
 8000358:	0092      	lsls	r2, r2, #2
 800035a:	210f      	movs	r1, #15
 800035c:	fa01 f202 	lsl.w	r2, r1, r2
 8000360:	43d2      	mvns	r2, r2
 8000362:	4013      	ands	r3, r2
 8000364:	7979      	ldrb	r1, [r7, #5]
 8000366:	79ba      	ldrb	r2, [r7, #6]
 8000368:	0092      	lsls	r2, r2, #2
 800036a:	fa01 f202 	lsl.w	r2, r1, r2
 800036e:	4611      	mov	r1, r2
 8000370:	4a4c      	ldr	r2, [pc, #304]	@ (80004a4 <GPIO_voidSetPinMode+0x334>)
 8000372:	430b      	orrs	r3, r1
 8000374:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOE->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000376:	e07e      	b.n	8000476 <GPIO_voidSetPinMode+0x306>
				else if(copy_u8PinID <=15)
 8000378:	79bb      	ldrb	r3, [r7, #6]
 800037a:	2b0f      	cmp	r3, #15
 800037c:	d87b      	bhi.n	8000476 <GPIO_voidSetPinMode+0x306>
					copy_u8PinID-=8;
 800037e:	79bb      	ldrb	r3, [r7, #6]
 8000380:	3b08      	subs	r3, #8
 8000382:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOE->CRH,copy_u8PinID*4,copy_u8Mode);
 8000384:	4b47      	ldr	r3, [pc, #284]	@ (80004a4 <GPIO_voidSetPinMode+0x334>)
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	79ba      	ldrb	r2, [r7, #6]
 800038a:	0092      	lsls	r2, r2, #2
 800038c:	210f      	movs	r1, #15
 800038e:	fa01 f202 	lsl.w	r2, r1, r2
 8000392:	43d2      	mvns	r2, r2
 8000394:	4013      	ands	r3, r2
 8000396:	7979      	ldrb	r1, [r7, #5]
 8000398:	79ba      	ldrb	r2, [r7, #6]
 800039a:	0092      	lsls	r2, r2, #2
 800039c:	fa01 f202 	lsl.w	r2, r1, r2
 80003a0:	4611      	mov	r1, r2
 80003a2:	4a40      	ldr	r2, [pc, #256]	@ (80004a4 <GPIO_voidSetPinMode+0x334>)
 80003a4:	430b      	orrs	r3, r1
 80003a6:	6053      	str	r3, [r2, #4]
				break;
 80003a8:	e065      	b.n	8000476 <GPIO_voidSetPinMode+0x306>
		    case GPIO_PORTF: 
				if(copy_u8PinID<=7)
 80003aa:	79bb      	ldrb	r3, [r7, #6]
 80003ac:	2b07      	cmp	r3, #7
 80003ae:	d812      	bhi.n	80003d6 <GPIO_voidSetPinMode+0x266>
				{
					SET_4BIT_Val(GPIOF->CRL,copy_u8PinID*4,copy_u8Mode);
 80003b0:	4b3d      	ldr	r3, [pc, #244]	@ (80004a8 <GPIO_voidSetPinMode+0x338>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	79ba      	ldrb	r2, [r7, #6]
 80003b6:	0092      	lsls	r2, r2, #2
 80003b8:	210f      	movs	r1, #15
 80003ba:	fa01 f202 	lsl.w	r2, r1, r2
 80003be:	43d2      	mvns	r2, r2
 80003c0:	4013      	ands	r3, r2
 80003c2:	7979      	ldrb	r1, [r7, #5]
 80003c4:	79ba      	ldrb	r2, [r7, #6]
 80003c6:	0092      	lsls	r2, r2, #2
 80003c8:	fa01 f202 	lsl.w	r2, r1, r2
 80003cc:	4611      	mov	r1, r2
 80003ce:	4a36      	ldr	r2, [pc, #216]	@ (80004a8 <GPIO_voidSetPinMode+0x338>)
 80003d0:	430b      	orrs	r3, r1
 80003d2:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOF->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 80003d4:	e051      	b.n	800047a <GPIO_voidSetPinMode+0x30a>
				else if(copy_u8PinID <=15)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	2b0f      	cmp	r3, #15
 80003da:	d84e      	bhi.n	800047a <GPIO_voidSetPinMode+0x30a>
					copy_u8PinID-=8;
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	3b08      	subs	r3, #8
 80003e0:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOF->CRH,copy_u8PinID*4,copy_u8Mode);
 80003e2:	4b31      	ldr	r3, [pc, #196]	@ (80004a8 <GPIO_voidSetPinMode+0x338>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	0092      	lsls	r2, r2, #2
 80003ea:	210f      	movs	r1, #15
 80003ec:	fa01 f202 	lsl.w	r2, r1, r2
 80003f0:	43d2      	mvns	r2, r2
 80003f2:	4013      	ands	r3, r2
 80003f4:	7979      	ldrb	r1, [r7, #5]
 80003f6:	79ba      	ldrb	r2, [r7, #6]
 80003f8:	0092      	lsls	r2, r2, #2
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	4611      	mov	r1, r2
 8000400:	4a29      	ldr	r2, [pc, #164]	@ (80004a8 <GPIO_voidSetPinMode+0x338>)
 8000402:	430b      	orrs	r3, r1
 8000404:	6053      	str	r3, [r2, #4]
				break;
 8000406:	e038      	b.n	800047a <GPIO_voidSetPinMode+0x30a>
			case GPIO_PORTG: 
				if(copy_u8PinID<=7)
 8000408:	79bb      	ldrb	r3, [r7, #6]
 800040a:	2b07      	cmp	r3, #7
 800040c:	d812      	bhi.n	8000434 <GPIO_voidSetPinMode+0x2c4>
				{
					SET_4BIT_Val(GPIOG->CRL,copy_u8PinID*4,copy_u8Mode);
 800040e:	4b27      	ldr	r3, [pc, #156]	@ (80004ac <GPIO_voidSetPinMode+0x33c>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	79ba      	ldrb	r2, [r7, #6]
 8000414:	0092      	lsls	r2, r2, #2
 8000416:	210f      	movs	r1, #15
 8000418:	fa01 f202 	lsl.w	r2, r1, r2
 800041c:	43d2      	mvns	r2, r2
 800041e:	4013      	ands	r3, r2
 8000420:	7979      	ldrb	r1, [r7, #5]
 8000422:	79ba      	ldrb	r2, [r7, #6]
 8000424:	0092      	lsls	r2, r2, #2
 8000426:	fa01 f202 	lsl.w	r2, r1, r2
 800042a:	4611      	mov	r1, r2
 800042c:	4a1f      	ldr	r2, [pc, #124]	@ (80004ac <GPIO_voidSetPinMode+0x33c>)
 800042e:	430b      	orrs	r3, r1
 8000430:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOG->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000432:	e024      	b.n	800047e <GPIO_voidSetPinMode+0x30e>
				else if(copy_u8PinID <=15)
 8000434:	79bb      	ldrb	r3, [r7, #6]
 8000436:	2b0f      	cmp	r3, #15
 8000438:	d821      	bhi.n	800047e <GPIO_voidSetPinMode+0x30e>
					copy_u8PinID-=8;
 800043a:	79bb      	ldrb	r3, [r7, #6]
 800043c:	3b08      	subs	r3, #8
 800043e:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOG->CRH,copy_u8PinID*4,copy_u8Mode);
 8000440:	4b1a      	ldr	r3, [pc, #104]	@ (80004ac <GPIO_voidSetPinMode+0x33c>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	79ba      	ldrb	r2, [r7, #6]
 8000446:	0092      	lsls	r2, r2, #2
 8000448:	210f      	movs	r1, #15
 800044a:	fa01 f202 	lsl.w	r2, r1, r2
 800044e:	43d2      	mvns	r2, r2
 8000450:	4013      	ands	r3, r2
 8000452:	7979      	ldrb	r1, [r7, #5]
 8000454:	79ba      	ldrb	r2, [r7, #6]
 8000456:	0092      	lsls	r2, r2, #2
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	4611      	mov	r1, r2
 800045e:	4a13      	ldr	r2, [pc, #76]	@ (80004ac <GPIO_voidSetPinMode+0x33c>)
 8000460:	430b      	orrs	r3, r1
 8000462:	6053      	str	r3, [r2, #4]
				break;
 8000464:	e00b      	b.n	800047e <GPIO_voidSetPinMode+0x30e>
				break;
 8000466:	bf00      	nop
 8000468:	e00d      	b.n	8000486 <GPIO_voidSetPinMode+0x316>
				break;
 800046a:	bf00      	nop
 800046c:	e00b      	b.n	8000486 <GPIO_voidSetPinMode+0x316>
				break;
 800046e:	bf00      	nop
 8000470:	e009      	b.n	8000486 <GPIO_voidSetPinMode+0x316>
				break;
 8000472:	bf00      	nop
 8000474:	e007      	b.n	8000486 <GPIO_voidSetPinMode+0x316>
				break;
 8000476:	bf00      	nop
 8000478:	e005      	b.n	8000486 <GPIO_voidSetPinMode+0x316>
				break;
 800047a:	bf00      	nop
 800047c:	e003      	b.n	8000486 <GPIO_voidSetPinMode+0x316>
				break;
 800047e:	bf00      	nop
		switch(copy_u8portID)
 8000480:	e001      	b.n	8000486 <GPIO_voidSetPinMode+0x316>
		}
	}
	else 
		lacal_u8ErrorState = STD_TYPE_NOK;
 8000482:	2300      	movs	r3, #0
 8000484:	73fb      	strb	r3, [r7, #15]
	return lacal_u8ErrorState;
 8000486:	7bfb      	ldrb	r3, [r7, #15]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40010800 	.word	0x40010800
 8000498:	40010c00 	.word	0x40010c00
 800049c:	40011000 	.word	0x40011000
 80004a0:	40011400 	.word	0x40011400
 80004a4:	40011800 	.word	0x40011800
 80004a8:	40011c00 	.word	0x40011c00
 80004ac:	40012000 	.word	0x40012000

080004b0 <GPIO_voidSetPinValue>:


u8 GPIO_voidSetPinValue(u8 copy_u8portID,u8 copy_u8PinID,u8 copy_u8PinValue)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
 80004ba:	460b      	mov	r3, r1
 80004bc:	71bb      	strb	r3, [r7, #6]
 80004be:	4613      	mov	r3, r2
 80004c0:	717b      	strb	r3, [r7, #5]
	u8 lacal_u8ErrorState = STD_TYPE_OK;
 80004c2:	2301      	movs	r3, #1
 80004c4:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15 && (copy_u8PinValue == 1 || copy_u8PinValue ==0 ))
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b07      	cmp	r3, #7
 80004ca:	f200 80a7 	bhi.w	800061c <GPIO_voidSetPinValue+0x16c>
 80004ce:	79bb      	ldrb	r3, [r7, #6]
 80004d0:	2b0f      	cmp	r3, #15
 80004d2:	f200 80a3 	bhi.w	800061c <GPIO_voidSetPinValue+0x16c>
 80004d6:	797b      	ldrb	r3, [r7, #5]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d003      	beq.n	80004e4 <GPIO_voidSetPinValue+0x34>
 80004dc:	797b      	ldrb	r3, [r7, #5]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	f040 809c 	bne.w	800061c <GPIO_voidSetPinValue+0x16c>
	{
		switch(copy_u8portID)
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	2b06      	cmp	r3, #6
 80004ea:	f200 8099 	bhi.w	8000620 <GPIO_voidSetPinValue+0x170>
 80004ee:	a201      	add	r2, pc, #4	@ (adr r2, 80004f4 <GPIO_voidSetPinValue+0x44>)
 80004f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f4:	08000511 	.word	0x08000511
 80004f8:	08000537 	.word	0x08000537
 80004fc:	0800055d 	.word	0x0800055d
 8000500:	08000583 	.word	0x08000583
 8000504:	080005a9 	.word	0x080005a9
 8000508:	080005cf 	.word	0x080005cf
 800050c:	080005f5 	.word	0x080005f5
		{
			case GPIO_PORTA:
				switch(copy_u8PinValue){
 8000510:	797b      	ldrb	r3, [r7, #5]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <GPIO_voidSetPinValue+0x6c>
 8000516:	2b01      	cmp	r3, #1
 8000518:	d006      	beq.n	8000528 <GPIO_voidSetPinValue+0x78>
				case 0:WRITE_BIT(GPIOA->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOA->BSRR,copy_u8PinID);break;}
				break;
 800051a:	e07e      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOA->BRR,copy_u8PinID);break;
 800051c:	79bb      	ldrb	r3, [r7, #6]
 800051e:	2201      	movs	r2, #1
 8000520:	409a      	lsls	r2, r3
 8000522:	4b42      	ldr	r3, [pc, #264]	@ (800062c <GPIO_voidSetPinValue+0x17c>)
 8000524:	615a      	str	r2, [r3, #20]
 8000526:	e005      	b.n	8000534 <GPIO_voidSetPinValue+0x84>
				case 1:WRITE_BIT(GPIOA->BSRR,copy_u8PinID);break;}
 8000528:	79bb      	ldrb	r3, [r7, #6]
 800052a:	2201      	movs	r2, #1
 800052c:	409a      	lsls	r2, r3
 800052e:	4b3f      	ldr	r3, [pc, #252]	@ (800062c <GPIO_voidSetPinValue+0x17c>)
 8000530:	611a      	str	r2, [r3, #16]
 8000532:	bf00      	nop
				break;
 8000534:	e071      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTB:
				switch(copy_u8PinValue){
 8000536:	797b      	ldrb	r3, [r7, #5]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <GPIO_voidSetPinValue+0x92>
 800053c:	2b01      	cmp	r3, #1
 800053e:	d006      	beq.n	800054e <GPIO_voidSetPinValue+0x9e>
				case 0:WRITE_BIT(GPIOB->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOB->BSRR,copy_u8PinID);break;}
				break;
 8000540:	e06b      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOB->BRR,copy_u8PinID);break;
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	2201      	movs	r2, #1
 8000546:	409a      	lsls	r2, r3
 8000548:	4b39      	ldr	r3, [pc, #228]	@ (8000630 <GPIO_voidSetPinValue+0x180>)
 800054a:	615a      	str	r2, [r3, #20]
 800054c:	e005      	b.n	800055a <GPIO_voidSetPinValue+0xaa>
				case 1:WRITE_BIT(GPIOB->BSRR,copy_u8PinID);break;}
 800054e:	79bb      	ldrb	r3, [r7, #6]
 8000550:	2201      	movs	r2, #1
 8000552:	409a      	lsls	r2, r3
 8000554:	4b36      	ldr	r3, [pc, #216]	@ (8000630 <GPIO_voidSetPinValue+0x180>)
 8000556:	611a      	str	r2, [r3, #16]
 8000558:	bf00      	nop
				break;
 800055a:	e05e      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTC:
				switch(copy_u8PinValue){
 800055c:	797b      	ldrb	r3, [r7, #5]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d002      	beq.n	8000568 <GPIO_voidSetPinValue+0xb8>
 8000562:	2b01      	cmp	r3, #1
 8000564:	d006      	beq.n	8000574 <GPIO_voidSetPinValue+0xc4>
				case 0:WRITE_BIT(GPIOC->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOC->BSRR,copy_u8PinID);break;}
				break;
 8000566:	e058      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOC->BRR,copy_u8PinID);break;
 8000568:	79bb      	ldrb	r3, [r7, #6]
 800056a:	2201      	movs	r2, #1
 800056c:	409a      	lsls	r2, r3
 800056e:	4b31      	ldr	r3, [pc, #196]	@ (8000634 <GPIO_voidSetPinValue+0x184>)
 8000570:	615a      	str	r2, [r3, #20]
 8000572:	e005      	b.n	8000580 <GPIO_voidSetPinValue+0xd0>
				case 1:WRITE_BIT(GPIOC->BSRR,copy_u8PinID);break;}
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	2201      	movs	r2, #1
 8000578:	409a      	lsls	r2, r3
 800057a:	4b2e      	ldr	r3, [pc, #184]	@ (8000634 <GPIO_voidSetPinValue+0x184>)
 800057c:	611a      	str	r2, [r3, #16]
 800057e:	bf00      	nop
				break;
 8000580:	e04b      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTD:
				switch(copy_u8PinValue){
 8000582:	797b      	ldrb	r3, [r7, #5]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d002      	beq.n	800058e <GPIO_voidSetPinValue+0xde>
 8000588:	2b01      	cmp	r3, #1
 800058a:	d006      	beq.n	800059a <GPIO_voidSetPinValue+0xea>
				case 0:WRITE_BIT(GPIOD->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOD->BSRR,copy_u8PinID);break;}
				break;
 800058c:	e045      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOD->BRR,copy_u8PinID);break;
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	2201      	movs	r2, #1
 8000592:	409a      	lsls	r2, r3
 8000594:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <GPIO_voidSetPinValue+0x188>)
 8000596:	615a      	str	r2, [r3, #20]
 8000598:	e005      	b.n	80005a6 <GPIO_voidSetPinValue+0xf6>
				case 1:WRITE_BIT(GPIOD->BSRR,copy_u8PinID);break;}
 800059a:	79bb      	ldrb	r3, [r7, #6]
 800059c:	2201      	movs	r2, #1
 800059e:	409a      	lsls	r2, r3
 80005a0:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <GPIO_voidSetPinValue+0x188>)
 80005a2:	611a      	str	r2, [r3, #16]
 80005a4:	bf00      	nop
				break;
 80005a6:	e038      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTE:
				switch(copy_u8PinValue){
 80005a8:	797b      	ldrb	r3, [r7, #5]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d002      	beq.n	80005b4 <GPIO_voidSetPinValue+0x104>
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d006      	beq.n	80005c0 <GPIO_voidSetPinValue+0x110>
				case 0:WRITE_BIT(GPIOE->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOE->BSRR,copy_u8PinID);break;}
				break;
 80005b2:	e032      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOE->BRR,copy_u8PinID);break;
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	2201      	movs	r2, #1
 80005b8:	409a      	lsls	r2, r3
 80005ba:	4b20      	ldr	r3, [pc, #128]	@ (800063c <GPIO_voidSetPinValue+0x18c>)
 80005bc:	615a      	str	r2, [r3, #20]
 80005be:	e005      	b.n	80005cc <GPIO_voidSetPinValue+0x11c>
				case 1:WRITE_BIT(GPIOE->BSRR,copy_u8PinID);break;}
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	2201      	movs	r2, #1
 80005c4:	409a      	lsls	r2, r3
 80005c6:	4b1d      	ldr	r3, [pc, #116]	@ (800063c <GPIO_voidSetPinValue+0x18c>)
 80005c8:	611a      	str	r2, [r3, #16]
 80005ca:	bf00      	nop
				break;
 80005cc:	e025      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTF:
				switch(copy_u8PinValue){
 80005ce:	797b      	ldrb	r3, [r7, #5]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <GPIO_voidSetPinValue+0x12a>
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d006      	beq.n	80005e6 <GPIO_voidSetPinValue+0x136>
				case 0:WRITE_BIT(GPIOF->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOF->BSRR,copy_u8PinID);break;}
				break;
 80005d8:	e01f      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOF->BRR,copy_u8PinID);break;
 80005da:	79bb      	ldrb	r3, [r7, #6]
 80005dc:	2201      	movs	r2, #1
 80005de:	409a      	lsls	r2, r3
 80005e0:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <GPIO_voidSetPinValue+0x190>)
 80005e2:	615a      	str	r2, [r3, #20]
 80005e4:	e005      	b.n	80005f2 <GPIO_voidSetPinValue+0x142>
				case 1:WRITE_BIT(GPIOF->BSRR,copy_u8PinID);break;}
 80005e6:	79bb      	ldrb	r3, [r7, #6]
 80005e8:	2201      	movs	r2, #1
 80005ea:	409a      	lsls	r2, r3
 80005ec:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <GPIO_voidSetPinValue+0x190>)
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	bf00      	nop
				break;
 80005f2:	e012      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTG:
				switch(copy_u8PinValue){
 80005f4:	797b      	ldrb	r3, [r7, #5]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d002      	beq.n	8000600 <GPIO_voidSetPinValue+0x150>
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d006      	beq.n	800060c <GPIO_voidSetPinValue+0x15c>
				case 0:WRITE_BIT(GPIOG->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOG->BSRR,copy_u8PinID);break;}
				break;
 80005fe:	e00b      	b.n	8000618 <GPIO_voidSetPinValue+0x168>
				case 0:WRITE_BIT(GPIOG->BRR,copy_u8PinID);break;
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	2201      	movs	r2, #1
 8000604:	409a      	lsls	r2, r3
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <GPIO_voidSetPinValue+0x194>)
 8000608:	615a      	str	r2, [r3, #20]
 800060a:	e005      	b.n	8000618 <GPIO_voidSetPinValue+0x168>
				case 1:WRITE_BIT(GPIOG->BSRR,copy_u8PinID);break;}
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	2201      	movs	r2, #1
 8000610:	409a      	lsls	r2, r3
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <GPIO_voidSetPinValue+0x194>)
 8000614:	611a      	str	r2, [r3, #16]
 8000616:	bf00      	nop
				break;
 8000618:	bf00      	nop
		switch(copy_u8portID)
 800061a:	e001      	b.n	8000620 <GPIO_voidSetPinValue+0x170>
		}
	}
    else 
		lacal_u8ErrorState = STD_TYPE_NOK;
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]
	return lacal_u8ErrorState;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40010800 	.word	0x40010800
 8000630:	40010c00 	.word	0x40010c00
 8000634:	40011000 	.word	0x40011000
 8000638:	40011400 	.word	0x40011400
 800063c:	40011800 	.word	0x40011800
 8000640:	40011c00 	.word	0x40011c00
 8000644:	40012000 	.word	0x40012000

08000648 <NVIC_voidEnableInterrupt>:
 #include "NVIC_interface.h"
 #include "NVIC_private.h"
 #include "NVIC_config.h"
 
void NVIC_voidEnableInterrupt(u8 copy_u8IntNumber)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	if(copy_u8IntNumber<31)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b1e      	cmp	r3, #30
 8000656:	d805      	bhi.n	8000664 <NVIC_voidEnableInterrupt+0x1c>
	{
		NVIC_ISER0=1<<copy_u8IntNumber;
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2201      	movs	r2, #1
 800065c:	409a      	lsls	r2, r3
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <NVIC_voidEnableInterrupt+0x54>)
 8000660:	601a      	str	r2, [r3, #0]
	else if(copy_u8IntNumber<95)
	{
		copy_u8IntNumber-=63;
		NVIC_ISER2=1<<copy_u8IntNumber;
	}
}
 8000662:	e016      	b.n	8000692 <NVIC_voidEnableInterrupt+0x4a>
	else if(copy_u8IntNumber<63)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b3e      	cmp	r3, #62	@ 0x3e
 8000668:	d808      	bhi.n	800067c <NVIC_voidEnableInterrupt+0x34>
		copy_u8IntNumber-=31;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	3b1f      	subs	r3, #31
 800066e:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1=1<<copy_u8IntNumber;
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	2201      	movs	r2, #1
 8000674:	409a      	lsls	r2, r3
 8000676:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <NVIC_voidEnableInterrupt+0x58>)
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	e00a      	b.n	8000692 <NVIC_voidEnableInterrupt+0x4a>
	else if(copy_u8IntNumber<95)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b5e      	cmp	r3, #94	@ 0x5e
 8000680:	d807      	bhi.n	8000692 <NVIC_voidEnableInterrupt+0x4a>
		copy_u8IntNumber-=63;
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	3b3f      	subs	r3, #63	@ 0x3f
 8000686:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER2=1<<copy_u8IntNumber;
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2201      	movs	r2, #1
 800068c:	409a      	lsls	r2, r3
 800068e:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <NVIC_voidEnableInterrupt+0x5c>)
 8000690:	601a      	str	r2, [r3, #0]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100
 80006a0:	e000e104 	.word	0xe000e104
 80006a4:	e000e108 	.word	0xe000e108

080006a8 <MOTOR_init>:
#include "PWM_DCmotor_init.h"
#include "GPIO_interface.h"


void MOTOR_init (u8 A_u8MotorNum)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
	if (A_u8MotorNum>0)
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d021      	beq.n	80006fc <MOTOR_init+0x54>
	{
		switch(A_u8MotorNum)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d002      	beq.n	80006c4 <MOTOR_init+0x1c>
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d00e      	beq.n	80006e0 <MOTOR_init+0x38>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINL,GPIO_OUTPUT_10M_PP);
//			MTimer_voidInit(MOTOR2_SecondTimerType);
			break;
		}
	}
}
 80006c2:	e01b      	b.n	80006fc <MOTOR_init+0x54>
			MTimer_voidInit(MOTOR1_FirstTimerType);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 f9a5 	bl	8000a14 <MTimer_voidInit>
			GPIO_voidSetPinMode(MOTOR1_PORT,MOTOR1_PINR,GPIO_OUTPUT_10M_PP);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2103      	movs	r1, #3
 80006ce:	2002      	movs	r0, #2
 80006d0:	f7ff fd4e 	bl	8000170 <GPIO_voidSetPinMode>
		    GPIO_voidSetPinMode(MOTOR1_PORT,MOTOR1_PINL,GPIO_OUTPUT_10M_PP);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2104      	movs	r1, #4
 80006d8:	2002      	movs	r0, #2
 80006da:	f7ff fd49 	bl	8000170 <GPIO_voidSetPinMode>
			break;
 80006de:	e00d      	b.n	80006fc <MOTOR_init+0x54>
			MTimer_voidInit(MOTOR2_FirstTimerType);
 80006e0:	2001      	movs	r0, #1
 80006e2:	f000 f997 	bl	8000a14 <MTimer_voidInit>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINR,GPIO_OUTPUT_10M_PP);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2105      	movs	r1, #5
 80006ea:	2002      	movs	r0, #2
 80006ec:	f7ff fd40 	bl	8000170 <GPIO_voidSetPinMode>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINL,GPIO_OUTPUT_10M_PP);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2106      	movs	r1, #6
 80006f4:	2002      	movs	r0, #2
 80006f6:	f7ff fd3b 	bl	8000170 <GPIO_voidSetPinMode>
			break;
 80006fa:	bf00      	nop
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <MOTOR_CounterClockWise>:

void MOTOR_CounterClockWise  (u8 A_u8MotorNum , u16 A_u16CaptureValue )
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	460a      	mov	r2, r1
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	4613      	mov	r3, r2
 8000712:	80bb      	strh	r3, [r7, #4]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d02a      	beq.n	8000770 <MOTOR_CounterClockWise+0x6c>
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d827      	bhi.n	8000770 <MOTOR_CounterClockWise+0x6c>
	{
		switch(A_u8MotorNum)
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d002      	beq.n	800072c <MOTOR_CounterClockWise+0x28>
 8000726:	2b02      	cmp	r3, #2
 8000728:	d011      	beq.n	800074e <MOTOR_CounterClockWise+0x4a>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_LOW);
//			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_SecondChannelNumber,0);
			break;
		}
	}
}
 800072a:	e021      	b.n	8000770 <MOTOR_CounterClockWise+0x6c>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,A_u16CaptureValue);
 800072c:	88bb      	ldrh	r3, [r7, #4]
 800072e:	461a      	mov	r2, r3
 8000730:	2101      	movs	r1, #1
 8000732:	2001      	movs	r0, #1
 8000734:	f000 fa88 	bl	8000c48 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINR, GPIO_HIGH);
 8000738:	2201      	movs	r2, #1
 800073a:	2103      	movs	r1, #3
 800073c:	2002      	movs	r0, #2
 800073e:	f7ff feb7 	bl	80004b0 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINL, GPIO_LOW);
 8000742:	2200      	movs	r2, #0
 8000744:	2104      	movs	r1, #4
 8000746:	2002      	movs	r0, #2
 8000748:	f7ff feb2 	bl	80004b0 <GPIO_voidSetPinValue>
			break;
 800074c:	e010      	b.n	8000770 <MOTOR_CounterClockWise+0x6c>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,A_u16CaptureValue);
 800074e:	88bb      	ldrh	r3, [r7, #4]
 8000750:	461a      	mov	r2, r3
 8000752:	2102      	movs	r1, #2
 8000754:	2001      	movs	r0, #1
 8000756:	f000 fa77 	bl	8000c48 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINR, GPIO_HIGH);
 800075a:	2201      	movs	r2, #1
 800075c:	2105      	movs	r1, #5
 800075e:	2002      	movs	r0, #2
 8000760:	f7ff fea6 	bl	80004b0 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_LOW);
 8000764:	2200      	movs	r2, #0
 8000766:	2106      	movs	r1, #6
 8000768:	2002      	movs	r0, #2
 800076a:	f7ff fea1 	bl	80004b0 <GPIO_voidSetPinValue>
			break;
 800076e:	bf00      	nop
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <MOTOR_ClockWise>:

void MOTOR_ClockWise  (u8 A_u8MotorNum , u16 A_u16CaptureValue)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	460a      	mov	r2, r1
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	4613      	mov	r3, r2
 8000786:	80bb      	strh	r3, [r7, #4]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d028      	beq.n	80007e0 <MOTOR_ClockWise+0x68>
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b02      	cmp	r3, #2
 8000792:	d825      	bhi.n	80007e0 <MOTOR_ClockWise+0x68>
	{
		switch(A_u8MotorNum)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d002      	beq.n	80007a0 <MOTOR_ClockWise+0x28>
 800079a:	2b02      	cmp	r3, #2
 800079c:	d010      	beq.n	80007c0 <MOTOR_ClockWise+0x48>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_HIGH);
//			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR2_SecondChannelNumber,A_u16CaptureValue);
			break;
		}
	}
}
 800079e:	e01f      	b.n	80007e0 <MOTOR_ClockWise+0x68>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2101      	movs	r1, #1
 80007a4:	2001      	movs	r0, #1
 80007a6:	f000 fa4f 	bl	8000c48 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINR, GPIO_LOW);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2103      	movs	r1, #3
 80007ae:	2002      	movs	r0, #2
 80007b0:	f7ff fe7e 	bl	80004b0 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINL, GPIO_HIGH);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2104      	movs	r1, #4
 80007b8:	2002      	movs	r0, #2
 80007ba:	f7ff fe79 	bl	80004b0 <GPIO_voidSetPinValue>
			break;
 80007be:	e00f      	b.n	80007e0 <MOTOR_ClockWise+0x68>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR2_FirstChannelNumber,0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2102      	movs	r1, #2
 80007c4:	2001      	movs	r0, #1
 80007c6:	f000 fa3f 	bl	8000c48 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINR, GPIO_LOW);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2105      	movs	r1, #5
 80007ce:	2002      	movs	r0, #2
 80007d0:	f7ff fe6e 	bl	80004b0 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_HIGH);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2106      	movs	r1, #6
 80007d8:	2002      	movs	r0, #2
 80007da:	f7ff fe69 	bl	80004b0 <GPIO_voidSetPinValue>
			break;
 80007de:	bf00      	nop
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <MOTOR_Stop>:

void MOTOR_Stop  (u8 A_u8MotorNum)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d014      	beq.n	8000822 <MOTOR_Stop+0x3a>
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d811      	bhi.n	8000822 <MOTOR_Stop+0x3a>
	{
		switch(A_u8MotorNum)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d002      	beq.n	800080a <MOTOR_Stop+0x22>
 8000804:	2b02      	cmp	r3, #2
 8000806:	d006      	beq.n	8000816 <MOTOR_Stop+0x2e>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,0);
//			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_SecondChannelNumber,0);
			break;
		}
	}
}
 8000808:	e00b      	b.n	8000822 <MOTOR_Stop+0x3a>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,0);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	2001      	movs	r0, #1
 8000810:	f000 fa1a 	bl	8000c48 <MTimer_voidPWM>
			break;
 8000814:	e005      	b.n	8000822 <MOTOR_Stop+0x3a>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,0);
 8000816:	2200      	movs	r2, #0
 8000818:	2102      	movs	r1, #2
 800081a:	2001      	movs	r0, #1
 800081c:	f000 fa14 	bl	8000c48 <MTimer_voidPWM>
			break;
 8000820:	bf00      	nop
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <RCC_voidInitSysClock>:
#include "RCC_interface.h"
#include "RCC_config.h"


void RCC_voidInitSysClock(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	#if RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		SET_BIT(RCC->RCC_CR,16);
 8000830:	4b16      	ldr	r3, [pc, #88]	@ (800088c <RCC_voidInitSysClock+0x60>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a15      	ldr	r2, [pc, #84]	@ (800088c <RCC_voidInitSysClock+0x60>)
 8000836:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800083a:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CR,18);
 800083c:	4b13      	ldr	r3, [pc, #76]	@ (800088c <RCC_voidInitSysClock+0x60>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a12      	ldr	r2, [pc, #72]	@ (800088c <RCC_voidInitSysClock+0x60>)
 8000842:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000846:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CFGR,0);
 8000848:	4b10      	ldr	r3, [pc, #64]	@ (800088c <RCC_voidInitSysClock+0x60>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	4a0f      	ldr	r2, [pc, #60]	@ (800088c <RCC_voidInitSysClock+0x60>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->RCC_CFGR,1);
 8000854:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <RCC_voidInitSysClock+0x60>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	4a0c      	ldr	r2, [pc, #48]	@ (800088c <RCC_voidInitSysClock+0x60>)
 800085a:	f023 0302 	bic.w	r3, r3, #2
 800085e:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->RCC_CFGR,1);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_AHP_PRESCALER   ==RCC_AHP_DIV_1
		CLR_BIT(RCC->RCC_CFGR,7);
 8000860:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <RCC_voidInitSysClock+0x60>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	4a09      	ldr	r2, [pc, #36]	@ (800088c <RCC_voidInitSysClock+0x60>)
 8000866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800086a:	6053      	str	r3, [r2, #4]
	     SET_BIT(RCC->RCC_CFGR,7);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_APB1_PRESCALER   ==RCC_APB1_DIV_1
		CLR_BIT(RCC->RCC_CFGR,8);
 800086c:	4b07      	ldr	r3, [pc, #28]	@ (800088c <RCC_voidInitSysClock+0x60>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a06      	ldr	r2, [pc, #24]	@ (800088c <RCC_voidInitSysClock+0x60>)
 8000872:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000876:	6053      	str	r3, [r2, #4]
	    SET_BIT(RCC->RCC_CFGR,10);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_APB2_PRESCALER   ==RCC_APB2_DIV_1
		CLR_BIT(RCC->RCC_CFGR,11);
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <RCC_voidInitSysClock+0x60>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	4a03      	ldr	r2, [pc, #12]	@ (800088c <RCC_voidInitSysClock+0x60>)
 800087e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000882:	6053      	str	r3, [r2, #4]
	    SET_BIT(RCC->RCC_CFGR,12);
	    SET_BIT(RCC->RCC_CFGR,13);
	#else 
		#error("wrong choise")
	#endif
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40021000 	.word	0x40021000

08000890 <RCC_voidEnablePeripheral>:
	#endif
}


void RCC_voidEnablePeripheral(u8 Copy_u8Bus, u8 Copy_u8Peripheral)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	460a      	mov	r2, r1
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	4613      	mov	r3, r2
 800089e:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8Bus)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d01c      	beq.n	80008e0 <RCC_voidEnablePeripheral+0x50>
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	dc25      	bgt.n	80008f6 <RCC_voidEnablePeripheral+0x66>
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <RCC_voidEnablePeripheral+0x24>
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d00b      	beq.n	80008ca <RCC_voidEnablePeripheral+0x3a>
			break;
		case RCC_APB2:
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
			break;
	}
}
 80008b2:	e020      	b.n	80008f6 <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_AHBENR,Copy_u8Peripheral);
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <RCC_voidEnablePeripheral+0x70>)
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	79ba      	ldrb	r2, [r7, #6]
 80008ba:	2101      	movs	r1, #1
 80008bc:	fa01 f202 	lsl.w	r2, r1, r2
 80008c0:	4611      	mov	r1, r2
 80008c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000900 <RCC_voidEnablePeripheral+0x70>)
 80008c4:	430b      	orrs	r3, r1
 80008c6:	6153      	str	r3, [r2, #20]
			break;
 80008c8:	e015      	b.n	80008f6 <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_APB1ENR,Copy_u8Peripheral);
 80008ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <RCC_voidEnablePeripheral+0x70>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	79ba      	ldrb	r2, [r7, #6]
 80008d0:	2101      	movs	r1, #1
 80008d2:	fa01 f202 	lsl.w	r2, r1, r2
 80008d6:	4611      	mov	r1, r2
 80008d8:	4a09      	ldr	r2, [pc, #36]	@ (8000900 <RCC_voidEnablePeripheral+0x70>)
 80008da:	430b      	orrs	r3, r1
 80008dc:	61d3      	str	r3, [r2, #28]
			break;
 80008de:	e00a      	b.n	80008f6 <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
 80008e0:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <RCC_voidEnablePeripheral+0x70>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	79ba      	ldrb	r2, [r7, #6]
 80008e6:	2101      	movs	r1, #1
 80008e8:	fa01 f202 	lsl.w	r2, r1, r2
 80008ec:	4611      	mov	r1, r2
 80008ee:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <RCC_voidEnablePeripheral+0x70>)
 80008f0:	430b      	orrs	r3, r1
 80008f2:	6193      	str	r3, [r2, #24]
			break;
 80008f4:	bf00      	nop
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	40021000 	.word	0x40021000

08000904 <truncate_queue>:
}


// function to handle dequeue operation
static SPI_ERROR_STATUS_t truncate_queue(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
	
	//status code
    SPI_ERROR_STATUS_t loc_enu_StatusCode = SPI_OKAY;
 800090a:	2300      	movs	r3, #0
 800090c:	71fb      	strb	r3, [r7, #7]
	
	// check if all bytes has been sent OR queue is empty
	if((gl_SPI_data_queue.s16_front_queue > gl_SPI_data_queue.s16_rear_queue) || (gl_SPI_data_queue.s16_front_queue == EMPTY_POSITOIN))
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <truncate_queue+0x70>)
 8000910:	f993 20c8 	ldrsb.w	r2, [r3, #200]	@ 0xc8
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <truncate_queue+0x70>)
 8000916:	f993 30c9 	ldrsb.w	r3, [r3, #201]	@ 0xc9
 800091a:	429a      	cmp	r2, r3
 800091c:	dc05      	bgt.n	800092a <truncate_queue+0x26>
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <truncate_queue+0x70>)
 8000920:	f993 30c8 	ldrsb.w	r3, [r3, #200]	@ 0xc8
 8000924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000928:	d10a      	bne.n	8000940 <truncate_queue+0x3c>
	{
		// set front and rear to defaults
		gl_SPI_data_queue.s16_front_queue = EMPTY_POSITOIN;
 800092a:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <truncate_queue+0x70>)
 800092c:	22ff      	movs	r2, #255	@ 0xff
 800092e:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
		gl_SPI_data_queue.s16_rear_queue  = EMPTY_POSITOIN;
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <truncate_queue+0x70>)
 8000934:	22ff      	movs	r2, #255	@ 0xff
 8000936:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
		
		//status code queue is empty
		loc_enu_StatusCode = QUEUE_EMPTY;
 800093a:	2302      	movs	r3, #2
 800093c:	71fb      	strb	r3, [r7, #7]
 800093e:	e012      	b.n	8000966 <truncate_queue+0x62>
	}
	else
	{
		//send current byte and increment front
		SPI1->DR = gl_SPI_data_queue.u16_arr_data[gl_SPI_data_queue.s16_front_queue];
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <truncate_queue+0x70>)
 8000942:	f993 30c8 	ldrsb.w	r3, [r3, #200]	@ 0xc8
 8000946:	461a      	mov	r2, r3
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <truncate_queue+0x70>)
 800094a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800094e:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <truncate_queue+0x74>)
 8000950:	60da      	str	r2, [r3, #12]
		gl_SPI_data_queue.s16_front_queue++;
 8000952:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <truncate_queue+0x70>)
 8000954:	f993 30c8 	ldrsb.w	r3, [r3, #200]	@ 0xc8
 8000958:	b2db      	uxtb	r3, r3
 800095a:	3301      	adds	r3, #1
 800095c:	b2db      	uxtb	r3, r3
 800095e:	b25a      	sxtb	r2, r3
 8000960:	4b04      	ldr	r3, [pc, #16]	@ (8000974 <truncate_queue+0x70>)
 8000962:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
	}
	return loc_enu_StatusCode;
 8000966:	79fb      	ldrb	r3, [r7, #7]
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000000 	.word	0x20000000
 8000978:	40013000 	.word	0x40013000

0800097c <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    // TODO HANDLE ISR FOR RECEPTION
	#if   SPI1_MASTER_SLAVE == SPI_SLAVE
       sgl_Recieve_Index = (u8)SPI1->DR;
       gl_ptr_Function();
    #elif SPI1_MASTER_SLAVE == SPI_MASTER
      if (truncate_queue() == QUEUE_EMPTY)
 8000980:	f7ff ffc0 	bl	8000904 <truncate_queue>
 8000984:	4603      	mov	r3, r0
 8000986:	2b02      	cmp	r3, #2
 8000988:	d106      	bne.n	8000998 <SPI1_IRQHandler+0x1c>
      {
        if (gl_ptr_Function != PTR_NULL)
 800098a:	4b04      	ldr	r3, [pc, #16]	@ (800099c <SPI1_IRQHandler+0x20>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <SPI1_IRQHandler+0x1c>
        {
            gl_ptr_Function();
 8000992:	4b02      	ldr	r3, [pc, #8]	@ (800099c <SPI1_IRQHandler+0x20>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4798      	blx	r3
        }
      }
    #endif

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000ec 	.word	0x200000ec

080009a0 <MSTK_voidInit>:

/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;

void MSTK_voidInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
#if MSTK_CLK_SRC == MSTK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	MSTK -> CTRL = 0x00000004;
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	MSTK -> CTRL = 0;
 80009a4:	4b03      	ldr	r3, [pc, #12]	@ (80009b4 <MSTK_voidInit+0x14>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]

#endif
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000e010 	.word	0xe000e010

080009b8 <SysTick_Handler>:

	return Local_u32RemainTime;
}

void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary ;

	if (MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <SysTick_Handler+0x50>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d111      	bne.n	80009ea <SysTick_Handler+0x32>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK->CTRL, 1);
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <SysTick_Handler+0x54>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a10      	ldr	r2, [pc, #64]	@ (8000a0c <SysTick_Handler+0x54>)
 80009cc:	f023 0302 	bic.w	r3, r3, #2
 80009d0:	6013      	str	r3, [r2, #0]

		/* Stop Timer */
		SET_BIT(MSTK->CTRL, 0);
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <SysTick_Handler+0x54>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0d      	ldr	r2, [pc, #52]	@ (8000a0c <SysTick_Handler+0x54>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD = 0;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <SysTick_Handler+0x54>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
		MSTK -> VAL  = 0;
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <SysTick_Handler+0x54>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
	}

	/* Callback notification */
	MSTK_CallBack();
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <SysTick_Handler+0x58>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4798      	blx	r3

	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(MSTK->CTRL,16);
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <SysTick_Handler+0x54>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	0c1b      	lsrs	r3, r3, #16
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	71fb      	strb	r3, [r7, #7]
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000f4 	.word	0x200000f4
 8000a0c:	e000e010 	.word	0xe000e010
 8000a10:	200000f0 	.word	0x200000f0

08000a14 <MTimer_voidInit>:

u8 channel1_set=0;
u8 channel2_set=0;

void MTimer_voidInit (u8 A_u8TimerSelected)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]

	/* Enable pinout of ADC (PortA , PORTB) from RCC */
	//MRCC_voidEnablePerephiralClock(RCC_AHB1 , RCC_EN_GPIOA) ;
	//MRCC_voidEnablePerephiralClock(RCC_AHB1 , RCC_EN_GPIOB) ;

	switch (A_u8TimerSelected)
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	f200 8107 	bhi.w	8000c36 <MTimer_voidInit+0x222>
 8000a28:	a201      	add	r2, pc, #4	@ (adr r2, 8000a30 <MTimer_voidInit+0x1c>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a41 	.word	0x08000a41
 8000a34:	08000aa5 	.word	0x08000aa5
 8000a38:	08000b37 	.word	0x08000b37
 8000a3c:	08000bc9 	.word	0x08000bc9
		/**                             Init TIM1                                    **/
		/******************************************************************************/

			/* Select the Direction */
            #if   TIM1_DIRECTION == UP_COUNTER
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_DIR_BIT) ;
 8000a40:	4b7f      	ldr	r3, [pc, #508]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a7e      	ldr	r2, [pc, #504]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a46:	f023 0310 	bic.w	r3, r3, #16
 8000a4a:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM1_DIRECTION"
            #endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_1->CR1 , TIM1_CR1_CMS_BIT0) ;
 8000a4c:	4b7c      	ldr	r3, [pc, #496]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a7b      	ldr	r2, [pc, #492]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a52:	f023 0320 	bic.w	r3, r3, #32
 8000a56:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_1->CR1 , TIM1_CR1_CMS_BIT1) ;
 8000a58:	4b79      	ldr	r3, [pc, #484]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a78      	ldr	r2, [pc, #480]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000a62:	6013      	str	r3, [r2, #0]

			/* set the timer division */
            #if   TIM1_DIVISION == tCK_INT_x_1
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_CKD_BIT0) ;
 8000a64:	4b76      	ldr	r3, [pc, #472]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a75      	ldr	r2, [pc, #468]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000a6e:	6013      	str	r3, [r2, #0]
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_CKD_BIT1) ;
 8000a70:	4b73      	ldr	r3, [pc, #460]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a72      	ldr	r2, [pc, #456]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a76:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000a7a:	6013      	str	r3, [r2, #0]
                  #error "Invalid Selection of TIM1_DIVISION"
            #endif

			/* set the timer prescaller */
            #if    TIM1_PRESCALLER <= MAX_TIM_PRESCALLER
            	   TIM_1 ->PSC = TIM1_PRESCALLER ;
 8000a7c:	4b70      	ldr	r3, [pc, #448]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a7e:	2208      	movs	r2, #8
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
            #else
                   #error "TIM1_PRESCALLER out of range"
            #endif

            /* Enable auto-reload preload */
            SET_BIT(TIM_1->CR1 , TIM1_CR1_ARPE_BIT) ;
 8000a82:	4b6f      	ldr	r3, [pc, #444]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a6e      	ldr	r2, [pc, #440]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a8c:	6013      	str	r3, [r2, #0]

            /* Set the Auto-reload value */
            #if  TIM1_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
            	   TIM_1->ARR = TIM1_PRELOAD_VALUE ;
 8000a8e:	4b6c      	ldr	r3, [pc, #432]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a94:	62da      	str	r2, [r3, #44]	@ 0x2c
           //       #error "REPETATION_COUNTER out of range"
           // #endif

            /* Generate an update event to reload the Prescaler
            and the repetition counter(only for TIM1 and TIM5) value immediately */
            SET_BIT(TIM_1->EGR , TIM1_EGR_UG_BIT );
 8000a96:	4b6a      	ldr	r3, [pc, #424]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a69      	ldr	r2, [pc, #420]	@ (8000c40 <MTimer_voidInit+0x22c>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6153      	str	r3, [r2, #20]

		break ;
 8000aa2:	e0c8      	b.n	8000c36 <MTimer_voidInit+0x222>
		/******************************************************************************/
		/**                             Init TIM2                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_2 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8000aa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab2:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
            #if   TIM2_DIRECTION == UP_COUNTER
			      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 8000ab4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000abe:	f023 0310 	bic.w	r3, r3, #16
 8000ac2:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM2_DIRECTION"
            #endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8000ac4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ace:	f023 0320 	bic.w	r3, r3, #32
 8000ad2:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8000ad4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000ae2:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM2_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8000ae4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000af2:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 8000af4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000afe:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000b02:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM2_DIVISION"
			#endif

		    /* set the timer prescaller */
	        #if    TIM2_PRESCALLER <= MAX_TIM_PRESCALLER
	        	   TIM_2 ->PSC = TIM2_PRESCALLER ;
 8000b04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b08:	2208      	movs	r2, #8
 8000b0a:	629a      	str	r2, [r3, #40]	@ 0x28
	        #else
	               #error "TIM2_PRESCALLER out of range"
	        #endif

	        /* Enable auto-reload preload */
	        SET_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 8000b0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b1a:	6013      	str	r3, [r2, #0]

	        /* Set the Auto-reload value */
	        #if  TIM2_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
	        	   TIM_2->ARR = TIM2_PRELOAD_VALUE ;
 8000b1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b20:	220f      	movs	r2, #15
 8000b22:	62da      	str	r2, [r3, #44]	@ 0x2c
	              #error "TIM2_PRELOAD_VALUE out of range"
	        #endif

	        /* Generate an update event to reload the Prescaler
	         and the repetition counter(only for TIM1 and TIM5) value immediately */
	        SET_BIT(TIM_2->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8000b24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6153      	str	r3, [r2, #20]

		break ;
 8000b34:	e07f      	b.n	8000c36 <MTimer_voidInit+0x222>
		/******************************************************************************/
		/**                             Init TIM3                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_3 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8000b36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b44:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
            #if   TIM3_DIRECTION == UP_COUNTER
	           CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 8000b46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000b50:	f023 0310 	bic.w	r3, r3, #16
 8000b54:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM3_DIRECTION"
            #endif

	        /* Edge-aligned mode */
	        CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8000b56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000b60:	f023 0320 	bic.w	r3, r3, #32
 8000b64:	6013      	str	r3, [r2, #0]
	        CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8000b66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000b70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000b74:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM3_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8000b76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b84:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 8000b86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000b90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000b94:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM3_DIVISION"
			#endif

			/* set the timer prescaller */
		    #if    TIM3_PRESCALLER <= MAX_TIM_PRESCALLER
		    	   TIM_3 ->PSC = TIM3_PRESCALLER ;
 8000b96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b9a:	2208      	movs	r2, #8
 8000b9c:	629a      	str	r2, [r3, #40]	@ 0x28
		    #else
		           #error "TIM3_PRESCALLER out of range"
		    #endif

		    /* Enable auto-reload preload */
			SET_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 8000b9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bac:	6013      	str	r3, [r2, #0]

			/* Set the Auto-reload value */
			#if  TIM3_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
				   TIM_3->ARR = TIM3_PRELOAD_VALUE ;
 8000bae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000bb2:	220f      	movs	r2, #15
 8000bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
			      #error "TIM3_PRELOAD_VALUE out of range"
			#endif

			/* Generate an update event to reload the Prescaler
			 and the repetition counter(only for TIM1 and TIM5) value immediately */
			SET_BIT(TIM_3->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8000bb6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6153      	str	r3, [r2, #20]

		break ;
 8000bc6:	e036      	b.n	8000c36 <MTimer_voidInit+0x222>
		/******************************************************************************/
		/**                             Init TIM4                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_4 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000bce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd2:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
			#if   TIM4_DIRECTION == UP_COUNTER
			     CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000bda:	f023 0310 	bic.w	r3, r3, #16
 8000bde:	6013      	str	r3, [r2, #0]
			#else
			      #error "Invalid Selection of TIM4_DIRECTION"
			#endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8000be0:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a17      	ldr	r2, [pc, #92]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000be6:	f023 0320 	bic.w	r3, r3, #32
 8000bea:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8000bec:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a14      	ldr	r2, [pc, #80]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000bf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000bf6:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM4_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a11      	ldr	r2, [pc, #68]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000bfe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c02:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0e      	ldr	r2, [pc, #56]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000c0a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM4_DIVISION"
			#endif

		    /* set the timer prescaller */
			#if    TIM4_PRESCALLER <= MAX_TIM_PRESCALLER
				   TIM_4 ->PSC = TIM4_PRESCALLER ;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000c12:	2208      	movs	r2, #8
 8000c14:	629a      	str	r2, [r3, #40]	@ 0x28
			#else
			       #error "TIM4_PRESCALLER out of range"
			#endif

			/* Enable auto-reload preload */
			SET_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c20:	6013      	str	r3, [r2, #0]

			/* Set the Auto-reload value */
			#if  TIM4_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
				   TIM_4->ARR = TIM4_PRELOAD_VALUE ;
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000c24:	220f      	movs	r2, #15
 8000c26:	62da      	str	r2, [r3, #44]	@ 0x2c
			      #error "TIM4_PRELOAD_VALUE out of range"
			#endif

		    /* Generate an update event to reload the Prescaler
		    	  and the repetition counter(only for TIM1 and TIM5) value immediately */
		    SET_BIT(TIM_4->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	4a05      	ldr	r2, [pc, #20]	@ (8000c44 <MTimer_voidInit+0x230>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6153      	str	r3, [r2, #20]
		break ;
 8000c34:	bf00      	nop
	}
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	40012c00 	.word	0x40012c00
 8000c44:	40008000 	.word	0x40008000

08000c48 <MTimer_voidPWM>:

void MTimer_voidPWM (u8 A_u8TimerSelected , u8 A_u8Channel , u16 A_u16CompareValue)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0b2      	sub	sp, #200	@ 0xc8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	460b      	mov	r3, r1
 8000c54:	71bb      	strb	r3, [r7, #6]
 8000c56:	4613      	mov	r3, r2
 8000c58:	80bb      	strh	r3, [r7, #4]
	if (A_u8TimerSelected == TIM1_TYPE)
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	f040 81d0 	bne.w	8001002 <MTimer_voidPWM+0x3ba>
	{
		if (A_u8Channel == TIM_CHANNEL_1)
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d178      	bne.n	8000d5a <MTimer_voidPWM+0x112>
		{
			if (channel1_set==0)
 8000c68:	4b7a      	ldr	r3, [pc, #488]	@ (8000e54 <MTimer_voidPWM+0x20c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d107      	bne.n	8000c80 <MTimer_voidPWM+0x38>
			{
				GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN8,GPIO_OUTPUT_10M_AF_PP);
 8000c70:	2209      	movs	r2, #9
 8000c72:	2108      	movs	r1, #8
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff fa7b 	bl	8000170 <GPIO_voidSetPinMode>
				channel1_set=1;
 8000c7a:	4b76      	ldr	r3, [pc, #472]	@ (8000e54 <MTimer_voidPWM+0x20c>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
			}

			u32 L_u32TempCCMRX = 0 ;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
			u32 L_u32TempCCER  = 0 ;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
		    u32 L_u32TempCR2   = 0 ;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]

			/* Disable the Channel 1: Reset the CC1E Bit */
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC1E_BIT) ;
 8000c8c:	4b72      	ldr	r3, [pc, #456]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000c8e:	6a1b      	ldr	r3, [r3, #32]
 8000c90:	4a71      	ldr	r2, [pc, #452]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000c92:	f023 0301 	bic.w	r3, r3, #1
 8000c96:	6213      	str	r3, [r2, #32]

			/* Get the TIM CCER register value */
			L_u32TempCCMRX = TIM_1->CCER;
 8000c98:	4b6f      	ldr	r3, [pc, #444]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000c9a:	6a1b      	ldr	r3, [r3, #32]
 8000c9c:	613b      	str	r3, [r7, #16]
			/* Get the TIM CR2 register value */
			L_u32TempCR2 = TIM_1->CR2;
 8000c9e:	4b6e      	ldr	r3, [pc, #440]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	60bb      	str	r3, [r7, #8]

			/* Get the TIM CCMR1 register value */
			L_u32TempCCMRX = TIM_1->CCMR1;
 8000ca4:	4b6c      	ldr	r3, [pc, #432]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	613b      	str	r3, [r7, #16]

			/* Reset the Output Compare Mode Bits */
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT0) ;
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	f023 0310 	bic.w	r3, r3, #16
 8000cb0:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT1) ;
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	f023 0320 	bic.w	r3, r3, #32
 8000cb8:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT2) ;
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000cc0:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC1S_BIT0) ;
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	f023 0301 	bic.w	r3, r3, #1
 8000cc8:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC1S_BIT1) ;
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	f023 0302 	bic.w	r3, r3, #2
 8000cd0:	613b      	str	r3, [r7, #16]
			/* Select the Output Compare Mode1 */
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000cd8:	613b      	str	r3, [r7, #16]

			/* Set the Output Compare Polarity as active high */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1P_BIT);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f023 0302 	bic.w	r3, r3, #2
 8000ce0:	60fb      	str	r3, [r7, #12]

			/* Set the Output N Polarity as active high */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1NP_BIT) ;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f023 0308 	bic.w	r3, r3, #8
 8000ce8:	60fb      	str	r3, [r7, #12]
			/* Reset the Output N State */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1NE_BIT) ;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f023 0304 	bic.w	r3, r3, #4
 8000cf0:	60fb      	str	r3, [r7, #12]

			/* Reset the Output Compare and Output Compare N IDLE State */
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS1N_BIT) ;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000cf8:	60bb      	str	r3, [r7, #8]
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS1N_BIT) ;
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000d00:	60bb      	str	r3, [r7, #8]

			/* Write to TIM CR2 */
			TIM_1->CR2 = L_u32TempCR2;
 8000d02:	4a55      	ldr	r2, [pc, #340]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	6053      	str	r3, [r2, #4]

			/* Write to TIM CCMR1 */
			TIM_1->CCMR1 = L_u32TempCCMRX;
 8000d08:	4a53      	ldr	r2, [pc, #332]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	6193      	str	r3, [r2, #24]

			/* Set the Capture Compare Register value */
			TIM_1->CCR1 = A_u16CompareValue ;
 8000d0e:	4a52      	ldr	r2, [pc, #328]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d10:	88bb      	ldrh	r3, [r7, #4]
 8000d12:	6353      	str	r3, [r2, #52]	@ 0x34

			/* Write to TIM CCER */
			TIM_1->CCER = L_u32TempCCER;
 8000d14:	4a50      	ldr	r2, [pc, #320]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6213      	str	r3, [r2, #32]

			/* Set the Preload enable bit for channel1 */
			SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC1PE_BIT);
 8000d1a:	4b4f      	ldr	r3, [pc, #316]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	4a4e      	ldr	r2, [pc, #312]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	6193      	str	r3, [r2, #24]

			/* Configure the Output Fast mode */
			SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC1FE_BIT) ;
 8000d26:	4b4c      	ldr	r3, [pc, #304]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	4a4b      	ldr	r2, [pc, #300]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6193      	str	r3, [r2, #24]

			/* Enable the Capture compare channel */
			SET_BIT(TIM_1-> CCER , TIM1_CCER_CC1E_BIT) ;
 8000d32:	4b49      	ldr	r3, [pc, #292]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d34:	6a1b      	ldr	r3, [r3, #32]
 8000d36:	4a48      	ldr	r2, [pc, #288]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6213      	str	r3, [r2, #32]

			/* Enable the main output */
			SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8000d3e:	4b46      	ldr	r3, [pc, #280]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	4a45      	ldr	r2, [pc, #276]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d48:	6453      	str	r3, [r2, #68]	@ 0x44

			/* Enable the timer */
			SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8000d4a:	4b43      	ldr	r3, [pc, #268]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a42      	ldr	r2, [pc, #264]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6013      	str	r3, [r2, #0]
	}
	else
	{
		// error type of A_u8TimerSelected
	}
}
 8000d56:	f000 be96 	b.w	8001a86 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_2)
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d17f      	bne.n	8000e60 <MTimer_voidPWM+0x218>
			if (channel2_set==0)
 8000d60:	4b3e      	ldr	r3, [pc, #248]	@ (8000e5c <MTimer_voidPWM+0x214>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d107      	bne.n	8000d78 <MTimer_voidPWM+0x130>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN9,GPIO_OUTPUT_10M_AF_PP);
 8000d68:	2209      	movs	r2, #9
 8000d6a:	2109      	movs	r1, #9
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f7ff f9ff 	bl	8000170 <GPIO_voidSetPinMode>
					channel2_set=1;
 8000d72:	4b3a      	ldr	r3, [pc, #232]	@ (8000e5c <MTimer_voidPWM+0x214>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
			u32 L_u32TempCCER  = 0 ;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
		    u32 L_u32TempCR2   = 0 ;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
		    CLR_BIT(TIM_1->CCER , TIM1_CCER_CC2E_BIT);
 8000d84:	4b34      	ldr	r3, [pc, #208]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d86:	6a1b      	ldr	r3, [r3, #32]
 8000d88:	4a33      	ldr	r2, [pc, #204]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d8a:	f023 0310 	bic.w	r3, r3, #16
 8000d8e:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_1->CCER;
 8000d90:	4b31      	ldr	r3, [pc, #196]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	61bb      	str	r3, [r7, #24]
		    L_u32TempCR2 = TIM_1->CR2;
 8000d96:	4b30      	ldr	r3, [pc, #192]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	617b      	str	r3, [r7, #20]
		    L_u32TempCCMRX = TIM_1->CCMR1;
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT0);
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000da8:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT1);
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000db0:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT0);
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000db8:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT1);
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000dc0:	61fb      	str	r3, [r7, #28]
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000dc8:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2P_BIT);
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	f023 0320 	bic.w	r3, r3, #32
 8000dd0:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NP_BIT) ;
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000dd8:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NP_BIT) ;
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000de0:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NE_BIT);
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000de8:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS2_BIT);
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000df0:	617b      	str	r3, [r7, #20]
		    CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS2N_BIT);
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000df8:	617b      	str	r3, [r7, #20]
		    TIM_1->CR2 = L_u32TempCR2;
 8000dfa:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	6053      	str	r3, [r2, #4]
		    TIM_1->CCMR1 = L_u32TempCCMRX;
 8000e00:	4a15      	ldr	r2, [pc, #84]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	6193      	str	r3, [r2, #24]
		    TIM_1->CCR2 = A_u16CompareValue;
 8000e06:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000e08:	88bb      	ldrh	r3, [r7, #4]
 8000e0a:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_1->CCER = L_u32TempCCER;
 8000e0c:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC2PE_BIT);
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000e18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e1c:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC2FE_BIT) ;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a0d      	ldr	r2, [pc, #52]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000e24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e28:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_1-> CCER , TIM1_CCER_CC2E_BIT) ;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000e2c:	6a1b      	ldr	r3, [r3, #32]
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000e30:	f043 0310 	orr.w	r3, r3, #16
 8000e34:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	4a07      	ldr	r2, [pc, #28]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000e3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e40:	6453      	str	r3, [r2, #68]	@ 0x44
		    SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8000e42:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <MTimer_voidPWM+0x210>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6013      	str	r3, [r2, #0]
}
 8000e4e:	f000 be1a 	b.w	8001a86 <MTimer_voidPWM+0xe3e>
 8000e52:	bf00      	nop
 8000e54:	200000f5 	.word	0x200000f5
 8000e58:	40012c00 	.word	0x40012c00
 8000e5c:	200000f6 	.word	0x200000f6
		else if (A_u8Channel == TIM_CHANNEL_3)
 8000e60:	79bb      	ldrb	r3, [r7, #6]
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d16c      	bne.n	8000f40 <MTimer_voidPWM+0x2f8>
			u32 L_u32TempCCMRX = 0 ;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
			u32 L_u32TempCCER  = 0 ;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
			u32 L_u32TempCR2   = 0 ;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC3E_BIT);
 8000e72:	4b9b      	ldr	r3, [pc, #620]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000e74:	6a1b      	ldr	r3, [r3, #32]
 8000e76:	4a9a      	ldr	r2, [pc, #616]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000e78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e7c:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_1->CCER;
 8000e7e:	4b98      	ldr	r3, [pc, #608]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000e80:	6a1b      	ldr	r3, [r3, #32]
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
			L_u32TempCR2 = TIM_1->CR2;
 8000e84:	4b96      	ldr	r3, [pc, #600]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	623b      	str	r3, [r7, #32]
			L_u32TempCCMRX = TIM_1->CCMR2;
 8000e8a:	4b95      	ldr	r3, [pc, #596]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_OC3M_BIT0);
 8000e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e92:	f023 0310 	bic.w	r3, r3, #16
 8000e96:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_OC3M_BIT1);
 8000e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e9a:	f023 0320 	bic.w	r3, r3, #32
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_CC3S_BIT0);
 8000ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ea2:	f023 0301 	bic.w	r3, r3, #1
 8000ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_CC3S_BIT1);
 8000ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eaa:	f023 0302 	bic.w	r3, r3, #2
 8000eae:	62bb      	str	r3, [r7, #40]	@ 0x28
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U);
 8000eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eb2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3P_BIT);
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eba:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NP_BIT) ;
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NP_BIT) ;
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NE_BIT);
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS3_BIT);
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ede:	623b      	str	r3, [r7, #32]
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS3N_BIT);
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
 8000ee2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000ee6:	623b      	str	r3, [r7, #32]
			TIM_1->CR2 = L_u32TempCR2;
 8000ee8:	4a7d      	ldr	r2, [pc, #500]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	6053      	str	r3, [r2, #4]
			TIM_1->CCMR2 = L_u32TempCCMRX;
 8000eee:	4a7c      	ldr	r2, [pc, #496]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ef2:	61d3      	str	r3, [r2, #28]
			TIM_1->CCR3 = A_u16CompareValue;
 8000ef4:	4a7a      	ldr	r2, [pc, #488]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000ef6:	88bb      	ldrh	r3, [r7, #4]
 8000ef8:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_1->CCER = L_u32TempCCER;
 8000efa:	4a79      	ldr	r2, [pc, #484]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efe:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC3PE_BIT);
 8000f00:	4b77      	ldr	r3, [pc, #476]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	4a76      	ldr	r2, [pc, #472]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	61d3      	str	r3, [r2, #28]
		    SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC3FE_BIT) ;
 8000f0c:	4b74      	ldr	r3, [pc, #464]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	4a73      	ldr	r2, [pc, #460]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	61d3      	str	r3, [r2, #28]
		    SET_BIT(TIM_1-> CCER , TIM1_CCER_CC3E_BIT) ;
 8000f18:	4b71      	ldr	r3, [pc, #452]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	4a70      	ldr	r2, [pc, #448]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f22:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8000f24:	4b6e      	ldr	r3, [pc, #440]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f28:	4a6d      	ldr	r2, [pc, #436]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f2e:	6453      	str	r3, [r2, #68]	@ 0x44
		    SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8000f30:	4b6b      	ldr	r3, [pc, #428]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a6a      	ldr	r2, [pc, #424]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	f000 bda3 	b.w	8001a86 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_4)
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	f040 859f 	bne.w	8001a86 <MTimer_voidPWM+0xe3e>
			u32 L_u32TempCCMRX = 0 ;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	637b      	str	r3, [r7, #52]	@ 0x34
			u32 L_u32TempCCER  = 0 ;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	633b      	str	r3, [r7, #48]	@ 0x30
			u32 L_u32TempCR2   = 0 ;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC4E_BIT);
 8000f54:	4b62      	ldr	r3, [pc, #392]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	4a61      	ldr	r2, [pc, #388]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f5e:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_1->CCER;
 8000f60:	4b5f      	ldr	r3, [pc, #380]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	633b      	str	r3, [r7, #48]	@ 0x30
			L_u32TempCR2 = TIM_1->CR2;
 8000f66:	4b5e      	ldr	r3, [pc, #376]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			L_u32TempCCMRX = TIM_1->CCMR2;
 8000f6c:	4b5c      	ldr	r3, [pc, #368]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT0);
 8000f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT1);
 8000f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000f80:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT0);
 8000f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f88:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT1);
 8000f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000f90:	637b      	str	r3, [r7, #52]	@ 0x34
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8000f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f94:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000f98:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC4P_BIT);
 8000f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000fa0:	633b      	str	r3, [r7, #48]	@ 0x30
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS4_BIT);
 8000fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			TIM_1->CR2 = L_u32TempCR2;
 8000faa:	4a4d      	ldr	r2, [pc, #308]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fae:	6053      	str	r3, [r2, #4]
			TIM_1->CCMR2 = L_u32TempCCMRX;
 8000fb0:	4a4b      	ldr	r2, [pc, #300]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fb4:	61d3      	str	r3, [r2, #28]
			TIM_1->CCR4 = A_u16CompareValue;
 8000fb6:	4a4a      	ldr	r2, [pc, #296]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_1->CCER = L_u32TempCCER;
 8000fbc:	4a48      	ldr	r2, [pc, #288]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fc0:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC4PE_BIT);
 8000fc2:	4b47      	ldr	r3, [pc, #284]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a46      	ldr	r2, [pc, #280]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000fc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fcc:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC4FE_BIT) ;
 8000fce:	4b44      	ldr	r3, [pc, #272]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a43      	ldr	r2, [pc, #268]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000fd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fd8:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_1-> CCER , TIM1_CCER_CC4E_BIT) ;
 8000fda:	4b41      	ldr	r3, [pc, #260]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4a40      	ldr	r2, [pc, #256]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000fe0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fe4:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8000fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	4a3d      	ldr	r2, [pc, #244]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000fec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ff0:	6453      	str	r3, [r2, #68]	@ 0x44
			SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a3a      	ldr	r2, [pc, #232]	@ (80010e0 <MTimer_voidPWM+0x498>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6013      	str	r3, [r2, #0]
}
 8000ffe:	f000 bd42 	b.w	8001a86 <MTimer_voidPWM+0xe3e>
	else if (A_u8TimerSelected == TIM2_TYPE)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b02      	cmp	r3, #2
 8001006:	f040 81a9 	bne.w	800135c <MTimer_voidPWM+0x714>
		if (A_u8Channel == TIM_CHANNEL_1)
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d169      	bne.n	80010e4 <MTimer_voidPWM+0x49c>
			u32 L_u32TempCCMRX = 0 ;
 8001010:	2300      	movs	r3, #0
 8001012:	643b      	str	r3, [r7, #64]	@ 0x40
			u32 L_u32TempCCER  = 0 ;
 8001014:	2300      	movs	r3, #0
 8001016:	63fb      	str	r3, [r7, #60]	@ 0x3c
			u32 L_u32TempCR2   = 0 ;
 8001018:	2300      	movs	r3, #0
 800101a:	63bb      	str	r3, [r7, #56]	@ 0x38
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 800101c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001026:	f023 0301 	bic.w	r3, r3, #1
 800102a:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_2->CCER;
 800102c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	643b      	str	r3, [r7, #64]	@ 0x40
			L_u32TempCR2 = TIM_2->CR2;
 8001034:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	63bb      	str	r3, [r7, #56]	@ 0x38
			L_u32TempCCMRX = TIM_2->CCMR1;
 800103c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 8001044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001046:	f023 0310 	bic.w	r3, r3, #16
 800104a:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 800104c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800104e:	f023 0320 	bic.w	r3, r3, #32
 8001052:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 8001054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800105a:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 800105c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800105e:	f023 0301 	bic.w	r3, r3, #1
 8001062:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 8001064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001066:	f023 0302 	bic.w	r3, r3, #2
 800106a:	643b      	str	r3, [r7, #64]	@ 0x40
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 800106c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800106e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001072:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 8001074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001076:	f023 0302 	bic.w	r3, r3, #2
 800107a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			TIM_2->CR2 = L_u32TempCR2;
 800107c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001082:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR1 = L_u32TempCCMRX;
 8001084:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800108a:	6193      	str	r3, [r2, #24]
			TIM_2->CCR1 = A_u16CompareValue;
 800108c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001090:	88bb      	ldrh	r3, [r7, #4]
 8001092:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM_2->CCER = L_u32TempCCER;
 8001094:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800109a:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 800109c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010a6:	f043 0308 	orr.w	r3, r3, #8
 80010aa:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 80010ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 80010bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80010cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	f000 bcd3 	b.w	8001a86 <MTimer_voidPWM+0xe3e>
 80010e0:	40012c00 	.word	0x40012c00
		else if (A_u8Channel == TIM_CHANNEL_2)
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d167      	bne.n	80011ba <MTimer_voidPWM+0x572>
			u32 L_u32TempCCMRX = 0 ;
 80010ea:	2300      	movs	r3, #0
 80010ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
			u32 L_u32TempCCER  = 0 ;
 80010ee:	2300      	movs	r3, #0
 80010f0:	64bb      	str	r3, [r7, #72]	@ 0x48
		    u32 L_u32TempCR2   = 0 ;
 80010f2:	2300      	movs	r3, #0
 80010f4:	647b      	str	r3, [r7, #68]	@ 0x44
		    CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 80010f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001100:	f023 0310 	bic.w	r3, r3, #16
 8001104:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_2->CCER;
 8001106:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	64bb      	str	r3, [r7, #72]	@ 0x48
		    L_u32TempCR2 = TIM_2->CR2;
 800110e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	647b      	str	r3, [r7, #68]	@ 0x44
		    L_u32TempCCMRX = TIM_2->CCMR1;
 8001116:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 800111e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001120:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001124:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8001126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001128:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800112c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 800112e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001134:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8001136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001138:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800113c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 800113e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001140:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001144:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 8001146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001148:	f023 0320 	bic.w	r3, r3, #32
 800114c:	64bb      	str	r3, [r7, #72]	@ 0x48
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 800114e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001150:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001154:	64bb      	str	r3, [r7, #72]	@ 0x48
		    TIM_2->CR2 = L_u32TempCR2;
 8001156:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800115a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800115c:	6053      	str	r3, [r2, #4]
		    TIM_2->CCMR1 = L_u32TempCCMRX;
 800115e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001164:	6193      	str	r3, [r2, #24]
		    TIM_2->CCR2 = A_u16CompareValue;
 8001166:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800116a:	88bb      	ldrh	r3, [r7, #4]
 800116c:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_2->CCER = L_u32TempCCER;
 800116e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001174:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 8001176:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001180:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001184:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 8001186:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001190:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001194:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 8001196:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80011a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6013      	str	r3, [r2, #0]
}
 80011b6:	f000 bc66 	b.w	8001a86 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_3)
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d166      	bne.n	800128e <MTimer_voidPWM+0x646>
			u32 L_u32TempCCMRX = 0 ;
 80011c0:	2300      	movs	r3, #0
 80011c2:	65bb      	str	r3, [r7, #88]	@ 0x58
			u32 L_u32TempCCER  = 0 ;
 80011c4:	2300      	movs	r3, #0
 80011c6:	657b      	str	r3, [r7, #84]	@ 0x54
			u32 L_u32TempCR2   = 0 ;
 80011c8:	2300      	movs	r3, #0
 80011ca:	653b      	str	r3, [r7, #80]	@ 0x50
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 80011cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011da:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_2->CCER;
 80011dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	657b      	str	r3, [r7, #84]	@ 0x54
			L_u32TempCR2 = TIM_2->CR2;
 80011e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	653b      	str	r3, [r7, #80]	@ 0x50
			L_u32TempCCMRX = TIM_2->CCMR2;
 80011ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 80011f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011f6:	f023 0310 	bic.w	r3, r3, #16
 80011fa:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 80011fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011fe:	f023 0320 	bic.w	r3, r3, #32
 8001202:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 8001204:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001206:	f023 0301 	bic.w	r3, r3, #1
 800120a:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 800120c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800120e:	f023 0302 	bic.w	r3, r3, #2
 8001212:	65bb      	str	r3, [r7, #88]	@ 0x58
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8001214:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001216:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800121a:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 800121c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800121e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001222:	657b      	str	r3, [r7, #84]	@ 0x54
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 8001224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001226:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800122a:	657b      	str	r3, [r7, #84]	@ 0x54
			TIM_2->CR2 = L_u32TempCR2;
 800122c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001232:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR2 = L_u32TempCCMRX;
 8001234:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001238:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800123a:	61d3      	str	r3, [r2, #28]
			TIM_2->CCR3 = A_u16CompareValue;
 800123c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_2->CCER = L_u32TempCCER;
 8001244:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800124a:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 800124c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001256:	f043 0308 	orr.w	r3, r3, #8
 800125a:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 800125c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 800126c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800127a:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 800127c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	e3fb      	b.n	8001a86 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_4)
 800128e:	79bb      	ldrb	r3, [r7, #6]
 8001290:	2b04      	cmp	r3, #4
 8001292:	f040 83f8 	bne.w	8001a86 <MTimer_voidPWM+0xe3e>
			u32 L_u32TempCCMRX = 0 ;
 8001296:	2300      	movs	r3, #0
 8001298:	667b      	str	r3, [r7, #100]	@ 0x64
			u32 L_u32TempCCER  = 0 ;
 800129a:	2300      	movs	r3, #0
 800129c:	663b      	str	r3, [r7, #96]	@ 0x60
			u32 L_u32TempCR2   = 0 ;
 800129e:	2300      	movs	r3, #0
 80012a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 80012a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012b0:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_2->CCER;
 80012b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	663b      	str	r3, [r7, #96]	@ 0x60
			L_u32TempCR2 = TIM_2->CR2;
 80012ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
			L_u32TempCCMRX = TIM_2->CCMR2;
 80012c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC4M_BIT0);
 80012ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012d0:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC4M_BIT1);
 80012d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80012d8:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC4S_BIT0);
 80012da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012e0:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC4S_BIT1);
 80012e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80012e8:	667b      	str	r3, [r7, #100]	@ 0x64
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 80012ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012ec:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80012f0:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 80012f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80012f8:	663b      	str	r3, [r7, #96]	@ 0x60
			TIM_2->CR2 = L_u32TempCR2;
 80012fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001300:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR2 = L_u32TempCCMRX;
 8001302:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001306:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001308:	61d3      	str	r3, [r2, #28]
			TIM_2->CCR4 = A_u16CompareValue;
 800130a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800130e:	88bb      	ldrh	r3, [r7, #4]
 8001310:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_2->CCER = L_u32TempCCER;
 8001312:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001316:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001318:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 800131a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001324:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001328:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 800132a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001334:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001338:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 800133a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001344:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001348:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 800134a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6013      	str	r3, [r2, #0]
}
 800135a:	e394      	b.n	8001a86 <MTimer_voidPWM+0xe3e>
	else if (A_u8TimerSelected == TIM3_TYPE)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	2b03      	cmp	r3, #3
 8001360:	f040 81d1 	bne.w	8001706 <MTimer_voidPWM+0xabe>
		if (A_u8Channel == TIM_CHANNEL_1)
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d166      	bne.n	8001438 <MTimer_voidPWM+0x7f0>
			u32 L_u32TempCCMRX = 0 ;
 800136a:	2300      	movs	r3, #0
 800136c:	673b      	str	r3, [r7, #112]	@ 0x70
			u32 L_u32TempCCER  = 0 ;
 800136e:	2300      	movs	r3, #0
 8001370:	66fb      	str	r3, [r7, #108]	@ 0x6c
			u32 L_u32TempCR2   = 0 ;
 8001372:	2300      	movs	r3, #0
 8001374:	66bb      	str	r3, [r7, #104]	@ 0x68
			CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001376:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_3->CCER;
 8001386:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	673b      	str	r3, [r7, #112]	@ 0x70
			L_u32TempCR2 = TIM_3->CR2;
 800138e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	66bb      	str	r3, [r7, #104]	@ 0x68
			L_u32TempCCMRX = TIM_3->CCMR1;
 8001396:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 800139e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013a0:	f023 0310 	bic.w	r3, r3, #16
 80013a4:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 80013a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013a8:	f023 0320 	bic.w	r3, r3, #32
 80013ac:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 80013ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80013b4:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 80013b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 80013be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013c0:	f023 0302 	bic.w	r3, r3, #2
 80013c4:	673b      	str	r3, [r7, #112]	@ 0x70
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 80013c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80013cc:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 80013ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013d0:	f023 0302 	bic.w	r3, r3, #2
 80013d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
			TIM_3->CR2 = L_u32TempCR2;
 80013d6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80013da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80013dc:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR1 = L_u32TempCCMRX;
 80013de:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80013e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013e4:	6193      	str	r3, [r2, #24]
			TIM_3->CCR1 = A_u16CompareValue;
 80013e6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80013ea:	88bb      	ldrh	r3, [r7, #4]
 80013ec:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM_3->CCER = L_u32TempCCER;
 80013ee:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80013f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013f4:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 80013f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 8001406:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001416:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001426:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6013      	str	r3, [r2, #0]
}
 8001436:	e326      	b.n	8001a86 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_2)
 8001438:	79bb      	ldrb	r3, [r7, #6]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d166      	bne.n	800150c <MTimer_voidPWM+0x8c4>
			u32 L_u32TempCCMRX = 0 ;
 800143e:	2300      	movs	r3, #0
 8001440:	67fb      	str	r3, [r7, #124]	@ 0x7c
			u32 L_u32TempCCER  = 0 ;
 8001442:	2300      	movs	r3, #0
 8001444:	67bb      	str	r3, [r7, #120]	@ 0x78
		    u32 L_u32TempCR2   = 0 ;
 8001446:	2300      	movs	r3, #0
 8001448:	677b      	str	r3, [r7, #116]	@ 0x74
		    CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 800144a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001454:	f023 0310 	bic.w	r3, r3, #16
 8001458:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_3->CCER;
 800145a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	67bb      	str	r3, [r7, #120]	@ 0x78
		    L_u32TempCR2 = TIM_3->CR2;
 8001462:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	677b      	str	r3, [r7, #116]	@ 0x74
		    L_u32TempCCMRX = TIM_3->CCMR1;
 800146a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8001472:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001474:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001478:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 800147a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800147c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001480:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8001482:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001488:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 800148a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800148c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001490:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001494:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001498:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 800149a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800149c:	f023 0320 	bic.w	r3, r3, #32
 80014a0:	67bb      	str	r3, [r7, #120]	@ 0x78
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 80014a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80014a8:	67bb      	str	r3, [r7, #120]	@ 0x78
		    TIM_3->CR2 = L_u32TempCR2;
 80014aa:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80014ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014b0:	6053      	str	r3, [r2, #4]
		    TIM_3->CCMR1 = L_u32TempCCMRX;
 80014b2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80014b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80014b8:	6193      	str	r3, [r2, #24]
		    TIM_3->CCR2 = A_u16CompareValue;
 80014ba:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_3->CCER = L_u32TempCCER;
 80014c2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80014c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014c8:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 80014ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80014d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014d8:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 80014da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80014e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014e8:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 80014ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80014f4:	f043 0310 	orr.w	r3, r3, #16
 80014f8:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80014fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6013      	str	r3, [r2, #0]
}
 800150a:	e2bc      	b.n	8001a86 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_3)
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d17d      	bne.n	800160e <MTimer_voidPWM+0x9c6>
			u32 L_u32TempCCMRX = 0 ;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			u32 L_u32TempCCER  = 0 ;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			u32 L_u32TempCR2   = 0 ;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 8001524:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800152e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001532:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_3->CCER;
 8001534:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			L_u32TempCR2 = TIM_3->CR2;
 800153e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			L_u32TempCCMRX = TIM_3->CCMR2;
 8001548:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 8001552:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001556:	f023 0310 	bic.w	r3, r3, #16
 800155a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 800155e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001562:	f023 0320 	bic.w	r3, r3, #32
 8001566:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 800156a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800156e:	f023 0301 	bic.w	r3, r3, #1
 8001572:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 8001576:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800157a:	f023 0302 	bic.w	r3, r3, #2
 800157e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			L_u32TempCCMRX |= (TIM_PWM_MODE1 <<4U) ;
 8001582:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001586:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800158a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 800158e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001592:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001596:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 800159a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800159e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80015a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			TIM_3->CR2 = L_u32TempCR2;
 80015a6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015ae:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR2 = L_u32TempCCMRX;
 80015b0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015b8:	61d3      	str	r3, [r2, #28]
			TIM_3->CCR3 = A_u16CompareValue;
 80015ba:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015be:	88bb      	ldrh	r3, [r7, #4]
 80015c0:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_3->CCER = L_u32TempCCER;
 80015c2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015ca:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 80015cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 80015dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 80015ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fa:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80015fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	e23b      	b.n	8001a86 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_4)
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	2b04      	cmp	r3, #4
 8001612:	f040 8238 	bne.w	8001a86 <MTimer_voidPWM+0xe3e>
			u32 L_u32TempCCMRX = 0 ;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			u32 L_u32TempCCER  = 0 ;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			u32 L_u32TempCR2   = 0 ;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 8001628:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001632:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001636:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_3->CCER;
 8001638:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			L_u32TempCR2 = TIM_3->CR2;
 8001642:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			L_u32TempCCMRX = TIM_3->CCMR2;
 800164c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8001656:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800165a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800165e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8001662:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001666:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800166a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 800166e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001672:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001676:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 800167a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800167e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001682:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001686:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800168a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800168e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 8001692:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001696:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800169a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			TIM_3->CR2 = L_u32TempCR2;
 800169e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016a6:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR2 = L_u32TempCCMRX;
 80016a8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016b0:	61d3      	str	r3, [r2, #28]
			TIM_3->CCR4 = A_u16CompareValue;
 80016b2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016b6:	88bb      	ldrh	r3, [r7, #4]
 80016b8:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_3->CCER = L_u32TempCCER;
 80016ba:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016c2:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 80016c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016d2:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 80016d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016e2:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 80016e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016f2:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80016f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	e1bf      	b.n	8001a86 <MTimer_voidPWM+0xe3e>
	else if (A_u8TimerSelected == TIM4_TYPE)
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b04      	cmp	r3, #4
 800170a:	f040 81bc 	bne.w	8001a86 <MTimer_voidPWM+0xe3e>
		if (A_u8Channel == TIM_CHANNEL_1)
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d16c      	bne.n	80017ee <MTimer_voidPWM+0xba6>
			u32 L_u32TempCCMRX = 0 ;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			u32 L_u32TempCCER  = 0 ;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			u32 L_u32TempCR2   = 0 ;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001726:	4ba2      	ldr	r3, [pc, #648]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4aa1      	ldr	r2, [pc, #644]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_4->CCER;
 8001732:	4b9f      	ldr	r3, [pc, #636]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			L_u32TempCR2 = TIM_4->CR2;
 800173a:	4b9d      	ldr	r3, [pc, #628]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			L_u32TempCCMRX = TIM_4->CCMR1;
 8001742:	4b9b      	ldr	r3, [pc, #620]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 800174a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800174e:	f023 0310 	bic.w	r3, r3, #16
 8001752:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 8001756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800175a:	f023 0320 	bic.w	r3, r3, #32
 800175e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 8001762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800176a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 800176e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 800177a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800177e:	f023 0302 	bic.w	r3, r3, #2
 8001782:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8001786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800178a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800178e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 8001792:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001796:	f023 0302 	bic.w	r3, r3, #2
 800179a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			TIM_4->CR2 = L_u32TempCR2;
 800179e:	4a84      	ldr	r2, [pc, #528]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80017a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017a4:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR1 = L_u32TempCCMRX;
 80017a6:	4a82      	ldr	r2, [pc, #520]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80017a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80017ac:	6193      	str	r3, [r2, #24]
			TIM_4->CCR1 = A_u16CompareValue;
 80017ae:	4a80      	ldr	r2, [pc, #512]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80017b0:	88bb      	ldrh	r3, [r7, #4]
 80017b2:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM_4->CCER = L_u32TempCCER;
 80017b4:	4a7e      	ldr	r2, [pc, #504]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80017b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80017ba:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 80017bc:	4b7c      	ldr	r3, [pc, #496]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a7b      	ldr	r2, [pc, #492]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80017c2:	f043 0308 	orr.w	r3, r3, #8
 80017c6:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 80017c8:	4b79      	ldr	r3, [pc, #484]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a78      	ldr	r2, [pc, #480]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 80017d4:	4b76      	ldr	r3, [pc, #472]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4a75      	ldr	r2, [pc, #468]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80017e0:	4b73      	ldr	r3, [pc, #460]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a72      	ldr	r2, [pc, #456]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	e14b      	b.n	8001a86 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_2)
 80017ee:	79bb      	ldrb	r3, [r7, #6]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d16c      	bne.n	80018ce <MTimer_voidPWM+0xc86>
			u32 L_u32TempCCMRX = 0 ;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			u32 L_u32TempCCER  = 0 ;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    u32 L_u32TempCR2   = 0 ;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		    CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 8001806:	4b6a      	ldr	r3, [pc, #424]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a69      	ldr	r2, [pc, #420]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 800180c:	f023 0310 	bic.w	r3, r3, #16
 8001810:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_4->CCER;
 8001812:	4b67      	ldr	r3, [pc, #412]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    L_u32TempCR2 = TIM_4->CR2;
 800181a:	4b65      	ldr	r3, [pc, #404]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		    L_u32TempCCMRX = TIM_4->CCMR1;
 8001822:	4b63      	ldr	r3, [pc, #396]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 800182a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800182e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001832:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8001836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800183a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800183e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8001842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001846:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800184a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 800184e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001852:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001856:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 800185a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800185e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001862:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 8001866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800186a:	f023 0320 	bic.w	r3, r3, #32
 800186e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 8001872:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800187a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    TIM_4->CR2 = L_u32TempCR2;
 800187e:	4a4c      	ldr	r2, [pc, #304]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001880:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001884:	6053      	str	r3, [r2, #4]
		    TIM_4->CCMR1 = L_u32TempCCMRX;
 8001886:	4a4a      	ldr	r2, [pc, #296]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001888:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800188c:	6193      	str	r3, [r2, #24]
		    TIM_4->CCR2 = A_u16CompareValue;
 800188e:	4a48      	ldr	r2, [pc, #288]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001890:	88bb      	ldrh	r3, [r7, #4]
 8001892:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_4->CCER = L_u32TempCCER;
 8001894:	4a46      	ldr	r2, [pc, #280]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800189a:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 800189c:	4b44      	ldr	r3, [pc, #272]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a43      	ldr	r2, [pc, #268]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80018a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018a6:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 80018a8:	4b41      	ldr	r3, [pc, #260]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a40      	ldr	r2, [pc, #256]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80018ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018b2:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 80018b4:	4b3e      	ldr	r3, [pc, #248]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4a3d      	ldr	r2, [pc, #244]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80018ba:	f043 0310 	orr.w	r3, r3, #16
 80018be:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80018c0:	4b3b      	ldr	r3, [pc, #236]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3a      	ldr	r2, [pc, #232]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	e0db      	b.n	8001a86 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_3)
 80018ce:	79bb      	ldrb	r3, [r7, #6]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d16f      	bne.n	80019b4 <MTimer_voidPWM+0xd6c>
			u32 L_u32TempCCMRX = 0 ;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			u32 L_u32TempCCER  = 0 ;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			u32 L_u32TempCR2   = 0 ;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 80018e6:	4b32      	ldr	r3, [pc, #200]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a31      	ldr	r2, [pc, #196]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80018ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018f0:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_4->CCER;
 80018f2:	4b2f      	ldr	r3, [pc, #188]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			L_u32TempCR2 = TIM_4->CR2;
 80018fa:	4b2d      	ldr	r3, [pc, #180]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			L_u32TempCCMRX = TIM_4->CCMR2;
 8001902:	4b2b      	ldr	r3, [pc, #172]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 800190a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800190e:	f023 0310 	bic.w	r3, r3, #16
 8001912:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 8001916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800191a:	f023 0320 	bic.w	r3, r3, #32
 800191e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 8001922:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 800192e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001932:	f023 0302 	bic.w	r3, r3, #2
 8001936:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 800193a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800193e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001942:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 8001946:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800194a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800194e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 8001952:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001956:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800195a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			TIM_4->CR2 = L_u32TempCR2;
 800195e:	4a14      	ldr	r2, [pc, #80]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001960:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001964:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR2 = L_u32TempCCMRX;
 8001966:	4a12      	ldr	r2, [pc, #72]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001968:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800196c:	61d3      	str	r3, [r2, #28]
			TIM_4->CCR3 = A_u16CompareValue;
 800196e:	4a10      	ldr	r2, [pc, #64]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001970:	88bb      	ldrh	r3, [r7, #4]
 8001972:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_4->CCER = L_u32TempCCER;
 8001974:	4a0e      	ldr	r2, [pc, #56]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001976:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800197a:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	4a0b      	ldr	r2, [pc, #44]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001982:	f043 0308 	orr.w	r3, r3, #8
 8001986:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 8001988:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	4a08      	ldr	r2, [pc, #32]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 800199a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199e:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80019a0:	4b03      	ldr	r3, [pc, #12]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a02      	ldr	r2, [pc, #8]	@ (80019b0 <MTimer_voidPWM+0xd68>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	e06b      	b.n	8001a86 <MTimer_voidPWM+0xe3e>
 80019ae:	bf00      	nop
 80019b0:	40008000 	.word	0x40008000
		else if (A_u8Channel == TIM_CHANNEL_4)
 80019b4:	79bb      	ldrb	r3, [r7, #6]
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d165      	bne.n	8001a86 <MTimer_voidPWM+0xe3e>
			u32 L_u32TempCCMRX = 0 ;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			u32 L_u32TempCCER  = 0 ;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			u32 L_u32TempCR2   = 0 ;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 80019cc:	4b30      	ldr	r3, [pc, #192]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 80019d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019d6:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_4->CCER;
 80019d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			L_u32TempCR2 = TIM_4->CR2;
 80019e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			L_u32TempCCMRX = TIM_4->CCMR2;
 80019e8:	4b29      	ldr	r3, [pc, #164]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 80019f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 80019fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001a04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8001a08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8001a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001a1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a24:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001a28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 8001a2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001a34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			TIM_4->CR2 = L_u32TempCR2;
 8001a38:	4a15      	ldr	r2, [pc, #84]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 8001a3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a3e:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR2 = L_u32TempCCMRX;
 8001a40:	4a13      	ldr	r2, [pc, #76]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 8001a42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a46:	61d3      	str	r3, [r2, #28]
			TIM_4->CCR4 = A_u16CompareValue;
 8001a48:	4a11      	ldr	r2, [pc, #68]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 8001a4a:	88bb      	ldrh	r3, [r7, #4]
 8001a4c:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_4->CCER = L_u32TempCCER;
 8001a4e:	4a10      	ldr	r2, [pc, #64]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 8001a50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a54:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 8001a5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a60:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 8001a68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a6c:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4a07      	ldr	r2, [pc, #28]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 8001a74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a78:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001a7a:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <MTimer_voidPWM+0xe48>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6013      	str	r3, [r2, #0]
}
 8001a86:	bf00      	nop
 8001a88:	37c8      	adds	r7, #200	@ 0xc8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40008000 	.word	0x40008000

08001a94 <MUART_voidEnable>:

    A_xUART_Type->SR = 0;				    	          							             ;
}

void MUART_voidEnable( USART_t *A_xUART_Type)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	SET_BIT(A_xUART_Type->CR1,MUSART_CR1_UE_BIT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	60da      	str	r2, [r3, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
	...

08001ab4 <MUART_u8ReceiveByteASynch>:
	}
	return L_u8Data;
}

void MUART_u8ReceiveByteASynch (USART_t *A_xUART_Type )
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	NVIC_voidEnableInterrupt(37); //enable uart in nvic
 8001abc:	2025      	movs	r0, #37	@ 0x25
 8001abe:	f7fe fdc3 	bl	8000648 <NVIC_voidEnableInterrupt>
	if(local_u8_RX_Busyflag == 0)
 8001ac2:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <MUART_u8ReceiveByteASynch+0x30>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d108      	bne.n	8001adc <MUART_u8ReceiveByteASynch+0x28>
	{
		local_u8_RX_Busyflag=1;
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <MUART_u8ReceiveByteASynch+0x30>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
		SET_BIT(A_xUART_Type->CR1 , MUSART_CR1_RXNEIE_BIT);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f043 0220 	orr.w	r2, r3, #32
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]
	}
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200001c3 	.word	0x200001c3

08001ae8 <MUART_Buffer_Write>:
	case DISABLE:  CLR_BIT(USARTx->CR1 , MUSART_CR1_RXNEIE_BIT); break;
	}
}

Buffer_state MUART_Buffer_Write()
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
	Buffer_state Local_BufferState = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	71fb      	strb	r3, [r7, #7]
	if (G_u8RxCounter == MAX_SIZE_DATA_BUFFER)
 8001af2:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <MUART_Buffer_Write+0x6c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2bc8      	cmp	r3, #200	@ 0xc8
 8001af8:	d102      	bne.n	8001b00 <MUART_Buffer_Write+0x18>
	{
		Local_BufferState = Buffer_is_full;
 8001afa:	2301      	movs	r3, #1
 8001afc:	71fb      	strb	r3, [r7, #7]
 8001afe:	e023      	b.n	8001b48 <MUART_Buffer_Write+0x60>
	}else{
		Local_BufferState = Buffer_is_success;
 8001b00:	2302      	movs	r3, #2
 8001b02:	71fb      	strb	r3, [r7, #7]
		//TODO Different UART
		G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = MUART_u8ReadDataRegister(UART1);
 8001b04:	4b14      	ldr	r3, [pc, #80]	@ (8001b58 <MUART_Buffer_Write+0x70>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461c      	mov	r4, r3
 8001b0a:	4814      	ldr	r0, [pc, #80]	@ (8001b5c <MUART_Buffer_Write+0x74>)
 8001b0c:	f000 f8e0 	bl	8001cd0 <MUART_u8ReadDataRegister>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <MUART_Buffer_Write+0x78>)
 8001b16:	551a      	strb	r2, [r3, r4]
		G_u8RxBufferTailIndex = (G_u8RxBufferTailIndex+1) % MAX_SIZE_DATA_BUFFER;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <MUART_Buffer_Write+0x70>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	4a11      	ldr	r2, [pc, #68]	@ (8001b64 <MUART_Buffer_Write+0x7c>)
 8001b20:	fb82 1203 	smull	r1, r2, r2, r3
 8001b24:	1191      	asrs	r1, r2, #6
 8001b26:	17da      	asrs	r2, r3, #31
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	21c8      	movs	r1, #200	@ 0xc8
 8001b2c:	fb01 f202 	mul.w	r2, r1, r2
 8001b30:	1a9a      	subs	r2, r3, r2
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <MUART_Buffer_Write+0x70>)
 8001b36:	701a      	strb	r2, [r3, #0]
		G_u8RxCounter++;
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <MUART_Buffer_Write+0x6c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <MUART_Buffer_Write+0x6c>)
 8001b42:	701a      	strb	r2, [r3, #0]
		APP_Sort_Buffer();
 8001b44:	f000 f810 	bl	8001b68 <APP_Sort_Buffer>
	}
	return Local_BufferState;
 8001b48:	79fb      	ldrb	r3, [r7, #7]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd90      	pop	{r4, r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200001c2 	.word	0x200001c2
 8001b58:	200001c1 	.word	0x200001c1
 8001b5c:	40013800 	.word	0x40013800
 8001b60:	200000f8 	.word	0x200000f8
 8001b64:	51eb851f 	.word	0x51eb851f

08001b68 <APP_Sort_Buffer>:
	}
	return L_ErrorStatus;
}

void APP_Sort_Buffer()
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
	u8 L_u8Temp =0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	717b      	strb	r3, [r7, #5]
	u8 i = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	71fb      	strb	r3, [r7, #7]
	u8 L_u8Sorted = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	71bb      	strb	r3, [r7, #6]
	if(G_u8RxBufferHeadIndex < G_u8RxBufferTailIndex ){
 8001b7a:	4b52      	ldr	r3, [pc, #328]	@ (8001cc4 <APP_Sort_Buffer+0x15c>)
 8001b7c:	781a      	ldrb	r2, [r3, #0]
 8001b7e:	4b52      	ldr	r3, [pc, #328]	@ (8001cc8 <APP_Sort_Buffer+0x160>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d22a      	bcs.n	8001bdc <APP_Sort_Buffer+0x74>
		for (i = G_u8RxBufferTailIndex - 1; i > G_u8RxBufferHeadIndex ; i-- )
 8001b86:	4b50      	ldr	r3, [pc, #320]	@ (8001cc8 <APP_Sort_Buffer+0x160>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	71fb      	strb	r3, [r7, #7]
 8001b8e:	e01f      	b.n	8001bd0 <APP_Sort_Buffer+0x68>
		{
			if(G_Au8UART_RxBuffer[i] < G_Au8UART_RxBuffer[i-1])
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	4a4e      	ldr	r2, [pc, #312]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001b94:	5cd2      	ldrb	r2, [r2, r3]
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	494c      	ldr	r1, [pc, #304]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001b9c:	5ccb      	ldrb	r3, [r1, r3]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d210      	bcs.n	8001bc4 <APP_Sort_Buffer+0x5c>
			{
				L_u8Temp = G_Au8UART_RxBuffer[i];
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	4a49      	ldr	r2, [pc, #292]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	717b      	strb	r3, [r7, #5]
				G_Au8UART_RxBuffer[i] = G_Au8UART_RxBuffer[i-1];
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	1e5a      	subs	r2, r3, #1
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	4946      	ldr	r1, [pc, #280]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001bb2:	5c89      	ldrb	r1, [r1, r2]
 8001bb4:	4a45      	ldr	r2, [pc, #276]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001bb6:	54d1      	strb	r1, [r2, r3]
				G_Au8UART_RxBuffer[i-1] = L_u8Temp;
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	4943      	ldr	r1, [pc, #268]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001bbe:	797a      	ldrb	r2, [r7, #5]
 8001bc0:	54ca      	strb	r2, [r1, r3]
 8001bc2:	e002      	b.n	8001bca <APP_Sort_Buffer+0x62>
			}else{
				//Buffer is sorted
				L_u8Sorted = 1;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	71bb      	strb	r3, [r7, #6]
				break;
 8001bc8:	e076      	b.n	8001cb8 <APP_Sort_Buffer+0x150>
		for (i = G_u8RxBufferTailIndex - 1; i > G_u8RxBufferHeadIndex ; i-- )
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	71fb      	strb	r3, [r7, #7]
 8001bd0:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc4 <APP_Sort_Buffer+0x15c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d8da      	bhi.n	8001b90 <APP_Sort_Buffer+0x28>
		else{
			//Buffer is sorted
		}
	}

}
 8001bda:	e06d      	b.n	8001cb8 <APP_Sort_Buffer+0x150>
		if(G_u8RxBufferTailIndex  != 0){
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc8 <APP_Sort_Buffer+0x160>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d069      	beq.n	8001cb8 <APP_Sort_Buffer+0x150>
		for (i = G_u8RxBufferTailIndex - 1; i > 0; i-- )
 8001be4:	4b38      	ldr	r3, [pc, #224]	@ (8001cc8 <APP_Sort_Buffer+0x160>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	71fb      	strb	r3, [r7, #7]
 8001bec:	e01f      	b.n	8001c2e <APP_Sort_Buffer+0xc6>
			if(G_Au8UART_RxBuffer[i] < G_Au8UART_RxBuffer[i-1])
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	4a36      	ldr	r2, [pc, #216]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001bf2:	5cd2      	ldrb	r2, [r2, r3]
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	4934      	ldr	r1, [pc, #208]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d210      	bcs.n	8001c22 <APP_Sort_Buffer+0xba>
				L_u8Temp = G_Au8UART_RxBuffer[i];
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	4a32      	ldr	r2, [pc, #200]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c04:	5cd3      	ldrb	r3, [r2, r3]
 8001c06:	717b      	strb	r3, [r7, #5]
				G_Au8UART_RxBuffer[i] = G_Au8UART_RxBuffer[i-1];
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	1e5a      	subs	r2, r3, #1
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	492f      	ldr	r1, [pc, #188]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c10:	5c89      	ldrb	r1, [r1, r2]
 8001c12:	4a2e      	ldr	r2, [pc, #184]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c14:	54d1      	strb	r1, [r2, r3]
				G_Au8UART_RxBuffer[i-1] = L_u8Temp;
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	492c      	ldr	r1, [pc, #176]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c1c:	797a      	ldrb	r2, [r7, #5]
 8001c1e:	54ca      	strb	r2, [r1, r3]
 8001c20:	e002      	b.n	8001c28 <APP_Sort_Buffer+0xc0>
				L_u8Sorted = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	71bb      	strb	r3, [r7, #6]
				break;
 8001c26:	e005      	b.n	8001c34 <APP_Sort_Buffer+0xcc>
		for (i = G_u8RxBufferTailIndex - 1; i > 0; i-- )
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1dc      	bne.n	8001bee <APP_Sort_Buffer+0x86>
		if(!L_u8Sorted){
 8001c34:	79bb      	ldrb	r3, [r7, #6]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d13e      	bne.n	8001cb8 <APP_Sort_Buffer+0x150>
			if(G_Au8UART_RxBuffer[0] < G_Au8UART_RxBuffer[MAX_SIZE_DATA_BUFFER - 1]){
 8001c3a:	4b24      	ldr	r3, [pc, #144]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c3c:	781a      	ldrb	r2, [r3, #0]
 8001c3e:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c40:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d20e      	bcs.n	8001c66 <APP_Sort_Buffer+0xfe>
				i= MAX_SIZE_DATA_BUFFER - 1; //last element in buffer
 8001c48:	23c7      	movs	r3, #199	@ 0xc7
 8001c4a:	71fb      	strb	r3, [r7, #7]
				L_u8Temp = G_Au8UART_RxBuffer[0];
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	717b      	strb	r3, [r7, #5]
				G_Au8UART_RxBuffer[0] = G_Au8UART_RxBuffer[i];
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	4a1d      	ldr	r2, [pc, #116]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c56:	5cd2      	ldrb	r2, [r2, r3]
 8001c58:	4b1c      	ldr	r3, [pc, #112]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c5a:	701a      	strb	r2, [r3, #0]
				G_Au8UART_RxBuffer[i] = L_u8Temp;
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	491b      	ldr	r1, [pc, #108]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c60:	797a      	ldrb	r2, [r7, #5]
 8001c62:	54ca      	strb	r2, [r1, r3]
 8001c64:	e022      	b.n	8001cac <APP_Sort_Buffer+0x144>
			i = MAX_SIZE_DATA_BUFFER - 1;
 8001c66:	23c7      	movs	r3, #199	@ 0xc7
 8001c68:	71fb      	strb	r3, [r7, #7]
				for(;i> G_u8RxBufferHeadIndex ; i-- ){
 8001c6a:	e01f      	b.n	8001cac <APP_Sort_Buffer+0x144>
					if(G_Au8UART_RxBuffer[i] < G_Au8UART_RxBuffer[i-1])
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4a17      	ldr	r2, [pc, #92]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c70:	5cd2      	ldrb	r2, [r2, r3]
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	4915      	ldr	r1, [pc, #84]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d210      	bcs.n	8001ca0 <APP_Sort_Buffer+0x138>
						L_u8Temp = G_Au8UART_RxBuffer[i];
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	4a12      	ldr	r2, [pc, #72]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c82:	5cd3      	ldrb	r3, [r2, r3]
 8001c84:	717b      	strb	r3, [r7, #5]
						G_Au8UART_RxBuffer[i] = G_Au8UART_RxBuffer[i-1];
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	1e5a      	subs	r2, r3, #1
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	490f      	ldr	r1, [pc, #60]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c8e:	5c89      	ldrb	r1, [r1, r2]
 8001c90:	4a0e      	ldr	r2, [pc, #56]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c92:	54d1      	strb	r1, [r2, r3]
						G_Au8UART_RxBuffer[i-1] = L_u8Temp;
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	490c      	ldr	r1, [pc, #48]	@ (8001ccc <APP_Sort_Buffer+0x164>)
 8001c9a:	797a      	ldrb	r2, [r7, #5]
 8001c9c:	54ca      	strb	r2, [r1, r3]
 8001c9e:	e002      	b.n	8001ca6 <APP_Sort_Buffer+0x13e>
						L_u8Sorted = 1;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	71bb      	strb	r3, [r7, #6]
						break;
 8001ca4:	e008      	b.n	8001cb8 <APP_Sort_Buffer+0x150>
				for(;i> G_u8RxBufferHeadIndex ; i-- ){
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	71fb      	strb	r3, [r7, #7]
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <APP_Sort_Buffer+0x15c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	79fa      	ldrb	r2, [r7, #7]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d8da      	bhi.n	8001c6c <APP_Sort_Buffer+0x104>
}
 8001cb6:	e7ff      	b.n	8001cb8 <APP_Sort_Buffer+0x150>
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	200001c0 	.word	0x200001c0
 8001cc8:	200001c1 	.word	0x200001c1
 8001ccc:	200000f8 	.word	0x200000f8

08001cd0 <MUART_u8ReadDataRegister>:
{
	USARTx->SR = 0;
}

u8 MUART_u8ReadDataRegister(USART_t *USARTx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	return USARTx -> DR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	b2db      	uxtb	r3, r3
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <MUART1_voidSetCallBack>:

void MUART1_voidSetCallBack( Buffer_state (*ptr) (void) )
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

	MUSART1_CallBack =ptr;
 8001cf0:	4a03      	ldr	r2, [pc, #12]	@ (8001d00 <MUART1_voidSetCallBack+0x18>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6013      	str	r3, [r2, #0]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	200001c4 	.word	0x200001c4

08001d04 <USART1_IRQHandler>:
	MUSART2_CallBack = ptr;
}

/*IRQ of UART1*/
void USART1_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
    UART1->SR = 0;
 8001d08:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <USART1_IRQHandler+0x24>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
    //G_u8DataFromUART = MUART_u8ReadDataRegister(UART1);
    local_u8_RX_Busyflag=0;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <USART1_IRQHandler+0x28>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
	if(MUSART1_CallBack!=NULL)
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <USART1_IRQHandler+0x2c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <USART1_IRQHandler+0x1e>
	{
		MUSART1_CallBack();
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <USART1_IRQHandler+0x2c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4798      	blx	r3
	}
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40013800 	.word	0x40013800
 8001d2c:	200001c3 	.word	0x200001c3
 8001d30:	200001c4 	.word	0x200001c4

08001d34 <USART2_IRQHandler>:

/*IRQ of UART2*/
void USART2_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	UART2->SR = 0;
 8001d38:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <USART2_IRQHandler+0x24>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
	//G_u8DataFromUART = MUART_u8ReadDataRegister(UART2);
	local_u8_RX_Busyflag=0;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <USART2_IRQHandler+0x28>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
	if(MUSART2_CallBack!=NULL)
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <USART2_IRQHandler+0x2c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <USART2_IRQHandler+0x1e>
	{
		MUSART2_CallBack();
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <USART2_IRQHandler+0x2c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4798      	blx	r3
	}
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40004400 	.word	0x40004400
 8001d5c:	200001c3 	.word	0x200001c3
 8001d60:	200001c8 	.word	0x200001c8

08001d64 <HUltrasonic_voidInit>:
	return 0;
}


void HUltrasonic_voidInit (u8 Ultra_Num)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	switch(Ultra_Num)
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d84a      	bhi.n	8001e0c <HUltrasonic_voidInit+0xa8>
 8001d76:	a201      	add	r2, pc, #4	@ (adr r2, 8001d7c <HUltrasonic_voidInit+0x18>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001d8d 	.word	0x08001d8d
 8001d80:	08001dad 	.word	0x08001dad
 8001d84:	08001dcd 	.word	0x08001dcd
 8001d88:	08001ded 	.word	0x08001ded
	{
	case 1:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic1_TrigPort,Ultrasonic1_TrigPin,GPIO_OUTPUT_2M_PP);
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	2109      	movs	r1, #9
 8001d90:	2001      	movs	r0, #1
 8001d92:	f7fe f9ed 	bl	8000170 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic1_TrigPort, Ultrasonic1_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic1_EchoPort,Ultrasonic1_EchoPin,GPIO_INPUT_PU_PD);
 8001d96:	2208      	movs	r2, #8
 8001d98:	210a      	movs	r1, #10
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7fe f9e8 	bl	8000170 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic1_EchoPort, Ultrasonic1_EchoPin, GPIO_INPUT_PD);
 8001da0:	2200      	movs	r2, #0
 8001da2:	210a      	movs	r1, #10
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7fe fb83 	bl	80004b0 <GPIO_voidSetPinValue>
		break;
 8001daa:	e02f      	b.n	8001e0c <HUltrasonic_voidInit+0xa8>
	case 2:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic2_TrigPort,Ultrasonic2_TrigPin,GPIO_OUTPUT_2M_PP);
 8001dac:	2202      	movs	r2, #2
 8001dae:	2102      	movs	r1, #2
 8001db0:	2001      	movs	r0, #1
 8001db2:	f7fe f9dd 	bl	8000170 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic2_TrigPort, Ultrasonic2_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic2_EchoPort,Ultrasonic2_EchoPin,GPIO_INPUT_PU_PD);
 8001db6:	2208      	movs	r2, #8
 8001db8:	2103      	movs	r1, #3
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f7fe f9d8 	bl	8000170 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic2_EchoPort, Ultrasonic2_EchoPin, GPIO_INPUT_PD);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f7fe fb73 	bl	80004b0 <GPIO_voidSetPinValue>
		break;
 8001dca:	e01f      	b.n	8001e0c <HUltrasonic_voidInit+0xa8>
	case 3:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic3_TrigPort,Ultrasonic3_TrigPin,GPIO_OUTPUT_2M_PP);
 8001dcc:	2202      	movs	r2, #2
 8001dce:	2104      	movs	r1, #4
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f7fe f9cd 	bl	8000170 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic3_TrigPort, Ultrasonic3_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic3_EchoPort,Ultrasonic3_EchoPin,GPIO_INPUT_PU_PD);
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	2105      	movs	r1, #5
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7fe f9c8 	bl	8000170 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic3_EchoPort, Ultrasonic3_EchoPin, GPIO_INPUT_PD);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2105      	movs	r1, #5
 8001de4:	2001      	movs	r0, #1
 8001de6:	f7fe fb63 	bl	80004b0 <GPIO_voidSetPinValue>
		break;
 8001dea:	e00f      	b.n	8001e0c <HUltrasonic_voidInit+0xa8>
	case 4:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic4_TrigPort,Ultrasonic4_TrigPin,GPIO_OUTPUT_2M_PP);
 8001dec:	2202      	movs	r2, #2
 8001dee:	2107      	movs	r1, #7
 8001df0:	2001      	movs	r0, #1
 8001df2:	f7fe f9bd 	bl	8000170 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic3_TrigPort, Ultrasonic3_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic4_EchoPort,Ultrasonic4_EchoPin,GPIO_INPUT_PU_PD);
 8001df6:	2208      	movs	r2, #8
 8001df8:	2108      	movs	r1, #8
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f7fe f9b8 	bl	8000170 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic4_EchoPort, Ultrasonic4_EchoPin, GPIO_INPUT_PD);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2108      	movs	r1, #8
 8001e04:	2001      	movs	r0, #1
 8001e06:	f7fe fb53 	bl	80004b0 <GPIO_voidSetPinValue>
		break;
 8001e0a:	bf00      	nop
	}
	/*initialize systick timer*/
	MSTK_voidInit() ;
 8001e0c:	f7fe fdc8 	bl	80009a0 <MSTK_voidInit>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <init_conf>:




void init_conf()
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 8001e1c:	f7fe fd06 	bl	800082c <RCC_voidInitSysClock>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOA);
 8001e20:	2102      	movs	r1, #2
 8001e22:	2002      	movs	r0, #2
 8001e24:	f7fe fd34 	bl	8000890 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOB);
 8001e28:	2103      	movs	r1, #3
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	f7fe fd30 	bl	8000890 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOC);
 8001e30:	2104      	movs	r1, #4
 8001e32:	2002      	movs	r0, #2
 8001e34:	f7fe fd2c 	bl	8000890 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,TIM1);
 8001e38:	210b      	movs	r1, #11
 8001e3a:	2002      	movs	r0, #2
 8001e3c:	f7fe fd28 	bl	8000890 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,USART1);
 8001e40:	210e      	movs	r1, #14
 8001e42:	2002      	movs	r0, #2
 8001e44:	f7fe fd24 	bl	8000890 <RCC_voidEnablePeripheral>
	MSTK_voidInit();
 8001e48:	f7fe fdaa 	bl	80009a0 <MSTK_voidInit>
	MOTOR_init(MOTOR_1);
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f7fe fc2b 	bl	80006a8 <MOTOR_init>
	MOTOR_init(MOTOR_2);
 8001e52:	2002      	movs	r0, #2
 8001e54:	f7fe fc28 	bl	80006a8 <MOTOR_init>
	HUltrasonic_voidInit(ULTR_1);
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f7ff ff83 	bl	8001d64 <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_2);
 8001e5e:	2002      	movs	r0, #2
 8001e60:	f7ff ff80 	bl	8001d64 <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_3);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f7ff ff7d 	bl	8001d64 <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_4);
 8001e6a:	2004      	movs	r0, #4
 8001e6c:	f7ff ff7a 	bl	8001d64 <HUltrasonic_voidInit>
	MUART1_voidSetCallBack(&MUART_Buffer_Write);
 8001e70:	4805      	ldr	r0, [pc, #20]	@ (8001e88 <init_conf+0x70>)
 8001e72:	f7ff ff39 	bl	8001ce8 <MUART1_voidSetCallBack>
	MUART_voidEnable(UART1);
 8001e76:	4805      	ldr	r0, [pc, #20]	@ (8001e8c <init_conf+0x74>)
 8001e78:	f7ff fe0c 	bl	8001a94 <MUART_voidEnable>
	MUART_u8ReceiveByteASynch(UART1);
 8001e7c:	4803      	ldr	r0, [pc, #12]	@ (8001e8c <init_conf+0x74>)
 8001e7e:	f7ff fe19 	bl	8001ab4 <MUART_u8ReceiveByteASynch>
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	08001ae9 	.word	0x08001ae9
 8001e8c:	40013800 	.word	0x40013800

08001e90 <main>:


int main()
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
	u16  L_u16Speed = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	80fb      	strh	r3, [r7, #6]
	u8  L_u8Direction = 0 ;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	717b      	strb	r3, [r7, #5]
	u8  L_u8Flag = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	713b      	strb	r3, [r7, #4]

	init_conf();
 8001ea2:	f7ff ffb9 	bl	8001e18 <init_conf>

	while(1)
	{
		ProcessingFun();
 8001ea6:	f000 fb99 	bl	80025dc <ProcessingFun>

		/*Encoding received data and take Direction (second 3bits)*/
		L_u8Direction = G_u16DataAfterProccing.Direction;
 8001eaa:	4b46      	ldr	r3, [pc, #280]	@ (8001fc4 <main+0x134>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	717b      	strb	r3, [r7, #5]
		/*Encoding received data and take Speed (first 4bits)*/
		L_u16Speed = G_u16DataAfterProccing.Speed;
 8001eb6:	4b43      	ldr	r3, [pc, #268]	@ (8001fc4 <main+0x134>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	80fb      	strh	r3, [r7, #6]
		/*Encoding received data and take Flag (last bit)*/
		L_u8Flag = G_u16DataAfterProccing.Flag;
 8001ec2:	4b40      	ldr	r3, [pc, #256]	@ (8001fc4 <main+0x134>)
 8001ec4:	785b      	ldrb	r3, [r3, #1]
 8001ec6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	713b      	strb	r3, [r7, #4]

		if (L_u8Direction == Stop){
 8001ece:	797b      	ldrb	r3, [r7, #5]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d106      	bne.n	8001ee2 <main+0x52>
			MOTOR_Stop(MOTOR_1) ;
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f7fe fc87 	bl	80007e8 <MOTOR_Stop>
			MOTOR_Stop(MOTOR_2) ;
 8001eda:	2002      	movs	r0, #2
 8001edc:	f7fe fc84 	bl	80007e8 <MOTOR_Stop>
 8001ee0:	e7e1      	b.n	8001ea6 <main+0x16>
			/*
			 * first speed  = 1 +  =
			 * second speed = 2 +  =
			 * third speed  = 3 +  =
			 */
			L_u16Speed = (0Xff<<G_xMy_Data.Speed) + 0xf0;
 8001ee2:	4b39      	ldr	r3, [pc, #228]	@ (8001fc8 <main+0x138>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	23ff      	movs	r3, #255	@ 0xff
 8001ef0:	4093      	lsls	r3, r2
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	33f0      	adds	r3, #240	@ 0xf0
 8001ef6:	80fb      	strh	r3, [r7, #6]

			if (L_u8Direction == Go)  //Forward direction
 8001ef8:	797b      	ldrb	r3, [r7, #5]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10a      	bne.n	8001f14 <main+0x84>
			{
				MOTOR_ClockWise(MOTOR_1 , L_u16Speed) ;
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	4619      	mov	r1, r3
 8001f02:	2001      	movs	r0, #1
 8001f04:	f7fe fc38 	bl	8000778 <MOTOR_ClockWise>
				MOTOR_ClockWise(MOTOR_2 , L_u16Speed) ;
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	2002      	movs	r0, #2
 8001f0e:	f7fe fc33 	bl	8000778 <MOTOR_ClockWise>
 8001f12:	e7c8      	b.n	8001ea6 <main+0x16>
			}
			else if (L_u8Direction == Back)  //Backward direction
 8001f14:	797b      	ldrb	r3, [r7, #5]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d10a      	bne.n	8001f30 <main+0xa0>
			{
				MOTOR_CounterClockWise(MOTOR_1 , L_u16Speed) ;
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f7fe fbf0 	bl	8000704 <MOTOR_CounterClockWise>
				MOTOR_CounterClockWise(MOTOR_2 , L_u16Speed) ;
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	4619      	mov	r1, r3
 8001f28:	2002      	movs	r0, #2
 8001f2a:	f7fe fbeb 	bl	8000704 <MOTOR_CounterClockWise>
 8001f2e:	e7ba      	b.n	8001ea6 <main+0x16>
			}
			else if (L_u8Direction == Right)  //Right direction
 8001f30:	797b      	ldrb	r3, [r7, #5]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d108      	bne.n	8001f48 <main+0xb8>
			{
				MOTOR_Stop(MOTOR_1) ;
 8001f36:	2001      	movs	r0, #1
 8001f38:	f7fe fc56 	bl	80007e8 <MOTOR_Stop>
				MOTOR_ClockWise(MOTOR_2 , L_u16Speed) ;
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	2002      	movs	r0, #2
 8001f42:	f7fe fc19 	bl	8000778 <MOTOR_ClockWise>
 8001f46:	e7ae      	b.n	8001ea6 <main+0x16>
			}
			else if (L_u8Direction == Left)  //Left direction
 8001f48:	797b      	ldrb	r3, [r7, #5]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d108      	bne.n	8001f60 <main+0xd0>
			{
				MOTOR_ClockWise(MOTOR_1 , L_u16Speed) ;
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	4619      	mov	r1, r3
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7fe fc10 	bl	8000778 <MOTOR_ClockWise>
				MOTOR_Stop(MOTOR_2) ;
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f7fe fc45 	bl	80007e8 <MOTOR_Stop>
 8001f5e:	e7a2      	b.n	8001ea6 <main+0x16>
			}
			else if (L_u8Direction == Forward_Right)  //forward right
 8001f60:	797b      	ldrb	r3, [r7, #5]
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d108      	bne.n	8001f78 <main+0xe8>
			{
				MOTOR_ClockWise(MOTOR_1 , 0xa) ;
 8001f66:	210a      	movs	r1, #10
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f7fe fc05 	bl	8000778 <MOTOR_ClockWise>
				MOTOR_ClockWise(MOTOR_2 , 0xc) ;
 8001f6e:	210c      	movs	r1, #12
 8001f70:	2002      	movs	r0, #2
 8001f72:	f7fe fc01 	bl	8000778 <MOTOR_ClockWise>
 8001f76:	e796      	b.n	8001ea6 <main+0x16>
			}
			else if (L_u8Direction == Forward_Left)  //forward left
 8001f78:	797b      	ldrb	r3, [r7, #5]
 8001f7a:	2b05      	cmp	r3, #5
 8001f7c:	d108      	bne.n	8001f90 <main+0x100>
			{
				MOTOR_ClockWise(MOTOR_1 , 0xa) ;
 8001f7e:	210a      	movs	r1, #10
 8001f80:	2001      	movs	r0, #1
 8001f82:	f7fe fbf9 	bl	8000778 <MOTOR_ClockWise>
				MOTOR_ClockWise(MOTOR_2 , 0xc) ;
 8001f86:	210c      	movs	r1, #12
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f7fe fbf5 	bl	8000778 <MOTOR_ClockWise>
 8001f8e:	e78a      	b.n	8001ea6 <main+0x16>
			}
			else if (L_u8Direction == Backward_Right)  //backward right
 8001f90:	797b      	ldrb	r3, [r7, #5]
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d108      	bne.n	8001fa8 <main+0x118>
			{
				MOTOR_CounterClockWise(MOTOR_1 , 0xa) ;
 8001f96:	210a      	movs	r1, #10
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f7fe fbb3 	bl	8000704 <MOTOR_CounterClockWise>
				MOTOR_CounterClockWise(MOTOR_2 , 0xc) ;
 8001f9e:	210c      	movs	r1, #12
 8001fa0:	2002      	movs	r0, #2
 8001fa2:	f7fe fbaf 	bl	8000704 <MOTOR_CounterClockWise>
 8001fa6:	e77e      	b.n	8001ea6 <main+0x16>
			}
			else if (L_u8Direction == Backward_Left)  //backward left
 8001fa8:	797b      	ldrb	r3, [r7, #5]
 8001faa:	2b07      	cmp	r3, #7
 8001fac:	f47f af7b 	bne.w	8001ea6 <main+0x16>
			{
				MOTOR_CounterClockWise(MOTOR_1 , 0xa) ;
 8001fb0:	210a      	movs	r1, #10
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f7fe fba6 	bl	8000704 <MOTOR_CounterClockWise>
				MOTOR_CounterClockWise(MOTOR_2 , 0xc) ;
 8001fb8:	210c      	movs	r1, #12
 8001fba:	2002      	movs	r0, #2
 8001fbc:	f7fe fba2 	bl	8000704 <MOTOR_CounterClockWise>
		ProcessingFun();
 8001fc0:	e771      	b.n	8001ea6 <main+0x16>
 8001fc2:	bf00      	nop
 8001fc4:	200001d8 	.word	0x200001d8
 8001fc8:	200001cc 	.word	0x200001cc

08001fcc <APP_VoidStop>:
}



void APP_VoidStop()
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
	//direction = stop
	G_u16DataAfterProccing.Direction = Stop;
 8001fd0:	4a07      	ldr	r2, [pc, #28]	@ (8001ff0 <APP_VoidStop+0x24>)
 8001fd2:	7813      	ldrb	r3, [r2, #0]
 8001fd4:	2108      	movs	r1, #8
 8001fd6:	f361 0303 	bfi	r3, r1, #0, #4
 8001fda:	7013      	strb	r3, [r2, #0]
	/*flag = 3*/
	G_u16DataAfterProccing.Flag = 3;
 8001fdc:	4a04      	ldr	r2, [pc, #16]	@ (8001ff0 <APP_VoidStop+0x24>)
 8001fde:	7853      	ldrb	r3, [r2, #1]
 8001fe0:	f043 0303 	orr.w	r3, r3, #3
 8001fe4:	7053      	strb	r3, [r2, #1]
	/*stop car + alarm*/
//	G_u16DataAfterProccing = G_u16DataAfterProccing & 0xFF8F ;
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	200001d8 	.word	0x200001d8

08001ff4 <APP_voidGoTasks>:

void APP_voidGoTasks ()
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Go)
 8001ff8:	4a3b      	ldr	r2, [pc, #236]	@ (80020e8 <APP_voidGoTasks+0xf4>)
 8001ffa:	7813      	ldrb	r3, [r2, #0]
 8001ffc:	f36f 0303 	bfc	r3, #0, #4
 8002000:	7013      	strb	r3, [r2, #0]
 8002002:	4b39      	ldr	r3, [pc, #228]	@ (80020e8 <APP_voidGoTasks+0xf4>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d067      	beq.n	80020e0 <APP_voidGoTasks+0xec>
	{
		if (G_xNear_Distance.Distance_Forword  <= SO_SHORT_DISTANCE) // stop car
 8002010:	4b36      	ldr	r3, [pc, #216]	@ (80020ec <APP_voidGoTasks+0xf8>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b0a      	cmp	r3, #10
 8002016:	d80b      	bhi.n	8002030 <APP_voidGoTasks+0x3c>
			{
				//direction = stop
				G_u16DataAfterProccing.Direction = Stop;
 8002018:	4a33      	ldr	r2, [pc, #204]	@ (80020e8 <APP_voidGoTasks+0xf4>)
 800201a:	7813      	ldrb	r3, [r2, #0]
 800201c:	2108      	movs	r1, #8
 800201e:	f361 0303 	bfi	r3, r1, #0, #4
 8002022:	7013      	strb	r3, [r2, #0]
				/*flag = 3*/
				G_u16DataAfterProccing.Flag = 3;
 8002024:	4a30      	ldr	r2, [pc, #192]	@ (80020e8 <APP_voidGoTasks+0xf4>)
 8002026:	7853      	ldrb	r3, [r2, #1]
 8002028:	f043 0303 	orr.w	r3, r3, #3
 800202c:	7053      	strb	r3, [r2, #1]
					G_u16DataAfterProccing.Speed = max_speed;
				else
					G_u16DataAfterProccing.Speed = G_xMy_Data.Speed;
			}
	}
}
 800202e:	e057      	b.n	80020e0 <APP_voidGoTasks+0xec>
		else if (G_xNear_Distance.Distance_Forword <= UN_SAFE_DISTANCE) //Un Safed Distance
 8002030:	4b2e      	ldr	r3, [pc, #184]	@ (80020ec <APP_voidGoTasks+0xf8>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b14      	cmp	r3, #20
 8002036:	d83f      	bhi.n	80020b8 <APP_voidGoTasks+0xc4>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002038:	4b2d      	ldr	r3, [pc, #180]	@ (80020f0 <APP_voidGoTasks+0xfc>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	4b2b      	ldr	r3, [pc, #172]	@ (80020f4 <APP_voidGoTasks+0x100>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	dc1a      	bgt.n	8002082 <APP_voidGoTasks+0x8e>
					G_u16DataAfterProccing.Flag = 1;
 800204c:	4a26      	ldr	r2, [pc, #152]	@ (80020e8 <APP_voidGoTasks+0xf4>)
 800204e:	7853      	ldrb	r3, [r2, #1]
 8002050:	2101      	movs	r1, #1
 8002052:	f361 0301 	bfi	r3, r1, #0, #2
 8002056:	7053      	strb	r3, [r2, #1]
					G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 8002058:	4b25      	ldr	r3, [pc, #148]	@ (80020f0 <APP_voidGoTasks+0xfc>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002060:	b2d9      	uxtb	r1, r3
 8002062:	4a21      	ldr	r2, [pc, #132]	@ (80020e8 <APP_voidGoTasks+0xf4>)
 8002064:	7813      	ldrb	r3, [r2, #0]
 8002066:	f361 0303 	bfi	r3, r1, #0, #4
 800206a:	7013      	strb	r3, [r2, #0]
					G_u16DataAfterProccing.Speed = G_xMy_Data.Speed;
 800206c:	4b20      	ldr	r3, [pc, #128]	@ (80020f0 <APP_voidGoTasks+0xfc>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002074:	b2d9      	uxtb	r1, r3
 8002076:	4a1c      	ldr	r2, [pc, #112]	@ (80020e8 <APP_voidGoTasks+0xf4>)
 8002078:	7813      	ldrb	r3, [r2, #0]
 800207a:	f361 1306 	bfi	r3, r1, #4, #3
 800207e:	7013      	strb	r3, [r2, #0]
}
 8002080:	e02e      	b.n	80020e0 <APP_voidGoTasks+0xec>
					G_u16DataAfterProccing.Flag = 2;
 8002082:	4a19      	ldr	r2, [pc, #100]	@ (80020e8 <APP_voidGoTasks+0xf4>)
 8002084:	7853      	ldrb	r3, [r2, #1]
 8002086:	2102      	movs	r1, #2
 8002088:	f361 0301 	bfi	r3, r1, #0, #2
 800208c:	7053      	strb	r3, [r2, #1]
					G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 800208e:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <APP_voidGoTasks+0xfc>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002096:	b2d9      	uxtb	r1, r3
 8002098:	4a13      	ldr	r2, [pc, #76]	@ (80020e8 <APP_voidGoTasks+0xf4>)
 800209a:	7813      	ldrb	r3, [r2, #0]
 800209c:	f361 0303 	bfi	r3, r1, #0, #4
 80020a0:	7013      	strb	r3, [r2, #0]
					G_u16DataAfterProccing.Speed = G_xMy_Data.Speed;
 80020a2:	4b13      	ldr	r3, [pc, #76]	@ (80020f0 <APP_voidGoTasks+0xfc>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80020aa:	b2d9      	uxtb	r1, r3
 80020ac:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <APP_voidGoTasks+0xf4>)
 80020ae:	7813      	ldrb	r3, [r2, #0]
 80020b0:	f361 1306 	bfi	r3, r1, #4, #3
 80020b4:	7013      	strb	r3, [r2, #0]
}
 80020b6:	e013      	b.n	80020e0 <APP_voidGoTasks+0xec>
				G_u16DataAfterProccing.Flag = 0;
 80020b8:	4a0b      	ldr	r2, [pc, #44]	@ (80020e8 <APP_voidGoTasks+0xf4>)
 80020ba:	7853      	ldrb	r3, [r2, #1]
 80020bc:	f36f 0301 	bfc	r3, #0, #2
 80020c0:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <APP_voidGoTasks+0xfc>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80020ca:	b2d9      	uxtb	r1, r3
 80020cc:	4a06      	ldr	r2, [pc, #24]	@ (80020e8 <APP_voidGoTasks+0xf4>)
 80020ce:	7813      	ldrb	r3, [r2, #0]
 80020d0:	f361 0303 	bfi	r3, r1, #0, #4
 80020d4:	7013      	strb	r3, [r2, #0]
					G_u16DataAfterProccing.Speed = max_speed;
 80020d6:	4a04      	ldr	r2, [pc, #16]	@ (80020e8 <APP_voidGoTasks+0xf4>)
 80020d8:	7813      	ldrb	r3, [r2, #0]
 80020da:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80020de:	7013      	strb	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	200001d8 	.word	0x200001d8
 80020ec:	200001d0 	.word	0x200001d0
 80020f0:	200001cc 	.word	0x200001cc
 80020f4:	200000ca 	.word	0x200000ca

080020f8 <APP_voidBackTasks>:
void APP_voidBackTasks ()
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Back)
 80020fc:	4a38      	ldr	r2, [pc, #224]	@ (80021e0 <APP_voidBackTasks+0xe8>)
 80020fe:	7813      	ldrb	r3, [r2, #0]
 8002100:	2101      	movs	r1, #1
 8002102:	f361 0303 	bfi	r3, r1, #0, #4
 8002106:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Back  <= SO_SHORT_DISTANCE) // stop car
 8002108:	4b36      	ldr	r3, [pc, #216]	@ (80021e4 <APP_voidBackTasks+0xec>)
 800210a:	785b      	ldrb	r3, [r3, #1]
 800210c:	2b0a      	cmp	r3, #10
 800210e:	d80b      	bhi.n	8002128 <APP_voidBackTasks+0x30>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8002110:	4a33      	ldr	r2, [pc, #204]	@ (80021e0 <APP_voidBackTasks+0xe8>)
 8002112:	7813      	ldrb	r3, [r2, #0]
 8002114:	2108      	movs	r1, #8
 8002116:	f361 0303 	bfi	r3, r1, #0, #4
 800211a:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 800211c:	4a30      	ldr	r2, [pc, #192]	@ (80021e0 <APP_voidBackTasks+0xe8>)
 800211e:	7853      	ldrb	r3, [r2, #1]
 8002120:	f043 0303 	orr.w	r3, r3, #3
 8002124:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 8002126:	e057      	b.n	80021d8 <APP_voidBackTasks+0xe0>
		else if (G_xNear_Distance.Distance_Back <= UN_SAFE_DISTANCE) //Un Safed Distance
 8002128:	4b2e      	ldr	r3, [pc, #184]	@ (80021e4 <APP_voidBackTasks+0xec>)
 800212a:	785b      	ldrb	r3, [r3, #1]
 800212c:	2b14      	cmp	r3, #20
 800212e:	d83f      	bhi.n	80021b0 <APP_voidBackTasks+0xb8>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002130:	4b2d      	ldr	r3, [pc, #180]	@ (80021e8 <APP_voidBackTasks+0xf0>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <APP_voidBackTasks+0xf4>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	dc1a      	bgt.n	800217a <APP_voidBackTasks+0x82>
				G_u16DataAfterProccing.Flag = 1; ;
 8002144:	4a26      	ldr	r2, [pc, #152]	@ (80021e0 <APP_voidBackTasks+0xe8>)
 8002146:	7853      	ldrb	r3, [r2, #1]
 8002148:	2101      	movs	r1, #1
 800214a:	f361 0301 	bfi	r3, r1, #0, #2
 800214e:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8002150:	4b25      	ldr	r3, [pc, #148]	@ (80021e8 <APP_voidBackTasks+0xf0>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002158:	b2d9      	uxtb	r1, r3
 800215a:	4a21      	ldr	r2, [pc, #132]	@ (80021e0 <APP_voidBackTasks+0xe8>)
 800215c:	7813      	ldrb	r3, [r2, #0]
 800215e:	f361 0303 	bfi	r3, r1, #0, #4
 8002162:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8002164:	4b20      	ldr	r3, [pc, #128]	@ (80021e8 <APP_voidBackTasks+0xf0>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800216c:	b2d9      	uxtb	r1, r3
 800216e:	4a1c      	ldr	r2, [pc, #112]	@ (80021e0 <APP_voidBackTasks+0xe8>)
 8002170:	7813      	ldrb	r3, [r2, #0]
 8002172:	f361 1306 	bfi	r3, r1, #4, #3
 8002176:	7013      	strb	r3, [r2, #0]
}
 8002178:	e02e      	b.n	80021d8 <APP_voidBackTasks+0xe0>
				G_u16DataAfterProccing.Flag = 2;
 800217a:	4a19      	ldr	r2, [pc, #100]	@ (80021e0 <APP_voidBackTasks+0xe8>)
 800217c:	7853      	ldrb	r3, [r2, #1]
 800217e:	2102      	movs	r1, #2
 8002180:	f361 0301 	bfi	r3, r1, #0, #2
 8002184:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8002186:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <APP_voidBackTasks+0xf0>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800218e:	b2d9      	uxtb	r1, r3
 8002190:	4a13      	ldr	r2, [pc, #76]	@ (80021e0 <APP_voidBackTasks+0xe8>)
 8002192:	7813      	ldrb	r3, [r2, #0]
 8002194:	f361 0303 	bfi	r3, r1, #0, #4
 8002198:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 800219a:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <APP_voidBackTasks+0xf4>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	b2d9      	uxtb	r1, r3
 80021a4:	4a0e      	ldr	r2, [pc, #56]	@ (80021e0 <APP_voidBackTasks+0xe8>)
 80021a6:	7813      	ldrb	r3, [r2, #0]
 80021a8:	f361 1306 	bfi	r3, r1, #4, #3
 80021ac:	7013      	strb	r3, [r2, #0]
}
 80021ae:	e013      	b.n	80021d8 <APP_voidBackTasks+0xe0>
			G_u16DataAfterProccing.Flag = 0;
 80021b0:	4a0b      	ldr	r2, [pc, #44]	@ (80021e0 <APP_voidBackTasks+0xe8>)
 80021b2:	7853      	ldrb	r3, [r2, #1]
 80021b4:	f36f 0301 	bfc	r3, #0, #2
 80021b8:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <APP_voidBackTasks+0xf0>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80021c2:	b2d9      	uxtb	r1, r3
 80021c4:	4a06      	ldr	r2, [pc, #24]	@ (80021e0 <APP_voidBackTasks+0xe8>)
 80021c6:	7813      	ldrb	r3, [r2, #0]
 80021c8:	f361 0303 	bfi	r3, r1, #0, #4
 80021cc:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 80021ce:	4a04      	ldr	r2, [pc, #16]	@ (80021e0 <APP_voidBackTasks+0xe8>)
 80021d0:	7813      	ldrb	r3, [r2, #0]
 80021d2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80021d6:	7013      	strb	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	200001d8 	.word	0x200001d8
 80021e4:	200001d0 	.word	0x200001d0
 80021e8:	200001cc 	.word	0x200001cc
 80021ec:	200000ca 	.word	0x200000ca

080021f0 <APP_voidBackward_RightTasks>:
void APP_voidBackward_RightTasks ()
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Backward_Right)
 80021f4:	4a38      	ldr	r2, [pc, #224]	@ (80022d8 <APP_voidBackward_RightTasks+0xe8>)
 80021f6:	7813      	ldrb	r3, [r2, #0]
 80021f8:	2106      	movs	r1, #6
 80021fa:	f361 0303 	bfi	r3, r1, #0, #4
 80021fe:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Left  <= SO_SHORT_DISTANCE) // stop car
 8002200:	4b36      	ldr	r3, [pc, #216]	@ (80022dc <APP_voidBackward_RightTasks+0xec>)
 8002202:	789b      	ldrb	r3, [r3, #2]
 8002204:	2b0a      	cmp	r3, #10
 8002206:	d80b      	bhi.n	8002220 <APP_voidBackward_RightTasks+0x30>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8002208:	4a33      	ldr	r2, [pc, #204]	@ (80022d8 <APP_voidBackward_RightTasks+0xe8>)
 800220a:	7813      	ldrb	r3, [r2, #0]
 800220c:	2108      	movs	r1, #8
 800220e:	f361 0303 	bfi	r3, r1, #0, #4
 8002212:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 8002214:	4a30      	ldr	r2, [pc, #192]	@ (80022d8 <APP_voidBackward_RightTasks+0xe8>)
 8002216:	7853      	ldrb	r3, [r2, #1]
 8002218:	f043 0303 	orr.w	r3, r3, #3
 800221c:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 800221e:	e057      	b.n	80022d0 <APP_voidBackward_RightTasks+0xe0>
		else if (G_xNear_Distance.Distance_Left <= UN_SAFE_DISTANCE) //Un Safed Distance
 8002220:	4b2e      	ldr	r3, [pc, #184]	@ (80022dc <APP_voidBackward_RightTasks+0xec>)
 8002222:	789b      	ldrb	r3, [r3, #2]
 8002224:	2b14      	cmp	r3, #20
 8002226:	d83f      	bhi.n	80022a8 <APP_voidBackward_RightTasks+0xb8>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002228:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <APP_voidBackward_RightTasks+0xf0>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	4b2b      	ldr	r3, [pc, #172]	@ (80022e4 <APP_voidBackward_RightTasks+0xf4>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	dc1a      	bgt.n	8002272 <APP_voidBackward_RightTasks+0x82>
				G_u16DataAfterProccing.Flag = 1; ;
 800223c:	4a26      	ldr	r2, [pc, #152]	@ (80022d8 <APP_voidBackward_RightTasks+0xe8>)
 800223e:	7853      	ldrb	r3, [r2, #1]
 8002240:	2101      	movs	r1, #1
 8002242:	f361 0301 	bfi	r3, r1, #0, #2
 8002246:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8002248:	4b25      	ldr	r3, [pc, #148]	@ (80022e0 <APP_voidBackward_RightTasks+0xf0>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002250:	b2d9      	uxtb	r1, r3
 8002252:	4a21      	ldr	r2, [pc, #132]	@ (80022d8 <APP_voidBackward_RightTasks+0xe8>)
 8002254:	7813      	ldrb	r3, [r2, #0]
 8002256:	f361 0303 	bfi	r3, r1, #0, #4
 800225a:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 800225c:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <APP_voidBackward_RightTasks+0xf0>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002264:	b2d9      	uxtb	r1, r3
 8002266:	4a1c      	ldr	r2, [pc, #112]	@ (80022d8 <APP_voidBackward_RightTasks+0xe8>)
 8002268:	7813      	ldrb	r3, [r2, #0]
 800226a:	f361 1306 	bfi	r3, r1, #4, #3
 800226e:	7013      	strb	r3, [r2, #0]
}
 8002270:	e02e      	b.n	80022d0 <APP_voidBackward_RightTasks+0xe0>
				G_u16DataAfterProccing.Flag = 2;
 8002272:	4a19      	ldr	r2, [pc, #100]	@ (80022d8 <APP_voidBackward_RightTasks+0xe8>)
 8002274:	7853      	ldrb	r3, [r2, #1]
 8002276:	2102      	movs	r1, #2
 8002278:	f361 0301 	bfi	r3, r1, #0, #2
 800227c:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 800227e:	4b18      	ldr	r3, [pc, #96]	@ (80022e0 <APP_voidBackward_RightTasks+0xf0>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002286:	b2d9      	uxtb	r1, r3
 8002288:	4a13      	ldr	r2, [pc, #76]	@ (80022d8 <APP_voidBackward_RightTasks+0xe8>)
 800228a:	7813      	ldrb	r3, [r2, #0]
 800228c:	f361 0303 	bfi	r3, r1, #0, #4
 8002290:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 8002292:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <APP_voidBackward_RightTasks+0xf4>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	b2d9      	uxtb	r1, r3
 800229c:	4a0e      	ldr	r2, [pc, #56]	@ (80022d8 <APP_voidBackward_RightTasks+0xe8>)
 800229e:	7813      	ldrb	r3, [r2, #0]
 80022a0:	f361 1306 	bfi	r3, r1, #4, #3
 80022a4:	7013      	strb	r3, [r2, #0]
}
 80022a6:	e013      	b.n	80022d0 <APP_voidBackward_RightTasks+0xe0>
			G_u16DataAfterProccing.Flag = 0;
 80022a8:	4a0b      	ldr	r2, [pc, #44]	@ (80022d8 <APP_voidBackward_RightTasks+0xe8>)
 80022aa:	7853      	ldrb	r3, [r2, #1]
 80022ac:	f36f 0301 	bfc	r3, #0, #2
 80022b0:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <APP_voidBackward_RightTasks+0xf0>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80022ba:	b2d9      	uxtb	r1, r3
 80022bc:	4a06      	ldr	r2, [pc, #24]	@ (80022d8 <APP_voidBackward_RightTasks+0xe8>)
 80022be:	7813      	ldrb	r3, [r2, #0]
 80022c0:	f361 0303 	bfi	r3, r1, #0, #4
 80022c4:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 80022c6:	4a04      	ldr	r2, [pc, #16]	@ (80022d8 <APP_voidBackward_RightTasks+0xe8>)
 80022c8:	7813      	ldrb	r3, [r2, #0]
 80022ca:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80022ce:	7013      	strb	r3, [r2, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	200001d8 	.word	0x200001d8
 80022dc:	200001d0 	.word	0x200001d0
 80022e0:	200001cc 	.word	0x200001cc
 80022e4:	200000ca 	.word	0x200000ca

080022e8 <APP_voidBackward_LEFTTasks>:
void APP_voidBackward_LEFTTasks ()
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Backward_Left)
 80022ec:	4a38      	ldr	r2, [pc, #224]	@ (80023d0 <APP_voidBackward_LEFTTasks+0xe8>)
 80022ee:	7813      	ldrb	r3, [r2, #0]
 80022f0:	2107      	movs	r1, #7
 80022f2:	f361 0303 	bfi	r3, r1, #0, #4
 80022f6:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Right  <= SO_SHORT_DISTANCE) // stop car
 80022f8:	4b36      	ldr	r3, [pc, #216]	@ (80023d4 <APP_voidBackward_LEFTTasks+0xec>)
 80022fa:	78db      	ldrb	r3, [r3, #3]
 80022fc:	2b0a      	cmp	r3, #10
 80022fe:	d80b      	bhi.n	8002318 <APP_voidBackward_LEFTTasks+0x30>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8002300:	4a33      	ldr	r2, [pc, #204]	@ (80023d0 <APP_voidBackward_LEFTTasks+0xe8>)
 8002302:	7813      	ldrb	r3, [r2, #0]
 8002304:	2108      	movs	r1, #8
 8002306:	f361 0303 	bfi	r3, r1, #0, #4
 800230a:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 800230c:	4a30      	ldr	r2, [pc, #192]	@ (80023d0 <APP_voidBackward_LEFTTasks+0xe8>)
 800230e:	7853      	ldrb	r3, [r2, #1]
 8002310:	f043 0303 	orr.w	r3, r3, #3
 8002314:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 8002316:	e057      	b.n	80023c8 <APP_voidBackward_LEFTTasks+0xe0>
		else if (G_xNear_Distance.Distance_Right <= UN_SAFE_DISTANCE) //Un Safed Distance
 8002318:	4b2e      	ldr	r3, [pc, #184]	@ (80023d4 <APP_voidBackward_LEFTTasks+0xec>)
 800231a:	78db      	ldrb	r3, [r3, #3]
 800231c:	2b14      	cmp	r3, #20
 800231e:	d83f      	bhi.n	80023a0 <APP_voidBackward_LEFTTasks+0xb8>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002320:	4b2d      	ldr	r3, [pc, #180]	@ (80023d8 <APP_voidBackward_LEFTTasks+0xf0>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	4b2b      	ldr	r3, [pc, #172]	@ (80023dc <APP_voidBackward_LEFTTasks+0xf4>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	dc1a      	bgt.n	800236a <APP_voidBackward_LEFTTasks+0x82>
				G_u16DataAfterProccing.Flag = 1;
 8002334:	4a26      	ldr	r2, [pc, #152]	@ (80023d0 <APP_voidBackward_LEFTTasks+0xe8>)
 8002336:	7853      	ldrb	r3, [r2, #1]
 8002338:	2101      	movs	r1, #1
 800233a:	f361 0301 	bfi	r3, r1, #0, #2
 800233e:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8002340:	4b25      	ldr	r3, [pc, #148]	@ (80023d8 <APP_voidBackward_LEFTTasks+0xf0>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002348:	b2d9      	uxtb	r1, r3
 800234a:	4a21      	ldr	r2, [pc, #132]	@ (80023d0 <APP_voidBackward_LEFTTasks+0xe8>)
 800234c:	7813      	ldrb	r3, [r2, #0]
 800234e:	f361 0303 	bfi	r3, r1, #0, #4
 8002352:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8002354:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <APP_voidBackward_LEFTTasks+0xf0>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800235c:	b2d9      	uxtb	r1, r3
 800235e:	4a1c      	ldr	r2, [pc, #112]	@ (80023d0 <APP_voidBackward_LEFTTasks+0xe8>)
 8002360:	7813      	ldrb	r3, [r2, #0]
 8002362:	f361 1306 	bfi	r3, r1, #4, #3
 8002366:	7013      	strb	r3, [r2, #0]
}
 8002368:	e02e      	b.n	80023c8 <APP_voidBackward_LEFTTasks+0xe0>
				G_u16DataAfterProccing.Flag = 2;
 800236a:	4a19      	ldr	r2, [pc, #100]	@ (80023d0 <APP_voidBackward_LEFTTasks+0xe8>)
 800236c:	7853      	ldrb	r3, [r2, #1]
 800236e:	2102      	movs	r1, #2
 8002370:	f361 0301 	bfi	r3, r1, #0, #2
 8002374:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8002376:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <APP_voidBackward_LEFTTasks+0xf0>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800237e:	b2d9      	uxtb	r1, r3
 8002380:	4a13      	ldr	r2, [pc, #76]	@ (80023d0 <APP_voidBackward_LEFTTasks+0xe8>)
 8002382:	7813      	ldrb	r3, [r2, #0]
 8002384:	f361 0303 	bfi	r3, r1, #0, #4
 8002388:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 800238a:	4b14      	ldr	r3, [pc, #80]	@ (80023dc <APP_voidBackward_LEFTTasks+0xf4>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	b2d9      	uxtb	r1, r3
 8002394:	4a0e      	ldr	r2, [pc, #56]	@ (80023d0 <APP_voidBackward_LEFTTasks+0xe8>)
 8002396:	7813      	ldrb	r3, [r2, #0]
 8002398:	f361 1306 	bfi	r3, r1, #4, #3
 800239c:	7013      	strb	r3, [r2, #0]
}
 800239e:	e013      	b.n	80023c8 <APP_voidBackward_LEFTTasks+0xe0>
			G_u16DataAfterProccing.Flag = 0;
 80023a0:	4a0b      	ldr	r2, [pc, #44]	@ (80023d0 <APP_voidBackward_LEFTTasks+0xe8>)
 80023a2:	7853      	ldrb	r3, [r2, #1]
 80023a4:	f36f 0301 	bfc	r3, #0, #2
 80023a8:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <APP_voidBackward_LEFTTasks+0xf0>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80023b2:	b2d9      	uxtb	r1, r3
 80023b4:	4a06      	ldr	r2, [pc, #24]	@ (80023d0 <APP_voidBackward_LEFTTasks+0xe8>)
 80023b6:	7813      	ldrb	r3, [r2, #0]
 80023b8:	f361 0303 	bfi	r3, r1, #0, #4
 80023bc:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 80023be:	4a04      	ldr	r2, [pc, #16]	@ (80023d0 <APP_voidBackward_LEFTTasks+0xe8>)
 80023c0:	7813      	ldrb	r3, [r2, #0]
 80023c2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80023c6:	7013      	strb	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	200001d8 	.word	0x200001d8
 80023d4:	200001d0 	.word	0x200001d0
 80023d8:	200001cc 	.word	0x200001cc
 80023dc:	200000ca 	.word	0x200000ca

080023e0 <APP_voidRight_LeftTasks>:
void APP_voidRight_LeftTasks ()
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <APP_voidForward_RightTasks>:
void APP_voidForward_RightTasks ()
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Forward_Right)
 80023f0:	4a38      	ldr	r2, [pc, #224]	@ (80024d4 <APP_voidForward_RightTasks+0xe8>)
 80023f2:	7813      	ldrb	r3, [r2, #0]
 80023f4:	2104      	movs	r1, #4
 80023f6:	f361 0303 	bfi	r3, r1, #0, #4
 80023fa:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Right  <= SO_SHORT_DISTANCE) // stop car
 80023fc:	4b36      	ldr	r3, [pc, #216]	@ (80024d8 <APP_voidForward_RightTasks+0xec>)
 80023fe:	78db      	ldrb	r3, [r3, #3]
 8002400:	2b0a      	cmp	r3, #10
 8002402:	d80b      	bhi.n	800241c <APP_voidForward_RightTasks+0x30>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8002404:	4a33      	ldr	r2, [pc, #204]	@ (80024d4 <APP_voidForward_RightTasks+0xe8>)
 8002406:	7813      	ldrb	r3, [r2, #0]
 8002408:	2108      	movs	r1, #8
 800240a:	f361 0303 	bfi	r3, r1, #0, #4
 800240e:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 8002410:	4a30      	ldr	r2, [pc, #192]	@ (80024d4 <APP_voidForward_RightTasks+0xe8>)
 8002412:	7853      	ldrb	r3, [r2, #1]
 8002414:	f043 0303 	orr.w	r3, r3, #3
 8002418:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 800241a:	e057      	b.n	80024cc <APP_voidForward_RightTasks+0xe0>
		else if (G_xNear_Distance.Distance_Right <= UN_SAFE_DISTANCE) //Un Safed Distance
 800241c:	4b2e      	ldr	r3, [pc, #184]	@ (80024d8 <APP_voidForward_RightTasks+0xec>)
 800241e:	78db      	ldrb	r3, [r3, #3]
 8002420:	2b14      	cmp	r3, #20
 8002422:	d83f      	bhi.n	80024a4 <APP_voidForward_RightTasks+0xb8>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002424:	4b2d      	ldr	r3, [pc, #180]	@ (80024dc <APP_voidForward_RightTasks+0xf0>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	4b2b      	ldr	r3, [pc, #172]	@ (80024e0 <APP_voidForward_RightTasks+0xf4>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	dc1a      	bgt.n	800246e <APP_voidForward_RightTasks+0x82>
				G_u16DataAfterProccing.Flag = 1;
 8002438:	4a26      	ldr	r2, [pc, #152]	@ (80024d4 <APP_voidForward_RightTasks+0xe8>)
 800243a:	7853      	ldrb	r3, [r2, #1]
 800243c:	2101      	movs	r1, #1
 800243e:	f361 0301 	bfi	r3, r1, #0, #2
 8002442:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8002444:	4b25      	ldr	r3, [pc, #148]	@ (80024dc <APP_voidForward_RightTasks+0xf0>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800244c:	b2d9      	uxtb	r1, r3
 800244e:	4a21      	ldr	r2, [pc, #132]	@ (80024d4 <APP_voidForward_RightTasks+0xe8>)
 8002450:	7813      	ldrb	r3, [r2, #0]
 8002452:	f361 0303 	bfi	r3, r1, #0, #4
 8002456:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8002458:	4b20      	ldr	r3, [pc, #128]	@ (80024dc <APP_voidForward_RightTasks+0xf0>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002460:	b2d9      	uxtb	r1, r3
 8002462:	4a1c      	ldr	r2, [pc, #112]	@ (80024d4 <APP_voidForward_RightTasks+0xe8>)
 8002464:	7813      	ldrb	r3, [r2, #0]
 8002466:	f361 1306 	bfi	r3, r1, #4, #3
 800246a:	7013      	strb	r3, [r2, #0]
}
 800246c:	e02e      	b.n	80024cc <APP_voidForward_RightTasks+0xe0>
				G_u16DataAfterProccing.Flag = 2;
 800246e:	4a19      	ldr	r2, [pc, #100]	@ (80024d4 <APP_voidForward_RightTasks+0xe8>)
 8002470:	7853      	ldrb	r3, [r2, #1]
 8002472:	2102      	movs	r1, #2
 8002474:	f361 0301 	bfi	r3, r1, #0, #2
 8002478:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 800247a:	4b18      	ldr	r3, [pc, #96]	@ (80024dc <APP_voidForward_RightTasks+0xf0>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002482:	b2d9      	uxtb	r1, r3
 8002484:	4a13      	ldr	r2, [pc, #76]	@ (80024d4 <APP_voidForward_RightTasks+0xe8>)
 8002486:	7813      	ldrb	r3, [r2, #0]
 8002488:	f361 0303 	bfi	r3, r1, #0, #4
 800248c:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 800248e:	4b14      	ldr	r3, [pc, #80]	@ (80024e0 <APP_voidForward_RightTasks+0xf4>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	b2d9      	uxtb	r1, r3
 8002498:	4a0e      	ldr	r2, [pc, #56]	@ (80024d4 <APP_voidForward_RightTasks+0xe8>)
 800249a:	7813      	ldrb	r3, [r2, #0]
 800249c:	f361 1306 	bfi	r3, r1, #4, #3
 80024a0:	7013      	strb	r3, [r2, #0]
}
 80024a2:	e013      	b.n	80024cc <APP_voidForward_RightTasks+0xe0>
			G_u16DataAfterProccing.Flag = 0;
 80024a4:	4a0b      	ldr	r2, [pc, #44]	@ (80024d4 <APP_voidForward_RightTasks+0xe8>)
 80024a6:	7853      	ldrb	r3, [r2, #1]
 80024a8:	f36f 0301 	bfc	r3, #0, #2
 80024ac:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <APP_voidForward_RightTasks+0xf0>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80024b6:	b2d9      	uxtb	r1, r3
 80024b8:	4a06      	ldr	r2, [pc, #24]	@ (80024d4 <APP_voidForward_RightTasks+0xe8>)
 80024ba:	7813      	ldrb	r3, [r2, #0]
 80024bc:	f361 0303 	bfi	r3, r1, #0, #4
 80024c0:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 80024c2:	4a04      	ldr	r2, [pc, #16]	@ (80024d4 <APP_voidForward_RightTasks+0xe8>)
 80024c4:	7813      	ldrb	r3, [r2, #0]
 80024c6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80024ca:	7013      	strb	r3, [r2, #0]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	200001d8 	.word	0x200001d8
 80024d8:	200001d0 	.word	0x200001d0
 80024dc:	200001cc 	.word	0x200001cc
 80024e0:	200000ca 	.word	0x200000ca

080024e4 <APP_voidForward_LeftTasks>:
void APP_voidForward_LeftTasks ()
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Forward_Left)
 80024e8:	4a38      	ldr	r2, [pc, #224]	@ (80025cc <APP_voidForward_LeftTasks+0xe8>)
 80024ea:	7813      	ldrb	r3, [r2, #0]
 80024ec:	2105      	movs	r1, #5
 80024ee:	f361 0303 	bfi	r3, r1, #0, #4
 80024f2:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Left  <= SO_SHORT_DISTANCE) // stop car
 80024f4:	4b36      	ldr	r3, [pc, #216]	@ (80025d0 <APP_voidForward_LeftTasks+0xec>)
 80024f6:	789b      	ldrb	r3, [r3, #2]
 80024f8:	2b0a      	cmp	r3, #10
 80024fa:	d80b      	bhi.n	8002514 <APP_voidForward_LeftTasks+0x30>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 80024fc:	4a33      	ldr	r2, [pc, #204]	@ (80025cc <APP_voidForward_LeftTasks+0xe8>)
 80024fe:	7813      	ldrb	r3, [r2, #0]
 8002500:	2108      	movs	r1, #8
 8002502:	f361 0303 	bfi	r3, r1, #0, #4
 8002506:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 8002508:	4a30      	ldr	r2, [pc, #192]	@ (80025cc <APP_voidForward_LeftTasks+0xe8>)
 800250a:	7853      	ldrb	r3, [r2, #1]
 800250c:	f043 0303 	orr.w	r3, r3, #3
 8002510:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 8002512:	e057      	b.n	80025c4 <APP_voidForward_LeftTasks+0xe0>
		else if (G_xNear_Distance.Distance_Left <= UN_SAFE_DISTANCE) //Un Safed Distance
 8002514:	4b2e      	ldr	r3, [pc, #184]	@ (80025d0 <APP_voidForward_LeftTasks+0xec>)
 8002516:	789b      	ldrb	r3, [r3, #2]
 8002518:	2b14      	cmp	r3, #20
 800251a:	d83f      	bhi.n	800259c <APP_voidForward_LeftTasks+0xb8>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 800251c:	4b2d      	ldr	r3, [pc, #180]	@ (80025d4 <APP_voidForward_LeftTasks+0xf0>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	4b2b      	ldr	r3, [pc, #172]	@ (80025d8 <APP_voidForward_LeftTasks+0xf4>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	dc1a      	bgt.n	8002566 <APP_voidForward_LeftTasks+0x82>
				G_u16DataAfterProccing.Flag = 1;
 8002530:	4a26      	ldr	r2, [pc, #152]	@ (80025cc <APP_voidForward_LeftTasks+0xe8>)
 8002532:	7853      	ldrb	r3, [r2, #1]
 8002534:	2101      	movs	r1, #1
 8002536:	f361 0301 	bfi	r3, r1, #0, #2
 800253a:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 800253c:	4b25      	ldr	r3, [pc, #148]	@ (80025d4 <APP_voidForward_LeftTasks+0xf0>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002544:	b2d9      	uxtb	r1, r3
 8002546:	4a21      	ldr	r2, [pc, #132]	@ (80025cc <APP_voidForward_LeftTasks+0xe8>)
 8002548:	7813      	ldrb	r3, [r2, #0]
 800254a:	f361 0303 	bfi	r3, r1, #0, #4
 800254e:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8002550:	4b20      	ldr	r3, [pc, #128]	@ (80025d4 <APP_voidForward_LeftTasks+0xf0>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002558:	b2d9      	uxtb	r1, r3
 800255a:	4a1c      	ldr	r2, [pc, #112]	@ (80025cc <APP_voidForward_LeftTasks+0xe8>)
 800255c:	7813      	ldrb	r3, [r2, #0]
 800255e:	f361 1306 	bfi	r3, r1, #4, #3
 8002562:	7013      	strb	r3, [r2, #0]
}
 8002564:	e02e      	b.n	80025c4 <APP_voidForward_LeftTasks+0xe0>
				G_u16DataAfterProccing.Flag = 2;
 8002566:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <APP_voidForward_LeftTasks+0xe8>)
 8002568:	7853      	ldrb	r3, [r2, #1]
 800256a:	2102      	movs	r1, #2
 800256c:	f361 0301 	bfi	r3, r1, #0, #2
 8002570:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8002572:	4b18      	ldr	r3, [pc, #96]	@ (80025d4 <APP_voidForward_LeftTasks+0xf0>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800257a:	b2d9      	uxtb	r1, r3
 800257c:	4a13      	ldr	r2, [pc, #76]	@ (80025cc <APP_voidForward_LeftTasks+0xe8>)
 800257e:	7813      	ldrb	r3, [r2, #0]
 8002580:	f361 0303 	bfi	r3, r1, #0, #4
 8002584:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed;
 8002586:	4b14      	ldr	r3, [pc, #80]	@ (80025d8 <APP_voidForward_LeftTasks+0xf4>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	b2d9      	uxtb	r1, r3
 8002590:	4a0e      	ldr	r2, [pc, #56]	@ (80025cc <APP_voidForward_LeftTasks+0xe8>)
 8002592:	7813      	ldrb	r3, [r2, #0]
 8002594:	f361 1306 	bfi	r3, r1, #4, #3
 8002598:	7013      	strb	r3, [r2, #0]
}
 800259a:	e013      	b.n	80025c4 <APP_voidForward_LeftTasks+0xe0>
			G_u16DataAfterProccing.Flag = 0;
 800259c:	4a0b      	ldr	r2, [pc, #44]	@ (80025cc <APP_voidForward_LeftTasks+0xe8>)
 800259e:	7853      	ldrb	r3, [r2, #1]
 80025a0:	f36f 0301 	bfc	r3, #0, #2
 80025a4:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 80025a6:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <APP_voidForward_LeftTasks+0xf0>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80025ae:	b2d9      	uxtb	r1, r3
 80025b0:	4a06      	ldr	r2, [pc, #24]	@ (80025cc <APP_voidForward_LeftTasks+0xe8>)
 80025b2:	7813      	ldrb	r3, [r2, #0]
 80025b4:	f361 0303 	bfi	r3, r1, #0, #4
 80025b8:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 80025ba:	4a04      	ldr	r2, [pc, #16]	@ (80025cc <APP_voidForward_LeftTasks+0xe8>)
 80025bc:	7813      	ldrb	r3, [r2, #0]
 80025be:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80025c2:	7013      	strb	r3, [r2, #0]
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	200001d8 	.word	0x200001d8
 80025d0:	200001d0 	.word	0x200001d0
 80025d4:	200001cc 	.word	0x200001cc
 80025d8:	200000ca 	.word	0x200000ca

080025dc <ProcessingFun>:
		//delay_os
	}
}

void ProcessingFun (void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
	u8 L_u8Data = APP_G_u8DataFromUART>>4;
 80025e2:	4bd3      	ldr	r3, [pc, #844]	@ (8002930 <ProcessingFun+0x354>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	71fb      	strb	r3, [r7, #7]
	/*Mapping data from UART*/
	//TODO Massage number for traking
	switch (APP_G_u8DataFromUART)
 80025ea:	4bd1      	ldr	r3, [pc, #836]	@ (8002930 <ProcessingFun+0x354>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2bf0      	cmp	r3, #240	@ 0xf0
 80025f0:	f000 81f4 	beq.w	80029dc <ProcessingFun+0x400>
 80025f4:	2bf0      	cmp	r3, #240	@ 0xf0
 80025f6:	f300 81d9 	bgt.w	80029ac <ProcessingFun+0x3d0>
 80025fa:	2b7c      	cmp	r3, #124	@ 0x7c
 80025fc:	f300 80e4 	bgt.w	80027c8 <ProcessingFun+0x1ec>
 8002600:	2b10      	cmp	r3, #16
 8002602:	f2c0 81d3 	blt.w	80029ac <ProcessingFun+0x3d0>
 8002606:	3b10      	subs	r3, #16
 8002608:	2b6c      	cmp	r3, #108	@ 0x6c
 800260a:	f200 81cf 	bhi.w	80029ac <ProcessingFun+0x3d0>
 800260e:	a201      	add	r2, pc, #4	@ (adr r2, 8002614 <ProcessingFun+0x38>)
 8002610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002614:	080027d1 	.word	0x080027d1
 8002618:	080029ad 	.word	0x080029ad
 800261c:	080029ad 	.word	0x080029ad
 8002620:	080029ad 	.word	0x080029ad
 8002624:	080029ad 	.word	0x080029ad
 8002628:	080029ad 	.word	0x080029ad
 800262c:	080029ad 	.word	0x080029ad
 8002630:	080029ad 	.word	0x080029ad
 8002634:	080029ad 	.word	0x080029ad
 8002638:	080029ad 	.word	0x080029ad
 800263c:	080029ad 	.word	0x080029ad
 8002640:	080029ad 	.word	0x080029ad
 8002644:	080029ad 	.word	0x080029ad
 8002648:	080029ad 	.word	0x080029ad
 800264c:	080029ad 	.word	0x080029ad
 8002650:	080029ad 	.word	0x080029ad
 8002654:	080027df 	.word	0x080027df
 8002658:	080029ad 	.word	0x080029ad
 800265c:	080029ad 	.word	0x080029ad
 8002660:	080029ad 	.word	0x080029ad
 8002664:	080029ad 	.word	0x080029ad
 8002668:	080029ad 	.word	0x080029ad
 800266c:	080029ad 	.word	0x080029ad
 8002670:	080029ad 	.word	0x080029ad
 8002674:	080029ad 	.word	0x080029ad
 8002678:	080029ad 	.word	0x080029ad
 800267c:	080029ad 	.word	0x080029ad
 8002680:	080029ad 	.word	0x080029ad
 8002684:	080029ad 	.word	0x080029ad
 8002688:	080029ad 	.word	0x080029ad
 800268c:	080029ad 	.word	0x080029ad
 8002690:	080029ad 	.word	0x080029ad
 8002694:	080029ad 	.word	0x080029ad
 8002698:	080029ad 	.word	0x080029ad
 800269c:	080029ad 	.word	0x080029ad
 80026a0:	080029ad 	.word	0x080029ad
 80026a4:	080029ad 	.word	0x080029ad
 80026a8:	080029ad 	.word	0x080029ad
 80026ac:	080029ad 	.word	0x080029ad
 80026b0:	080029ad 	.word	0x080029ad
 80026b4:	080029ad 	.word	0x080029ad
 80026b8:	080029ad 	.word	0x080029ad
 80026bc:	080029ad 	.word	0x080029ad
 80026c0:	080029ad 	.word	0x080029ad
 80026c4:	080029ad 	.word	0x080029ad
 80026c8:	080029ad 	.word	0x080029ad
 80026cc:	080029ad 	.word	0x080029ad
 80026d0:	080029ad 	.word	0x080029ad
 80026d4:	080027ed 	.word	0x080027ed
 80026d8:	080029ad 	.word	0x080029ad
 80026dc:	080029ad 	.word	0x080029ad
 80026e0:	080029ad 	.word	0x080029ad
 80026e4:	080029ad 	.word	0x080029ad
 80026e8:	080029ad 	.word	0x080029ad
 80026ec:	080029ad 	.word	0x080029ad
 80026f0:	080029ad 	.word	0x080029ad
 80026f4:	080027fb 	.word	0x080027fb
 80026f8:	080029ad 	.word	0x080029ad
 80026fc:	080029ad 	.word	0x080029ad
 8002700:	080029ad 	.word	0x080029ad
 8002704:	08002809 	.word	0x08002809
 8002708:	080029ad 	.word	0x080029ad
 800270c:	080029ad 	.word	0x080029ad
 8002710:	080029ad 	.word	0x080029ad
 8002714:	08002817 	.word	0x08002817
 8002718:	080029ad 	.word	0x080029ad
 800271c:	080029ad 	.word	0x080029ad
 8002720:	080029ad 	.word	0x080029ad
 8002724:	080029ad 	.word	0x080029ad
 8002728:	080029ad 	.word	0x080029ad
 800272c:	080029ad 	.word	0x080029ad
 8002730:	080029ad 	.word	0x080029ad
 8002734:	08002825 	.word	0x08002825
 8002738:	080029ad 	.word	0x080029ad
 800273c:	080029ad 	.word	0x080029ad
 8002740:	080029ad 	.word	0x080029ad
 8002744:	08002833 	.word	0x08002833
 8002748:	080029ad 	.word	0x080029ad
 800274c:	080029ad 	.word	0x080029ad
 8002750:	080029ad 	.word	0x080029ad
 8002754:	08002841 	.word	0x08002841
 8002758:	080029ad 	.word	0x080029ad
 800275c:	080029ad 	.word	0x080029ad
 8002760:	080029ad 	.word	0x080029ad
 8002764:	080029ad 	.word	0x080029ad
 8002768:	080029ad 	.word	0x080029ad
 800276c:	080029ad 	.word	0x080029ad
 8002770:	080029ad 	.word	0x080029ad
 8002774:	0800287d 	.word	0x0800287d
 8002778:	080029ad 	.word	0x080029ad
 800277c:	080029ad 	.word	0x080029ad
 8002780:	080029ad 	.word	0x080029ad
 8002784:	080028b9 	.word	0x080028b9
 8002788:	080029ad 	.word	0x080029ad
 800278c:	080029ad 	.word	0x080029ad
 8002790:	080029ad 	.word	0x080029ad
 8002794:	080028f5 	.word	0x080028f5
 8002798:	080029ad 	.word	0x080029ad
 800279c:	080029ad 	.word	0x080029ad
 80027a0:	080029ad 	.word	0x080029ad
 80027a4:	080029ad 	.word	0x080029ad
 80027a8:	080029ad 	.word	0x080029ad
 80027ac:	080029ad 	.word	0x080029ad
 80027b0:	080029ad 	.word	0x080029ad
 80027b4:	08002939 	.word	0x08002939
 80027b8:	080029ad 	.word	0x080029ad
 80027bc:	080029ad 	.word	0x080029ad
 80027c0:	080029ad 	.word	0x080029ad
 80027c4:	08002973 	.word	0x08002973
 80027c8:	2be8      	cmp	r3, #232	@ 0xe8
 80027ca:	f000 8109 	beq.w	80029e0 <ProcessingFun+0x404>
 80027ce:	e0ed      	b.n	80029ac <ProcessingFun+0x3d0>
	{
	case 0x10: //forced stop
		G_xMy_Data.Direction = Stop ;
 80027d0:	4a58      	ldr	r2, [pc, #352]	@ (8002934 <ProcessingFun+0x358>)
 80027d2:	7813      	ldrb	r3, [r2, #0]
 80027d4:	2108      	movs	r1, #8
 80027d6:	f361 0303 	bfi	r3, r1, #0, #4
 80027da:	7013      	strb	r3, [r2, #0]
		//TODO make it forced
		break;
 80027dc:	e103      	b.n	80029e6 <ProcessingFun+0x40a>
	case 0x20: //normal stop
		G_xMy_Data.Direction = Stop ;
 80027de:	4a55      	ldr	r2, [pc, #340]	@ (8002934 <ProcessingFun+0x358>)
 80027e0:	7813      	ldrb	r3, [r2, #0]
 80027e2:	2108      	movs	r1, #8
 80027e4:	f361 0303 	bfi	r3, r1, #0, #4
 80027e8:	7013      	strb	r3, [r2, #0]
		break;
 80027ea:	e0fc      	b.n	80029e6 <ProcessingFun+0x40a>
	case 0x40: //turn left extremely
		G_xMy_Data.Direction = Left;
 80027ec:	4a51      	ldr	r2, [pc, #324]	@ (8002934 <ProcessingFun+0x358>)
 80027ee:	7813      	ldrb	r3, [r2, #0]
 80027f0:	2103      	movs	r1, #3
 80027f2:	f361 0303 	bfi	r3, r1, #0, #4
 80027f6:	7013      	strb	r3, [r2, #0]
		break;
 80027f8:	e0f5      	b.n	80029e6 <ProcessingFun+0x40a>
	case 0x48: //turn left normal (forward left)
		G_xMy_Data.Direction = Forward_Left;
 80027fa:	4a4e      	ldr	r2, [pc, #312]	@ (8002934 <ProcessingFun+0x358>)
 80027fc:	7813      	ldrb	r3, [r2, #0]
 80027fe:	2105      	movs	r1, #5
 8002800:	f361 0303 	bfi	r3, r1, #0, #4
 8002804:	7013      	strb	r3, [r2, #0]
		break;
 8002806:	e0ee      	b.n	80029e6 <ProcessingFun+0x40a>
	case 0x4c: //turn left slightly
		G_xMy_Data.Direction = Forward_Left;
 8002808:	4a4a      	ldr	r2, [pc, #296]	@ (8002934 <ProcessingFun+0x358>)
 800280a:	7813      	ldrb	r3, [r2, #0]
 800280c:	2105      	movs	r1, #5
 800280e:	f361 0303 	bfi	r3, r1, #0, #4
 8002812:	7013      	strb	r3, [r2, #0]
		//TODO make it slight
		break;
 8002814:	e0e7      	b.n	80029e6 <ProcessingFun+0x40a>
	case 0x50: //turn Right extremely
		G_xMy_Data.Direction = Right;
 8002816:	4a47      	ldr	r2, [pc, #284]	@ (8002934 <ProcessingFun+0x358>)
 8002818:	7813      	ldrb	r3, [r2, #0]
 800281a:	2102      	movs	r1, #2
 800281c:	f361 0303 	bfi	r3, r1, #0, #4
 8002820:	7013      	strb	r3, [r2, #0]
		break;
 8002822:	e0e0      	b.n	80029e6 <ProcessingFun+0x40a>
	case 0x58: //turn Right normal (forward Right)
		G_xMy_Data.Direction = Forward_Right;
 8002824:	4a43      	ldr	r2, [pc, #268]	@ (8002934 <ProcessingFun+0x358>)
 8002826:	7813      	ldrb	r3, [r2, #0]
 8002828:	2104      	movs	r1, #4
 800282a:	f361 0303 	bfi	r3, r1, #0, #4
 800282e:	7013      	strb	r3, [r2, #0]
		break;
 8002830:	e0d9      	b.n	80029e6 <ProcessingFun+0x40a>
	case 0x5c: //turn Right slightly
		G_xMy_Data.Direction = Forward_Right;
 8002832:	4a40      	ldr	r2, [pc, #256]	@ (8002934 <ProcessingFun+0x358>)
 8002834:	7813      	ldrb	r3, [r2, #0]
 8002836:	2104      	movs	r1, #4
 8002838:	f361 0303 	bfi	r3, r1, #0, #4
 800283c:	7013      	strb	r3, [r2, #0]
		//TODO make it slight
		break;
 800283e:	e0d2      	b.n	80029e6 <ProcessingFun+0x40a>
	case 0x60: //Decrease speed greatly
		//TODO
		if(G_xMy_Data.Speed > 4){
 8002840:	4b3c      	ldr	r3, [pc, #240]	@ (8002934 <ProcessingFun+0x358>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b04      	cmp	r3, #4
 800284c:	d90f      	bls.n	800286e <ProcessingFun+0x292>
			G_xMy_Data.Speed -= 4;
 800284e:	4b39      	ldr	r3, [pc, #228]	@ (8002934 <ProcessingFun+0x358>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	3b04      	subs	r3, #4
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	b2d9      	uxtb	r1, r3
 8002862:	4a34      	ldr	r2, [pc, #208]	@ (8002934 <ProcessingFun+0x358>)
 8002864:	7813      	ldrb	r3, [r2, #0]
 8002866:	f361 1306 	bfi	r3, r1, #4, #3
 800286a:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed1;
		}
		break;
 800286c:	e0bb      	b.n	80029e6 <ProcessingFun+0x40a>
			G_xMy_Data.Speed = Speed1;
 800286e:	4a31      	ldr	r2, [pc, #196]	@ (8002934 <ProcessingFun+0x358>)
 8002870:	7813      	ldrb	r3, [r2, #0]
 8002872:	2101      	movs	r1, #1
 8002874:	f361 1306 	bfi	r3, r1, #4, #3
 8002878:	7013      	strb	r3, [r2, #0]
		break;
 800287a:	e0b4      	b.n	80029e6 <ProcessingFun+0x40a>
	case 0x68: //Decrease speed
		//TODO
		if(G_xMy_Data.Speed > 2){
 800287c:	4b2d      	ldr	r3, [pc, #180]	@ (8002934 <ProcessingFun+0x358>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d90f      	bls.n	80028aa <ProcessingFun+0x2ce>
			G_xMy_Data.Speed -= 2;
 800288a:	4b2a      	ldr	r3, [pc, #168]	@ (8002934 <ProcessingFun+0x358>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	3b02      	subs	r3, #2
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	b2d9      	uxtb	r1, r3
 800289e:	4a25      	ldr	r2, [pc, #148]	@ (8002934 <ProcessingFun+0x358>)
 80028a0:	7813      	ldrb	r3, [r2, #0]
 80028a2:	f361 1306 	bfi	r3, r1, #4, #3
 80028a6:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed1;
		}
		break;
 80028a8:	e09d      	b.n	80029e6 <ProcessingFun+0x40a>
			G_xMy_Data.Speed = Speed1;
 80028aa:	4a22      	ldr	r2, [pc, #136]	@ (8002934 <ProcessingFun+0x358>)
 80028ac:	7813      	ldrb	r3, [r2, #0]
 80028ae:	2101      	movs	r1, #1
 80028b0:	f361 1306 	bfi	r3, r1, #4, #3
 80028b4:	7013      	strb	r3, [r2, #0]
		break;
 80028b6:	e096      	b.n	80029e6 <ProcessingFun+0x40a>
	case 0x6c: //Decrease speed lightly
		//TODO
		if(G_xMy_Data.Speed > 1){
 80028b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002934 <ProcessingFun+0x358>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d90f      	bls.n	80028e6 <ProcessingFun+0x30a>
			G_xMy_Data.Speed -= 1;
 80028c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002934 <ProcessingFun+0x358>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	b2d9      	uxtb	r1, r3
 80028da:	4a16      	ldr	r2, [pc, #88]	@ (8002934 <ProcessingFun+0x358>)
 80028dc:	7813      	ldrb	r3, [r2, #0]
 80028de:	f361 1306 	bfi	r3, r1, #4, #3
 80028e2:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Direction = Stop;
		}
		break;
 80028e4:	e07f      	b.n	80029e6 <ProcessingFun+0x40a>
			G_xMy_Data.Direction = Stop;
 80028e6:	4a13      	ldr	r2, [pc, #76]	@ (8002934 <ProcessingFun+0x358>)
 80028e8:	7813      	ldrb	r3, [r2, #0]
 80028ea:	2108      	movs	r1, #8
 80028ec:	f361 0303 	bfi	r3, r1, #0, #4
 80028f0:	7013      	strb	r3, [r2, #0]
		break;
 80028f2:	e078      	b.n	80029e6 <ProcessingFun+0x40a>
	case 0x70: //Increase speed greatly
		//TODO
		if(G_xMy_Data.Speed+4 < 8){
 80028f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <ProcessingFun+0x358>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d80f      	bhi.n	8002922 <ProcessingFun+0x346>
			G_xMy_Data.Speed += 4;
 8002902:	4b0c      	ldr	r3, [pc, #48]	@ (8002934 <ProcessingFun+0x358>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3304      	adds	r3, #4
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	b2d9      	uxtb	r1, r3
 8002916:	4a07      	ldr	r2, [pc, #28]	@ (8002934 <ProcessingFun+0x358>)
 8002918:	7813      	ldrb	r3, [r2, #0]
 800291a:	f361 1306 	bfi	r3, r1, #4, #3
 800291e:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed7;
		}
		break;
 8002920:	e061      	b.n	80029e6 <ProcessingFun+0x40a>
			G_xMy_Data.Speed = Speed7;
 8002922:	4a04      	ldr	r2, [pc, #16]	@ (8002934 <ProcessingFun+0x358>)
 8002924:	7813      	ldrb	r3, [r2, #0]
 8002926:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800292a:	7013      	strb	r3, [r2, #0]
		break;
 800292c:	e05b      	b.n	80029e6 <ProcessingFun+0x40a>
 800292e:	bf00      	nop
 8002930:	200001d4 	.word	0x200001d4
 8002934:	200001cc 	.word	0x200001cc
	case 0x78: //Increase speed
		//TODO
		if(G_xMy_Data.Speed+2 < 8){
 8002938:	4b52      	ldr	r3, [pc, #328]	@ (8002a84 <ProcessingFun+0x4a8>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b05      	cmp	r3, #5
 8002944:	d80f      	bhi.n	8002966 <ProcessingFun+0x38a>
			G_xMy_Data.Speed += 2;
 8002946:	4b4f      	ldr	r3, [pc, #316]	@ (8002a84 <ProcessingFun+0x4a8>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	3302      	adds	r3, #2
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	b2d9      	uxtb	r1, r3
 800295a:	4a4a      	ldr	r2, [pc, #296]	@ (8002a84 <ProcessingFun+0x4a8>)
 800295c:	7813      	ldrb	r3, [r2, #0]
 800295e:	f361 1306 	bfi	r3, r1, #4, #3
 8002962:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed7;
		}
		break;
 8002964:	e03f      	b.n	80029e6 <ProcessingFun+0x40a>
			G_xMy_Data.Speed = Speed7;
 8002966:	4a47      	ldr	r2, [pc, #284]	@ (8002a84 <ProcessingFun+0x4a8>)
 8002968:	7813      	ldrb	r3, [r2, #0]
 800296a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800296e:	7013      	strb	r3, [r2, #0]
		break;
 8002970:	e039      	b.n	80029e6 <ProcessingFun+0x40a>
	case 0x7c: //Increase speed lightly
		//TODO
		if(G_xMy_Data.Speed != Speed7){
 8002972:	4b44      	ldr	r3, [pc, #272]	@ (8002a84 <ProcessingFun+0x4a8>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b70      	cmp	r3, #112	@ 0x70
 800297e:	d00f      	beq.n	80029a0 <ProcessingFun+0x3c4>
			G_xMy_Data.Speed += 1;
 8002980:	4b40      	ldr	r3, [pc, #256]	@ (8002a84 <ProcessingFun+0x4a8>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	3301      	adds	r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	b2d9      	uxtb	r1, r3
 8002994:	4a3b      	ldr	r2, [pc, #236]	@ (8002a84 <ProcessingFun+0x4a8>)
 8002996:	7813      	ldrb	r3, [r2, #0]
 8002998:	f361 1306 	bfi	r3, r1, #4, #3
 800299c:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed7;
		}
		break;
 800299e:	e022      	b.n	80029e6 <ProcessingFun+0x40a>
			G_xMy_Data.Speed = Speed7;
 80029a0:	4a38      	ldr	r2, [pc, #224]	@ (8002a84 <ProcessingFun+0x4a8>)
 80029a2:	7813      	ldrb	r3, [r2, #0]
 80029a4:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80029a8:	7013      	strb	r3, [r2, #0]
		break;
 80029aa:	e01c      	b.n	80029e6 <ProcessingFun+0x40a>
		//TODO
		//error in ACK(ACK sent is invalid)
		//retransmition (receive data)
		break;
	default:
		switch(L_u8Data){
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	3b08      	subs	r3, #8
 80029b0:	2b06      	cmp	r3, #6
 80029b2:	d817      	bhi.n	80029e4 <ProcessingFun+0x408>
 80029b4:	a201      	add	r2, pc, #4	@ (adr r2, 80029bc <ProcessingFun+0x3e0>)
 80029b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ba:	bf00      	nop
 80029bc:	080029d9 	.word	0x080029d9
 80029c0:	080029d9 	.word	0x080029d9
 80029c4:	080029d9 	.word	0x080029d9
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029e5 	.word	0x080029e5
 80029d0:	080029e5 	.word	0x080029e5
 80029d4:	080029d9 	.word	0x080029d9
		case 0x8:
			//TODO
			//There is a bump with distance
			//distance = APP_G_u8DataFromUART & 0xF

			break;
 80029d8:	bf00      	nop
			//request code x is valid
			//x = APP_G_u8DataFromUART & 0x7
			break;
		}

		break;
 80029da:	e003      	b.n	80029e4 <ProcessingFun+0x408>
		break;
 80029dc:	bf00      	nop
 80029de:	e002      	b.n	80029e6 <ProcessingFun+0x40a>
		break;
 80029e0:	bf00      	nop
 80029e2:	e000      	b.n	80029e6 <ProcessingFun+0x40a>
		break;
 80029e4:	bf00      	nop
	}

	G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 80029e6:	4b27      	ldr	r3, [pc, #156]	@ (8002a84 <ProcessingFun+0x4a8>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80029ee:	b2d9      	uxtb	r1, r3
 80029f0:	4a25      	ldr	r2, [pc, #148]	@ (8002a88 <ProcessingFun+0x4ac>)
 80029f2:	7813      	ldrb	r3, [r2, #0]
 80029f4:	f361 0303 	bfi	r3, r1, #0, #4
 80029f8:	7013      	strb	r3, [r2, #0]
	G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 80029fa:	4b22      	ldr	r3, [pc, #136]	@ (8002a84 <ProcessingFun+0x4a8>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002a02:	b2d9      	uxtb	r1, r3
 8002a04:	4a20      	ldr	r2, [pc, #128]	@ (8002a88 <ProcessingFun+0x4ac>)
 8002a06:	7813      	ldrb	r3, [r2, #0]
 8002a08:	f361 1306 	bfi	r3, r1, #4, #3
 8002a0c:	7013      	strb	r3, [r2, #0]
	switch(G_xMy_Data.Direction){
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <ProcessingFun+0x4a8>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d82d      	bhi.n	8002a78 <ProcessingFun+0x49c>
 8002a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a24 <ProcessingFun+0x448>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002a49 	.word	0x08002a49
 8002a28:	08002a55 	.word	0x08002a55
 8002a2c:	08002a73 	.word	0x08002a73
 8002a30:	08002a73 	.word	0x08002a73
 8002a34:	08002a67 	.word	0x08002a67
 8002a38:	08002a6d 	.word	0x08002a6d
 8002a3c:	08002a5b 	.word	0x08002a5b
 8002a40:	08002a61 	.word	0x08002a61
 8002a44:	08002a4f 	.word	0x08002a4f
	case Go:
		APP_voidGoTasks();
 8002a48:	f7ff fad4 	bl	8001ff4 <APP_voidGoTasks>
		break;
 8002a4c:	e015      	b.n	8002a7a <ProcessingFun+0x49e>
	case Stop:
		APP_VoidStop();
 8002a4e:	f7ff fabd 	bl	8001fcc <APP_VoidStop>
		break;
 8002a52:	e012      	b.n	8002a7a <ProcessingFun+0x49e>
	case Back:
		APP_voidBackTasks();
 8002a54:	f7ff fb50 	bl	80020f8 <APP_voidBackTasks>
		break;
 8002a58:	e00f      	b.n	8002a7a <ProcessingFun+0x49e>
	case Backward_Right:
		APP_voidBackward_RightTasks();
 8002a5a:	f7ff fbc9 	bl	80021f0 <APP_voidBackward_RightTasks>
		break;
 8002a5e:	e00c      	b.n	8002a7a <ProcessingFun+0x49e>
	case Backward_Left:
		APP_voidBackward_LEFTTasks();
 8002a60:	f7ff fc42 	bl	80022e8 <APP_voidBackward_LEFTTasks>
		break;
 8002a64:	e009      	b.n	8002a7a <ProcessingFun+0x49e>
	case Forward_Right:
		APP_voidForward_RightTasks();
 8002a66:	f7ff fcc1 	bl	80023ec <APP_voidForward_RightTasks>
		break;
 8002a6a:	e006      	b.n	8002a7a <ProcessingFun+0x49e>
	case Forward_Left:
		APP_voidForward_LeftTasks();
 8002a6c:	f7ff fd3a 	bl	80024e4 <APP_voidForward_LeftTasks>
		break;
 8002a70:	e003      	b.n	8002a7a <ProcessingFun+0x49e>
	case Right:
	case Left:
		APP_voidRight_LeftTasks();
 8002a72:	f7ff fcb5 	bl	80023e0 <APP_voidRight_LeftTasks>
		break;
 8002a76:	e000      	b.n	8002a7a <ProcessingFun+0x49e>
	default:
		//do nothing
		break;
 8002a78:	bf00      	nop
	}
	return;
 8002a7a:	bf00      	nop
}
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200001cc 	.word	0x200001cc
 8002a88:	200001d8 	.word	0x200001d8

08002a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <HardFault_Handler+0x4>

08002aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa4:	bf00      	nop
 8002aa6:	e7fd      	b.n	8002aa4 <MemManage_Handler+0x4>

08002aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aac:	bf00      	nop
 8002aae:	e7fd      	b.n	8002aac <BusFault_Handler+0x4>

08002ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab4:	bf00      	nop
 8002ab6:	e7fd      	b.n	8002ab4 <UsageFault_Handler+0x4>

08002ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ae8:	480c      	ldr	r0, [pc, #48]	@ (8002b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aea:	490d      	ldr	r1, [pc, #52]	@ (8002b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002aec:	4a0d      	ldr	r2, [pc, #52]	@ (8002b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af0:	e002      	b.n	8002af8 <LoopCopyDataInit>

08002af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002af6:	3304      	adds	r3, #4

08002af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002afc:	d3f9      	bcc.n	8002af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002afe:	4a0a      	ldr	r2, [pc, #40]	@ (8002b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b00:	4c0a      	ldr	r4, [pc, #40]	@ (8002b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b04:	e001      	b.n	8002b0a <LoopFillZerobss>

08002b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b08:	3204      	adds	r2, #4

08002b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b0c:	d3fb      	bcc.n	8002b06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b0e:	f7ff ffe5 	bl	8002adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b12:	f000 f80f 	bl	8002b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b16:	f7ff f9bb 	bl	8001e90 <main>
  bx lr
 8002b1a:	4770      	bx	lr
  ldr r0, =_sdata
 8002b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b20:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002b24:	08002b9c 	.word	0x08002b9c
  ldr r2, =_sbss
 8002b28:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8002b2c:	200001dc 	.word	0x200001dc

08002b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b30:	e7fe      	b.n	8002b30 <ADC1_2_IRQHandler>
	...

08002b34 <__libc_init_array>:
 8002b34:	b570      	push	{r4, r5, r6, lr}
 8002b36:	2600      	movs	r6, #0
 8002b38:	4d0c      	ldr	r5, [pc, #48]	@ (8002b6c <__libc_init_array+0x38>)
 8002b3a:	4c0d      	ldr	r4, [pc, #52]	@ (8002b70 <__libc_init_array+0x3c>)
 8002b3c:	1b64      	subs	r4, r4, r5
 8002b3e:	10a4      	asrs	r4, r4, #2
 8002b40:	42a6      	cmp	r6, r4
 8002b42:	d109      	bne.n	8002b58 <__libc_init_array+0x24>
 8002b44:	f000 f81a 	bl	8002b7c <_init>
 8002b48:	2600      	movs	r6, #0
 8002b4a:	4d0a      	ldr	r5, [pc, #40]	@ (8002b74 <__libc_init_array+0x40>)
 8002b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b78 <__libc_init_array+0x44>)
 8002b4e:	1b64      	subs	r4, r4, r5
 8002b50:	10a4      	asrs	r4, r4, #2
 8002b52:	42a6      	cmp	r6, r4
 8002b54:	d105      	bne.n	8002b62 <__libc_init_array+0x2e>
 8002b56:	bd70      	pop	{r4, r5, r6, pc}
 8002b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b5c:	4798      	blx	r3
 8002b5e:	3601      	adds	r6, #1
 8002b60:	e7ee      	b.n	8002b40 <__libc_init_array+0xc>
 8002b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b66:	4798      	blx	r3
 8002b68:	3601      	adds	r6, #1
 8002b6a:	e7f2      	b.n	8002b52 <__libc_init_array+0x1e>
 8002b6c:	08002b94 	.word	0x08002b94
 8002b70:	08002b94 	.word	0x08002b94
 8002b74:	08002b94 	.word	0x08002b94
 8002b78:	08002b98 	.word	0x08002b98

08002b7c <_init>:
 8002b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7e:	bf00      	nop
 8002b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b82:	bc08      	pop	{r3}
 8002b84:	469e      	mov	lr, r3
 8002b86:	4770      	bx	lr

08002b88 <_fini>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	bf00      	nop
 8002b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8e:	bc08      	pop	{r3}
 8002b90:	469e      	mov	lr, r3
 8002b92:	4770      	bx	lr
