
bluebil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002740  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002850  08002850  000040cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002850  08002850  000040cc  2**0
                  CONTENTS
  4 .ARM          00000000  08002850  08002850  000040cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002850  08002850  000040cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002850  08002850  00003850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002854  08002854  00003854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08002858  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  200000cc  08002924  000040cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002924  00004108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000040cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000025b3  00000000  00000000  000040f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f42  00000000  00000000  000066a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000420  00000000  00000000  000075f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002f2  00000000  00000000  00007a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000218d  00000000  00000000  00007d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003713  00000000  00000000  00009e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083a1b  00000000  00000000  0000d5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00090fbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ef4  00000000  00000000  00091000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00091ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000cc 	.word	0x200000cc
 800012c:	00000000 	.word	0x00000000
 8000130:	08002838 	.word	0x08002838

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000d0 	.word	0x200000d0
 800014c:	08002838 	.word	0x08002838

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_frsub>:
 800075c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000760:	e002      	b.n	8000768 <__addsf3>
 8000762:	bf00      	nop

08000764 <__aeabi_fsub>:
 8000764:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000768 <__addsf3>:
 8000768:	0042      	lsls	r2, r0, #1
 800076a:	bf1f      	itttt	ne
 800076c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000770:	ea92 0f03 	teqne	r2, r3
 8000774:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000778:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077c:	d06a      	beq.n	8000854 <__addsf3+0xec>
 800077e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000782:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000786:	bfc1      	itttt	gt
 8000788:	18d2      	addgt	r2, r2, r3
 800078a:	4041      	eorgt	r1, r0
 800078c:	4048      	eorgt	r0, r1
 800078e:	4041      	eorgt	r1, r0
 8000790:	bfb8      	it	lt
 8000792:	425b      	neglt	r3, r3
 8000794:	2b19      	cmp	r3, #25
 8000796:	bf88      	it	hi
 8000798:	4770      	bxhi	lr
 800079a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800079e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80007a6:	bf18      	it	ne
 80007a8:	4240      	negne	r0, r0
 80007aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80007b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4249      	negne	r1, r1
 80007ba:	ea92 0f03 	teq	r2, r3
 80007be:	d03f      	beq.n	8000840 <__addsf3+0xd8>
 80007c0:	f1a2 0201 	sub.w	r2, r2, #1
 80007c4:	fa41 fc03 	asr.w	ip, r1, r3
 80007c8:	eb10 000c 	adds.w	r0, r0, ip
 80007cc:	f1c3 0320 	rsb	r3, r3, #32
 80007d0:	fa01 f103 	lsl.w	r1, r1, r3
 80007d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	d502      	bpl.n	80007e0 <__addsf3+0x78>
 80007da:	4249      	negs	r1, r1
 80007dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007e4:	d313      	bcc.n	800080e <__addsf3+0xa6>
 80007e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007ea:	d306      	bcc.n	80007fa <__addsf3+0x92>
 80007ec:	0840      	lsrs	r0, r0, #1
 80007ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f2:	f102 0201 	add.w	r2, r2, #1
 80007f6:	2afe      	cmp	r2, #254	@ 0xfe
 80007f8:	d251      	bcs.n	800089e <__addsf3+0x136>
 80007fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000802:	bf08      	it	eq
 8000804:	f020 0001 	biceq.w	r0, r0, #1
 8000808:	ea40 0003 	orr.w	r0, r0, r3
 800080c:	4770      	bx	lr
 800080e:	0049      	lsls	r1, r1, #1
 8000810:	eb40 0000 	adc.w	r0, r0, r0
 8000814:	3a01      	subs	r2, #1
 8000816:	bf28      	it	cs
 8000818:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800081c:	d2ed      	bcs.n	80007fa <__addsf3+0x92>
 800081e:	fab0 fc80 	clz	ip, r0
 8000822:	f1ac 0c08 	sub.w	ip, ip, #8
 8000826:	ebb2 020c 	subs.w	r2, r2, ip
 800082a:	fa00 f00c 	lsl.w	r0, r0, ip
 800082e:	bfaa      	itet	ge
 8000830:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000834:	4252      	neglt	r2, r2
 8000836:	4318      	orrge	r0, r3
 8000838:	bfbc      	itt	lt
 800083a:	40d0      	lsrlt	r0, r2
 800083c:	4318      	orrlt	r0, r3
 800083e:	4770      	bx	lr
 8000840:	f092 0f00 	teq	r2, #0
 8000844:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000848:	bf06      	itte	eq
 800084a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800084e:	3201      	addeq	r2, #1
 8000850:	3b01      	subne	r3, #1
 8000852:	e7b5      	b.n	80007c0 <__addsf3+0x58>
 8000854:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000858:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800085c:	bf18      	it	ne
 800085e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000862:	d021      	beq.n	80008a8 <__addsf3+0x140>
 8000864:	ea92 0f03 	teq	r2, r3
 8000868:	d004      	beq.n	8000874 <__addsf3+0x10c>
 800086a:	f092 0f00 	teq	r2, #0
 800086e:	bf08      	it	eq
 8000870:	4608      	moveq	r0, r1
 8000872:	4770      	bx	lr
 8000874:	ea90 0f01 	teq	r0, r1
 8000878:	bf1c      	itt	ne
 800087a:	2000      	movne	r0, #0
 800087c:	4770      	bxne	lr
 800087e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000882:	d104      	bne.n	800088e <__addsf3+0x126>
 8000884:	0040      	lsls	r0, r0, #1
 8000886:	bf28      	it	cs
 8000888:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000892:	bf3c      	itt	cc
 8000894:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000898:	4770      	bxcc	lr
 800089a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800089e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80008a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008a6:	4770      	bx	lr
 80008a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008ac:	bf16      	itet	ne
 80008ae:	4608      	movne	r0, r1
 80008b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008b4:	4601      	movne	r1, r0
 80008b6:	0242      	lsls	r2, r0, #9
 80008b8:	bf06      	itte	eq
 80008ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008be:	ea90 0f01 	teqeq	r0, r1
 80008c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_ui2f>:
 80008c8:	f04f 0300 	mov.w	r3, #0
 80008cc:	e004      	b.n	80008d8 <__aeabi_i2f+0x8>
 80008ce:	bf00      	nop

080008d0 <__aeabi_i2f>:
 80008d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008d4:	bf48      	it	mi
 80008d6:	4240      	negmi	r0, r0
 80008d8:	ea5f 0c00 	movs.w	ip, r0
 80008dc:	bf08      	it	eq
 80008de:	4770      	bxeq	lr
 80008e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008e4:	4601      	mov	r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	e01c      	b.n	8000926 <__aeabi_l2f+0x2a>

080008ec <__aeabi_ul2f>:
 80008ec:	ea50 0201 	orrs.w	r2, r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	e00a      	b.n	8000910 <__aeabi_l2f+0x14>
 80008fa:	bf00      	nop

080008fc <__aeabi_l2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000908:	d502      	bpl.n	8000910 <__aeabi_l2f+0x14>
 800090a:	4240      	negs	r0, r0
 800090c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000910:	ea5f 0c01 	movs.w	ip, r1
 8000914:	bf02      	ittt	eq
 8000916:	4684      	moveq	ip, r0
 8000918:	4601      	moveq	r1, r0
 800091a:	2000      	moveq	r0, #0
 800091c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000920:	bf08      	it	eq
 8000922:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000926:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800092a:	fabc f28c 	clz	r2, ip
 800092e:	3a08      	subs	r2, #8
 8000930:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000934:	db10      	blt.n	8000958 <__aeabi_l2f+0x5c>
 8000936:	fa01 fc02 	lsl.w	ip, r1, r2
 800093a:	4463      	add	r3, ip
 800093c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000940:	f1c2 0220 	rsb	r2, r2, #32
 8000944:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	eb43 0002 	adc.w	r0, r3, r2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f102 0220 	add.w	r2, r2, #32
 800095c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000960:	f1c2 0220 	rsb	r2, r2, #32
 8000964:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000968:	fa21 f202 	lsr.w	r2, r1, r2
 800096c:	eb43 0002 	adc.w	r0, r3, r2
 8000970:	bf08      	it	eq
 8000972:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000976:	4770      	bx	lr

08000978 <EXTI0_IRQHandler>:
	EXTI0_CallBack = ptr ;
	
}	

void EXTI0_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <EXTI0_IRQHandler+0x1c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4798      	blx	r3
	/*	Clear pending Bit For EXTI0		*/
	SET_BIT(EXTI -> PR , 0);	
 8000982:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <EXTI0_IRQHandler+0x20>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <EXTI0_IRQHandler+0x20>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6153      	str	r3, [r2, #20]
}	
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000e8 	.word	0x200000e8
 8000998:	40010400 	.word	0x40010400

0800099c <GPIO_voidSetPinMode>:
					
}
void  GPIO_VoidDeInit();

u8 GPIO_voidSetPinMode(u8 copy_u8portID,u8 copy_u8PinID,u8 copy_u8Mode)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
 80009a6:	460b      	mov	r3, r1
 80009a8:	71bb      	strb	r3, [r7, #6]
 80009aa:	4613      	mov	r3, r2
 80009ac:	717b      	strb	r3, [r7, #5]
	u8 lacal_u8ErrorState = STD_TYPE_OK;
 80009ae:	2301      	movs	r3, #1
 80009b0:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15 && copy_u8Mode <= GPIO_OUTPUT_50M_AF_OD)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b07      	cmp	r3, #7
 80009b6:	f200 817a 	bhi.w	8000cae <GPIO_voidSetPinMode+0x312>
 80009ba:	79bb      	ldrb	r3, [r7, #6]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	f200 8176 	bhi.w	8000cae <GPIO_voidSetPinMode+0x312>
 80009c2:	797b      	ldrb	r3, [r7, #5]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	f200 8172 	bhi.w	8000cae <GPIO_voidSetPinMode+0x312>
	{
		switch(copy_u8portID)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	f200 816f 	bhi.w	8000cb2 <GPIO_voidSetPinMode+0x316>
 80009d4:	a201      	add	r2, pc, #4	@ (adr r2, 80009dc <GPIO_voidSetPinMode+0x40>)
 80009d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009da:	bf00      	nop
 80009dc:	080009f9 	.word	0x080009f9
 80009e0:	08000a59 	.word	0x08000a59
 80009e4:	08000ab9 	.word	0x08000ab9
 80009e8:	08000b19 	.word	0x08000b19
 80009ec:	08000b79 	.word	0x08000b79
 80009f0:	08000bd7 	.word	0x08000bd7
 80009f4:	08000c35 	.word	0x08000c35
		{
			case GPIO_PORTA: 
				if(copy_u8PinID<=7)
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	2b07      	cmp	r3, #7
 80009fc:	d812      	bhi.n	8000a24 <GPIO_voidSetPinMode+0x88>
				{
					SET_4BIT_Val(GPIOA->CRL,copy_u8PinID*4,copy_u8Mode);
 80009fe:	4bb0      	ldr	r3, [pc, #704]	@ (8000cc0 <GPIO_voidSetPinMode+0x324>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	79ba      	ldrb	r2, [r7, #6]
 8000a04:	0092      	lsls	r2, r2, #2
 8000a06:	210f      	movs	r1, #15
 8000a08:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0c:	43d2      	mvns	r2, r2
 8000a0e:	4013      	ands	r3, r2
 8000a10:	7979      	ldrb	r1, [r7, #5]
 8000a12:	79ba      	ldrb	r2, [r7, #6]
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4aa8      	ldr	r2, [pc, #672]	@ (8000cc0 <GPIO_voidSetPinMode+0x324>)
 8000a1e:	430b      	orrs	r3, r1
 8000a20:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOA->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000a22:	e136      	b.n	8000c92 <GPIO_voidSetPinMode+0x2f6>
				else if(copy_u8PinID <=15)
 8000a24:	79bb      	ldrb	r3, [r7, #6]
 8000a26:	2b0f      	cmp	r3, #15
 8000a28:	f200 8133 	bhi.w	8000c92 <GPIO_voidSetPinMode+0x2f6>
					copy_u8PinID-=8;
 8000a2c:	79bb      	ldrb	r3, [r7, #6]
 8000a2e:	3b08      	subs	r3, #8
 8000a30:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOA->CRH,copy_u8PinID*4,copy_u8Mode);
 8000a32:	4ba3      	ldr	r3, [pc, #652]	@ (8000cc0 <GPIO_voidSetPinMode+0x324>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	79ba      	ldrb	r2, [r7, #6]
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	210f      	movs	r1, #15
 8000a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a40:	43d2      	mvns	r2, r2
 8000a42:	4013      	ands	r3, r2
 8000a44:	7979      	ldrb	r1, [r7, #5]
 8000a46:	79ba      	ldrb	r2, [r7, #6]
 8000a48:	0092      	lsls	r2, r2, #2
 8000a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4a9b      	ldr	r2, [pc, #620]	@ (8000cc0 <GPIO_voidSetPinMode+0x324>)
 8000a52:	430b      	orrs	r3, r1
 8000a54:	6053      	str	r3, [r2, #4]
				break;
 8000a56:	e11c      	b.n	8000c92 <GPIO_voidSetPinMode+0x2f6>
			case GPIO_PORTB: 
				if(copy_u8PinID<=7)
 8000a58:	79bb      	ldrb	r3, [r7, #6]
 8000a5a:	2b07      	cmp	r3, #7
 8000a5c:	d812      	bhi.n	8000a84 <GPIO_voidSetPinMode+0xe8>
				{
					SET_4BIT_Val(GPIOB->CRL,copy_u8PinID*4,copy_u8Mode);
 8000a5e:	4b99      	ldr	r3, [pc, #612]	@ (8000cc4 <GPIO_voidSetPinMode+0x328>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	79ba      	ldrb	r2, [r7, #6]
 8000a64:	0092      	lsls	r2, r2, #2
 8000a66:	210f      	movs	r1, #15
 8000a68:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6c:	43d2      	mvns	r2, r2
 8000a6e:	4013      	ands	r3, r2
 8000a70:	7979      	ldrb	r1, [r7, #5]
 8000a72:	79ba      	ldrb	r2, [r7, #6]
 8000a74:	0092      	lsls	r2, r2, #2
 8000a76:	fa01 f202 	lsl.w	r2, r1, r2
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4a91      	ldr	r2, [pc, #580]	@ (8000cc4 <GPIO_voidSetPinMode+0x328>)
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOB->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000a82:	e108      	b.n	8000c96 <GPIO_voidSetPinMode+0x2fa>
				else if(copy_u8PinID <=15)
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	2b0f      	cmp	r3, #15
 8000a88:	f200 8105 	bhi.w	8000c96 <GPIO_voidSetPinMode+0x2fa>
					copy_u8PinID-=8;
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	3b08      	subs	r3, #8
 8000a90:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOB->CRH,copy_u8PinID*4,copy_u8Mode);
 8000a92:	4b8c      	ldr	r3, [pc, #560]	@ (8000cc4 <GPIO_voidSetPinMode+0x328>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	79ba      	ldrb	r2, [r7, #6]
 8000a98:	0092      	lsls	r2, r2, #2
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa0:	43d2      	mvns	r2, r2
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	7979      	ldrb	r1, [r7, #5]
 8000aa6:	79ba      	ldrb	r2, [r7, #6]
 8000aa8:	0092      	lsls	r2, r2, #2
 8000aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4a84      	ldr	r2, [pc, #528]	@ (8000cc4 <GPIO_voidSetPinMode+0x328>)
 8000ab2:	430b      	orrs	r3, r1
 8000ab4:	6053      	str	r3, [r2, #4]
				break;
 8000ab6:	e0ee      	b.n	8000c96 <GPIO_voidSetPinMode+0x2fa>
			case GPIO_PORTC: 
				if(copy_u8PinID<=7)
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	2b07      	cmp	r3, #7
 8000abc:	d812      	bhi.n	8000ae4 <GPIO_voidSetPinMode+0x148>
				{
					SET_4BIT_Val(GPIOC->CRL,copy_u8PinID*4,copy_u8Mode);
 8000abe:	4b82      	ldr	r3, [pc, #520]	@ (8000cc8 <GPIO_voidSetPinMode+0x32c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	79ba      	ldrb	r2, [r7, #6]
 8000ac4:	0092      	lsls	r2, r2, #2
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	43d2      	mvns	r2, r2
 8000ace:	4013      	ands	r3, r2
 8000ad0:	7979      	ldrb	r1, [r7, #5]
 8000ad2:	79ba      	ldrb	r2, [r7, #6]
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ada:	4611      	mov	r1, r2
 8000adc:	4a7a      	ldr	r2, [pc, #488]	@ (8000cc8 <GPIO_voidSetPinMode+0x32c>)
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOC->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000ae2:	e0da      	b.n	8000c9a <GPIO_voidSetPinMode+0x2fe>
				else if(copy_u8PinID <=15)
 8000ae4:	79bb      	ldrb	r3, [r7, #6]
 8000ae6:	2b0f      	cmp	r3, #15
 8000ae8:	f200 80d7 	bhi.w	8000c9a <GPIO_voidSetPinMode+0x2fe>
					copy_u8PinID-=8;
 8000aec:	79bb      	ldrb	r3, [r7, #6]
 8000aee:	3b08      	subs	r3, #8
 8000af0:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOC->CRH,copy_u8PinID*4,copy_u8Mode);
 8000af2:	4b75      	ldr	r3, [pc, #468]	@ (8000cc8 <GPIO_voidSetPinMode+0x32c>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	79ba      	ldrb	r2, [r7, #6]
 8000af8:	0092      	lsls	r2, r2, #2
 8000afa:	210f      	movs	r1, #15
 8000afc:	fa01 f202 	lsl.w	r2, r1, r2
 8000b00:	43d2      	mvns	r2, r2
 8000b02:	4013      	ands	r3, r2
 8000b04:	7979      	ldrb	r1, [r7, #5]
 8000b06:	79ba      	ldrb	r2, [r7, #6]
 8000b08:	0092      	lsls	r2, r2, #2
 8000b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4a6d      	ldr	r2, [pc, #436]	@ (8000cc8 <GPIO_voidSetPinMode+0x32c>)
 8000b12:	430b      	orrs	r3, r1
 8000b14:	6053      	str	r3, [r2, #4]
				break;
 8000b16:	e0c0      	b.n	8000c9a <GPIO_voidSetPinMode+0x2fe>
			case GPIO_PORTD: 
				if(copy_u8PinID<=7)
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	2b07      	cmp	r3, #7
 8000b1c:	d812      	bhi.n	8000b44 <GPIO_voidSetPinMode+0x1a8>
				{
					SET_4BIT_Val(GPIOD->CRL,copy_u8PinID*4,copy_u8Mode);
 8000b1e:	4b6b      	ldr	r3, [pc, #428]	@ (8000ccc <GPIO_voidSetPinMode+0x330>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	79ba      	ldrb	r2, [r7, #6]
 8000b24:	0092      	lsls	r2, r2, #2
 8000b26:	210f      	movs	r1, #15
 8000b28:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2c:	43d2      	mvns	r2, r2
 8000b2e:	4013      	ands	r3, r2
 8000b30:	7979      	ldrb	r1, [r7, #5]
 8000b32:	79ba      	ldrb	r2, [r7, #6]
 8000b34:	0092      	lsls	r2, r2, #2
 8000b36:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4a63      	ldr	r2, [pc, #396]	@ (8000ccc <GPIO_voidSetPinMode+0x330>)
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOD->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000b42:	e0ac      	b.n	8000c9e <GPIO_voidSetPinMode+0x302>
				else if(copy_u8PinID <=15)
 8000b44:	79bb      	ldrb	r3, [r7, #6]
 8000b46:	2b0f      	cmp	r3, #15
 8000b48:	f200 80a9 	bhi.w	8000c9e <GPIO_voidSetPinMode+0x302>
					copy_u8PinID-=8;
 8000b4c:	79bb      	ldrb	r3, [r7, #6]
 8000b4e:	3b08      	subs	r3, #8
 8000b50:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOD->CRH,copy_u8PinID*4,copy_u8Mode);
 8000b52:	4b5e      	ldr	r3, [pc, #376]	@ (8000ccc <GPIO_voidSetPinMode+0x330>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	79ba      	ldrb	r2, [r7, #6]
 8000b58:	0092      	lsls	r2, r2, #2
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b60:	43d2      	mvns	r2, r2
 8000b62:	4013      	ands	r3, r2
 8000b64:	7979      	ldrb	r1, [r7, #5]
 8000b66:	79ba      	ldrb	r2, [r7, #6]
 8000b68:	0092      	lsls	r2, r2, #2
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4a56      	ldr	r2, [pc, #344]	@ (8000ccc <GPIO_voidSetPinMode+0x330>)
 8000b72:	430b      	orrs	r3, r1
 8000b74:	6053      	str	r3, [r2, #4]
				break;
 8000b76:	e092      	b.n	8000c9e <GPIO_voidSetPinMode+0x302>
			case GPIO_PORTE: 
				if(copy_u8PinID<=7)
 8000b78:	79bb      	ldrb	r3, [r7, #6]
 8000b7a:	2b07      	cmp	r3, #7
 8000b7c:	d812      	bhi.n	8000ba4 <GPIO_voidSetPinMode+0x208>
				{
					SET_4BIT_Val(GPIOE->CRL,copy_u8PinID*4,copy_u8Mode);
 8000b7e:	4b54      	ldr	r3, [pc, #336]	@ (8000cd0 <GPIO_voidSetPinMode+0x334>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	79ba      	ldrb	r2, [r7, #6]
 8000b84:	0092      	lsls	r2, r2, #2
 8000b86:	210f      	movs	r1, #15
 8000b88:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8c:	43d2      	mvns	r2, r2
 8000b8e:	4013      	ands	r3, r2
 8000b90:	7979      	ldrb	r1, [r7, #5]
 8000b92:	79ba      	ldrb	r2, [r7, #6]
 8000b94:	0092      	lsls	r2, r2, #2
 8000b96:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8000cd0 <GPIO_voidSetPinMode+0x334>)
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOE->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000ba2:	e07e      	b.n	8000ca2 <GPIO_voidSetPinMode+0x306>
				else if(copy_u8PinID <=15)
 8000ba4:	79bb      	ldrb	r3, [r7, #6]
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d87b      	bhi.n	8000ca2 <GPIO_voidSetPinMode+0x306>
					copy_u8PinID-=8;
 8000baa:	79bb      	ldrb	r3, [r7, #6]
 8000bac:	3b08      	subs	r3, #8
 8000bae:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOE->CRH,copy_u8PinID*4,copy_u8Mode);
 8000bb0:	4b47      	ldr	r3, [pc, #284]	@ (8000cd0 <GPIO_voidSetPinMode+0x334>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	79ba      	ldrb	r2, [r7, #6]
 8000bb6:	0092      	lsls	r2, r2, #2
 8000bb8:	210f      	movs	r1, #15
 8000bba:	fa01 f202 	lsl.w	r2, r1, r2
 8000bbe:	43d2      	mvns	r2, r2
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	7979      	ldrb	r1, [r7, #5]
 8000bc4:	79ba      	ldrb	r2, [r7, #6]
 8000bc6:	0092      	lsls	r2, r2, #2
 8000bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4a40      	ldr	r2, [pc, #256]	@ (8000cd0 <GPIO_voidSetPinMode+0x334>)
 8000bd0:	430b      	orrs	r3, r1
 8000bd2:	6053      	str	r3, [r2, #4]
				break;
 8000bd4:	e065      	b.n	8000ca2 <GPIO_voidSetPinMode+0x306>
		    case GPIO_PORTF: 
				if(copy_u8PinID<=7)
 8000bd6:	79bb      	ldrb	r3, [r7, #6]
 8000bd8:	2b07      	cmp	r3, #7
 8000bda:	d812      	bhi.n	8000c02 <GPIO_voidSetPinMode+0x266>
				{
					SET_4BIT_Val(GPIOF->CRL,copy_u8PinID*4,copy_u8Mode);
 8000bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8000cd4 <GPIO_voidSetPinMode+0x338>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	79ba      	ldrb	r2, [r7, #6]
 8000be2:	0092      	lsls	r2, r2, #2
 8000be4:	210f      	movs	r1, #15
 8000be6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bea:	43d2      	mvns	r2, r2
 8000bec:	4013      	ands	r3, r2
 8000bee:	7979      	ldrb	r1, [r7, #5]
 8000bf0:	79ba      	ldrb	r2, [r7, #6]
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4a36      	ldr	r2, [pc, #216]	@ (8000cd4 <GPIO_voidSetPinMode+0x338>)
 8000bfc:	430b      	orrs	r3, r1
 8000bfe:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOF->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000c00:	e051      	b.n	8000ca6 <GPIO_voidSetPinMode+0x30a>
				else if(copy_u8PinID <=15)
 8000c02:	79bb      	ldrb	r3, [r7, #6]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d84e      	bhi.n	8000ca6 <GPIO_voidSetPinMode+0x30a>
					copy_u8PinID-=8;
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	3b08      	subs	r3, #8
 8000c0c:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOF->CRH,copy_u8PinID*4,copy_u8Mode);
 8000c0e:	4b31      	ldr	r3, [pc, #196]	@ (8000cd4 <GPIO_voidSetPinMode+0x338>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	79ba      	ldrb	r2, [r7, #6]
 8000c14:	0092      	lsls	r2, r2, #2
 8000c16:	210f      	movs	r1, #15
 8000c18:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1c:	43d2      	mvns	r2, r2
 8000c1e:	4013      	ands	r3, r2
 8000c20:	7979      	ldrb	r1, [r7, #5]
 8000c22:	79ba      	ldrb	r2, [r7, #6]
 8000c24:	0092      	lsls	r2, r2, #2
 8000c26:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4a29      	ldr	r2, [pc, #164]	@ (8000cd4 <GPIO_voidSetPinMode+0x338>)
 8000c2e:	430b      	orrs	r3, r1
 8000c30:	6053      	str	r3, [r2, #4]
				break;
 8000c32:	e038      	b.n	8000ca6 <GPIO_voidSetPinMode+0x30a>
			case GPIO_PORTG: 
				if(copy_u8PinID<=7)
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	2b07      	cmp	r3, #7
 8000c38:	d812      	bhi.n	8000c60 <GPIO_voidSetPinMode+0x2c4>
				{
					SET_4BIT_Val(GPIOG->CRL,copy_u8PinID*4,copy_u8Mode);
 8000c3a:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <GPIO_voidSetPinMode+0x33c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	79ba      	ldrb	r2, [r7, #6]
 8000c40:	0092      	lsls	r2, r2, #2
 8000c42:	210f      	movs	r1, #15
 8000c44:	fa01 f202 	lsl.w	r2, r1, r2
 8000c48:	43d2      	mvns	r2, r2
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	7979      	ldrb	r1, [r7, #5]
 8000c4e:	79ba      	ldrb	r2, [r7, #6]
 8000c50:	0092      	lsls	r2, r2, #2
 8000c52:	fa01 f202 	lsl.w	r2, r1, r2
 8000c56:	4611      	mov	r1, r2
 8000c58:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd8 <GPIO_voidSetPinMode+0x33c>)
 8000c5a:	430b      	orrs	r3, r1
 8000c5c:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOG->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000c5e:	e024      	b.n	8000caa <GPIO_voidSetPinMode+0x30e>
				else if(copy_u8PinID <=15)
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	2b0f      	cmp	r3, #15
 8000c64:	d821      	bhi.n	8000caa <GPIO_voidSetPinMode+0x30e>
					copy_u8PinID-=8;
 8000c66:	79bb      	ldrb	r3, [r7, #6]
 8000c68:	3b08      	subs	r3, #8
 8000c6a:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOG->CRH,copy_u8PinID*4,copy_u8Mode);
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <GPIO_voidSetPinMode+0x33c>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	79ba      	ldrb	r2, [r7, #6]
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	210f      	movs	r1, #15
 8000c76:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7a:	43d2      	mvns	r2, r2
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	7979      	ldrb	r1, [r7, #5]
 8000c80:	79ba      	ldrb	r2, [r7, #6]
 8000c82:	0092      	lsls	r2, r2, #2
 8000c84:	fa01 f202 	lsl.w	r2, r1, r2
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4a13      	ldr	r2, [pc, #76]	@ (8000cd8 <GPIO_voidSetPinMode+0x33c>)
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	6053      	str	r3, [r2, #4]
				break;
 8000c90:	e00b      	b.n	8000caa <GPIO_voidSetPinMode+0x30e>
				break;
 8000c92:	bf00      	nop
 8000c94:	e00d      	b.n	8000cb2 <GPIO_voidSetPinMode+0x316>
				break;
 8000c96:	bf00      	nop
 8000c98:	e00b      	b.n	8000cb2 <GPIO_voidSetPinMode+0x316>
				break;
 8000c9a:	bf00      	nop
 8000c9c:	e009      	b.n	8000cb2 <GPIO_voidSetPinMode+0x316>
				break;
 8000c9e:	bf00      	nop
 8000ca0:	e007      	b.n	8000cb2 <GPIO_voidSetPinMode+0x316>
				break;
 8000ca2:	bf00      	nop
 8000ca4:	e005      	b.n	8000cb2 <GPIO_voidSetPinMode+0x316>
				break;
 8000ca6:	bf00      	nop
 8000ca8:	e003      	b.n	8000cb2 <GPIO_voidSetPinMode+0x316>
				break;
 8000caa:	bf00      	nop
		switch(copy_u8portID)
 8000cac:	e001      	b.n	8000cb2 <GPIO_voidSetPinMode+0x316>
		}
	}
	else 
		lacal_u8ErrorState = STD_TYPE_NOK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]
	return lacal_u8ErrorState;
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	40011400 	.word	0x40011400
 8000cd0:	40011800 	.word	0x40011800
 8000cd4:	40011c00 	.word	0x40011c00
 8000cd8:	40012000 	.word	0x40012000

08000cdc <GPIO_voidSetPinValue>:


u8 GPIO_voidSetPinValue(u8 copy_u8portID,u8 copy_u8PinID,u8 copy_u8PinValue)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	71bb      	strb	r3, [r7, #6]
 8000cea:	4613      	mov	r3, r2
 8000cec:	717b      	strb	r3, [r7, #5]
	u8 lacal_u8ErrorState = STD_TYPE_OK;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15 && (copy_u8PinValue == 1 || copy_u8PinValue ==0 ))
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2b07      	cmp	r3, #7
 8000cf6:	f200 80a7 	bhi.w	8000e48 <GPIO_voidSetPinValue+0x16c>
 8000cfa:	79bb      	ldrb	r3, [r7, #6]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	f200 80a3 	bhi.w	8000e48 <GPIO_voidSetPinValue+0x16c>
 8000d02:	797b      	ldrb	r3, [r7, #5]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d003      	beq.n	8000d10 <GPIO_voidSetPinValue+0x34>
 8000d08:	797b      	ldrb	r3, [r7, #5]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f040 809c 	bne.w	8000e48 <GPIO_voidSetPinValue+0x16c>
	{
		switch(copy_u8portID)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	2b06      	cmp	r3, #6
 8000d16:	f200 8099 	bhi.w	8000e4c <GPIO_voidSetPinValue+0x170>
 8000d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d20 <GPIO_voidSetPinValue+0x44>)
 8000d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d20:	08000d3d 	.word	0x08000d3d
 8000d24:	08000d63 	.word	0x08000d63
 8000d28:	08000d89 	.word	0x08000d89
 8000d2c:	08000daf 	.word	0x08000daf
 8000d30:	08000dd5 	.word	0x08000dd5
 8000d34:	08000dfb 	.word	0x08000dfb
 8000d38:	08000e21 	.word	0x08000e21
		{
			case GPIO_PORTA:
				switch(copy_u8PinValue){
 8000d3c:	797b      	ldrb	r3, [r7, #5]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <GPIO_voidSetPinValue+0x6c>
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d006      	beq.n	8000d54 <GPIO_voidSetPinValue+0x78>
				case 0:WRITE_BIT(GPIOA->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOA->BSRR,copy_u8PinID);break;}
				break;
 8000d46:	e07e      	b.n	8000e46 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOA->BRR,copy_u8PinID);break;
 8000d48:	79bb      	ldrb	r3, [r7, #6]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	409a      	lsls	r2, r3
 8000d4e:	4b42      	ldr	r3, [pc, #264]	@ (8000e58 <GPIO_voidSetPinValue+0x17c>)
 8000d50:	615a      	str	r2, [r3, #20]
 8000d52:	e005      	b.n	8000d60 <GPIO_voidSetPinValue+0x84>
				case 1:WRITE_BIT(GPIOA->BSRR,copy_u8PinID);break;}
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	2201      	movs	r2, #1
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e58 <GPIO_voidSetPinValue+0x17c>)
 8000d5c:	611a      	str	r2, [r3, #16]
 8000d5e:	bf00      	nop
				break;
 8000d60:	e071      	b.n	8000e46 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTB:
				switch(copy_u8PinValue){
 8000d62:	797b      	ldrb	r3, [r7, #5]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <GPIO_voidSetPinValue+0x92>
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d006      	beq.n	8000d7a <GPIO_voidSetPinValue+0x9e>
				case 0:WRITE_BIT(GPIOB->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOB->BSRR,copy_u8PinID);break;}
				break;
 8000d6c:	e06b      	b.n	8000e46 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOB->BRR,copy_u8PinID);break;
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	2201      	movs	r2, #1
 8000d72:	409a      	lsls	r2, r3
 8000d74:	4b39      	ldr	r3, [pc, #228]	@ (8000e5c <GPIO_voidSetPinValue+0x180>)
 8000d76:	615a      	str	r2, [r3, #20]
 8000d78:	e005      	b.n	8000d86 <GPIO_voidSetPinValue+0xaa>
				case 1:WRITE_BIT(GPIOB->BSRR,copy_u8PinID);break;}
 8000d7a:	79bb      	ldrb	r3, [r7, #6]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	4b36      	ldr	r3, [pc, #216]	@ (8000e5c <GPIO_voidSetPinValue+0x180>)
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	bf00      	nop
				break;
 8000d86:	e05e      	b.n	8000e46 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTC:
				switch(copy_u8PinValue){
 8000d88:	797b      	ldrb	r3, [r7, #5]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d002      	beq.n	8000d94 <GPIO_voidSetPinValue+0xb8>
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d006      	beq.n	8000da0 <GPIO_voidSetPinValue+0xc4>
				case 0:WRITE_BIT(GPIOC->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOC->BSRR,copy_u8PinID);break;}
				break;
 8000d92:	e058      	b.n	8000e46 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOC->BRR,copy_u8PinID);break;
 8000d94:	79bb      	ldrb	r3, [r7, #6]
 8000d96:	2201      	movs	r2, #1
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	4b31      	ldr	r3, [pc, #196]	@ (8000e60 <GPIO_voidSetPinValue+0x184>)
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	e005      	b.n	8000dac <GPIO_voidSetPinValue+0xd0>
				case 1:WRITE_BIT(GPIOC->BSRR,copy_u8PinID);break;}
 8000da0:	79bb      	ldrb	r3, [r7, #6]
 8000da2:	2201      	movs	r2, #1
 8000da4:	409a      	lsls	r2, r3
 8000da6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e60 <GPIO_voidSetPinValue+0x184>)
 8000da8:	611a      	str	r2, [r3, #16]
 8000daa:	bf00      	nop
				break;
 8000dac:	e04b      	b.n	8000e46 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTD:
				switch(copy_u8PinValue){
 8000dae:	797b      	ldrb	r3, [r7, #5]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <GPIO_voidSetPinValue+0xde>
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d006      	beq.n	8000dc6 <GPIO_voidSetPinValue+0xea>
				case 0:WRITE_BIT(GPIOD->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOD->BSRR,copy_u8PinID);break;}
				break;
 8000db8:	e045      	b.n	8000e46 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOD->BRR,copy_u8PinID);break;
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	4b28      	ldr	r3, [pc, #160]	@ (8000e64 <GPIO_voidSetPinValue+0x188>)
 8000dc2:	615a      	str	r2, [r3, #20]
 8000dc4:	e005      	b.n	8000dd2 <GPIO_voidSetPinValue+0xf6>
				case 1:WRITE_BIT(GPIOD->BSRR,copy_u8PinID);break;}
 8000dc6:	79bb      	ldrb	r3, [r7, #6]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	4b25      	ldr	r3, [pc, #148]	@ (8000e64 <GPIO_voidSetPinValue+0x188>)
 8000dce:	611a      	str	r2, [r3, #16]
 8000dd0:	bf00      	nop
				break;
 8000dd2:	e038      	b.n	8000e46 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTE:
				switch(copy_u8PinValue){
 8000dd4:	797b      	ldrb	r3, [r7, #5]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <GPIO_voidSetPinValue+0x104>
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d006      	beq.n	8000dec <GPIO_voidSetPinValue+0x110>
				case 0:WRITE_BIT(GPIOE->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOE->BSRR,copy_u8PinID);break;}
				break;
 8000dde:	e032      	b.n	8000e46 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOE->BRR,copy_u8PinID);break;
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	2201      	movs	r2, #1
 8000de4:	409a      	lsls	r2, r3
 8000de6:	4b20      	ldr	r3, [pc, #128]	@ (8000e68 <GPIO_voidSetPinValue+0x18c>)
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	e005      	b.n	8000df8 <GPIO_voidSetPinValue+0x11c>
				case 1:WRITE_BIT(GPIOE->BSRR,copy_u8PinID);break;}
 8000dec:	79bb      	ldrb	r3, [r7, #6]
 8000dee:	2201      	movs	r2, #1
 8000df0:	409a      	lsls	r2, r3
 8000df2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e68 <GPIO_voidSetPinValue+0x18c>)
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	bf00      	nop
				break;
 8000df8:	e025      	b.n	8000e46 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTF:
				switch(copy_u8PinValue){
 8000dfa:	797b      	ldrb	r3, [r7, #5]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <GPIO_voidSetPinValue+0x12a>
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d006      	beq.n	8000e12 <GPIO_voidSetPinValue+0x136>
				case 0:WRITE_BIT(GPIOF->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOF->BSRR,copy_u8PinID);break;}
				break;
 8000e04:	e01f      	b.n	8000e46 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOF->BRR,copy_u8PinID);break;
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	4b17      	ldr	r3, [pc, #92]	@ (8000e6c <GPIO_voidSetPinValue+0x190>)
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	e005      	b.n	8000e1e <GPIO_voidSetPinValue+0x142>
				case 1:WRITE_BIT(GPIOF->BSRR,copy_u8PinID);break;}
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	2201      	movs	r2, #1
 8000e16:	409a      	lsls	r2, r3
 8000e18:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <GPIO_voidSetPinValue+0x190>)
 8000e1a:	611a      	str	r2, [r3, #16]
 8000e1c:	bf00      	nop
				break;
 8000e1e:	e012      	b.n	8000e46 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTG:
				switch(copy_u8PinValue){
 8000e20:	797b      	ldrb	r3, [r7, #5]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <GPIO_voidSetPinValue+0x150>
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d006      	beq.n	8000e38 <GPIO_voidSetPinValue+0x15c>
				case 0:WRITE_BIT(GPIOG->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOG->BSRR,copy_u8PinID);break;}
				break;
 8000e2a:	e00b      	b.n	8000e44 <GPIO_voidSetPinValue+0x168>
				case 0:WRITE_BIT(GPIOG->BRR,copy_u8PinID);break;
 8000e2c:	79bb      	ldrb	r3, [r7, #6]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	409a      	lsls	r2, r3
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <GPIO_voidSetPinValue+0x194>)
 8000e34:	615a      	str	r2, [r3, #20]
 8000e36:	e005      	b.n	8000e44 <GPIO_voidSetPinValue+0x168>
				case 1:WRITE_BIT(GPIOG->BSRR,copy_u8PinID);break;}
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	409a      	lsls	r2, r3
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <GPIO_voidSetPinValue+0x194>)
 8000e40:	611a      	str	r2, [r3, #16]
 8000e42:	bf00      	nop
				break;
 8000e44:	bf00      	nop
		switch(copy_u8portID)
 8000e46:	e001      	b.n	8000e4c <GPIO_voidSetPinValue+0x170>
		}
	}
    else 
		lacal_u8ErrorState = STD_TYPE_NOK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]
	return lacal_u8ErrorState;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	40010c00 	.word	0x40010c00
 8000e60:	40011000 	.word	0x40011000
 8000e64:	40011400 	.word	0x40011400
 8000e68:	40011800 	.word	0x40011800
 8000e6c:	40011c00 	.word	0x40011c00
 8000e70:	40012000 	.word	0x40012000

08000e74 <GPIO_GetPinValue>:
		lacal_u8ErrorState = STD_TYPE_NOK;
	return lacal_u8ErrorState;
}

u8 GPIO_GetPinValue(u8 copy_u8portID,u8 copy_u8PinID)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
	//u8 lacal_u8ErrorState = STD_TYPE_OK;
	u8 Pin_Value=0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b07      	cmp	r3, #7
 8000e8c:	d85e      	bhi.n	8000f4c <GPIO_GetPinValue+0xd8>
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d85b      	bhi.n	8000f4c <GPIO_GetPinValue+0xd8>
	{
		switch(copy_u8portID)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	2b06      	cmp	r3, #6
 8000e9a:	d857      	bhi.n	8000f4c <GPIO_GetPinValue+0xd8>
 8000e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea4 <GPIO_GetPinValue+0x30>)
 8000e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea2:	bf00      	nop
 8000ea4:	08000ec1 	.word	0x08000ec1
 8000ea8:	08000ed5 	.word	0x08000ed5
 8000eac:	08000ee9 	.word	0x08000ee9
 8000eb0:	08000efd 	.word	0x08000efd
 8000eb4:	08000f11 	.word	0x08000f11
 8000eb8:	08000f25 	.word	0x08000f25
 8000ebc:	08000f39 	.word	0x08000f39
		{
			case GPIO_PORTA:  Pin_Value = GET_BIT(GPIOA->IDR,copy_u8PinID);break;
 8000ec0:	4b25      	ldr	r3, [pc, #148]	@ (8000f58 <GPIO_GetPinValue+0xe4>)
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
 8000ed2:	e03b      	b.n	8000f4c <GPIO_GetPinValue+0xd8>
			case GPIO_PORTB:  Pin_Value = GET_BIT(GPIOB->IDR,copy_u8PinID);break;
 8000ed4:	4b21      	ldr	r3, [pc, #132]	@ (8000f5c <GPIO_GetPinValue+0xe8>)
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	fa22 f303 	lsr.w	r3, r2, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e031      	b.n	8000f4c <GPIO_GetPinValue+0xd8>
			case GPIO_PORTC:  Pin_Value = GET_BIT(GPIOC->IDR,copy_u8PinID);break;
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f60 <GPIO_GetPinValue+0xec>)
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
 8000efa:	e027      	b.n	8000f4c <GPIO_GetPinValue+0xd8>
			case GPIO_PORTD:  Pin_Value = GET_BIT(GPIOD->IDR,copy_u8PinID);break;
 8000efc:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <GPIO_GetPinValue+0xf0>)
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	79bb      	ldrb	r3, [r7, #6]
 8000f02:	fa22 f303 	lsr.w	r3, r2, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e01d      	b.n	8000f4c <GPIO_GetPinValue+0xd8>
			case GPIO_PORTE:  Pin_Value = GET_BIT(GPIOE->IDR,copy_u8PinID);break;
 8000f10:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <GPIO_GetPinValue+0xf4>)
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	e013      	b.n	8000f4c <GPIO_GetPinValue+0xd8>
			case GPIO_PORTF:  Pin_Value = GET_BIT(GPIOF->IDR,copy_u8PinID);break;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <GPIO_GetPinValue+0xf8>)
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	73fb      	strb	r3, [r7, #15]
 8000f36:	e009      	b.n	8000f4c <GPIO_GetPinValue+0xd8>
			case GPIO_PORTG:  Pin_Value = GET_BIT(GPIOG->IDR,copy_u8PinID);break;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <GPIO_GetPinValue+0xfc>)
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	bf00      	nop
		}             
	}
		//else
		//lacal_u8ErrorState = STD_TYPE_NOK;
	return Pin_Value;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	40010800 	.word	0x40010800
 8000f5c:	40010c00 	.word	0x40010c00
 8000f60:	40011000 	.word	0x40011000
 8000f64:	40011400 	.word	0x40011400
 8000f68:	40011800 	.word	0x40011800
 8000f6c:	40011c00 	.word	0x40011c00
 8000f70:	40012000 	.word	0x40012000

08000f74 <MOTOR_init>:
#include "PWM_DCmotor_init.h"
#include "GPIO_interface.h"


void MOTOR_init (u8 A_u8MotorNum)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	if (A_u8MotorNum>0)
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d021      	beq.n	8000fc8 <MOTOR_init+0x54>
	{
		switch(A_u8MotorNum)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d002      	beq.n	8000f90 <MOTOR_init+0x1c>
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d00e      	beq.n	8000fac <MOTOR_init+0x38>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINL,GPIO_OUTPUT_10M_PP);
//			MTimer_voidInit(MOTOR2_SecondTimerType);
			break;
		}
	}
}
 8000f8e:	e01b      	b.n	8000fc8 <MOTOR_init+0x54>
			MTimer_voidInit(MOTOR1_FirstTimerType);
 8000f90:	2002      	movs	r0, #2
 8000f92:	f000 f995 	bl	80012c0 <MTimer_voidInit>
			GPIO_voidSetPinMode(MOTOR1_PORT,MOTOR1_PINR,GPIO_OUTPUT_10M_PP);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f7ff fcfe 	bl	800099c <GPIO_voidSetPinMode>
		    GPIO_voidSetPinMode(MOTOR1_PORT,MOTOR1_PINL,GPIO_OUTPUT_10M_PP);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2105      	movs	r1, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff fcf9 	bl	800099c <GPIO_voidSetPinMode>
			break;
 8000faa:	e00d      	b.n	8000fc8 <MOTOR_init+0x54>
			MTimer_voidInit(MOTOR2_FirstTimerType);
 8000fac:	2002      	movs	r0, #2
 8000fae:	f000 f987 	bl	80012c0 <MTimer_voidInit>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINR,GPIO_OUTPUT_10M_PP);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2106      	movs	r1, #6
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f7ff fcf0 	bl	800099c <GPIO_voidSetPinMode>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINL,GPIO_OUTPUT_10M_PP);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2107      	movs	r1, #7
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f7ff fceb 	bl	800099c <GPIO_voidSetPinMode>
			break;
 8000fc6:	bf00      	nop
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <MOTOR_ClockWise>:
		}
	}
}

void MOTOR_ClockWise  (u8 A_u8MotorNum , u16 A_u16CaptureValue)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460a      	mov	r2, r1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	80bb      	strh	r3, [r7, #4]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d02a      	beq.n	800103c <MOTOR_ClockWise+0x6c>
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d827      	bhi.n	800103c <MOTOR_ClockWise+0x6c>
	{
		switch(A_u8MotorNum)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d002      	beq.n	8000ff8 <MOTOR_ClockWise+0x28>
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d011      	beq.n	800101a <MOTOR_ClockWise+0x4a>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_HIGH);
//			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR2_SecondChannelNumber,A_u16CaptureValue);
			break;
		}
	}
}
 8000ff6:	e021      	b.n	800103c <MOTOR_ClockWise+0x6c>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,A_u16CaptureValue);
 8000ff8:	88bb      	ldrh	r3, [r7, #4]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	2103      	movs	r1, #3
 8000ffe:	2002      	movs	r0, #2
 8001000:	f000 fa68 	bl	80014d4 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINR, GPIO_LOW);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff fe67 	bl	8000cdc <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINL, GPIO_HIGH);
 800100e:	2201      	movs	r2, #1
 8001010:	2105      	movs	r1, #5
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff fe62 	bl	8000cdc <GPIO_voidSetPinValue>
			break;
 8001018:	e010      	b.n	800103c <MOTOR_ClockWise+0x6c>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR2_FirstChannelNumber,A_u16CaptureValue);
 800101a:	88bb      	ldrh	r3, [r7, #4]
 800101c:	461a      	mov	r2, r3
 800101e:	2104      	movs	r1, #4
 8001020:	2002      	movs	r0, #2
 8001022:	f000 fa57 	bl	80014d4 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINR, GPIO_LOW);
 8001026:	2200      	movs	r2, #0
 8001028:	2106      	movs	r1, #6
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff fe56 	bl	8000cdc <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_HIGH);
 8001030:	2201      	movs	r2, #1
 8001032:	2107      	movs	r1, #7
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff fe51 	bl	8000cdc <GPIO_voidSetPinValue>
			break;
 800103a:	bf00      	nop
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <MOTOR_Stop>:

void MOTOR_Stop  (u8 A_u8MotorNum)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d014      	beq.n	800107e <MOTOR_Stop+0x3a>
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d811      	bhi.n	800107e <MOTOR_Stop+0x3a>
	{
		switch(A_u8MotorNum)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d002      	beq.n	8001066 <MOTOR_Stop+0x22>
 8001060:	2b02      	cmp	r3, #2
 8001062:	d006      	beq.n	8001072 <MOTOR_Stop+0x2e>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,0);
//			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_SecondChannelNumber,0);
			break;
		}
	}
}
 8001064:	e00b      	b.n	800107e <MOTOR_Stop+0x3a>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,0);
 8001066:	2200      	movs	r2, #0
 8001068:	2103      	movs	r1, #3
 800106a:	2002      	movs	r0, #2
 800106c:	f000 fa32 	bl	80014d4 <MTimer_voidPWM>
			break;
 8001070:	e005      	b.n	800107e <MOTOR_Stop+0x3a>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,0);
 8001072:	2200      	movs	r2, #0
 8001074:	2104      	movs	r1, #4
 8001076:	2002      	movs	r0, #2
 8001078:	f000 fa2c 	bl	80014d4 <MTimer_voidPWM>
			break;
 800107c:	bf00      	nop
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <RCC_voidInitSysClock>:
#include "RCC_interface.h"
#include "RCC_config.h"


void RCC_voidInitSysClock(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
	#if RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		SET_BIT(RCC->RCC_CR,16);
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <RCC_voidInitSysClock+0x60>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a15      	ldr	r2, [pc, #84]	@ (80010e8 <RCC_voidInitSysClock+0x60>)
 8001092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001096:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CR,18);
 8001098:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <RCC_voidInitSysClock+0x60>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a12      	ldr	r2, [pc, #72]	@ (80010e8 <RCC_voidInitSysClock+0x60>)
 800109e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010a2:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CFGR,0);
 80010a4:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <RCC_voidInitSysClock+0x60>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4a0f      	ldr	r2, [pc, #60]	@ (80010e8 <RCC_voidInitSysClock+0x60>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->RCC_CFGR,1);
 80010b0:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <RCC_voidInitSysClock+0x60>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4a0c      	ldr	r2, [pc, #48]	@ (80010e8 <RCC_voidInitSysClock+0x60>)
 80010b6:	f023 0302 	bic.w	r3, r3, #2
 80010ba:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->RCC_CFGR,1);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_AHP_PRESCALER   ==RCC_AHP_DIV_1
		CLR_BIT(RCC->RCC_CFGR,7);
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <RCC_voidInitSysClock+0x60>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4a09      	ldr	r2, [pc, #36]	@ (80010e8 <RCC_voidInitSysClock+0x60>)
 80010c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010c6:	6053      	str	r3, [r2, #4]
	     SET_BIT(RCC->RCC_CFGR,7);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_APB1_PRESCALER   ==RCC_APB1_DIV_1
		CLR_BIT(RCC->RCC_CFGR,8);
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <RCC_voidInitSysClock+0x60>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4a06      	ldr	r2, [pc, #24]	@ (80010e8 <RCC_voidInitSysClock+0x60>)
 80010ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010d2:	6053      	str	r3, [r2, #4]
	    SET_BIT(RCC->RCC_CFGR,10);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_APB2_PRESCALER   ==RCC_APB2_DIV_1
		CLR_BIT(RCC->RCC_CFGR,11);
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <RCC_voidInitSysClock+0x60>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	4a03      	ldr	r2, [pc, #12]	@ (80010e8 <RCC_voidInitSysClock+0x60>)
 80010da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80010de:	6053      	str	r3, [r2, #4]
	    SET_BIT(RCC->RCC_CFGR,12);
	    SET_BIT(RCC->RCC_CFGR,13);
	#else 
		#error("wrong choise")
	#endif
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000

080010ec <RCC_voidEnablePeripheral>:
	#endif
}


void RCC_voidEnablePeripheral(u8 Copy_u8Bus, u8 Copy_u8Peripheral)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8Bus)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d01c      	beq.n	800113c <RCC_voidEnablePeripheral+0x50>
 8001102:	2b02      	cmp	r3, #2
 8001104:	dc25      	bgt.n	8001152 <RCC_voidEnablePeripheral+0x66>
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <RCC_voidEnablePeripheral+0x24>
 800110a:	2b01      	cmp	r3, #1
 800110c:	d00b      	beq.n	8001126 <RCC_voidEnablePeripheral+0x3a>
			break;
		case RCC_APB2:
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
			break;
	}
}
 800110e:	e020      	b.n	8001152 <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_AHBENR,Copy_u8Peripheral);
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <RCC_voidEnablePeripheral+0x70>)
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	79ba      	ldrb	r2, [r7, #6]
 8001116:	2101      	movs	r1, #1
 8001118:	fa01 f202 	lsl.w	r2, r1, r2
 800111c:	4611      	mov	r1, r2
 800111e:	4a0f      	ldr	r2, [pc, #60]	@ (800115c <RCC_voidEnablePeripheral+0x70>)
 8001120:	430b      	orrs	r3, r1
 8001122:	6153      	str	r3, [r2, #20]
			break;
 8001124:	e015      	b.n	8001152 <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_APB1ENR,Copy_u8Peripheral);
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <RCC_voidEnablePeripheral+0x70>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	79ba      	ldrb	r2, [r7, #6]
 800112c:	2101      	movs	r1, #1
 800112e:	fa01 f202 	lsl.w	r2, r1, r2
 8001132:	4611      	mov	r1, r2
 8001134:	4a09      	ldr	r2, [pc, #36]	@ (800115c <RCC_voidEnablePeripheral+0x70>)
 8001136:	430b      	orrs	r3, r1
 8001138:	61d3      	str	r3, [r2, #28]
			break;
 800113a:	e00a      	b.n	8001152 <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
 800113c:	4b07      	ldr	r3, [pc, #28]	@ (800115c <RCC_voidEnablePeripheral+0x70>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	79ba      	ldrb	r2, [r7, #6]
 8001142:	2101      	movs	r1, #1
 8001144:	fa01 f202 	lsl.w	r2, r1, r2
 8001148:	4611      	mov	r1, r2
 800114a:	4a04      	ldr	r2, [pc, #16]	@ (800115c <RCC_voidEnablePeripheral+0x70>)
 800114c:	430b      	orrs	r3, r1
 800114e:	6193      	str	r3, [r2, #24]
			break;
 8001150:	bf00      	nop
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	40021000 	.word	0x40021000

08001160 <truncate_queue>:
}


// function to handle dequeue operation
static SPI_ERROR_STATUS_t truncate_queue(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
	
	//status code
    SPI_ERROR_STATUS_t loc_enu_StatusCode = SPI_OKAY;
 8001166:	2300      	movs	r3, #0
 8001168:	71fb      	strb	r3, [r7, #7]
	
	// check if all bytes has been sent OR queue is empty
	if((gl_SPI_data_queue.s16_front_queue > gl_SPI_data_queue.s16_rear_queue) || (gl_SPI_data_queue.s16_front_queue == EMPTY_POSITOIN))
 800116a:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <truncate_queue+0x70>)
 800116c:	f993 20c8 	ldrsb.w	r2, [r3, #200]	@ 0xc8
 8001170:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <truncate_queue+0x70>)
 8001172:	f993 30c9 	ldrsb.w	r3, [r3, #201]	@ 0xc9
 8001176:	429a      	cmp	r2, r3
 8001178:	dc05      	bgt.n	8001186 <truncate_queue+0x26>
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <truncate_queue+0x70>)
 800117c:	f993 30c8 	ldrsb.w	r3, [r3, #200]	@ 0xc8
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d10a      	bne.n	800119c <truncate_queue+0x3c>
	{
		// set front and rear to defaults
		gl_SPI_data_queue.s16_front_queue = EMPTY_POSITOIN;
 8001186:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <truncate_queue+0x70>)
 8001188:	22ff      	movs	r2, #255	@ 0xff
 800118a:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
		gl_SPI_data_queue.s16_rear_queue  = EMPTY_POSITOIN;
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <truncate_queue+0x70>)
 8001190:	22ff      	movs	r2, #255	@ 0xff
 8001192:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
		
		//status code queue is empty
		loc_enu_StatusCode = QUEUE_EMPTY;
 8001196:	2302      	movs	r3, #2
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	e012      	b.n	80011c2 <truncate_queue+0x62>
	}
	else
	{
		//send current byte and increment front
		SPI1->DR = gl_SPI_data_queue.u16_arr_data[gl_SPI_data_queue.s16_front_queue];
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <truncate_queue+0x70>)
 800119e:	f993 30c8 	ldrsb.w	r3, [r3, #200]	@ 0xc8
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <truncate_queue+0x70>)
 80011a6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80011aa:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <truncate_queue+0x74>)
 80011ac:	60da      	str	r2, [r3, #12]
		gl_SPI_data_queue.s16_front_queue++;
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <truncate_queue+0x70>)
 80011b0:	f993 30c8 	ldrsb.w	r3, [r3, #200]	@ 0xc8
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3301      	adds	r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	b25a      	sxtb	r2, r3
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <truncate_queue+0x70>)
 80011be:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
	}
	return loc_enu_StatusCode;
 80011c2:	79fb      	ldrb	r3, [r7, #7]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000000 	.word	0x20000000
 80011d4:	40013000 	.word	0x40013000

080011d8 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    // TODO HANDLE ISR FOR RECEPTION
	#if   SPI1_MASTER_SLAVE == SPI_SLAVE
       sgl_Recieve_Index = (u8)SPI1->DR;
       gl_ptr_Function();
    #elif SPI1_MASTER_SLAVE == SPI_MASTER
      if (truncate_queue() == QUEUE_EMPTY)
 80011dc:	f7ff ffc0 	bl	8001160 <truncate_queue>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d106      	bne.n	80011f4 <SPI1_IRQHandler+0x1c>
      {
        if (gl_ptr_Function != PTR_NULL)
 80011e6:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <SPI1_IRQHandler+0x20>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <SPI1_IRQHandler+0x1c>
        {
            gl_ptr_Function();
 80011ee:	4b02      	ldr	r3, [pc, #8]	@ (80011f8 <SPI1_IRQHandler+0x20>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4798      	blx	r3
        }
      }
    #endif

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200000ec 	.word	0x200000ec

080011fc <MSTK_voidInit>:

/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;

void MSTK_voidInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
#if MSTK_CLK_SRC == MSTK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	MSTK -> CTRL = 0x00000004;
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	MSTK -> CTRL = 0;
 8001200:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <MSTK_voidInit+0x14>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]

#endif
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <MSTK_voidSetBusyWait>:

void MSTK_voidSetBusyWait( u32 Copy_u32Ticks )
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks;
 800121c:	4a10      	ldr	r2, [pc, #64]	@ (8001260 <MSTK_voidSetBusyWait+0x4c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6053      	str	r3, [r2, #4]

	/* Start Timer */
	SET_BIT(MSTK->CTRL, 0);
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MSTK_voidSetBusyWait+0x4c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a0e      	ldr	r2, [pc, #56]	@ (8001260 <MSTK_voidSetBusyWait+0x4c>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6013      	str	r3, [r2, #0]

	/* Wait till flag is raised */
	while( (GET_BIT(MSTK->CTRL,16)) == 0);
 800122e:	bf00      	nop
 8001230:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <MSTK_voidSetBusyWait+0x4c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f9      	beq.n	8001230 <MSTK_voidSetBusyWait+0x1c>

	/* Stop Timer */
	SET_BIT(MSTK->CTRL, 0);
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <MSTK_voidSetBusyWait+0x4c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <MSTK_voidSetBusyWait+0x4c>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD = 0;
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <MSTK_voidSetBusyWait+0x4c>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
	MSTK -> VAL  = 0;
 800124e:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <MSTK_voidSetBusyWait+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
	
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <SysTick_Handler>:

	return Local_u32RemainTime;
}

void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary ;

	if (MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 800126a:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <SysTick_Handler+0x50>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d111      	bne.n	8001296 <SysTick_Handler+0x32>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK->CTRL, 1);
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <SysTick_Handler+0x54>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a10      	ldr	r2, [pc, #64]	@ (80012b8 <SysTick_Handler+0x54>)
 8001278:	f023 0302 	bic.w	r3, r3, #2
 800127c:	6013      	str	r3, [r2, #0]

		/* Stop Timer */
		SET_BIT(MSTK->CTRL, 0);
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <SysTick_Handler+0x54>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a0d      	ldr	r2, [pc, #52]	@ (80012b8 <SysTick_Handler+0x54>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD = 0;
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <SysTick_Handler+0x54>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
		MSTK -> VAL  = 0;
 8001290:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <SysTick_Handler+0x54>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
	}

	/* Callback notification */
	MSTK_CallBack();
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <SysTick_Handler+0x58>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4798      	blx	r3

	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(MSTK->CTRL,16);
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <SysTick_Handler+0x54>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0c1b      	lsrs	r3, r3, #16
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	71fb      	strb	r3, [r7, #7]
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200000f4 	.word	0x200000f4
 80012b8:	e000e010 	.word	0xe000e010
 80012bc:	200000f0 	.word	0x200000f0

080012c0 <MTimer_voidInit>:
u8 channel31_set = 0;
u8 channel32_set = 0;


void MTimer_voidInit (u8 A_u8TimerSelected)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]

	/* Enable pinout of ADC (PortA , PORTB) from RCC */
	//MRCC_voidEnablePerephiralClock(RCC_AHB1 , RCC_EN_GPIOA) ;
	//MRCC_voidEnablePerephiralClock(RCC_AHB1 , RCC_EN_GPIOB) ;

	switch (A_u8TimerSelected)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	f200 80f5 	bhi.w	80014be <MTimer_voidInit+0x1fe>
 80012d4:	a201      	add	r2, pc, #4	@ (adr r2, 80012dc <MTimer_voidInit+0x1c>)
 80012d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012da:	bf00      	nop
 80012dc:	080012ed 	.word	0x080012ed
 80012e0:	08001351 	.word	0x08001351
 80012e4:	080013e3 	.word	0x080013e3
 80012e8:	08001451 	.word	0x08001451
		/**                             Init TIM1                                    **/
		/******************************************************************************/

			/* Select the Direction */
            #if   TIM1_DIRECTION == UP_COUNTER
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_DIR_BIT) ;
 80012ec:	4b76      	ldr	r3, [pc, #472]	@ (80014c8 <MTimer_voidInit+0x208>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a75      	ldr	r2, [pc, #468]	@ (80014c8 <MTimer_voidInit+0x208>)
 80012f2:	f023 0310 	bic.w	r3, r3, #16
 80012f6:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM1_DIRECTION"
            #endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_1->CR1 , TIM1_CR1_CMS_BIT0) ;
 80012f8:	4b73      	ldr	r3, [pc, #460]	@ (80014c8 <MTimer_voidInit+0x208>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a72      	ldr	r2, [pc, #456]	@ (80014c8 <MTimer_voidInit+0x208>)
 80012fe:	f023 0320 	bic.w	r3, r3, #32
 8001302:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_1->CR1 , TIM1_CR1_CMS_BIT1) ;
 8001304:	4b70      	ldr	r3, [pc, #448]	@ (80014c8 <MTimer_voidInit+0x208>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a6f      	ldr	r2, [pc, #444]	@ (80014c8 <MTimer_voidInit+0x208>)
 800130a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800130e:	6013      	str	r3, [r2, #0]

			/* set the timer division */
            #if   TIM1_DIVISION == tCK_INT_x_1
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_CKD_BIT0) ;
 8001310:	4b6d      	ldr	r3, [pc, #436]	@ (80014c8 <MTimer_voidInit+0x208>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a6c      	ldr	r2, [pc, #432]	@ (80014c8 <MTimer_voidInit+0x208>)
 8001316:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800131a:	6013      	str	r3, [r2, #0]
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_CKD_BIT1) ;
 800131c:	4b6a      	ldr	r3, [pc, #424]	@ (80014c8 <MTimer_voidInit+0x208>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a69      	ldr	r2, [pc, #420]	@ (80014c8 <MTimer_voidInit+0x208>)
 8001322:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001326:	6013      	str	r3, [r2, #0]
                  #error "Invalid Selection of TIM1_DIVISION"
            #endif

			/* set the timer prescaller */
            #if    TIM1_PRESCALLER <= MAX_TIM_PRESCALLER
            	   TIM_1 ->PSC = TIM1_PRESCALLER ;
 8001328:	4b67      	ldr	r3, [pc, #412]	@ (80014c8 <MTimer_voidInit+0x208>)
 800132a:	2208      	movs	r2, #8
 800132c:	629a      	str	r2, [r3, #40]	@ 0x28
            #else
                   #error "TIM1_PRESCALLER out of range"
            #endif

            /* Enable auto-reload preload */
            SET_BIT(TIM_1->CR1 , TIM1_CR1_ARPE_BIT) ;
 800132e:	4b66      	ldr	r3, [pc, #408]	@ (80014c8 <MTimer_voidInit+0x208>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a65      	ldr	r2, [pc, #404]	@ (80014c8 <MTimer_voidInit+0x208>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001338:	6013      	str	r3, [r2, #0]

            /* Set the Auto-reload value */
            #if  TIM1_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
            	   TIM_1->ARR = TIM1_PRELOAD_VALUE ;
 800133a:	4b63      	ldr	r3, [pc, #396]	@ (80014c8 <MTimer_voidInit+0x208>)
 800133c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001340:	62da      	str	r2, [r3, #44]	@ 0x2c
           //       #error "REPETATION_COUNTER out of range"
           // #endif

            /* Generate an update event to reload the Prescaler
            and the repetition counter(only for TIM1 and TIM5) value immediately */
            SET_BIT(TIM_1->EGR , TIM1_EGR_UG_BIT );
 8001342:	4b61      	ldr	r3, [pc, #388]	@ (80014c8 <MTimer_voidInit+0x208>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4a60      	ldr	r2, [pc, #384]	@ (80014c8 <MTimer_voidInit+0x208>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6153      	str	r3, [r2, #20]

		break ;
 800134e:	e0b6      	b.n	80014be <MTimer_voidInit+0x1fe>
		/******************************************************************************/
		/**                             Init TIM2                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_2 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8001350:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800135a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800135e:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
            #if   TIM2_DIRECTION == UP_COUNTER
			      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 8001360:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800136a:	f023 0310 	bic.w	r3, r3, #16
 800136e:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM2_DIRECTION"
            #endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8001370:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800137a:	f023 0320 	bic.w	r3, r3, #32
 800137e:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8001380:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800138a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800138e:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM2_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8001390:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800139a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800139e:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 80013a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013aa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80013ae:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM2_DIVISION"
			#endif

		    /* set the timer prescaller */
	        #if    TIM2_PRESCALLER <= MAX_TIM_PRESCALLER
	        	   TIM_2 ->PSC = TIM2_PRESCALLER ;
 80013b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013b4:	2208      	movs	r2, #8
 80013b6:	629a      	str	r2, [r3, #40]	@ 0x28
	        #else
	               #error "TIM2_PRESCALLER out of range"
	        #endif

	        /* Enable auto-reload preload */
	        SET_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 80013b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c6:	6013      	str	r3, [r2, #0]

	        /* Set the Auto-reload value */
	        #if  TIM2_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
	        	   TIM_2->ARR = TIM2_PRELOAD_VALUE ;
 80013c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013cc:	220f      	movs	r2, #15
 80013ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	              #error "TIM2_PRELOAD_VALUE out of range"
	        #endif

	        /* Generate an update event to reload the Prescaler
	         and the repetition counter(only for TIM1 and TIM5) value immediately */
	        SET_BIT(TIM_2->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 80013d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6153      	str	r3, [r2, #20]

		break ;
 80013e0:	e06d      	b.n	80014be <MTimer_voidInit+0x1fe>
		/******************************************************************************/
		/**                             Init TIM3                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_3 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 80013e2:	4b3a      	ldr	r3, [pc, #232]	@ (80014cc <MTimer_voidInit+0x20c>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	4a39      	ldr	r2, [pc, #228]	@ (80014cc <MTimer_voidInit+0x20c>)
 80013e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ec:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
            #if   TIM3_DIRECTION == UP_COUNTER
	           CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 80013ee:	4b37      	ldr	r3, [pc, #220]	@ (80014cc <MTimer_voidInit+0x20c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a36      	ldr	r2, [pc, #216]	@ (80014cc <MTimer_voidInit+0x20c>)
 80013f4:	f023 0310 	bic.w	r3, r3, #16
 80013f8:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM3_DIRECTION"
            #endif

	        /* Edge-aligned mode */
	        CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 80013fa:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <MTimer_voidInit+0x20c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a33      	ldr	r2, [pc, #204]	@ (80014cc <MTimer_voidInit+0x20c>)
 8001400:	f023 0320 	bic.w	r3, r3, #32
 8001404:	6013      	str	r3, [r2, #0]
	        CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8001406:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <MTimer_voidInit+0x20c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a30      	ldr	r2, [pc, #192]	@ (80014cc <MTimer_voidInit+0x20c>)
 800140c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001410:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM3_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8001412:	4b2e      	ldr	r3, [pc, #184]	@ (80014cc <MTimer_voidInit+0x20c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a2d      	ldr	r2, [pc, #180]	@ (80014cc <MTimer_voidInit+0x20c>)
 8001418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800141c:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 800141e:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <MTimer_voidInit+0x20c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a2a      	ldr	r2, [pc, #168]	@ (80014cc <MTimer_voidInit+0x20c>)
 8001424:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001428:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM3_DIVISION"
			#endif

			/* set the timer prescaller */
		    #if    TIM3_PRESCALLER <= MAX_TIM_PRESCALLER
		    	   TIM_3 ->PSC = TIM3_PRESCALLER ;
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <MTimer_voidInit+0x20c>)
 800142c:	2208      	movs	r2, #8
 800142e:	629a      	str	r2, [r3, #40]	@ 0x28
		    #else
		           #error "TIM3_PRESCALLER out of range"
		    #endif

		    /* Enable auto-reload preload */
			SET_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 8001430:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <MTimer_voidInit+0x20c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a25      	ldr	r2, [pc, #148]	@ (80014cc <MTimer_voidInit+0x20c>)
 8001436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800143a:	6013      	str	r3, [r2, #0]

			/* Set the Auto-reload value */
			#if  TIM3_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
				   TIM_3->ARR = TIM3_PRELOAD_VALUE ;
 800143c:	4b23      	ldr	r3, [pc, #140]	@ (80014cc <MTimer_voidInit+0x20c>)
 800143e:	220f      	movs	r2, #15
 8001440:	62da      	str	r2, [r3, #44]	@ 0x2c
			      #error "TIM3_PRELOAD_VALUE out of range"
			#endif

			/* Generate an update event to reload the Prescaler
			 and the repetition counter(only for TIM1 and TIM5) value immediately */
			SET_BIT(TIM_3->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8001442:	4b22      	ldr	r3, [pc, #136]	@ (80014cc <MTimer_voidInit+0x20c>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4a21      	ldr	r2, [pc, #132]	@ (80014cc <MTimer_voidInit+0x20c>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6153      	str	r3, [r2, #20]

		break ;
 800144e:	e036      	b.n	80014be <MTimer_voidInit+0x1fe>
		/******************************************************************************/
		/**                             Init TIM4                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_4 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8001450:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <MTimer_voidInit+0x210>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4a1e      	ldr	r2, [pc, #120]	@ (80014d0 <MTimer_voidInit+0x210>)
 8001456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800145a:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
			#if   TIM4_DIRECTION == UP_COUNTER
			     CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 800145c:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <MTimer_voidInit+0x210>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a1b      	ldr	r2, [pc, #108]	@ (80014d0 <MTimer_voidInit+0x210>)
 8001462:	f023 0310 	bic.w	r3, r3, #16
 8001466:	6013      	str	r3, [r2, #0]
			#else
			      #error "Invalid Selection of TIM4_DIRECTION"
			#endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <MTimer_voidInit+0x210>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a18      	ldr	r2, [pc, #96]	@ (80014d0 <MTimer_voidInit+0x210>)
 800146e:	f023 0320 	bic.w	r3, r3, #32
 8001472:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8001474:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <MTimer_voidInit+0x210>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a15      	ldr	r2, [pc, #84]	@ (80014d0 <MTimer_voidInit+0x210>)
 800147a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800147e:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM4_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <MTimer_voidInit+0x210>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a12      	ldr	r2, [pc, #72]	@ (80014d0 <MTimer_voidInit+0x210>)
 8001486:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800148a:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 800148c:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <MTimer_voidInit+0x210>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0f      	ldr	r2, [pc, #60]	@ (80014d0 <MTimer_voidInit+0x210>)
 8001492:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001496:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM4_DIVISION"
			#endif

		    /* set the timer prescaller */
			#if    TIM4_PRESCALLER <= MAX_TIM_PRESCALLER
				   TIM_4 ->PSC = TIM4_PRESCALLER ;
 8001498:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <MTimer_voidInit+0x210>)
 800149a:	2208      	movs	r2, #8
 800149c:	629a      	str	r2, [r3, #40]	@ 0x28
			#else
			       #error "TIM4_PRESCALLER out of range"
			#endif

			/* Enable auto-reload preload */
			SET_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <MTimer_voidInit+0x210>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a0b      	ldr	r2, [pc, #44]	@ (80014d0 <MTimer_voidInit+0x210>)
 80014a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a8:	6013      	str	r3, [r2, #0]

			/* Set the Auto-reload value */
			#if  TIM4_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
				   TIM_4->ARR = TIM4_PRELOAD_VALUE ;
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <MTimer_voidInit+0x210>)
 80014ac:	220f      	movs	r2, #15
 80014ae:	62da      	str	r2, [r3, #44]	@ 0x2c
			      #error "TIM4_PRELOAD_VALUE out of range"
			#endif

		    /* Generate an update event to reload the Prescaler
		    	  and the repetition counter(only for TIM1 and TIM5) value immediately */
		    SET_BIT(TIM_4->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 80014b0:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <MTimer_voidInit+0x210>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	4a06      	ldr	r2, [pc, #24]	@ (80014d0 <MTimer_voidInit+0x210>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6153      	str	r3, [r2, #20]
		break ;
 80014bc:	bf00      	nop
	}
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	40012c00 	.word	0x40012c00
 80014cc:	40000400 	.word	0x40000400
 80014d0:	40000800 	.word	0x40000800

080014d4 <MTimer_voidPWM>:

void MTimer_voidPWM (u8 A_u8TimerSelected , u8 A_u8Channel , u16 A_u16CompareValue)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b0b2      	sub	sp, #200	@ 0xc8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
 80014de:	460b      	mov	r3, r1
 80014e0:	71bb      	strb	r3, [r7, #6]
 80014e2:	4613      	mov	r3, r2
 80014e4:	80bb      	strh	r3, [r7, #4]
	if (A_u8TimerSelected == TIM1_TYPE)
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	f040 81ef 	bne.w	80018cc <MTimer_voidPWM+0x3f8>
	{
		if (A_u8Channel == TIM_CHANNEL_1)
 80014ee:	79bb      	ldrb	r3, [r7, #6]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d178      	bne.n	80015e6 <MTimer_voidPWM+0x112>
		{
			if (channel1_set==0)
 80014f4:	4b7a      	ldr	r3, [pc, #488]	@ (80016e0 <MTimer_voidPWM+0x20c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d107      	bne.n	800150c <MTimer_voidPWM+0x38>
			{
				GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN8,GPIO_OUTPUT_10M_AF_PP);
 80014fc:	2209      	movs	r2, #9
 80014fe:	2108      	movs	r1, #8
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff fa4b 	bl	800099c <GPIO_voidSetPinMode>
				channel1_set=1;
 8001506:	4b76      	ldr	r3, [pc, #472]	@ (80016e0 <MTimer_voidPWM+0x20c>)
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
			}

			u32 L_u32TempCCMRX = 0 ;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
			u32 L_u32TempCCER  = 0 ;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
		    u32 L_u32TempCR2   = 0 ;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]

			/* Disable the Channel 1: Reset the CC1E Bit */
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC1E_BIT) ;
 8001518:	4b72      	ldr	r3, [pc, #456]	@ (80016e4 <MTimer_voidPWM+0x210>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a71      	ldr	r2, [pc, #452]	@ (80016e4 <MTimer_voidPWM+0x210>)
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	6213      	str	r3, [r2, #32]

			/* Get the TIM CCER register value */
			L_u32TempCCMRX = TIM_1->CCER;
 8001524:	4b6f      	ldr	r3, [pc, #444]	@ (80016e4 <MTimer_voidPWM+0x210>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	613b      	str	r3, [r7, #16]
			/* Get the TIM CR2 register value */
			L_u32TempCR2 = TIM_1->CR2;
 800152a:	4b6e      	ldr	r3, [pc, #440]	@ (80016e4 <MTimer_voidPWM+0x210>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	60bb      	str	r3, [r7, #8]

			/* Get the TIM CCMR1 register value */
			L_u32TempCCMRX = TIM_1->CCMR1;
 8001530:	4b6c      	ldr	r3, [pc, #432]	@ (80016e4 <MTimer_voidPWM+0x210>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	613b      	str	r3, [r7, #16]

			/* Reset the Output Compare Mode Bits */
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT0) ;
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	f023 0310 	bic.w	r3, r3, #16
 800153c:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT1) ;
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f023 0320 	bic.w	r3, r3, #32
 8001544:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT2) ;
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800154c:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC1S_BIT0) ;
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC1S_BIT1) ;
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	f023 0302 	bic.w	r3, r3, #2
 800155c:	613b      	str	r3, [r7, #16]
			/* Select the Output Compare Mode1 */
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001564:	613b      	str	r3, [r7, #16]

			/* Set the Output Compare Polarity as active high */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1P_BIT);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f023 0302 	bic.w	r3, r3, #2
 800156c:	60fb      	str	r3, [r7, #12]

			/* Set the Output N Polarity as active high */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1NP_BIT) ;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f023 0308 	bic.w	r3, r3, #8
 8001574:	60fb      	str	r3, [r7, #12]
			/* Reset the Output N State */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1NE_BIT) ;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f023 0304 	bic.w	r3, r3, #4
 800157c:	60fb      	str	r3, [r7, #12]

			/* Reset the Output Compare and Output Compare N IDLE State */
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS1N_BIT) ;
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001584:	60bb      	str	r3, [r7, #8]
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS1N_BIT) ;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800158c:	60bb      	str	r3, [r7, #8]

			/* Write to TIM CR2 */
			TIM_1->CR2 = L_u32TempCR2;
 800158e:	4a55      	ldr	r2, [pc, #340]	@ (80016e4 <MTimer_voidPWM+0x210>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	6053      	str	r3, [r2, #4]

			/* Write to TIM CCMR1 */
			TIM_1->CCMR1 = L_u32TempCCMRX;
 8001594:	4a53      	ldr	r2, [pc, #332]	@ (80016e4 <MTimer_voidPWM+0x210>)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	6193      	str	r3, [r2, #24]

			/* Set the Capture Compare Register value */
			TIM_1->CCR1 = A_u16CompareValue ;
 800159a:	4a52      	ldr	r2, [pc, #328]	@ (80016e4 <MTimer_voidPWM+0x210>)
 800159c:	88bb      	ldrh	r3, [r7, #4]
 800159e:	6353      	str	r3, [r2, #52]	@ 0x34

			/* Write to TIM CCER */
			TIM_1->CCER = L_u32TempCCER;
 80015a0:	4a50      	ldr	r2, [pc, #320]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6213      	str	r3, [r2, #32]

			/* Set the Preload enable bit for channel1 */
			SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC1PE_BIT);
 80015a6:	4b4f      	ldr	r3, [pc, #316]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	4a4e      	ldr	r2, [pc, #312]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	6193      	str	r3, [r2, #24]

			/* Configure the Output Fast mode */
			SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC1FE_BIT) ;
 80015b2:	4b4c      	ldr	r3, [pc, #304]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a4b      	ldr	r2, [pc, #300]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6193      	str	r3, [r2, #24]

			/* Enable the Capture compare channel */
			SET_BIT(TIM_1-> CCER , TIM1_CCER_CC1E_BIT) ;
 80015be:	4b49      	ldr	r3, [pc, #292]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a48      	ldr	r2, [pc, #288]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6213      	str	r3, [r2, #32]

			/* Enable the main output */
			SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 80015ca:	4b46      	ldr	r3, [pc, #280]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ce:	4a45      	ldr	r2, [pc, #276]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80015d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015d4:	6453      	str	r3, [r2, #68]	@ 0x44

			/* Enable the timer */
			SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 80015d6:	4b43      	ldr	r3, [pc, #268]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a42      	ldr	r2, [pc, #264]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6013      	str	r3, [r2, #0]
	}
	else
	{
		// error type of A_u8TimerSelected
	}
}
 80015e2:	f000 bec8 	b.w	8002376 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_2)
 80015e6:	79bb      	ldrb	r3, [r7, #6]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d17f      	bne.n	80016ec <MTimer_voidPWM+0x218>
			if (channel2_set==0)
 80015ec:	4b3e      	ldr	r3, [pc, #248]	@ (80016e8 <MTimer_voidPWM+0x214>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <MTimer_voidPWM+0x130>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN9,GPIO_OUTPUT_10M_AF_PP);
 80015f4:	2209      	movs	r2, #9
 80015f6:	2109      	movs	r1, #9
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff f9cf 	bl	800099c <GPIO_voidSetPinMode>
					channel2_set=1;
 80015fe:	4b3a      	ldr	r3, [pc, #232]	@ (80016e8 <MTimer_voidPWM+0x214>)
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
			u32 L_u32TempCCER  = 0 ;
 8001608:	2300      	movs	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]
		    u32 L_u32TempCR2   = 0 ;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
		    CLR_BIT(TIM_1->CCER , TIM1_CCER_CC2E_BIT);
 8001610:	4b34      	ldr	r3, [pc, #208]	@ (80016e4 <MTimer_voidPWM+0x210>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a33      	ldr	r2, [pc, #204]	@ (80016e4 <MTimer_voidPWM+0x210>)
 8001616:	f023 0310 	bic.w	r3, r3, #16
 800161a:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_1->CCER;
 800161c:	4b31      	ldr	r3, [pc, #196]	@ (80016e4 <MTimer_voidPWM+0x210>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	61bb      	str	r3, [r7, #24]
		    L_u32TempCR2 = TIM_1->CR2;
 8001622:	4b30      	ldr	r3, [pc, #192]	@ (80016e4 <MTimer_voidPWM+0x210>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	617b      	str	r3, [r7, #20]
		    L_u32TempCCMRX = TIM_1->CCMR1;
 8001628:	4b2e      	ldr	r3, [pc, #184]	@ (80016e4 <MTimer_voidPWM+0x210>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT0);
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001634:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT1);
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800163c:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT0);
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001644:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT1);
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800164c:	61fb      	str	r3, [r7, #28]
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001654:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2P_BIT);
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	f023 0320 	bic.w	r3, r3, #32
 800165c:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NP_BIT) ;
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001664:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NP_BIT) ;
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800166c:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NE_BIT);
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001674:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS2_BIT);
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800167c:	617b      	str	r3, [r7, #20]
		    CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS2N_BIT);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001684:	617b      	str	r3, [r7, #20]
		    TIM_1->CR2 = L_u32TempCR2;
 8001686:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <MTimer_voidPWM+0x210>)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	6053      	str	r3, [r2, #4]
		    TIM_1->CCMR1 = L_u32TempCCMRX;
 800168c:	4a15      	ldr	r2, [pc, #84]	@ (80016e4 <MTimer_voidPWM+0x210>)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	6193      	str	r3, [r2, #24]
		    TIM_1->CCR2 = A_u16CompareValue;
 8001692:	4a14      	ldr	r2, [pc, #80]	@ (80016e4 <MTimer_voidPWM+0x210>)
 8001694:	88bb      	ldrh	r3, [r7, #4]
 8001696:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_1->CCER = L_u32TempCCER;
 8001698:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <MTimer_voidPWM+0x210>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC2PE_BIT);
 800169e:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4a10      	ldr	r2, [pc, #64]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80016a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016a8:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC2FE_BIT) ;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4a0d      	ldr	r2, [pc, #52]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80016b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016b4:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_1-> CCER , TIM1_CCER_CC2E_BIT) ;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80016bc:	f043 0310 	orr.w	r3, r3, #16
 80016c0:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 80016c2:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c6:	4a07      	ldr	r2, [pc, #28]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80016c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016cc:	6453      	str	r3, [r2, #68]	@ 0x44
		    SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 80016ce:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <MTimer_voidPWM+0x210>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6013      	str	r3, [r2, #0]
}
 80016da:	f000 be4c 	b.w	8002376 <MTimer_voidPWM+0xea2>
 80016de:	bf00      	nop
 80016e0:	200000f5 	.word	0x200000f5
 80016e4:	40012c00 	.word	0x40012c00
 80016e8:	200000f6 	.word	0x200000f6
		else if (A_u8Channel == TIM_CHANNEL_3)
 80016ec:	79bb      	ldrb	r3, [r7, #6]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d178      	bne.n	80017e4 <MTimer_voidPWM+0x310>
			if (channel3_set==0)
 80016f2:	4b73      	ldr	r3, [pc, #460]	@ (80018c0 <MTimer_voidPWM+0x3ec>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d107      	bne.n	800170a <MTimer_voidPWM+0x236>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN10,GPIO_OUTPUT_10M_AF_PP);
 80016fa:	2209      	movs	r2, #9
 80016fc:	210a      	movs	r1, #10
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff f94c 	bl	800099c <GPIO_voidSetPinMode>
					channel3_set=1;
 8001704:	4b6e      	ldr	r3, [pc, #440]	@ (80018c0 <MTimer_voidPWM+0x3ec>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 800170a:	2300      	movs	r3, #0
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
			u32 L_u32TempCCER  = 0 ;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
			u32 L_u32TempCR2   = 0 ;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC3E_BIT);
 8001716:	4b6b      	ldr	r3, [pc, #428]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a6a      	ldr	r2, [pc, #424]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 800171c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001720:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_1->CCER;
 8001722:	4b68      	ldr	r3, [pc, #416]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
			L_u32TempCR2 = TIM_1->CR2;
 8001728:	4b66      	ldr	r3, [pc, #408]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	623b      	str	r3, [r7, #32]
			L_u32TempCCMRX = TIM_1->CCMR2;
 800172e:	4b65      	ldr	r3, [pc, #404]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_OC3M_BIT0);
 8001734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001736:	f023 0310 	bic.w	r3, r3, #16
 800173a:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_OC3M_BIT1);
 800173c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800173e:	f023 0320 	bic.w	r3, r3, #32
 8001742:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_CC3S_BIT0);
 8001744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_CC3S_BIT1);
 800174c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800174e:	f023 0302 	bic.w	r3, r3, #2
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U);
 8001754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001756:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800175a:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3P_BIT);
 800175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NP_BIT) ;
 8001764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001766:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NP_BIT) ;
 800176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NE_BIT);
 8001774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001776:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS3_BIT);
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001782:	623b      	str	r3, [r7, #32]
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS3N_BIT);
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800178a:	623b      	str	r3, [r7, #32]
			TIM_1->CR2 = L_u32TempCR2;
 800178c:	4a4d      	ldr	r2, [pc, #308]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	6053      	str	r3, [r2, #4]
			TIM_1->CCMR2 = L_u32TempCCMRX;
 8001792:	4a4c      	ldr	r2, [pc, #304]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 8001794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001796:	61d3      	str	r3, [r2, #28]
			TIM_1->CCR3 = A_u16CompareValue;
 8001798:	4a4a      	ldr	r2, [pc, #296]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 800179a:	88bb      	ldrh	r3, [r7, #4]
 800179c:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_1->CCER = L_u32TempCCER;
 800179e:	4a49      	ldr	r2, [pc, #292]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC3PE_BIT);
 80017a4:	4b47      	ldr	r3, [pc, #284]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	4a46      	ldr	r2, [pc, #280]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80017aa:	f043 0308 	orr.w	r3, r3, #8
 80017ae:	61d3      	str	r3, [r2, #28]
		    SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC3FE_BIT) ;
 80017b0:	4b44      	ldr	r3, [pc, #272]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	4a43      	ldr	r2, [pc, #268]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80017b6:	f043 0304 	orr.w	r3, r3, #4
 80017ba:	61d3      	str	r3, [r2, #28]
		    SET_BIT(TIM_1-> CCER , TIM1_CCER_CC3E_BIT) ;
 80017bc:	4b41      	ldr	r3, [pc, #260]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	4a40      	ldr	r2, [pc, #256]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c6:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 80017c8:	4b3e      	ldr	r3, [pc, #248]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80017ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017cc:	4a3d      	ldr	r2, [pc, #244]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80017ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017d2:	6453      	str	r3, [r2, #68]	@ 0x44
		    SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 80017d4:	4b3b      	ldr	r3, [pc, #236]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a3a      	ldr	r2, [pc, #232]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	f000 bdc9 	b.w	8002376 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_4)
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	f040 85c5 	bne.w	8002376 <MTimer_voidPWM+0xea2>
			if (channel4_set==0)
 80017ec:	4b36      	ldr	r3, [pc, #216]	@ (80018c8 <MTimer_voidPWM+0x3f4>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d107      	bne.n	8001804 <MTimer_voidPWM+0x330>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN11,GPIO_OUTPUT_10M_AF_PP);
 80017f4:	2209      	movs	r2, #9
 80017f6:	210b      	movs	r1, #11
 80017f8:	2001      	movs	r0, #1
 80017fa:	f7ff f8cf 	bl	800099c <GPIO_voidSetPinMode>
					channel4_set=1;
 80017fe:	4b32      	ldr	r3, [pc, #200]	@ (80018c8 <MTimer_voidPWM+0x3f4>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001804:	2300      	movs	r3, #0
 8001806:	637b      	str	r3, [r7, #52]	@ 0x34
			u32 L_u32TempCCER  = 0 ;
 8001808:	2300      	movs	r3, #0
 800180a:	633b      	str	r3, [r7, #48]	@ 0x30
			u32 L_u32TempCR2   = 0 ;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC4E_BIT);
 8001810:	4b2c      	ldr	r3, [pc, #176]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4a2b      	ldr	r2, [pc, #172]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 8001816:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800181a:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_1->CCER;
 800181c:	4b29      	ldr	r3, [pc, #164]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	633b      	str	r3, [r7, #48]	@ 0x30
			L_u32TempCR2 = TIM_1->CR2;
 8001822:	4b28      	ldr	r3, [pc, #160]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	62fb      	str	r3, [r7, #44]	@ 0x2c
			L_u32TempCCMRX = TIM_1->CCMR2;
 8001828:	4b26      	ldr	r3, [pc, #152]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT0);
 800182e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001830:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001834:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT1);
 8001836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001838:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800183c:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT0);
 800183e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001844:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT1);
 8001846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001848:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800184c:	637b      	str	r3, [r7, #52]	@ 0x34
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 800184e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001850:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001854:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC4P_BIT);
 8001856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001858:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800185c:	633b      	str	r3, [r7, #48]	@ 0x30
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS4_BIT);
 800185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001860:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001864:	62fb      	str	r3, [r7, #44]	@ 0x2c
			TIM_1->CR2 = L_u32TempCR2;
 8001866:	4a17      	ldr	r2, [pc, #92]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 8001868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186a:	6053      	str	r3, [r2, #4]
			TIM_1->CCMR2 = L_u32TempCCMRX;
 800186c:	4a15      	ldr	r2, [pc, #84]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 800186e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001870:	61d3      	str	r3, [r2, #28]
			TIM_1->CCR4 = A_u16CompareValue;
 8001872:	4a14      	ldr	r2, [pc, #80]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 8001874:	88bb      	ldrh	r3, [r7, #4]
 8001876:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_1->CCER = L_u32TempCCER;
 8001878:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 800187a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800187c:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC4PE_BIT);
 800187e:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a10      	ldr	r2, [pc, #64]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 8001884:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001888:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC4FE_BIT) ;
 800188a:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	4a0d      	ldr	r2, [pc, #52]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 8001890:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001894:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_1-> CCER , TIM1_CCER_CC4E_BIT) ;
 8001896:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 800189c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018a0:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 80018a2:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	4a07      	ldr	r2, [pc, #28]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80018a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ac:	6453      	str	r3, [r2, #68]	@ 0x44
			SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <MTimer_voidPWM+0x3f0>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6013      	str	r3, [r2, #0]
}
 80018ba:	f000 bd5c 	b.w	8002376 <MTimer_voidPWM+0xea2>
 80018be:	bf00      	nop
 80018c0:	200000f7 	.word	0x200000f7
 80018c4:	40012c00 	.word	0x40012c00
 80018c8:	200000f8 	.word	0x200000f8
	else if (A_u8TimerSelected == TIM2_TYPE)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	f040 81dd 	bne.w	8001c8e <MTimer_voidPWM+0x7ba>
		if (A_u8Channel == TIM_CHANNEL_1)
 80018d4:	79bb      	ldrb	r3, [r7, #6]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d173      	bne.n	80019c2 <MTimer_voidPWM+0x4ee>
			if (channel21_set==0)
 80018da:	4bb0      	ldr	r3, [pc, #704]	@ (8001b9c <MTimer_voidPWM+0x6c8>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d107      	bne.n	80018f2 <MTimer_voidPWM+0x41e>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN15,GPIO_OUTPUT_10M_AF_PP);
 80018e2:	2209      	movs	r2, #9
 80018e4:	210f      	movs	r1, #15
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff f858 	bl	800099c <GPIO_voidSetPinMode>
					channel21_set=1;
 80018ec:	4bab      	ldr	r3, [pc, #684]	@ (8001b9c <MTimer_voidPWM+0x6c8>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 80018f2:	2300      	movs	r3, #0
 80018f4:	643b      	str	r3, [r7, #64]	@ 0x40
			u32 L_u32TempCCER  = 0 ;
 80018f6:	2300      	movs	r3, #0
 80018f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
			u32 L_u32TempCR2   = 0 ;
 80018fa:	2300      	movs	r3, #0
 80018fc:	63bb      	str	r3, [r7, #56]	@ 0x38
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 80018fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_2->CCER;
 800190e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	643b      	str	r3, [r7, #64]	@ 0x40
			L_u32TempCR2 = TIM_2->CR2;
 8001916:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	63bb      	str	r3, [r7, #56]	@ 0x38
			L_u32TempCCMRX = TIM_2->CCMR1;
 800191e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 8001926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001928:	f023 0310 	bic.w	r3, r3, #16
 800192c:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 800192e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001930:	f023 0320 	bic.w	r3, r3, #32
 8001934:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 8001936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800193c:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 800193e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 8001946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001948:	f023 0302 	bic.w	r3, r3, #2
 800194c:	643b      	str	r3, [r7, #64]	@ 0x40
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 800194e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001950:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001954:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 8001956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001958:	f023 0302 	bic.w	r3, r3, #2
 800195c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			TIM_2->CR2 = L_u32TempCR2;
 800195e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001964:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR1 = L_u32TempCCMRX;
 8001966:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800196a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800196c:	6193      	str	r3, [r2, #24]
			TIM_2->CCR1 = A_u16CompareValue;
 800196e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001972:	88bb      	ldrh	r3, [r7, #4]
 8001974:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM_2->CCER = L_u32TempCCER;
 8001976:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800197a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800197c:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 800197e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001988:	f043 0308 	orr.w	r3, r3, #8
 800198c:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 800198e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 800199e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80019ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6013      	str	r3, [r2, #0]
}
 80019be:	f000 bcda 	b.w	8002376 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_2)
 80019c2:	79bb      	ldrb	r3, [r7, #6]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d173      	bne.n	8001ab0 <MTimer_voidPWM+0x5dc>
			if (channel22_set==0)
 80019c8:	4b75      	ldr	r3, [pc, #468]	@ (8001ba0 <MTimer_voidPWM+0x6cc>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d107      	bne.n	80019e0 <MTimer_voidPWM+0x50c>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN1,GPIO_OUTPUT_10M_AF_PP);
 80019d0:	2209      	movs	r2, #9
 80019d2:	2101      	movs	r1, #1
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7fe ffe1 	bl	800099c <GPIO_voidSetPinMode>
					channel22_set=1;
 80019da:	4b71      	ldr	r3, [pc, #452]	@ (8001ba0 <MTimer_voidPWM+0x6cc>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 80019e0:	2300      	movs	r3, #0
 80019e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
			u32 L_u32TempCCER  = 0 ;
 80019e4:	2300      	movs	r3, #0
 80019e6:	64bb      	str	r3, [r7, #72]	@ 0x48
		    u32 L_u32TempCR2   = 0 ;
 80019e8:	2300      	movs	r3, #0
 80019ea:	647b      	str	r3, [r7, #68]	@ 0x44
		    CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 80019ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019f6:	f023 0310 	bic.w	r3, r3, #16
 80019fa:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_2->CCER;
 80019fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	64bb      	str	r3, [r7, #72]	@ 0x48
		    L_u32TempCR2 = TIM_2->CR2;
 8001a04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	647b      	str	r3, [r7, #68]	@ 0x44
		    L_u32TempCCMRX = TIM_2->CCMR1;
 8001a0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8001a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8001a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8001a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8001a2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a2e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a36:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 8001a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a3e:	f023 0320 	bic.w	r3, r3, #32
 8001a42:	64bb      	str	r3, [r7, #72]	@ 0x48
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 8001a44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
		    TIM_2->CR2 = L_u32TempCR2;
 8001a4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a52:	6053      	str	r3, [r2, #4]
		    TIM_2->CCMR1 = L_u32TempCCMRX;
 8001a54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a5a:	6193      	str	r3, [r2, #24]
		    TIM_2->CCR2 = A_u16CompareValue;
 8001a5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a60:	88bb      	ldrh	r3, [r7, #4]
 8001a62:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_2->CCER = L_u32TempCCER;
 8001a64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a6a:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 8001a6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a76:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a7a:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 8001a7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a8a:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 8001a8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a96:	f043 0310 	orr.w	r3, r3, #16
 8001a9a:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001a9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	f000 bc63 	b.w	8002376 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_3)
 8001ab0:	79bb      	ldrb	r3, [r7, #6]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d178      	bne.n	8001ba8 <MTimer_voidPWM+0x6d4>
			if (channel23_set==0)
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba4 <MTimer_voidPWM+0x6d0>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d107      	bne.n	8001ace <MTimer_voidPWM+0x5fa>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN2,GPIO_OUTPUT_10M_AF_PP);
 8001abe:	2209      	movs	r2, #9
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f7fe ff6a 	bl	800099c <GPIO_voidSetPinMode>
					channel23_set=1;
 8001ac8:	4b36      	ldr	r3, [pc, #216]	@ (8001ba4 <MTimer_voidPWM+0x6d0>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
			u32 L_u32TempCCER  = 0 ;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	657b      	str	r3, [r7, #84]	@ 0x54
			u32 L_u32TempCR2   = 0 ;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	653b      	str	r3, [r7, #80]	@ 0x50
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 8001ada:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ae8:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_2->CCER;
 8001aea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	657b      	str	r3, [r7, #84]	@ 0x54
			L_u32TempCR2 = TIM_2->CR2;
 8001af2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	653b      	str	r3, [r7, #80]	@ 0x50
			L_u32TempCCMRX = TIM_2->CCMR2;
 8001afa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 8001b02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b04:	f023 0310 	bic.w	r3, r3, #16
 8001b08:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 8001b0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b0c:	f023 0320 	bic.w	r3, r3, #32
 8001b10:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 8001b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 8001b1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b1c:	f023 0302 	bic.w	r3, r3, #2
 8001b20:	65bb      	str	r3, [r7, #88]	@ 0x58
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8001b22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b24:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b28:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 8001b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001b30:	657b      	str	r3, [r7, #84]	@ 0x54
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 8001b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001b38:	657b      	str	r3, [r7, #84]	@ 0x54
			TIM_2->CR2 = L_u32TempCR2;
 8001b3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b40:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR2 = L_u32TempCCMRX;
 8001b42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b48:	61d3      	str	r3, [r2, #28]
			TIM_2->CCR3 = A_u16CompareValue;
 8001b4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b4e:	88bb      	ldrh	r3, [r7, #4]
 8001b50:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_2->CCER = L_u32TempCCER;
 8001b52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b58:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 8001b5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 8001b6a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 8001b7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b88:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001b8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6013      	str	r3, [r2, #0]
}
 8001b9a:	e3ec      	b.n	8002376 <MTimer_voidPWM+0xea2>
 8001b9c:	200000f9 	.word	0x200000f9
 8001ba0:	200000fa 	.word	0x200000fa
 8001ba4:	200000fb 	.word	0x200000fb
		else if (A_u8Channel == TIM_CHANNEL_4)
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	f040 83e3 	bne.w	8002376 <MTimer_voidPWM+0xea2>
			if (channel24_set==0)
 8001bb0:	4b9e      	ldr	r3, [pc, #632]	@ (8001e2c <MTimer_voidPWM+0x958>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d107      	bne.n	8001bc8 <MTimer_voidPWM+0x6f4>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN3,GPIO_OUTPUT_10M_AF_PP);
 8001bb8:	2209      	movs	r2, #9
 8001bba:	2103      	movs	r1, #3
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f7fe feed 	bl	800099c <GPIO_voidSetPinMode>
					channel24_set=1;
 8001bc2:	4b9a      	ldr	r3, [pc, #616]	@ (8001e2c <MTimer_voidPWM+0x958>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	667b      	str	r3, [r7, #100]	@ 0x64
			u32 L_u32TempCCER  = 0 ;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	663b      	str	r3, [r7, #96]	@ 0x60
			u32 L_u32TempCR2   = 0 ;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 8001bd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001be2:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_2->CCER;
 8001be4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	663b      	str	r3, [r7, #96]	@ 0x60
			L_u32TempCR2 = TIM_2->CR2;
 8001bec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
			L_u32TempCCMRX = TIM_2->CCMR2;
 8001bf4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC4M_BIT0);
 8001bfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001bfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c02:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC4M_BIT1);
 8001c04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001c0a:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC4S_BIT0);
 8001c0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c12:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC4S_BIT1);
 8001c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c16:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001c1a:	667b      	str	r3, [r7, #100]	@ 0x64
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001c1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c1e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001c22:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 8001c24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001c2a:	663b      	str	r3, [r7, #96]	@ 0x60
			TIM_2->CR2 = L_u32TempCR2;
 8001c2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c32:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR2 = L_u32TempCCMRX;
 8001c34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c3a:	61d3      	str	r3, [r2, #28]
			TIM_2->CCR4 = A_u16CompareValue;
 8001c3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c40:	88bb      	ldrh	r3, [r7, #4]
 8001c42:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_2->CCER = L_u32TempCCER;
 8001c44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c4a:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 8001c4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c56:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c5a:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 8001c5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c6a:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 8001c6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c7a:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001c7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	e373      	b.n	8002376 <MTimer_voidPWM+0xea2>
	else if (A_u8TimerSelected == TIM3_TYPE)
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	f040 81ae 	bne.w	8001ff2 <MTimer_voidPWM+0xb1e>
		if (A_u8Channel == TIM_CHANNEL_1)
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d161      	bne.n	8001d60 <MTimer_voidPWM+0x88c>
			if (channel31_set==0)
 8001c9c:	4b64      	ldr	r3, [pc, #400]	@ (8001e30 <MTimer_voidPWM+0x95c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d107      	bne.n	8001cb4 <MTimer_voidPWM+0x7e0>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN6,GPIO_OUTPUT_10M_AF_PP);
 8001ca4:	2209      	movs	r2, #9
 8001ca6:	2106      	movs	r1, #6
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f7fe fe77 	bl	800099c <GPIO_voidSetPinMode>
					channel31_set=1;
 8001cae:	4b60      	ldr	r3, [pc, #384]	@ (8001e30 <MTimer_voidPWM+0x95c>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	673b      	str	r3, [r7, #112]	@ 0x70
			u32 L_u32TempCCER  = 0 ;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	66fb      	str	r3, [r7, #108]	@ 0x6c
			u32 L_u32TempCR2   = 0 ;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	66bb      	str	r3, [r7, #104]	@ 0x68
			CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001cc0:	4b5c      	ldr	r3, [pc, #368]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a5b      	ldr	r2, [pc, #364]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_3->CCER;
 8001ccc:	4b59      	ldr	r3, [pc, #356]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	673b      	str	r3, [r7, #112]	@ 0x70
			L_u32TempCR2 = TIM_3->CR2;
 8001cd2:	4b58      	ldr	r3, [pc, #352]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	66bb      	str	r3, [r7, #104]	@ 0x68
			L_u32TempCCMRX = TIM_3->CCMR1;
 8001cd8:	4b56      	ldr	r3, [pc, #344]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 8001cde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ce0:	f023 0310 	bic.w	r3, r3, #16
 8001ce4:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 8001ce6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ce8:	f023 0320 	bic.w	r3, r3, #32
 8001cec:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 8001cee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001cf4:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 8001cf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 8001cfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d00:	f023 0302 	bic.w	r3, r3, #2
 8001d04:	673b      	str	r3, [r7, #112]	@ 0x70
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8001d06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d08:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d0c:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 8001d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d10:	f023 0302 	bic.w	r3, r3, #2
 8001d14:	66fb      	str	r3, [r7, #108]	@ 0x6c
			TIM_3->CR2 = L_u32TempCR2;
 8001d16:	4a47      	ldr	r2, [pc, #284]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d1a:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR1 = L_u32TempCCMRX;
 8001d1c:	4a45      	ldr	r2, [pc, #276]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d20:	6193      	str	r3, [r2, #24]
			TIM_3->CCR1 = A_u16CompareValue;
 8001d22:	4a44      	ldr	r2, [pc, #272]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d24:	88bb      	ldrh	r3, [r7, #4]
 8001d26:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM_3->CCER = L_u32TempCCER;
 8001d28:	4a42      	ldr	r2, [pc, #264]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d2c:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 8001d2e:	4b41      	ldr	r3, [pc, #260]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	4a40      	ldr	r2, [pc, #256]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d34:	f043 0308 	orr.w	r3, r3, #8
 8001d38:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 8001d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001d46:	4b3b      	ldr	r3, [pc, #236]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a3a      	ldr	r2, [pc, #232]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001d52:	4b38      	ldr	r3, [pc, #224]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a37      	ldr	r2, [pc, #220]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6013      	str	r3, [r2, #0]
}
 8001d5e:	e30a      	b.n	8002376 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_2)
 8001d60:	79bb      	ldrb	r3, [r7, #6]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d16a      	bne.n	8001e3c <MTimer_voidPWM+0x968>
			if (channel32_set==0)
 8001d66:	4b34      	ldr	r3, [pc, #208]	@ (8001e38 <MTimer_voidPWM+0x964>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d107      	bne.n	8001d7e <MTimer_voidPWM+0x8aa>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN7,GPIO_OUTPUT_10M_AF_PP);
 8001d6e:	2209      	movs	r2, #9
 8001d70:	2107      	movs	r1, #7
 8001d72:	2001      	movs	r0, #1
 8001d74:	f7fe fe12 	bl	800099c <GPIO_voidSetPinMode>
					channel32_set=1;
 8001d78:	4b2f      	ldr	r3, [pc, #188]	@ (8001e38 <MTimer_voidPWM+0x964>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	67fb      	str	r3, [r7, #124]	@ 0x7c
			u32 L_u32TempCCER  = 0 ;
 8001d82:	2300      	movs	r3, #0
 8001d84:	67bb      	str	r3, [r7, #120]	@ 0x78
		    u32 L_u32TempCR2   = 0 ;
 8001d86:	2300      	movs	r3, #0
 8001d88:	677b      	str	r3, [r7, #116]	@ 0x74
		    CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a29      	ldr	r2, [pc, #164]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d90:	f023 0310 	bic.w	r3, r3, #16
 8001d94:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_3->CCER;
 8001d96:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
		    L_u32TempCR2 = TIM_3->CR2;
 8001d9c:	4b25      	ldr	r3, [pc, #148]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	677b      	str	r3, [r7, #116]	@ 0x74
		    L_u32TempCCMRX = TIM_3->CCMR1;
 8001da2:	4b24      	ldr	r3, [pc, #144]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8001da8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001daa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dae:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8001db0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001db2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001db6:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8001db8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001dba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8001dc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001dc2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001dc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001dc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001dca:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001dce:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 8001dd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dd2:	f023 0320 	bic.w	r3, r3, #32
 8001dd6:	67bb      	str	r3, [r7, #120]	@ 0x78
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 8001dd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dde:	67bb      	str	r3, [r7, #120]	@ 0x78
		    TIM_3->CR2 = L_u32TempCR2;
 8001de0:	4a14      	ldr	r2, [pc, #80]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001de2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001de4:	6053      	str	r3, [r2, #4]
		    TIM_3->CCMR1 = L_u32TempCCMRX;
 8001de6:	4a13      	ldr	r2, [pc, #76]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001de8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001dea:	6193      	str	r3, [r2, #24]
		    TIM_3->CCR2 = A_u16CompareValue;
 8001dec:	4a11      	ldr	r2, [pc, #68]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001dee:	88bb      	ldrh	r3, [r7, #4]
 8001df0:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_3->CCER = L_u32TempCCER;
 8001df2:	4a10      	ldr	r2, [pc, #64]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001df4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001df6:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 8001df8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001dfe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e02:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 8001e04:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a0a      	ldr	r2, [pc, #40]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001e0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e0e:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 8001e10:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a07      	ldr	r2, [pc, #28]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001e16:	f043 0310 	orr.w	r3, r3, #16
 8001e1a:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a04      	ldr	r2, [pc, #16]	@ (8001e34 <MTimer_voidPWM+0x960>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	e2a5      	b.n	8002376 <MTimer_voidPWM+0xea2>
 8001e2a:	bf00      	nop
 8001e2c:	200000fc 	.word	0x200000fc
 8001e30:	200000fd 	.word	0x200000fd
 8001e34:	40000400 	.word	0x40000400
 8001e38:	200000fe 	.word	0x200000fe
		else if (A_u8Channel == TIM_CHANNEL_3)
 8001e3c:	79bb      	ldrb	r3, [r7, #6]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d16c      	bne.n	8001f1c <MTimer_voidPWM+0xa48>
			u32 L_u32TempCCMRX = 0 ;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			u32 L_u32TempCCER  = 0 ;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			u32 L_u32TempCR2   = 0 ;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 8001e54:	4ba1      	ldr	r3, [pc, #644]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4aa0      	ldr	r2, [pc, #640]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001e5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e5e:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_3->CCER;
 8001e60:	4b9e      	ldr	r3, [pc, #632]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			L_u32TempCR2 = TIM_3->CR2;
 8001e68:	4b9c      	ldr	r3, [pc, #624]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			L_u32TempCCMRX = TIM_3->CCMR2;
 8001e70:	4b9a      	ldr	r3, [pc, #616]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 8001e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e7c:	f023 0310 	bic.w	r3, r3, #16
 8001e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 8001e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e88:	f023 0320 	bic.w	r3, r3, #32
 8001e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 8001e90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 8001e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ea0:	f023 0302 	bic.w	r3, r3, #2
 8001ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			L_u32TempCCMRX |= (TIM_PWM_MODE1 <<4U) ;
 8001ea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001eac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 8001eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001eb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 8001ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ec4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001ec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			TIM_3->CR2 = L_u32TempCR2;
 8001ecc:	4a83      	ldr	r2, [pc, #524]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001ece:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ed2:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR2 = L_u32TempCCMRX;
 8001ed4:	4a81      	ldr	r2, [pc, #516]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001ed6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001eda:	61d3      	str	r3, [r2, #28]
			TIM_3->CCR3 = A_u16CompareValue;
 8001edc:	4a7f      	ldr	r2, [pc, #508]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001ede:	88bb      	ldrh	r3, [r7, #4]
 8001ee0:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_3->CCER = L_u32TempCCER;
 8001ee2:	4a7e      	ldr	r2, [pc, #504]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ee8:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 8001eea:	4b7c      	ldr	r3, [pc, #496]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a7b      	ldr	r2, [pc, #492]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 8001ef6:	4b79      	ldr	r3, [pc, #484]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4a78      	ldr	r2, [pc, #480]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 8001f02:	4b76      	ldr	r3, [pc, #472]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a75      	ldr	r2, [pc, #468]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0c:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001f0e:	4b73      	ldr	r3, [pc, #460]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a72      	ldr	r2, [pc, #456]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6013      	str	r3, [r2, #0]
}
 8001f1a:	e22c      	b.n	8002376 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_4)
 8001f1c:	79bb      	ldrb	r3, [r7, #6]
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	f040 8229 	bne.w	8002376 <MTimer_voidPWM+0xea2>
			u32 L_u32TempCCMRX = 0 ;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			u32 L_u32TempCCER  = 0 ;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			u32 L_u32TempCR2   = 0 ;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 8001f36:	4b69      	ldr	r3, [pc, #420]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a68      	ldr	r2, [pc, #416]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001f3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f40:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_3->CCER;
 8001f42:	4b66      	ldr	r3, [pc, #408]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			L_u32TempCR2 = TIM_3->CR2;
 8001f4a:	4b64      	ldr	r3, [pc, #400]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			L_u32TempCCMRX = TIM_3->CCMR2;
 8001f52:	4b62      	ldr	r3, [pc, #392]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8001f5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8001f66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001f6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8001f72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8001f7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f82:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001f86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001f8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f8e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001f92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 8001f96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001f9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			TIM_3->CR2 = L_u32TempCR2;
 8001fa2:	4a4e      	ldr	r2, [pc, #312]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fa8:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR2 = L_u32TempCCMRX;
 8001faa:	4a4c      	ldr	r2, [pc, #304]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001fac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001fb0:	61d3      	str	r3, [r2, #28]
			TIM_3->CCR4 = A_u16CompareValue;
 8001fb2:	4a4a      	ldr	r2, [pc, #296]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001fb4:	88bb      	ldrh	r3, [r7, #4]
 8001fb6:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_3->CCER = L_u32TempCCER;
 8001fb8:	4a48      	ldr	r2, [pc, #288]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001fba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fbe:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 8001fc0:	4b46      	ldr	r3, [pc, #280]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	4a45      	ldr	r2, [pc, #276]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001fc6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fca:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 8001fcc:	4b43      	ldr	r3, [pc, #268]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	4a42      	ldr	r2, [pc, #264]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fd6:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 8001fd8:	4b40      	ldr	r3, [pc, #256]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001fde:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fe2:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a3c      	ldr	r2, [pc, #240]	@ (80020dc <MTimer_voidPWM+0xc08>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	e1c1      	b.n	8002376 <MTimer_voidPWM+0xea2>
	else if (A_u8TimerSelected == TIM4_TYPE)
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	f040 81be 	bne.w	8002376 <MTimer_voidPWM+0xea2>
		if (A_u8Channel == TIM_CHANNEL_1)
 8001ffa:	79bb      	ldrb	r3, [r7, #6]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d171      	bne.n	80020e4 <MTimer_voidPWM+0xc10>
			u32 L_u32TempCCMRX = 0 ;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			u32 L_u32TempCCER  = 0 ;
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			u32 L_u32TempCR2   = 0 ;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8002012:	4b33      	ldr	r3, [pc, #204]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a32      	ldr	r2, [pc, #200]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_4->CCER;
 800201e:	4b30      	ldr	r3, [pc, #192]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			L_u32TempCR2 = TIM_4->CR2;
 8002026:	4b2e      	ldr	r3, [pc, #184]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			L_u32TempCCMRX = TIM_4->CCMR1;
 800202e:	4b2c      	ldr	r3, [pc, #176]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 8002036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800203a:	f023 0310 	bic.w	r3, r3, #16
 800203e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 8002042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002046:	f023 0320 	bic.w	r3, r3, #32
 800204a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 800204e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002052:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002056:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 800205a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 8002066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800206a:	f023 0302 	bic.w	r3, r3, #2
 800206e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8002072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002076:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800207a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 800207e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002082:	f023 0302 	bic.w	r3, r3, #2
 8002086:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			TIM_4->CR2 = L_u32TempCR2;
 800208a:	4a15      	ldr	r2, [pc, #84]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 800208c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002090:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR1 = L_u32TempCCMRX;
 8002092:	4a13      	ldr	r2, [pc, #76]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 8002094:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002098:	6193      	str	r3, [r2, #24]
			TIM_4->CCR1 = A_u16CompareValue;
 800209a:	4a11      	ldr	r2, [pc, #68]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 800209c:	88bb      	ldrh	r3, [r7, #4]
 800209e:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM_4->CCER = L_u32TempCCER;
 80020a0:	4a0f      	ldr	r2, [pc, #60]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 80020a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020a6:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 80020a8:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a0c      	ldr	r2, [pc, #48]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 80020ae:	f043 0308 	orr.w	r3, r3, #8
 80020b2:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 80020b4:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a09      	ldr	r2, [pc, #36]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 80020c0:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a06      	ldr	r2, [pc, #24]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a03      	ldr	r2, [pc, #12]	@ (80020e0 <MTimer_voidPWM+0xc0c>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	e14d      	b.n	8002376 <MTimer_voidPWM+0xea2>
 80020da:	bf00      	nop
 80020dc:	40000400 	.word	0x40000400
 80020e0:	40000800 	.word	0x40000800
		else if (A_u8Channel == TIM_CHANNEL_2)
 80020e4:	79bb      	ldrb	r3, [r7, #6]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d16c      	bne.n	80021c4 <MTimer_voidPWM+0xcf0>
			u32 L_u32TempCCMRX = 0 ;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			u32 L_u32TempCCER  = 0 ;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    u32 L_u32TempCR2   = 0 ;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		    CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 80020fc:	4ba0      	ldr	r3, [pc, #640]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a9f      	ldr	r2, [pc, #636]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002102:	f023 0310 	bic.w	r3, r3, #16
 8002106:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_4->CCER;
 8002108:	4b9d      	ldr	r3, [pc, #628]	@ (8002380 <MTimer_voidPWM+0xeac>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    L_u32TempCR2 = TIM_4->CR2;
 8002110:	4b9b      	ldr	r3, [pc, #620]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		    L_u32TempCCMRX = TIM_4->CCMR1;
 8002118:	4b99      	ldr	r3, [pc, #612]	@ (8002380 <MTimer_voidPWM+0xeac>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8002120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002124:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002128:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 800212c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002130:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002134:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8002138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800213c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002140:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8002144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002148:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800214c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8002150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002154:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8002158:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 800215c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002160:	f023 0320 	bic.w	r3, r3, #32
 8002164:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 8002168:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800216c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002170:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    TIM_4->CR2 = L_u32TempCR2;
 8002174:	4a82      	ldr	r2, [pc, #520]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800217a:	6053      	str	r3, [r2, #4]
		    TIM_4->CCMR1 = L_u32TempCCMRX;
 800217c:	4a80      	ldr	r2, [pc, #512]	@ (8002380 <MTimer_voidPWM+0xeac>)
 800217e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002182:	6193      	str	r3, [r2, #24]
		    TIM_4->CCR2 = A_u16CompareValue;
 8002184:	4a7e      	ldr	r2, [pc, #504]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002186:	88bb      	ldrh	r3, [r7, #4]
 8002188:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_4->CCER = L_u32TempCCER;
 800218a:	4a7d      	ldr	r2, [pc, #500]	@ (8002380 <MTimer_voidPWM+0xeac>)
 800218c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002190:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 8002192:	4b7b      	ldr	r3, [pc, #492]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	4a7a      	ldr	r2, [pc, #488]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002198:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800219c:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 800219e:	4b78      	ldr	r3, [pc, #480]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	4a77      	ldr	r2, [pc, #476]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80021a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021a8:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 80021aa:	4b75      	ldr	r3, [pc, #468]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4a74      	ldr	r2, [pc, #464]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80021b0:	f043 0310 	orr.w	r3, r3, #16
 80021b4:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80021b6:	4b72      	ldr	r3, [pc, #456]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a71      	ldr	r2, [pc, #452]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6013      	str	r3, [r2, #0]
}
 80021c2:	e0d8      	b.n	8002376 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_3)
 80021c4:	79bb      	ldrb	r3, [r7, #6]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d16c      	bne.n	80022a4 <MTimer_voidPWM+0xdd0>
			u32 L_u32TempCCMRX = 0 ;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			u32 L_u32TempCCER  = 0 ;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			u32 L_u32TempCR2   = 0 ;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 80021dc:	4b68      	ldr	r3, [pc, #416]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a67      	ldr	r2, [pc, #412]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80021e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021e6:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_4->CCER;
 80021e8:	4b65      	ldr	r3, [pc, #404]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			L_u32TempCR2 = TIM_4->CR2;
 80021f0:	4b63      	ldr	r3, [pc, #396]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			L_u32TempCCMRX = TIM_4->CCMR2;
 80021f8:	4b61      	ldr	r3, [pc, #388]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 8002200:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002204:	f023 0310 	bic.w	r3, r3, #16
 8002208:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 800220c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002210:	f023 0320 	bic.w	r3, r3, #32
 8002214:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 8002218:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 8002224:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002228:	f023 0302 	bic.w	r3, r3, #2
 800222c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8002230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002234:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002238:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 800223c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002240:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002244:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 8002248:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800224c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			TIM_4->CR2 = L_u32TempCR2;
 8002254:	4a4a      	ldr	r2, [pc, #296]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002256:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800225a:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR2 = L_u32TempCCMRX;
 800225c:	4a48      	ldr	r2, [pc, #288]	@ (8002380 <MTimer_voidPWM+0xeac>)
 800225e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002262:	61d3      	str	r3, [r2, #28]
			TIM_4->CCR3 = A_u16CompareValue;
 8002264:	4a46      	ldr	r2, [pc, #280]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002266:	88bb      	ldrh	r3, [r7, #4]
 8002268:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_4->CCER = L_u32TempCCER;
 800226a:	4a45      	ldr	r2, [pc, #276]	@ (8002380 <MTimer_voidPWM+0xeac>)
 800226c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002270:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 8002272:	4b43      	ldr	r3, [pc, #268]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a42      	ldr	r2, [pc, #264]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002278:	f043 0308 	orr.w	r3, r3, #8
 800227c:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 800227e:	4b40      	ldr	r3, [pc, #256]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	4a3f      	ldr	r2, [pc, #252]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 800228a:	4b3d      	ldr	r3, [pc, #244]	@ (8002380 <MTimer_voidPWM+0xeac>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a3c      	ldr	r2, [pc, #240]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002294:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8002296:	4b3a      	ldr	r3, [pc, #232]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a39      	ldr	r2, [pc, #228]	@ (8002380 <MTimer_voidPWM+0xeac>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6013      	str	r3, [r2, #0]
}
 80022a2:	e068      	b.n	8002376 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_4)
 80022a4:	79bb      	ldrb	r3, [r7, #6]
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d165      	bne.n	8002376 <MTimer_voidPWM+0xea2>
			u32 L_u32TempCCMRX = 0 ;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			u32 L_u32TempCCER  = 0 ;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			u32 L_u32TempCR2   = 0 ;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 80022bc:	4b30      	ldr	r3, [pc, #192]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80022c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022c6:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_4->CCER;
 80022c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			L_u32TempCR2 = TIM_4->CR2;
 80022d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			L_u32TempCCMRX = TIM_4->CCMR2;
 80022d8:	4b29      	ldr	r3, [pc, #164]	@ (8002380 <MTimer_voidPWM+0xeac>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 80022e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 80022ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80022f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 80022f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002300:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8002304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002308:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800230c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8002310:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002314:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8002318:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 800231c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002320:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002324:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			TIM_4->CR2 = L_u32TempCR2;
 8002328:	4a15      	ldr	r2, [pc, #84]	@ (8002380 <MTimer_voidPWM+0xeac>)
 800232a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800232e:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR2 = L_u32TempCCMRX;
 8002330:	4a13      	ldr	r2, [pc, #76]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002332:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002336:	61d3      	str	r3, [r2, #28]
			TIM_4->CCR4 = A_u16CompareValue;
 8002338:	4a11      	ldr	r2, [pc, #68]	@ (8002380 <MTimer_voidPWM+0xeac>)
 800233a:	88bb      	ldrh	r3, [r7, #4]
 800233c:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_4->CCER = L_u32TempCCER;
 800233e:	4a10      	ldr	r2, [pc, #64]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002344:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 8002346:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a0d      	ldr	r2, [pc, #52]	@ (8002380 <MTimer_voidPWM+0xeac>)
 800234c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002350:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 8002352:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002358:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800235c:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 800235e:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a07      	ldr	r2, [pc, #28]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002364:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002368:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 800236a:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <MTimer_voidPWM+0xeac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a04      	ldr	r2, [pc, #16]	@ (8002380 <MTimer_voidPWM+0xeac>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6013      	str	r3, [r2, #0]
}
 8002376:	bf00      	nop
 8002378:	37c8      	adds	r7, #200	@ 0xc8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40000800 	.word	0x40000800

08002384 <USART1_IRQHandler>:
	MUSART2_CallBack = ptr;
}

/*IRQ of UART1*/
void USART1_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
    UART1->SR = 0;
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <USART1_IRQHandler+0x1c>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
    //G_u8DataFromUART = MUART_u8ReadDataRegister(UART1);
	if(MUSART1_CallBack!=NULL)
 800238e:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <USART1_IRQHandler+0x20>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <USART1_IRQHandler+0x18>
	{
		MUSART1_CallBack();
 8002396:	4b03      	ldr	r3, [pc, #12]	@ (80023a4 <USART1_IRQHandler+0x20>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4798      	blx	r3
	}
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40013800 	.word	0x40013800
 80023a4:	20000100 	.word	0x20000100

080023a8 <USART2_IRQHandler>:

/*IRQ of UART2*/
void USART2_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
	UART2->SR = 0;
 80023ac:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <USART2_IRQHandler+0x24>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
	//G_u8DataFromUART = MUART_u8ReadDataRegister(UART2);
	local_u8_RX_Busyflag=0;
 80023b2:	4b07      	ldr	r3, [pc, #28]	@ (80023d0 <USART2_IRQHandler+0x28>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
	if(MUSART2_CallBack!=NULL)
 80023b8:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <USART2_IRQHandler+0x2c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <USART2_IRQHandler+0x1e>
	{
		MUSART2_CallBack();
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <USART2_IRQHandler+0x2c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4798      	blx	r3
	}
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40004400 	.word	0x40004400
 80023d0:	200000ff 	.word	0x200000ff
 80023d4:	20000104 	.word	0x20000104

080023d8 <HUltrasonic_f32CalcDistance>:
#include "Ultrasonic_config.h"
#include "Ultrasonic_private.h"


u8 HUltrasonic_f32CalcDistance (u8 Ultra_Num)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
	u32 L_u32TicksNumber = 0   ;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
	u8 L_f32Distance    = 0.0 ;
 80023e6:	2300      	movs	r3, #0
 80023e8:	72fb      	strb	r3, [r7, #11]
	switch(Ultra_Num)
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	f000 80ae 	beq.w	800254e <HUltrasonic_f32CalcDistance+0x176>
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	f300 80fe 	bgt.w	80025f4 <HUltrasonic_f32CalcDistance+0x21c>
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d002      	beq.n	8002402 <HUltrasonic_f32CalcDistance+0x2a>
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d053      	beq.n	80024a8 <HUltrasonic_f32CalcDistance+0xd0>
 8002400:	e0f8      	b.n	80025f4 <HUltrasonic_f32CalcDistance+0x21c>
		/*trig pulse to trigger pin
		 * 3us low
		 * 10us high
		 * then low
		 */
		GPIO_voidSetPinValue (Ultrasonic1_TrigPort,Ultrasonic1_TrigPin, GPIO_LOW ) ;
 8002402:	2200      	movs	r2, #0
 8002404:	210a      	movs	r1, #10
 8002406:	2002      	movs	r0, #2
 8002408:	f7fe fc68 	bl	8000cdc <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_LOW_PULSE) ;
 800240c:	2006      	movs	r0, #6
 800240e:	f7fe ff01 	bl	8001214 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic1_TrigPort,Ultrasonic1_TrigPin, GPIO_HIGH) ;
 8002412:	2201      	movs	r2, #1
 8002414:	210a      	movs	r1, #10
 8002416:	2002      	movs	r0, #2
 8002418:	f7fe fc60 	bl	8000cdc <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_HIGH_PULSE) ;
 800241c:	201e      	movs	r0, #30
 800241e:	f7fe fef9 	bl	8001214 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic1_TrigPort,Ultrasonic1_TrigPin, GPIO_LOW ) ;
 8002422:	2200      	movs	r2, #0
 8002424:	210a      	movs	r1, #10
 8002426:	2002      	movs	r0, #2
 8002428:	f7fe fc58 	bl	8000cdc <GPIO_voidSetPinValue>

		/*wait for generate 8 pulses (40KHZ)*/
		MSTK_voidSetBusyWait(TIME_FOR_EIGHT_PULSES) ;
 800242c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002430:	f7fe fef0 	bl	8001214 <MSTK_voidSetBusyWait>

		/*wait until generating rising edge for echo pin*/
      		while (GPIO_GetPinValue( Ultrasonic1_EchoPort, Ultrasonic1_EchoPin) == GPIO_LOW) ;
 8002434:	bf00      	nop
 8002436:	210b      	movs	r1, #11
 8002438:	2002      	movs	r0, #2
 800243a:	f7fe fd1b 	bl	8000e74 <GPIO_GetPinValue>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f8      	beq.n	8002436 <HUltrasonic_f32CalcDistance+0x5e>

		while (GPIO_GetPinValue( Ultrasonic1_EchoPort, Ultrasonic1_EchoPin) == GPIO_HIGH)
 8002444:	e005      	b.n	8002452 <HUltrasonic_f32CalcDistance+0x7a>
		{
			/*each iteration take 4.9 us*/
			L_u32TicksNumber ++ ;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	3301      	adds	r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
			MSTK_voidSetBusyWait(2) ;
 800244c:	2002      	movs	r0, #2
 800244e:	f7fe fee1 	bl	8001214 <MSTK_voidSetBusyWait>
		while (GPIO_GetPinValue( Ultrasonic1_EchoPort, Ultrasonic1_EchoPin) == GPIO_HIGH)
 8002452:	210b      	movs	r1, #11
 8002454:	2002      	movs	r0, #2
 8002456:	f7fe fd0d 	bl	8000e74 <GPIO_GetPinValue>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d0f2      	beq.n	8002446 <HUltrasonic_f32CalcDistance+0x6e>
		}
		L_f32Distance = (L_u32TicksNumber + 0.0f)*TIME_OF_EACH_ITERATION_IN_MICRO*SPEED_OF_SIGNAL_CM_PER_U ;
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f7fe fa31 	bl	80008c8 <__aeabi_ui2f>
 8002466:	4603      	mov	r3, r0
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f8ff 	bl	800066c <__aeabi_f2d>
 800246e:	a364      	add	r3, pc, #400	@ (adr r3, 8002600 <HUltrasonic_f32CalcDistance+0x228>)
 8002470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002474:	f7fd fe6c 	bl	8000150 <__aeabi_dmul>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	a361      	add	r3, pc, #388	@ (adr r3, 8002608 <HUltrasonic_f32CalcDistance+0x230>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	f7fd fe63 	bl	8000150 <__aeabi_dmul>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4610      	mov	r0, r2
 8002490:	4619      	mov	r1, r3
 8002492:	f7fe f943 	bl	800071c <__aeabi_d2uiz>
 8002496:	4603      	mov	r3, r0
 8002498:	72fb      	strb	r3, [r7, #11]
		L_f32Distance = L_f32Distance / 2 ;
 800249a:	7afb      	ldrb	r3, [r7, #11]
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	72fb      	strb	r3, [r7, #11]

		/*initialize L_u32TicksNumber for next read*/
		L_u32TicksNumber = 0 ;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
		return L_f32Distance ;
 80024a4:	7afb      	ldrb	r3, [r7, #11]
 80024a6:	e0a6      	b.n	80025f6 <HUltrasonic_f32CalcDistance+0x21e>
		/*trig pulse to trigger pin
		 * 3us low
		 * 10us high
		 * then low
		 */
		GPIO_voidSetPinValue (Ultrasonic2_TrigPort,Ultrasonic2_TrigPin, GPIO_LOW ) ;
 80024a8:	2200      	movs	r2, #0
 80024aa:	210c      	movs	r1, #12
 80024ac:	2002      	movs	r0, #2
 80024ae:	f7fe fc15 	bl	8000cdc <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_LOW_PULSE) ;
 80024b2:	2006      	movs	r0, #6
 80024b4:	f7fe feae 	bl	8001214 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic2_TrigPort,Ultrasonic2_TrigPin, GPIO_HIGH) ;
 80024b8:	2201      	movs	r2, #1
 80024ba:	210c      	movs	r1, #12
 80024bc:	2002      	movs	r0, #2
 80024be:	f7fe fc0d 	bl	8000cdc <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_HIGH_PULSE) ;
 80024c2:	201e      	movs	r0, #30
 80024c4:	f7fe fea6 	bl	8001214 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic2_TrigPort,Ultrasonic2_TrigPin, GPIO_LOW ) ;
 80024c8:	2200      	movs	r2, #0
 80024ca:	210c      	movs	r1, #12
 80024cc:	2002      	movs	r0, #2
 80024ce:	f7fe fc05 	bl	8000cdc <GPIO_voidSetPinValue>

		/*wait for generate 8 pulses (40KHZ)*/
		MSTK_voidSetBusyWait(TIME_FOR_EIGHT_PULSES) ;
 80024d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80024d6:	f7fe fe9d 	bl	8001214 <MSTK_voidSetBusyWait>

		/*wait until generating rising edge for echo pin*/
		while (GPIO_GetPinValue( Ultrasonic2_EchoPort, Ultrasonic2_EchoPin) == GPIO_LOW) ;
 80024da:	bf00      	nop
 80024dc:	210d      	movs	r1, #13
 80024de:	2002      	movs	r0, #2
 80024e0:	f7fe fcc8 	bl	8000e74 <GPIO_GetPinValue>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f8      	beq.n	80024dc <HUltrasonic_f32CalcDistance+0x104>

		while (GPIO_GetPinValue( Ultrasonic2_EchoPort, Ultrasonic2_EchoPin) == GPIO_HIGH)
 80024ea:	e005      	b.n	80024f8 <HUltrasonic_f32CalcDistance+0x120>
		{
			/*each iteration take 4.9 us*/
			L_u32TicksNumber ++ ;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3301      	adds	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
			MSTK_voidSetBusyWait(2) ;
 80024f2:	2002      	movs	r0, #2
 80024f4:	f7fe fe8e 	bl	8001214 <MSTK_voidSetBusyWait>
		while (GPIO_GetPinValue( Ultrasonic2_EchoPort, Ultrasonic2_EchoPin) == GPIO_HIGH)
 80024f8:	210d      	movs	r1, #13
 80024fa:	2002      	movs	r0, #2
 80024fc:	f7fe fcba 	bl	8000e74 <GPIO_GetPinValue>
 8002500:	4603      	mov	r3, r0
 8002502:	2b01      	cmp	r3, #1
 8002504:	d0f2      	beq.n	80024ec <HUltrasonic_f32CalcDistance+0x114>
		}
		L_f32Distance = (L_u32TicksNumber + 0.0f)*TIME_OF_EACH_ITERATION_IN_MICRO*SPEED_OF_SIGNAL_CM_PER_U ;
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f7fe f9de 	bl	80008c8 <__aeabi_ui2f>
 800250c:	4603      	mov	r3, r0
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f8ac 	bl	800066c <__aeabi_f2d>
 8002514:	a33a      	add	r3, pc, #232	@ (adr r3, 8002600 <HUltrasonic_f32CalcDistance+0x228>)
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	f7fd fe19 	bl	8000150 <__aeabi_dmul>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	a338      	add	r3, pc, #224	@ (adr r3, 8002608 <HUltrasonic_f32CalcDistance+0x230>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	f7fd fe10 	bl	8000150 <__aeabi_dmul>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	f7fe f8f0 	bl	800071c <__aeabi_d2uiz>
 800253c:	4603      	mov	r3, r0
 800253e:	72fb      	strb	r3, [r7, #11]
		L_f32Distance = L_f32Distance / 2 ;
 8002540:	7afb      	ldrb	r3, [r7, #11]
 8002542:	085b      	lsrs	r3, r3, #1
 8002544:	72fb      	strb	r3, [r7, #11]

		/*initialize L_u32TicksNumber for next read*/
		L_u32TicksNumber = 0 ;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
		return L_f32Distance ;
 800254a:	7afb      	ldrb	r3, [r7, #11]
 800254c:	e053      	b.n	80025f6 <HUltrasonic_f32CalcDistance+0x21e>
		/*trig pulse to trigger pin
		 * 3us low
		 * 10us high
		 * then low
		 */
		GPIO_voidSetPinValue (Ultrasonic3_TrigPort,Ultrasonic3_TrigPin, GPIO_LOW ) ;
 800254e:	2200      	movs	r2, #0
 8002550:	210e      	movs	r1, #14
 8002552:	2002      	movs	r0, #2
 8002554:	f7fe fbc2 	bl	8000cdc <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_LOW_PULSE) ;
 8002558:	2006      	movs	r0, #6
 800255a:	f7fe fe5b 	bl	8001214 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic3_TrigPort,Ultrasonic3_TrigPin, GPIO_HIGH) ;
 800255e:	2201      	movs	r2, #1
 8002560:	210e      	movs	r1, #14
 8002562:	2002      	movs	r0, #2
 8002564:	f7fe fbba 	bl	8000cdc <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_HIGH_PULSE) ;
 8002568:	201e      	movs	r0, #30
 800256a:	f7fe fe53 	bl	8001214 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic3_TrigPort,Ultrasonic3_TrigPin, GPIO_LOW ) ;
 800256e:	2200      	movs	r2, #0
 8002570:	210e      	movs	r1, #14
 8002572:	2002      	movs	r0, #2
 8002574:	f7fe fbb2 	bl	8000cdc <GPIO_voidSetPinValue>

		/*wait for generate 8 pulses (40KHZ)*/
		MSTK_voidSetBusyWait(TIME_FOR_EIGHT_PULSES) ;
 8002578:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800257c:	f7fe fe4a 	bl	8001214 <MSTK_voidSetBusyWait>

		/*wait until generating rising edge for echo pin*/
		while (GPIO_GetPinValue( Ultrasonic3_EchoPort, Ultrasonic3_EchoPin) == GPIO_LOW) ;
 8002580:	bf00      	nop
 8002582:	210f      	movs	r1, #15
 8002584:	2002      	movs	r0, #2
 8002586:	f7fe fc75 	bl	8000e74 <GPIO_GetPinValue>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f8      	beq.n	8002582 <HUltrasonic_f32CalcDistance+0x1aa>

		while (GPIO_GetPinValue( Ultrasonic3_EchoPort, Ultrasonic3_EchoPin) == GPIO_HIGH)
 8002590:	e005      	b.n	800259e <HUltrasonic_f32CalcDistance+0x1c6>
		{
			/*each iteration take 4.9 us*/
			L_u32TicksNumber ++ ;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3301      	adds	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
			MSTK_voidSetBusyWait(2) ;
 8002598:	2002      	movs	r0, #2
 800259a:	f7fe fe3b 	bl	8001214 <MSTK_voidSetBusyWait>
		while (GPIO_GetPinValue( Ultrasonic3_EchoPort, Ultrasonic3_EchoPin) == GPIO_HIGH)
 800259e:	210f      	movs	r1, #15
 80025a0:	2002      	movs	r0, #2
 80025a2:	f7fe fc67 	bl	8000e74 <GPIO_GetPinValue>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d0f2      	beq.n	8002592 <HUltrasonic_f32CalcDistance+0x1ba>
		}
		L_f32Distance = (L_u32TicksNumber + 0.0f)*TIME_OF_EACH_ITERATION_IN_MICRO*SPEED_OF_SIGNAL_CM_PER_U ;
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7fe f98b 	bl	80008c8 <__aeabi_ui2f>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe f859 	bl	800066c <__aeabi_f2d>
 80025ba:	a311      	add	r3, pc, #68	@ (adr r3, 8002600 <HUltrasonic_f32CalcDistance+0x228>)
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f7fd fdc6 	bl	8000150 <__aeabi_dmul>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	a30e      	add	r3, pc, #56	@ (adr r3, 8002608 <HUltrasonic_f32CalcDistance+0x230>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fd fdbd 	bl	8000150 <__aeabi_dmul>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f7fe f89d 	bl	800071c <__aeabi_d2uiz>
 80025e2:	4603      	mov	r3, r0
 80025e4:	72fb      	strb	r3, [r7, #11]
		L_f32Distance = L_f32Distance / 2 ;
 80025e6:	7afb      	ldrb	r3, [r7, #11]
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	72fb      	strb	r3, [r7, #11]

		/*initialize L_u32TicksNumber for next read*/
		L_u32TicksNumber = 0 ;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
		return L_f32Distance ;
 80025f0:	7afb      	ldrb	r3, [r7, #11]
 80025f2:	e000      	b.n	80025f6 <HUltrasonic_f32CalcDistance+0x21e>
		break;
	}
	return 0;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	9999999a 	.word	0x9999999a
 8002604:	40139999 	.word	0x40139999
 8002608:	04816f00 	.word	0x04816f00
 800260c:	3fa18fc5 	.word	0x3fa18fc5

08002610 <HUltrasonic_voidInit>:


void HUltrasonic_voidInit (u8 Ultra_Num)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
	switch(Ultra_Num)
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	3b01      	subs	r3, #1
 800261e:	2b03      	cmp	r3, #3
 8002620:	d84a      	bhi.n	80026b8 <HUltrasonic_voidInit+0xa8>
 8002622:	a201      	add	r2, pc, #4	@ (adr r2, 8002628 <HUltrasonic_voidInit+0x18>)
 8002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002628:	08002639 	.word	0x08002639
 800262c:	08002659 	.word	0x08002659
 8002630:	08002679 	.word	0x08002679
 8002634:	08002699 	.word	0x08002699
	{
	case 1:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic1_TrigPort,Ultrasonic1_TrigPin,GPIO_OUTPUT_2M_PP);
 8002638:	2202      	movs	r2, #2
 800263a:	210a      	movs	r1, #10
 800263c:	2002      	movs	r0, #2
 800263e:	f7fe f9ad 	bl	800099c <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic1_TrigPort, Ultrasonic1_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic1_EchoPort,Ultrasonic1_EchoPin,GPIO_INPUT_PU_PD);
 8002642:	2208      	movs	r2, #8
 8002644:	210b      	movs	r1, #11
 8002646:	2002      	movs	r0, #2
 8002648:	f7fe f9a8 	bl	800099c <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic1_EchoPort, Ultrasonic1_EchoPin, GPIO_INPUT_PD);
 800264c:	2200      	movs	r2, #0
 800264e:	210b      	movs	r1, #11
 8002650:	2002      	movs	r0, #2
 8002652:	f7fe fb43 	bl	8000cdc <GPIO_voidSetPinValue>
		break;
 8002656:	e02f      	b.n	80026b8 <HUltrasonic_voidInit+0xa8>
	case 2:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic2_TrigPort,Ultrasonic2_TrigPin,GPIO_OUTPUT_2M_PP);
 8002658:	2202      	movs	r2, #2
 800265a:	210c      	movs	r1, #12
 800265c:	2002      	movs	r0, #2
 800265e:	f7fe f99d 	bl	800099c <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic2_TrigPort, Ultrasonic2_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic2_EchoPort,Ultrasonic2_EchoPin,GPIO_INPUT_PU_PD);
 8002662:	2208      	movs	r2, #8
 8002664:	210d      	movs	r1, #13
 8002666:	2002      	movs	r0, #2
 8002668:	f7fe f998 	bl	800099c <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic2_EchoPort, Ultrasonic2_EchoPin, GPIO_INPUT_PD);
 800266c:	2200      	movs	r2, #0
 800266e:	210d      	movs	r1, #13
 8002670:	2002      	movs	r0, #2
 8002672:	f7fe fb33 	bl	8000cdc <GPIO_voidSetPinValue>
		break;
 8002676:	e01f      	b.n	80026b8 <HUltrasonic_voidInit+0xa8>
	case 3:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic3_TrigPort,Ultrasonic3_TrigPin,GPIO_OUTPUT_2M_PP);
 8002678:	2202      	movs	r2, #2
 800267a:	210e      	movs	r1, #14
 800267c:	2002      	movs	r0, #2
 800267e:	f7fe f98d 	bl	800099c <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic3_TrigPort, Ultrasonic3_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic3_EchoPort,Ultrasonic3_EchoPin,GPIO_INPUT_PU_PD);
 8002682:	2208      	movs	r2, #8
 8002684:	210f      	movs	r1, #15
 8002686:	2002      	movs	r0, #2
 8002688:	f7fe f988 	bl	800099c <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic3_EchoPort, Ultrasonic3_EchoPin, GPIO_INPUT_PD);
 800268c:	2200      	movs	r2, #0
 800268e:	210f      	movs	r1, #15
 8002690:	2002      	movs	r0, #2
 8002692:	f7fe fb23 	bl	8000cdc <GPIO_voidSetPinValue>
		break;
 8002696:	e00f      	b.n	80026b8 <HUltrasonic_voidInit+0xa8>
	case 4:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic4_TrigPort,Ultrasonic4_TrigPin,GPIO_OUTPUT_2M_PP);
 8002698:	2202      	movs	r2, #2
 800269a:	2107      	movs	r1, #7
 800269c:	2001      	movs	r0, #1
 800269e:	f7fe f97d 	bl	800099c <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic3_TrigPort, Ultrasonic3_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic4_EchoPort,Ultrasonic4_EchoPin,GPIO_INPUT_PU_PD);
 80026a2:	2208      	movs	r2, #8
 80026a4:	2108      	movs	r1, #8
 80026a6:	2001      	movs	r0, #1
 80026a8:	f7fe f978 	bl	800099c <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic4_EchoPort, Ultrasonic4_EchoPin, GPIO_INPUT_PD);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2108      	movs	r1, #8
 80026b0:	2001      	movs	r0, #1
 80026b2:	f7fe fb13 	bl	8000cdc <GPIO_voidSetPinValue>
		break;
 80026b6:	bf00      	nop
	}
	/*initialize systick timer*/
	MSTK_voidInit() ;
 80026b8:	f7fe fda0 	bl	80011fc <MSTK_voidInit>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <init_conf>:




void init_conf()
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 80026c8:	f7fe fcde 	bl	8001088 <RCC_voidInitSysClock>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOA);
 80026cc:	2102      	movs	r1, #2
 80026ce:	2002      	movs	r0, #2
 80026d0:	f7fe fd0c 	bl	80010ec <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOB);
 80026d4:	2103      	movs	r1, #3
 80026d6:	2002      	movs	r0, #2
 80026d8:	f7fe fd08 	bl	80010ec <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOC);
 80026dc:	2104      	movs	r1, #4
 80026de:	2002      	movs	r0, #2
 80026e0:	f7fe fd04 	bl	80010ec <RCC_voidEnablePeripheral>
//	RCC_voidEnablePeripheral(RCC_APB2,TIM1);
	RCC_voidEnablePeripheral(RCC_APB1,TIM2);
 80026e4:	2100      	movs	r1, #0
 80026e6:	2001      	movs	r0, #1
 80026e8:	f7fe fd00 	bl	80010ec <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB1,TIM3);
 80026ec:	2101      	movs	r1, #1
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7fe fcfc 	bl	80010ec <RCC_voidEnablePeripheral>
//	RCC_voidEnablePeripheral(RCC_APB2,USART1);
	MSTK_voidInit();
 80026f4:	f7fe fd82 	bl	80011fc <MSTK_voidInit>
	MOTOR_init(MOTOR_1);
 80026f8:	2001      	movs	r0, #1
 80026fa:	f7fe fc3b 	bl	8000f74 <MOTOR_init>
	MOTOR_init(MOTOR_2);
 80026fe:	2002      	movs	r0, #2
 8002700:	f7fe fc38 	bl	8000f74 <MOTOR_init>

	HUltrasonic_voidInit(ULTR_1);
 8002704:	2001      	movs	r0, #1
 8002706:	f7ff ff83 	bl	8002610 <HUltrasonic_voidInit>
//	MUART_voidInit(&MUART_Init,&MUART_clock,UART1);
//	MUART1_voidSetCallBack(&MUART_Buffer_Write);
//	MUART_voidEnable(UART1);
//	MUART_u8ReceiveByteASynch(UART1);

}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}

0800270e <main>:


int main()
{
 800270e:	b580      	push	{r7, lr}
 8002710:	af00      	add	r7, sp, #0
	//RCC_voidInitSysClock();
	//RCC_voidEnablePeripheral(RCC_APB2,GPIOA);
	//MSTK_voidInit();
	//GPIO_voidSetPinMode(GPIO_PORTA,7,GPIO_OUTPUT_2M_PP);
	init_conf();
 8002712:	f7ff ffd7 	bl	80026c4 <init_conf>

	while(1)
	{
		//x=MUART_u8ReceiveByteSynchNonBlocking(UART1);
		//MUART_ReadData(&APP_G_u8DataFromUART);
		if(HUltrasonic_f32CalcDistance(1) > 10)
 8002716:	2001      	movs	r0, #1
 8002718:	f7ff fe5e 	bl	80023d8 <HUltrasonic_f32CalcDistance>
 800271c:	4603      	mov	r3, r0
 800271e:	2b0a      	cmp	r3, #10
 8002720:	d90a      	bls.n	8002738 <main+0x2a>
		{
			MOTOR_ClockWise(MOTOR_1, 0xff00);
 8002722:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8002726:	2001      	movs	r0, #1
 8002728:	f7fe fc52 	bl	8000fd0 <MOTOR_ClockWise>
			MOTOR_ClockWise(MOTOR_2, 0xff00);
 800272c:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8002730:	2002      	movs	r0, #2
 8002732:	f7fe fc4d 	bl	8000fd0 <MOTOR_ClockWise>
 8002736:	e7ee      	b.n	8002716 <main+0x8>
		}
		else
		{
			MOTOR_Stop(1);
 8002738:	2001      	movs	r0, #1
 800273a:	f7fe fc83 	bl	8001044 <MOTOR_Stop>
			MOTOR_Stop(2);
 800273e:	2002      	movs	r0, #2
 8002740:	f7fe fc80 	bl	8001044 <MOTOR_Stop>
		if(HUltrasonic_f32CalcDistance(1) > 10)
 8002744:	e7e7      	b.n	8002716 <main+0x8>

08002746 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002756:	bf00      	nop
 8002758:	e7fd      	b.n	8002756 <HardFault_Handler+0x4>

0800275a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800275e:	bf00      	nop
 8002760:	e7fd      	b.n	800275e <MemManage_Handler+0x4>

08002762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002766:	bf00      	nop
 8002768:	e7fd      	b.n	8002766 <BusFault_Handler+0x4>

0800276a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800276e:	bf00      	nop
 8002770:	e7fd      	b.n	800276e <UsageFault_Handler+0x4>

08002772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800279a:	bf00      	nop
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
	...

080027a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027a4:	480c      	ldr	r0, [pc, #48]	@ (80027d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027a6:	490d      	ldr	r1, [pc, #52]	@ (80027dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027a8:	4a0d      	ldr	r2, [pc, #52]	@ (80027e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027ac:	e002      	b.n	80027b4 <LoopCopyDataInit>

080027ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027b2:	3304      	adds	r3, #4

080027b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b8:	d3f9      	bcc.n	80027ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ba:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027bc:	4c0a      	ldr	r4, [pc, #40]	@ (80027e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c0:	e001      	b.n	80027c6 <LoopFillZerobss>

080027c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c4:	3204      	adds	r2, #4

080027c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c8:	d3fb      	bcc.n	80027c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027ca:	f7ff ffe4 	bl	8002796 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ce:	f000 f80f 	bl	80027f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027d2:	f7ff ff9c 	bl	800270e <main>
  bx lr
 80027d6:	4770      	bx	lr
  ldr r0, =_sdata
 80027d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027dc:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80027e0:	08002858 	.word	0x08002858
  ldr r2, =_sbss
 80027e4:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80027e8:	20000108 	.word	0x20000108

080027ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027ec:	e7fe      	b.n	80027ec <ADC1_2_IRQHandler>
	...

080027f0 <__libc_init_array>:
 80027f0:	b570      	push	{r4, r5, r6, lr}
 80027f2:	2600      	movs	r6, #0
 80027f4:	4d0c      	ldr	r5, [pc, #48]	@ (8002828 <__libc_init_array+0x38>)
 80027f6:	4c0d      	ldr	r4, [pc, #52]	@ (800282c <__libc_init_array+0x3c>)
 80027f8:	1b64      	subs	r4, r4, r5
 80027fa:	10a4      	asrs	r4, r4, #2
 80027fc:	42a6      	cmp	r6, r4
 80027fe:	d109      	bne.n	8002814 <__libc_init_array+0x24>
 8002800:	f000 f81a 	bl	8002838 <_init>
 8002804:	2600      	movs	r6, #0
 8002806:	4d0a      	ldr	r5, [pc, #40]	@ (8002830 <__libc_init_array+0x40>)
 8002808:	4c0a      	ldr	r4, [pc, #40]	@ (8002834 <__libc_init_array+0x44>)
 800280a:	1b64      	subs	r4, r4, r5
 800280c:	10a4      	asrs	r4, r4, #2
 800280e:	42a6      	cmp	r6, r4
 8002810:	d105      	bne.n	800281e <__libc_init_array+0x2e>
 8002812:	bd70      	pop	{r4, r5, r6, pc}
 8002814:	f855 3b04 	ldr.w	r3, [r5], #4
 8002818:	4798      	blx	r3
 800281a:	3601      	adds	r6, #1
 800281c:	e7ee      	b.n	80027fc <__libc_init_array+0xc>
 800281e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002822:	4798      	blx	r3
 8002824:	3601      	adds	r6, #1
 8002826:	e7f2      	b.n	800280e <__libc_init_array+0x1e>
 8002828:	08002850 	.word	0x08002850
 800282c:	08002850 	.word	0x08002850
 8002830:	08002850 	.word	0x08002850
 8002834:	08002854 	.word	0x08002854

08002838 <_init>:
 8002838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283a:	bf00      	nop
 800283c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283e:	bc08      	pop	{r3}
 8002840:	469e      	mov	lr, r3
 8002842:	4770      	bx	lr

08002844 <_fini>:
 8002844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002846:	bf00      	nop
 8002848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284a:	bc08      	pop	{r3}
 800284c:	469e      	mov	lr, r3
 800284e:	4770      	bx	lr
