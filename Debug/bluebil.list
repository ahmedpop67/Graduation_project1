
bluebil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000910  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a1c  08000a1c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a1c  08000a1c  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08000a1c  08000a1c  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a1c  08000a1c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a1c  08000a1c  00010a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a20  08000a20  00010a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08000a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  200000cc  08000af0  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000af0  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c71  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b12  00000000  00000000  00021d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000398  00000000  00000000  00022878  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000300  00000000  00000000  00022c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000012a3  00000000  00000000  00022f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001e80  00000000  00000000  000241b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000806d1  00000000  00000000  00026033  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a6704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c28  00000000  00000000  000a6780  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08000a04 	.word	0x08000a04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	08000a04 	.word	0x08000a04

0800014c <EXTI0_IRQHandler>:
	EXTI0_CallBack = ptr ;
	
}	

void EXTI0_IRQHandler(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 8000150:	4b05      	ldr	r3, [pc, #20]	; (8000168 <EXTI0_IRQHandler+0x1c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4798      	blx	r3
	/*	Clear pending Bit For EXTI0		*/
	SET_BIT(EXTI -> PR , 0);	
 8000156:	4b05      	ldr	r3, [pc, #20]	; (800016c <EXTI0_IRQHandler+0x20>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a04      	ldr	r2, [pc, #16]	; (800016c <EXTI0_IRQHandler+0x20>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
}	
 8000162:	bf00      	nop
 8000164:	bd80      	pop	{r7, pc}
 8000166:	bf00      	nop
 8000168:	200000e8 	.word	0x200000e8
 800016c:	40010400 	.word	0x40010400

08000170 <GPIO_voidSetPinMode>:
					
}
void  GPIO_VoidDeInit();

u8 GPIO_voidSetPinMode(u8 copy_u8portID,u8 copy_u8PinID,u8 copy_u8Mode)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
	u8 lacal_u8ErrorState = STD_TYPE_OK;
 8000182:	2301      	movs	r3, #1
 8000184:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15 && copy_u8Mode <= GPIO_OUTPUT_50M_AF_OD)
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b07      	cmp	r3, #7
 800018a:	f200 817a 	bhi.w	8000482 <GPIO_voidSetPinMode+0x312>
 800018e:	79bb      	ldrb	r3, [r7, #6]
 8000190:	2b0f      	cmp	r3, #15
 8000192:	f200 8176 	bhi.w	8000482 <GPIO_voidSetPinMode+0x312>
 8000196:	797b      	ldrb	r3, [r7, #5]
 8000198:	2b0f      	cmp	r3, #15
 800019a:	f200 8172 	bhi.w	8000482 <GPIO_voidSetPinMode+0x312>
	{
		switch(copy_u8portID)
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	3b01      	subs	r3, #1
 80001a2:	2b06      	cmp	r3, #6
 80001a4:	f200 8170 	bhi.w	8000488 <GPIO_voidSetPinMode+0x318>
 80001a8:	a201      	add	r2, pc, #4	; (adr r2, 80001b0 <GPIO_voidSetPinMode+0x40>)
 80001aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ae:	bf00      	nop
 80001b0:	080001cd 	.word	0x080001cd
 80001b4:	0800022d 	.word	0x0800022d
 80001b8:	0800028d 	.word	0x0800028d
 80001bc:	080002ed 	.word	0x080002ed
 80001c0:	0800034d 	.word	0x0800034d
 80001c4:	080003ab 	.word	0x080003ab
 80001c8:	08000409 	.word	0x08000409
		{
			case GPIO_PORTA: 
				if(copy_u8PinID<=7)
 80001cc:	79bb      	ldrb	r3, [r7, #6]
 80001ce:	2b07      	cmp	r3, #7
 80001d0:	d812      	bhi.n	80001f8 <GPIO_voidSetPinMode+0x88>
				{
					SET_4BIT_Val(GPIOA->CRL,copy_u8PinID*4,copy_u8Mode);
 80001d2:	4bb1      	ldr	r3, [pc, #708]	; (8000498 <GPIO_voidSetPinMode+0x328>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	79ba      	ldrb	r2, [r7, #6]
 80001d8:	0092      	lsls	r2, r2, #2
 80001da:	210f      	movs	r1, #15
 80001dc:	fa01 f202 	lsl.w	r2, r1, r2
 80001e0:	43d2      	mvns	r2, r2
 80001e2:	4013      	ands	r3, r2
 80001e4:	7979      	ldrb	r1, [r7, #5]
 80001e6:	79ba      	ldrb	r2, [r7, #6]
 80001e8:	0092      	lsls	r2, r2, #2
 80001ea:	fa01 f202 	lsl.w	r2, r1, r2
 80001ee:	4611      	mov	r1, r2
 80001f0:	4aa9      	ldr	r2, [pc, #676]	; (8000498 <GPIO_voidSetPinMode+0x328>)
 80001f2:	430b      	orrs	r3, r1
 80001f4:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOA->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 80001f6:	e136      	b.n	8000466 <GPIO_voidSetPinMode+0x2f6>
				else if(copy_u8PinID <=15)
 80001f8:	79bb      	ldrb	r3, [r7, #6]
 80001fa:	2b0f      	cmp	r3, #15
 80001fc:	f200 8133 	bhi.w	8000466 <GPIO_voidSetPinMode+0x2f6>
					copy_u8PinID-=8;
 8000200:	79bb      	ldrb	r3, [r7, #6]
 8000202:	3b08      	subs	r3, #8
 8000204:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOA->CRH,copy_u8PinID*4,copy_u8Mode);
 8000206:	4ba4      	ldr	r3, [pc, #656]	; (8000498 <GPIO_voidSetPinMode+0x328>)
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	79ba      	ldrb	r2, [r7, #6]
 800020c:	0092      	lsls	r2, r2, #2
 800020e:	210f      	movs	r1, #15
 8000210:	fa01 f202 	lsl.w	r2, r1, r2
 8000214:	43d2      	mvns	r2, r2
 8000216:	4013      	ands	r3, r2
 8000218:	7979      	ldrb	r1, [r7, #5]
 800021a:	79ba      	ldrb	r2, [r7, #6]
 800021c:	0092      	lsls	r2, r2, #2
 800021e:	fa01 f202 	lsl.w	r2, r1, r2
 8000222:	4611      	mov	r1, r2
 8000224:	4a9c      	ldr	r2, [pc, #624]	; (8000498 <GPIO_voidSetPinMode+0x328>)
 8000226:	430b      	orrs	r3, r1
 8000228:	6053      	str	r3, [r2, #4]
				break;
 800022a:	e11c      	b.n	8000466 <GPIO_voidSetPinMode+0x2f6>
			case GPIO_PORTB: 
				if(copy_u8PinID<=7)
 800022c:	79bb      	ldrb	r3, [r7, #6]
 800022e:	2b07      	cmp	r3, #7
 8000230:	d812      	bhi.n	8000258 <GPIO_voidSetPinMode+0xe8>
				{
					SET_4BIT_Val(GPIOB->CRL,copy_u8PinID*4,copy_u8Mode);
 8000232:	4b9a      	ldr	r3, [pc, #616]	; (800049c <GPIO_voidSetPinMode+0x32c>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	79ba      	ldrb	r2, [r7, #6]
 8000238:	0092      	lsls	r2, r2, #2
 800023a:	210f      	movs	r1, #15
 800023c:	fa01 f202 	lsl.w	r2, r1, r2
 8000240:	43d2      	mvns	r2, r2
 8000242:	4013      	ands	r3, r2
 8000244:	7979      	ldrb	r1, [r7, #5]
 8000246:	79ba      	ldrb	r2, [r7, #6]
 8000248:	0092      	lsls	r2, r2, #2
 800024a:	fa01 f202 	lsl.w	r2, r1, r2
 800024e:	4611      	mov	r1, r2
 8000250:	4a92      	ldr	r2, [pc, #584]	; (800049c <GPIO_voidSetPinMode+0x32c>)
 8000252:	430b      	orrs	r3, r1
 8000254:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOB->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000256:	e108      	b.n	800046a <GPIO_voidSetPinMode+0x2fa>
				else if(copy_u8PinID <=15)
 8000258:	79bb      	ldrb	r3, [r7, #6]
 800025a:	2b0f      	cmp	r3, #15
 800025c:	f200 8105 	bhi.w	800046a <GPIO_voidSetPinMode+0x2fa>
					copy_u8PinID-=8;
 8000260:	79bb      	ldrb	r3, [r7, #6]
 8000262:	3b08      	subs	r3, #8
 8000264:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOB->CRH,copy_u8PinID*4,copy_u8Mode);
 8000266:	4b8d      	ldr	r3, [pc, #564]	; (800049c <GPIO_voidSetPinMode+0x32c>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	79ba      	ldrb	r2, [r7, #6]
 800026c:	0092      	lsls	r2, r2, #2
 800026e:	210f      	movs	r1, #15
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	43d2      	mvns	r2, r2
 8000276:	4013      	ands	r3, r2
 8000278:	7979      	ldrb	r1, [r7, #5]
 800027a:	79ba      	ldrb	r2, [r7, #6]
 800027c:	0092      	lsls	r2, r2, #2
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	4611      	mov	r1, r2
 8000284:	4a85      	ldr	r2, [pc, #532]	; (800049c <GPIO_voidSetPinMode+0x32c>)
 8000286:	430b      	orrs	r3, r1
 8000288:	6053      	str	r3, [r2, #4]
				break;
 800028a:	e0ee      	b.n	800046a <GPIO_voidSetPinMode+0x2fa>
			case GPIO_PORTC: 
				if(copy_u8PinID<=7)
 800028c:	79bb      	ldrb	r3, [r7, #6]
 800028e:	2b07      	cmp	r3, #7
 8000290:	d812      	bhi.n	80002b8 <GPIO_voidSetPinMode+0x148>
				{
					SET_4BIT_Val(GPIOC->CRL,copy_u8PinID*4,copy_u8Mode);
 8000292:	4b83      	ldr	r3, [pc, #524]	; (80004a0 <GPIO_voidSetPinMode+0x330>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79ba      	ldrb	r2, [r7, #6]
 8000298:	0092      	lsls	r2, r2, #2
 800029a:	210f      	movs	r1, #15
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	43d2      	mvns	r2, r2
 80002a2:	4013      	ands	r3, r2
 80002a4:	7979      	ldrb	r1, [r7, #5]
 80002a6:	79ba      	ldrb	r2, [r7, #6]
 80002a8:	0092      	lsls	r2, r2, #2
 80002aa:	fa01 f202 	lsl.w	r2, r1, r2
 80002ae:	4611      	mov	r1, r2
 80002b0:	4a7b      	ldr	r2, [pc, #492]	; (80004a0 <GPIO_voidSetPinMode+0x330>)
 80002b2:	430b      	orrs	r3, r1
 80002b4:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOC->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 80002b6:	e0da      	b.n	800046e <GPIO_voidSetPinMode+0x2fe>
				else if(copy_u8PinID <=15)
 80002b8:	79bb      	ldrb	r3, [r7, #6]
 80002ba:	2b0f      	cmp	r3, #15
 80002bc:	f200 80d7 	bhi.w	800046e <GPIO_voidSetPinMode+0x2fe>
					copy_u8PinID-=8;
 80002c0:	79bb      	ldrb	r3, [r7, #6]
 80002c2:	3b08      	subs	r3, #8
 80002c4:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOC->CRH,copy_u8PinID*4,copy_u8Mode);
 80002c6:	4b76      	ldr	r3, [pc, #472]	; (80004a0 <GPIO_voidSetPinMode+0x330>)
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	79ba      	ldrb	r2, [r7, #6]
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	210f      	movs	r1, #15
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	43d2      	mvns	r2, r2
 80002d6:	4013      	ands	r3, r2
 80002d8:	7979      	ldrb	r1, [r7, #5]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	0092      	lsls	r2, r2, #2
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	4611      	mov	r1, r2
 80002e4:	4a6e      	ldr	r2, [pc, #440]	; (80004a0 <GPIO_voidSetPinMode+0x330>)
 80002e6:	430b      	orrs	r3, r1
 80002e8:	6053      	str	r3, [r2, #4]
				break;
 80002ea:	e0c0      	b.n	800046e <GPIO_voidSetPinMode+0x2fe>
			case GPIO_PORTD: 
				if(copy_u8PinID<=7)
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	2b07      	cmp	r3, #7
 80002f0:	d812      	bhi.n	8000318 <GPIO_voidSetPinMode+0x1a8>
				{
					SET_4BIT_Val(GPIOD->CRL,copy_u8PinID*4,copy_u8Mode);
 80002f2:	4b6c      	ldr	r3, [pc, #432]	; (80004a4 <GPIO_voidSetPinMode+0x334>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	210f      	movs	r1, #15
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	43d2      	mvns	r2, r2
 8000302:	4013      	ands	r3, r2
 8000304:	7979      	ldrb	r1, [r7, #5]
 8000306:	79ba      	ldrb	r2, [r7, #6]
 8000308:	0092      	lsls	r2, r2, #2
 800030a:	fa01 f202 	lsl.w	r2, r1, r2
 800030e:	4611      	mov	r1, r2
 8000310:	4a64      	ldr	r2, [pc, #400]	; (80004a4 <GPIO_voidSetPinMode+0x334>)
 8000312:	430b      	orrs	r3, r1
 8000314:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOD->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000316:	e0ac      	b.n	8000472 <GPIO_voidSetPinMode+0x302>
				else if(copy_u8PinID <=15)
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	2b0f      	cmp	r3, #15
 800031c:	f200 80a9 	bhi.w	8000472 <GPIO_voidSetPinMode+0x302>
					copy_u8PinID-=8;
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	3b08      	subs	r3, #8
 8000324:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOD->CRH,copy_u8PinID*4,copy_u8Mode);
 8000326:	4b5f      	ldr	r3, [pc, #380]	; (80004a4 <GPIO_voidSetPinMode+0x334>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	79ba      	ldrb	r2, [r7, #6]
 800032c:	0092      	lsls	r2, r2, #2
 800032e:	210f      	movs	r1, #15
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	43d2      	mvns	r2, r2
 8000336:	4013      	ands	r3, r2
 8000338:	7979      	ldrb	r1, [r7, #5]
 800033a:	79ba      	ldrb	r2, [r7, #6]
 800033c:	0092      	lsls	r2, r2, #2
 800033e:	fa01 f202 	lsl.w	r2, r1, r2
 8000342:	4611      	mov	r1, r2
 8000344:	4a57      	ldr	r2, [pc, #348]	; (80004a4 <GPIO_voidSetPinMode+0x334>)
 8000346:	430b      	orrs	r3, r1
 8000348:	6053      	str	r3, [r2, #4]
				break;
 800034a:	e092      	b.n	8000472 <GPIO_voidSetPinMode+0x302>
			case GPIO_PORTE: 
				if(copy_u8PinID<=7)
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	2b07      	cmp	r3, #7
 8000350:	d812      	bhi.n	8000378 <GPIO_voidSetPinMode+0x208>
				{
					SET_4BIT_Val(GPIOE->CRL,copy_u8PinID*4,copy_u8Mode);
 8000352:	4b55      	ldr	r3, [pc, #340]	; (80004a8 <GPIO_voidSetPinMode+0x338>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	79ba      	ldrb	r2, [r7, #6]
 8000358:	0092      	lsls	r2, r2, #2
 800035a:	210f      	movs	r1, #15
 800035c:	fa01 f202 	lsl.w	r2, r1, r2
 8000360:	43d2      	mvns	r2, r2
 8000362:	4013      	ands	r3, r2
 8000364:	7979      	ldrb	r1, [r7, #5]
 8000366:	79ba      	ldrb	r2, [r7, #6]
 8000368:	0092      	lsls	r2, r2, #2
 800036a:	fa01 f202 	lsl.w	r2, r1, r2
 800036e:	4611      	mov	r1, r2
 8000370:	4a4d      	ldr	r2, [pc, #308]	; (80004a8 <GPIO_voidSetPinMode+0x338>)
 8000372:	430b      	orrs	r3, r1
 8000374:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOE->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000376:	e07e      	b.n	8000476 <GPIO_voidSetPinMode+0x306>
				else if(copy_u8PinID <=15)
 8000378:	79bb      	ldrb	r3, [r7, #6]
 800037a:	2b0f      	cmp	r3, #15
 800037c:	d87b      	bhi.n	8000476 <GPIO_voidSetPinMode+0x306>
					copy_u8PinID-=8;
 800037e:	79bb      	ldrb	r3, [r7, #6]
 8000380:	3b08      	subs	r3, #8
 8000382:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOE->CRH,copy_u8PinID*4,copy_u8Mode);
 8000384:	4b48      	ldr	r3, [pc, #288]	; (80004a8 <GPIO_voidSetPinMode+0x338>)
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	79ba      	ldrb	r2, [r7, #6]
 800038a:	0092      	lsls	r2, r2, #2
 800038c:	210f      	movs	r1, #15
 800038e:	fa01 f202 	lsl.w	r2, r1, r2
 8000392:	43d2      	mvns	r2, r2
 8000394:	4013      	ands	r3, r2
 8000396:	7979      	ldrb	r1, [r7, #5]
 8000398:	79ba      	ldrb	r2, [r7, #6]
 800039a:	0092      	lsls	r2, r2, #2
 800039c:	fa01 f202 	lsl.w	r2, r1, r2
 80003a0:	4611      	mov	r1, r2
 80003a2:	4a41      	ldr	r2, [pc, #260]	; (80004a8 <GPIO_voidSetPinMode+0x338>)
 80003a4:	430b      	orrs	r3, r1
 80003a6:	6053      	str	r3, [r2, #4]
				break;
 80003a8:	e065      	b.n	8000476 <GPIO_voidSetPinMode+0x306>
		    case GPIO_PORTF: 
				if(copy_u8PinID<=7)
 80003aa:	79bb      	ldrb	r3, [r7, #6]
 80003ac:	2b07      	cmp	r3, #7
 80003ae:	d812      	bhi.n	80003d6 <GPIO_voidSetPinMode+0x266>
				{
					SET_4BIT_Val(GPIOF->CRL,copy_u8PinID*4,copy_u8Mode);
 80003b0:	4b3e      	ldr	r3, [pc, #248]	; (80004ac <GPIO_voidSetPinMode+0x33c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	79ba      	ldrb	r2, [r7, #6]
 80003b6:	0092      	lsls	r2, r2, #2
 80003b8:	210f      	movs	r1, #15
 80003ba:	fa01 f202 	lsl.w	r2, r1, r2
 80003be:	43d2      	mvns	r2, r2
 80003c0:	4013      	ands	r3, r2
 80003c2:	7979      	ldrb	r1, [r7, #5]
 80003c4:	79ba      	ldrb	r2, [r7, #6]
 80003c6:	0092      	lsls	r2, r2, #2
 80003c8:	fa01 f202 	lsl.w	r2, r1, r2
 80003cc:	4611      	mov	r1, r2
 80003ce:	4a37      	ldr	r2, [pc, #220]	; (80004ac <GPIO_voidSetPinMode+0x33c>)
 80003d0:	430b      	orrs	r3, r1
 80003d2:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOF->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 80003d4:	e051      	b.n	800047a <GPIO_voidSetPinMode+0x30a>
				else if(copy_u8PinID <=15)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	2b0f      	cmp	r3, #15
 80003da:	d84e      	bhi.n	800047a <GPIO_voidSetPinMode+0x30a>
					copy_u8PinID-=8;
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	3b08      	subs	r3, #8
 80003e0:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOF->CRH,copy_u8PinID*4,copy_u8Mode);
 80003e2:	4b32      	ldr	r3, [pc, #200]	; (80004ac <GPIO_voidSetPinMode+0x33c>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	0092      	lsls	r2, r2, #2
 80003ea:	210f      	movs	r1, #15
 80003ec:	fa01 f202 	lsl.w	r2, r1, r2
 80003f0:	43d2      	mvns	r2, r2
 80003f2:	4013      	ands	r3, r2
 80003f4:	7979      	ldrb	r1, [r7, #5]
 80003f6:	79ba      	ldrb	r2, [r7, #6]
 80003f8:	0092      	lsls	r2, r2, #2
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	4611      	mov	r1, r2
 8000400:	4a2a      	ldr	r2, [pc, #168]	; (80004ac <GPIO_voidSetPinMode+0x33c>)
 8000402:	430b      	orrs	r3, r1
 8000404:	6053      	str	r3, [r2, #4]
				break;
 8000406:	e038      	b.n	800047a <GPIO_voidSetPinMode+0x30a>
			case GPIO_PORTG: 
				if(copy_u8PinID<=7)
 8000408:	79bb      	ldrb	r3, [r7, #6]
 800040a:	2b07      	cmp	r3, #7
 800040c:	d812      	bhi.n	8000434 <GPIO_voidSetPinMode+0x2c4>
				{
					SET_4BIT_Val(GPIOG->CRL,copy_u8PinID*4,copy_u8Mode);
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <GPIO_voidSetPinMode+0x340>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	79ba      	ldrb	r2, [r7, #6]
 8000414:	0092      	lsls	r2, r2, #2
 8000416:	210f      	movs	r1, #15
 8000418:	fa01 f202 	lsl.w	r2, r1, r2
 800041c:	43d2      	mvns	r2, r2
 800041e:	4013      	ands	r3, r2
 8000420:	7979      	ldrb	r1, [r7, #5]
 8000422:	79ba      	ldrb	r2, [r7, #6]
 8000424:	0092      	lsls	r2, r2, #2
 8000426:	fa01 f202 	lsl.w	r2, r1, r2
 800042a:	4611      	mov	r1, r2
 800042c:	4a20      	ldr	r2, [pc, #128]	; (80004b0 <GPIO_voidSetPinMode+0x340>)
 800042e:	430b      	orrs	r3, r1
 8000430:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOG->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000432:	e024      	b.n	800047e <GPIO_voidSetPinMode+0x30e>
				else if(copy_u8PinID <=15)
 8000434:	79bb      	ldrb	r3, [r7, #6]
 8000436:	2b0f      	cmp	r3, #15
 8000438:	d821      	bhi.n	800047e <GPIO_voidSetPinMode+0x30e>
					copy_u8PinID-=8;
 800043a:	79bb      	ldrb	r3, [r7, #6]
 800043c:	3b08      	subs	r3, #8
 800043e:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOG->CRH,copy_u8PinID*4,copy_u8Mode);
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <GPIO_voidSetPinMode+0x340>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	79ba      	ldrb	r2, [r7, #6]
 8000446:	0092      	lsls	r2, r2, #2
 8000448:	210f      	movs	r1, #15
 800044a:	fa01 f202 	lsl.w	r2, r1, r2
 800044e:	43d2      	mvns	r2, r2
 8000450:	4013      	ands	r3, r2
 8000452:	7979      	ldrb	r1, [r7, #5]
 8000454:	79ba      	ldrb	r2, [r7, #6]
 8000456:	0092      	lsls	r2, r2, #2
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	4611      	mov	r1, r2
 800045e:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <GPIO_voidSetPinMode+0x340>)
 8000460:	430b      	orrs	r3, r1
 8000462:	6053      	str	r3, [r2, #4]
				break;
 8000464:	e00b      	b.n	800047e <GPIO_voidSetPinMode+0x30e>
				break;
 8000466:	bf00      	nop
 8000468:	e00e      	b.n	8000488 <GPIO_voidSetPinMode+0x318>
				break;
 800046a:	bf00      	nop
 800046c:	e00c      	b.n	8000488 <GPIO_voidSetPinMode+0x318>
				break;
 800046e:	bf00      	nop
 8000470:	e00a      	b.n	8000488 <GPIO_voidSetPinMode+0x318>
				break;
 8000472:	bf00      	nop
 8000474:	e008      	b.n	8000488 <GPIO_voidSetPinMode+0x318>
				break;
 8000476:	bf00      	nop
 8000478:	e006      	b.n	8000488 <GPIO_voidSetPinMode+0x318>
				break;
 800047a:	bf00      	nop
 800047c:	e004      	b.n	8000488 <GPIO_voidSetPinMode+0x318>
				break;
 800047e:	bf00      	nop
		}
	}
 8000480:	e002      	b.n	8000488 <GPIO_voidSetPinMode+0x318>
	else 
		lacal_u8ErrorState = STD_TYPE_NOK;
 8000482:	2300      	movs	r3, #0
 8000484:	73fb      	strb	r3, [r7, #15]
 8000486:	e000      	b.n	800048a <GPIO_voidSetPinMode+0x31a>
	}
 8000488:	bf00      	nop
	return lacal_u8ErrorState;
 800048a:	7bfb      	ldrb	r3, [r7, #15]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40010800 	.word	0x40010800
 800049c:	40010c00 	.word	0x40010c00
 80004a0:	40011000 	.word	0x40011000
 80004a4:	40011400 	.word	0x40011400
 80004a8:	40011800 	.word	0x40011800
 80004ac:	40011c00 	.word	0x40011c00
 80004b0:	40012000 	.word	0x40012000

080004b4 <GPIO_voidSetPinValue>:


u8 GPIO_voidSetPinValue(u8 copy_u8portID,u8 copy_u8PinID,u8 copy_u8PinValue)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
 80004be:	460b      	mov	r3, r1
 80004c0:	71bb      	strb	r3, [r7, #6]
 80004c2:	4613      	mov	r3, r2
 80004c4:	717b      	strb	r3, [r7, #5]
	u8 lacal_u8ErrorState = STD_TYPE_OK;
 80004c6:	2301      	movs	r3, #1
 80004c8:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15 && (copy_u8PinValue == 1 || copy_u8PinValue ==0 ))
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b07      	cmp	r3, #7
 80004ce:	f200 80a7 	bhi.w	8000620 <GPIO_voidSetPinValue+0x16c>
 80004d2:	79bb      	ldrb	r3, [r7, #6]
 80004d4:	2b0f      	cmp	r3, #15
 80004d6:	f200 80a3 	bhi.w	8000620 <GPIO_voidSetPinValue+0x16c>
 80004da:	797b      	ldrb	r3, [r7, #5]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d003      	beq.n	80004e8 <GPIO_voidSetPinValue+0x34>
 80004e0:	797b      	ldrb	r3, [r7, #5]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	f040 809c 	bne.w	8000620 <GPIO_voidSetPinValue+0x16c>
	{
		switch(copy_u8portID)
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	2b06      	cmp	r3, #6
 80004ee:	f200 809a 	bhi.w	8000626 <GPIO_voidSetPinValue+0x172>
 80004f2:	a201      	add	r2, pc, #4	; (adr r2, 80004f8 <GPIO_voidSetPinValue+0x44>)
 80004f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f8:	08000515 	.word	0x08000515
 80004fc:	0800053b 	.word	0x0800053b
 8000500:	08000561 	.word	0x08000561
 8000504:	08000587 	.word	0x08000587
 8000508:	080005ad 	.word	0x080005ad
 800050c:	080005d3 	.word	0x080005d3
 8000510:	080005f9 	.word	0x080005f9
		{
			case GPIO_PORTA:
				switch(copy_u8PinValue){
 8000514:	797b      	ldrb	r3, [r7, #5]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d002      	beq.n	8000520 <GPIO_voidSetPinValue+0x6c>
 800051a:	2b01      	cmp	r3, #1
 800051c:	d006      	beq.n	800052c <GPIO_voidSetPinValue+0x78>
				case 0:WRITE_BIT(GPIOA->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOA->BSRR,copy_u8PinID);break;}
				break;
 800051e:	e07e      	b.n	800061e <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOA->BRR,copy_u8PinID);break;
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	2201      	movs	r2, #1
 8000524:	409a      	lsls	r2, r3
 8000526:	4b43      	ldr	r3, [pc, #268]	; (8000634 <GPIO_voidSetPinValue+0x180>)
 8000528:	615a      	str	r2, [r3, #20]
 800052a:	e005      	b.n	8000538 <GPIO_voidSetPinValue+0x84>
				case 1:WRITE_BIT(GPIOA->BSRR,copy_u8PinID);break;}
 800052c:	79bb      	ldrb	r3, [r7, #6]
 800052e:	2201      	movs	r2, #1
 8000530:	409a      	lsls	r2, r3
 8000532:	4b40      	ldr	r3, [pc, #256]	; (8000634 <GPIO_voidSetPinValue+0x180>)
 8000534:	611a      	str	r2, [r3, #16]
 8000536:	bf00      	nop
				break;
 8000538:	e071      	b.n	800061e <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTB:
				switch(copy_u8PinValue){
 800053a:	797b      	ldrb	r3, [r7, #5]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d002      	beq.n	8000546 <GPIO_voidSetPinValue+0x92>
 8000540:	2b01      	cmp	r3, #1
 8000542:	d006      	beq.n	8000552 <GPIO_voidSetPinValue+0x9e>
				case 0:WRITE_BIT(GPIOB->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOB->BSRR,copy_u8PinID);break;}
				break;
 8000544:	e06b      	b.n	800061e <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOB->BRR,copy_u8PinID);break;
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	2201      	movs	r2, #1
 800054a:	409a      	lsls	r2, r3
 800054c:	4b3a      	ldr	r3, [pc, #232]	; (8000638 <GPIO_voidSetPinValue+0x184>)
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	e005      	b.n	800055e <GPIO_voidSetPinValue+0xaa>
				case 1:WRITE_BIT(GPIOB->BSRR,copy_u8PinID);break;}
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	2201      	movs	r2, #1
 8000556:	409a      	lsls	r2, r3
 8000558:	4b37      	ldr	r3, [pc, #220]	; (8000638 <GPIO_voidSetPinValue+0x184>)
 800055a:	611a      	str	r2, [r3, #16]
 800055c:	bf00      	nop
				break;
 800055e:	e05e      	b.n	800061e <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTC:
				switch(copy_u8PinValue){
 8000560:	797b      	ldrb	r3, [r7, #5]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d002      	beq.n	800056c <GPIO_voidSetPinValue+0xb8>
 8000566:	2b01      	cmp	r3, #1
 8000568:	d006      	beq.n	8000578 <GPIO_voidSetPinValue+0xc4>
				case 0:WRITE_BIT(GPIOC->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOC->BSRR,copy_u8PinID);break;}
				break;
 800056a:	e058      	b.n	800061e <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOC->BRR,copy_u8PinID);break;
 800056c:	79bb      	ldrb	r3, [r7, #6]
 800056e:	2201      	movs	r2, #1
 8000570:	409a      	lsls	r2, r3
 8000572:	4b32      	ldr	r3, [pc, #200]	; (800063c <GPIO_voidSetPinValue+0x188>)
 8000574:	615a      	str	r2, [r3, #20]
 8000576:	e005      	b.n	8000584 <GPIO_voidSetPinValue+0xd0>
				case 1:WRITE_BIT(GPIOC->BSRR,copy_u8PinID);break;}
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	2201      	movs	r2, #1
 800057c:	409a      	lsls	r2, r3
 800057e:	4b2f      	ldr	r3, [pc, #188]	; (800063c <GPIO_voidSetPinValue+0x188>)
 8000580:	611a      	str	r2, [r3, #16]
 8000582:	bf00      	nop
				break;
 8000584:	e04b      	b.n	800061e <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTD:
				switch(copy_u8PinValue){
 8000586:	797b      	ldrb	r3, [r7, #5]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <GPIO_voidSetPinValue+0xde>
 800058c:	2b01      	cmp	r3, #1
 800058e:	d006      	beq.n	800059e <GPIO_voidSetPinValue+0xea>
				case 0:WRITE_BIT(GPIOD->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOD->BSRR,copy_u8PinID);break;}
				break;
 8000590:	e045      	b.n	800061e <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOD->BRR,copy_u8PinID);break;
 8000592:	79bb      	ldrb	r3, [r7, #6]
 8000594:	2201      	movs	r2, #1
 8000596:	409a      	lsls	r2, r3
 8000598:	4b29      	ldr	r3, [pc, #164]	; (8000640 <GPIO_voidSetPinValue+0x18c>)
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	e005      	b.n	80005aa <GPIO_voidSetPinValue+0xf6>
				case 1:WRITE_BIT(GPIOD->BSRR,copy_u8PinID);break;}
 800059e:	79bb      	ldrb	r3, [r7, #6]
 80005a0:	2201      	movs	r2, #1
 80005a2:	409a      	lsls	r2, r3
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <GPIO_voidSetPinValue+0x18c>)
 80005a6:	611a      	str	r2, [r3, #16]
 80005a8:	bf00      	nop
				break;
 80005aa:	e038      	b.n	800061e <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTE:
				switch(copy_u8PinValue){
 80005ac:	797b      	ldrb	r3, [r7, #5]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <GPIO_voidSetPinValue+0x104>
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d006      	beq.n	80005c4 <GPIO_voidSetPinValue+0x110>
				case 0:WRITE_BIT(GPIOE->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOE->BSRR,copy_u8PinID);break;}
				break;
 80005b6:	e032      	b.n	800061e <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOE->BRR,copy_u8PinID);break;
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	2201      	movs	r2, #1
 80005bc:	409a      	lsls	r2, r3
 80005be:	4b21      	ldr	r3, [pc, #132]	; (8000644 <GPIO_voidSetPinValue+0x190>)
 80005c0:	615a      	str	r2, [r3, #20]
 80005c2:	e005      	b.n	80005d0 <GPIO_voidSetPinValue+0x11c>
				case 1:WRITE_BIT(GPIOE->BSRR,copy_u8PinID);break;}
 80005c4:	79bb      	ldrb	r3, [r7, #6]
 80005c6:	2201      	movs	r2, #1
 80005c8:	409a      	lsls	r2, r3
 80005ca:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <GPIO_voidSetPinValue+0x190>)
 80005cc:	611a      	str	r2, [r3, #16]
 80005ce:	bf00      	nop
				break;
 80005d0:	e025      	b.n	800061e <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTF:
				switch(copy_u8PinValue){
 80005d2:	797b      	ldrb	r3, [r7, #5]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <GPIO_voidSetPinValue+0x12a>
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d006      	beq.n	80005ea <GPIO_voidSetPinValue+0x136>
				case 0:WRITE_BIT(GPIOF->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOF->BSRR,copy_u8PinID);break;}
				break;
 80005dc:	e01f      	b.n	800061e <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOF->BRR,copy_u8PinID);break;
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	2201      	movs	r2, #1
 80005e2:	409a      	lsls	r2, r3
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <GPIO_voidSetPinValue+0x194>)
 80005e6:	615a      	str	r2, [r3, #20]
 80005e8:	e005      	b.n	80005f6 <GPIO_voidSetPinValue+0x142>
				case 1:WRITE_BIT(GPIOF->BSRR,copy_u8PinID);break;}
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	2201      	movs	r2, #1
 80005ee:	409a      	lsls	r2, r3
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <GPIO_voidSetPinValue+0x194>)
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	bf00      	nop
				break;
 80005f6:	e012      	b.n	800061e <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTG:
				switch(copy_u8PinValue){
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <GPIO_voidSetPinValue+0x150>
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d006      	beq.n	8000610 <GPIO_voidSetPinValue+0x15c>
				case 0:WRITE_BIT(GPIOG->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOG->BSRR,copy_u8PinID);break;}
				break;
 8000602:	e00b      	b.n	800061c <GPIO_voidSetPinValue+0x168>
				case 0:WRITE_BIT(GPIOG->BRR,copy_u8PinID);break;
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	2201      	movs	r2, #1
 8000608:	409a      	lsls	r2, r3
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <GPIO_voidSetPinValue+0x198>)
 800060c:	615a      	str	r2, [r3, #20]
 800060e:	e005      	b.n	800061c <GPIO_voidSetPinValue+0x168>
				case 1:WRITE_BIT(GPIOG->BSRR,copy_u8PinID);break;}
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	2201      	movs	r2, #1
 8000614:	409a      	lsls	r2, r3
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <GPIO_voidSetPinValue+0x198>)
 8000618:	611a      	str	r2, [r3, #16]
 800061a:	bf00      	nop
				break;
 800061c:	bf00      	nop
		}
	}
 800061e:	e002      	b.n	8000626 <GPIO_voidSetPinValue+0x172>
    else 
		lacal_u8ErrorState = STD_TYPE_NOK;
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e000      	b.n	8000628 <GPIO_voidSetPinValue+0x174>
	}
 8000626:	bf00      	nop
	return lacal_u8ErrorState;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	40010800 	.word	0x40010800
 8000638:	40010c00 	.word	0x40010c00
 800063c:	40011000 	.word	0x40011000
 8000640:	40011400 	.word	0x40011400
 8000644:	40011800 	.word	0x40011800
 8000648:	40011c00 	.word	0x40011c00
 800064c:	40012000 	.word	0x40012000

08000650 <RCC_voidInitSysClock>:
#include "RCC_interface.h"
#include "RCC_config.h"


void RCC_voidInitSysClock(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
	#if RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		SET_BIT(RCC->RCC_CR,16);
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <RCC_voidInitSysClock+0x60>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <RCC_voidInitSysClock+0x60>)
 800065a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800065e:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CR,18);
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <RCC_voidInitSysClock+0x60>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <RCC_voidInitSysClock+0x60>)
 8000666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800066a:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CFGR,0);
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <RCC_voidInitSysClock+0x60>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <RCC_voidInitSysClock+0x60>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->RCC_CFGR,1);
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <RCC_voidInitSysClock+0x60>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <RCC_voidInitSysClock+0x60>)
 800067e:	f023 0302 	bic.w	r3, r3, #2
 8000682:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->RCC_CFGR,1);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_AHP_PRESCALER   ==RCC_AHP_DIV_1
		CLR_BIT(RCC->RCC_CFGR,7);
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <RCC_voidInitSysClock+0x60>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <RCC_voidInitSysClock+0x60>)
 800068a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800068e:	6053      	str	r3, [r2, #4]
	     SET_BIT(RCC->RCC_CFGR,7);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_APB1_PRESCALER   ==RCC_APB1_DIV_1
		CLR_BIT(RCC->RCC_CFGR,8);
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <RCC_voidInitSysClock+0x60>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <RCC_voidInitSysClock+0x60>)
 8000696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800069a:	6053      	str	r3, [r2, #4]
	    SET_BIT(RCC->RCC_CFGR,10);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_APB2_PRESCALER   ==RCC_APB2_DIV_1
		CLR_BIT(RCC->RCC_CFGR,11);
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <RCC_voidInitSysClock+0x60>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	4a03      	ldr	r2, [pc, #12]	; (80006b0 <RCC_voidInitSysClock+0x60>)
 80006a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006a6:	6053      	str	r3, [r2, #4]
	    SET_BIT(RCC->RCC_CFGR,12);
	    SET_BIT(RCC->RCC_CFGR,13);
	#else 
		#error("wrong choise")
	#endif
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	40021000 	.word	0x40021000

080006b4 <RCC_voidEnablePeripheral>:
	#endif
}


void RCC_voidEnablePeripheral(u8 Copy_u8Bus, u8 Copy_u8Peripheral)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	460a      	mov	r2, r1
 80006be:	71fb      	strb	r3, [r7, #7]
 80006c0:	4613      	mov	r3, r2
 80006c2:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8Bus)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d00f      	beq.n	80006ea <RCC_voidEnablePeripheral+0x36>
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d018      	beq.n	8000700 <RCC_voidEnablePeripheral+0x4c>
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d000      	beq.n	80006d4 <RCC_voidEnablePeripheral+0x20>
			break;
		case RCC_APB2:
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
			break;
	}
}
 80006d2:	e020      	b.n	8000716 <RCC_voidEnablePeripheral+0x62>
			SET_BIT(RCC->RCC_AHBENR,Copy_u8Peripheral);
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <RCC_voidEnablePeripheral+0x6c>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	79ba      	ldrb	r2, [r7, #6]
 80006da:	2101      	movs	r1, #1
 80006dc:	fa01 f202 	lsl.w	r2, r1, r2
 80006e0:	4611      	mov	r1, r2
 80006e2:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <RCC_voidEnablePeripheral+0x6c>)
 80006e4:	430b      	orrs	r3, r1
 80006e6:	6153      	str	r3, [r2, #20]
			break;
 80006e8:	e015      	b.n	8000716 <RCC_voidEnablePeripheral+0x62>
			SET_BIT(RCC->RCC_APB1ENR,Copy_u8Peripheral);
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <RCC_voidEnablePeripheral+0x6c>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	79ba      	ldrb	r2, [r7, #6]
 80006f0:	2101      	movs	r1, #1
 80006f2:	fa01 f202 	lsl.w	r2, r1, r2
 80006f6:	4611      	mov	r1, r2
 80006f8:	4a09      	ldr	r2, [pc, #36]	; (8000720 <RCC_voidEnablePeripheral+0x6c>)
 80006fa:	430b      	orrs	r3, r1
 80006fc:	61d3      	str	r3, [r2, #28]
			break;
 80006fe:	e00a      	b.n	8000716 <RCC_voidEnablePeripheral+0x62>
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <RCC_voidEnablePeripheral+0x6c>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	79ba      	ldrb	r2, [r7, #6]
 8000706:	2101      	movs	r1, #1
 8000708:	fa01 f202 	lsl.w	r2, r1, r2
 800070c:	4611      	mov	r1, r2
 800070e:	4a04      	ldr	r2, [pc, #16]	; (8000720 <RCC_voidEnablePeripheral+0x6c>)
 8000710:	430b      	orrs	r3, r1
 8000712:	6193      	str	r3, [r2, #24]
			break;
 8000714:	bf00      	nop
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40021000 	.word	0x40021000

08000724 <truncate_queue>:
}


// function to handle dequeue operation
static SPI_ERROR_STATUS_t truncate_queue(void)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
	
	//status code
    SPI_ERROR_STATUS_t loc_enu_StatusCode = SPI_OKAY;
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]
	
	// check if all bytes has been sent OR queue is empty
	if((gl_SPI_data_queue.s16_front_queue > gl_SPI_data_queue.s16_rear_queue) || (gl_SPI_data_queue.s16_front_queue == EMPTY_POSITOIN))
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <truncate_queue+0x70>)
 8000730:	f993 20c8 	ldrsb.w	r2, [r3, #200]	; 0xc8
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <truncate_queue+0x70>)
 8000736:	f993 30c9 	ldrsb.w	r3, [r3, #201]	; 0xc9
 800073a:	429a      	cmp	r2, r3
 800073c:	dc05      	bgt.n	800074a <truncate_queue+0x26>
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <truncate_queue+0x70>)
 8000740:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8000744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000748:	d10a      	bne.n	8000760 <truncate_queue+0x3c>
	{
		// set front and rear to defaults
		gl_SPI_data_queue.s16_front_queue = EMPTY_POSITOIN;
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <truncate_queue+0x70>)
 800074c:	22ff      	movs	r2, #255	; 0xff
 800074e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		gl_SPI_data_queue.s16_rear_queue  = EMPTY_POSITOIN;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <truncate_queue+0x70>)
 8000754:	22ff      	movs	r2, #255	; 0xff
 8000756:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		
		//status code queue is empty
		loc_enu_StatusCode = QUEUE_EMPTY;
 800075a:	2302      	movs	r3, #2
 800075c:	71fb      	strb	r3, [r7, #7]
 800075e:	e012      	b.n	8000786 <truncate_queue+0x62>
	}
	else
	{
		//send current byte and increment front
		SPI1->DR = gl_SPI_data_queue.u16_arr_data[gl_SPI_data_queue.s16_front_queue];
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <truncate_queue+0x70>)
 8000762:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8000766:	461a      	mov	r2, r3
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <truncate_queue+0x70>)
 800076a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <truncate_queue+0x74>)
 8000770:	60da      	str	r2, [r3, #12]
		gl_SPI_data_queue.s16_front_queue++;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <truncate_queue+0x70>)
 8000774:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8000778:	b2db      	uxtb	r3, r3
 800077a:	3301      	adds	r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	b25a      	sxtb	r2, r3
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <truncate_queue+0x70>)
 8000782:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	}
	return loc_enu_StatusCode;
 8000786:	79fb      	ldrb	r3, [r7, #7]
}
 8000788:	4618      	mov	r0, r3
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000
 8000798:	40013000 	.word	0x40013000

0800079c <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    // TODO HANDLE ISR FOR RECEPTION
	#if   SPI1_MASTER_SLAVE == SPI_SLAVE
       sgl_Recieve_Index = (u8)SPI1->DR;
       gl_ptr_Function();
    #elif SPI1_MASTER_SLAVE == SPI_MASTER
      if (truncate_queue() == QUEUE_EMPTY)
 80007a0:	f7ff ffc0 	bl	8000724 <truncate_queue>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d106      	bne.n	80007b8 <SPI1_IRQHandler+0x1c>
      {
        if (gl_ptr_Function != PTR_NULL)
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <SPI1_IRQHandler+0x20>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <SPI1_IRQHandler+0x1c>
        {
            gl_ptr_Function();
 80007b2:	4b02      	ldr	r3, [pc, #8]	; (80007bc <SPI1_IRQHandler+0x20>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4798      	blx	r3
        }
      }
    #endif

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000ec 	.word	0x200000ec

080007c0 <MSTK_voidInit>:

/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;

void MSTK_voidInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
#if MSTK_CLK_SRC == MSTK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	MSTK -> CTRL = 0x00000004;
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	MSTK -> CTRL = 0;
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <MSTK_voidInit+0x14>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]

#endif
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <MSTK_voidSetBusyWait>:

void MSTK_voidSetBusyWait( u32 Copy_u32Ticks )
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks;
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <MSTK_voidSetBusyWait+0x4c>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6053      	str	r3, [r2, #4]

	/* Start Timer */
	SET_BIT(MSTK->CTRL, 0);
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MSTK_voidSetBusyWait+0x4c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <MSTK_voidSetBusyWait+0x4c>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6013      	str	r3, [r2, #0]

	/* Wait till flag is raised */
	while( (GET_BIT(MSTK->CTRL,16)) == 0);
 80007f2:	bf00      	nop
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MSTK_voidSetBusyWait+0x4c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	0c1b      	lsrs	r3, r3, #16
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d0f8      	beq.n	80007f4 <MSTK_voidSetBusyWait+0x1c>

	/* Stop Timer */
	SET_BIT(MSTK->CTRL, 0);
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MSTK_voidSetBusyWait+0x4c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a07      	ldr	r2, [pc, #28]	; (8000824 <MSTK_voidSetBusyWait+0x4c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD = 0;
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <MSTK_voidSetBusyWait+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
	MSTK -> VAL  = 0;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <MSTK_voidSetBusyWait+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
	
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	e000e010 	.word	0xe000e010

08000828 <SysTick_Handler>:

	return Local_u32RemainTime;
}

void SysTick_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary ;

	if (MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <SysTick_Handler+0x50>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d111      	bne.n	800085a <SysTick_Handler+0x32>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK->CTRL, 1);
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <SysTick_Handler+0x54>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a10      	ldr	r2, [pc, #64]	; (800087c <SysTick_Handler+0x54>)
 800083c:	f023 0302 	bic.w	r3, r3, #2
 8000840:	6013      	str	r3, [r2, #0]

		/* Stop Timer */
		SET_BIT(MSTK->CTRL, 0);
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <SysTick_Handler+0x54>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a0d      	ldr	r2, [pc, #52]	; (800087c <SysTick_Handler+0x54>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD = 0;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <SysTick_Handler+0x54>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
		MSTK -> VAL  = 0;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <SysTick_Handler+0x54>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
	}

	/* Callback notification */
	MSTK_CallBack();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <SysTick_Handler+0x58>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4798      	blx	r3

	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(MSTK->CTRL,16);
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <SysTick_Handler+0x54>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	0c1b      	lsrs	r3, r3, #16
 8000866:	b2db      	uxtb	r3, r3
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	71fb      	strb	r3, [r7, #7]
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000f4 	.word	0x200000f4
 800087c:	e000e010 	.word	0xe000e010
 8000880:	200000f0 	.word	0x200000f0

08000884 <USART1_IRQHandler>:
	MUSART2_CallBack = ptr;
}

/*IRQ of UART1*/
void USART1_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
    UART1->SR = 0;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <USART1_IRQHandler+0x1c>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
    //G_u8DataFromUART = MUART_u8ReadDataRegister(UART1);
	if(MUSART1_CallBack!=NULL)
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <USART1_IRQHandler+0x20>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d002      	beq.n	800089c <USART1_IRQHandler+0x18>
	{
		MUSART1_CallBack();
 8000896:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <USART1_IRQHandler+0x20>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4798      	blx	r3
	}
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40013800 	.word	0x40013800
 80008a4:	200001c4 	.word	0x200001c4

080008a8 <USART2_IRQHandler>:

/*IRQ of UART2*/
void USART2_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	UART2->SR = 0;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <USART2_IRQHandler+0x24>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
	//G_u8DataFromUART = MUART_u8ReadDataRegister(UART2);
	local_u8_RX_Busyflag=0;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <USART2_IRQHandler+0x28>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
	if(MUSART2_CallBack!=NULL)
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <USART2_IRQHandler+0x2c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <USART2_IRQHandler+0x1e>
	{
		MUSART2_CallBack();
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <USART2_IRQHandler+0x2c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4798      	blx	r3
	}
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40004400 	.word	0x40004400
 80008d0:	200000f5 	.word	0x200000f5
 80008d4:	200001c0 	.word	0x200001c0

080008d8 <main>:
	MUART_u8ReceiveByteASynch(UART1);
}


int main()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 80008dc:	f7ff feb8 	bl	8000650 <RCC_voidInitSysClock>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOA);
 80008e0:	2102      	movs	r1, #2
 80008e2:	2002      	movs	r0, #2
 80008e4:	f7ff fee6 	bl	80006b4 <RCC_voidEnablePeripheral>
	MSTK_voidInit();
 80008e8:	f7ff ff6a 	bl	80007c0 <MSTK_voidInit>
	GPIO_voidSetPinMode(GPIO_PORTA,7,GPIO_OUTPUT_2M_PP);
 80008ec:	2202      	movs	r2, #2
 80008ee:	2107      	movs	r1, #7
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff fc3d 	bl	8000170 <GPIO_voidSetPinMode>

	while(1)
	{
		//x=MUART_u8ReceiveByteSynchNonBlocking(UART1);
		//MUART_ReadData(&APP_G_u8DataFromUART);
		GPIO_voidSetPinValue(GPIO_PORTA,7,GPIO_HIGH);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2107      	movs	r1, #7
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff fdda 	bl	80004b4 <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(1000000);
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <main+0x40>)
 8000902:	f7ff ff69 	bl	80007d8 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue(GPIO_PORTA,7,GPIO_LOW);
 8000906:	2200      	movs	r2, #0
 8000908:	2107      	movs	r1, #7
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff fdd2 	bl	80004b4 <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(1000000);
 8000910:	4801      	ldr	r0, [pc, #4]	; (8000918 <main+0x40>)
 8000912:	f7ff ff61 	bl	80007d8 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue(GPIO_PORTA,7,GPIO_HIGH);
 8000916:	e7ee      	b.n	80008f6 <main+0x1e>
 8000918:	000f4240 	.word	0x000f4240

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <HardFault_Handler+0x4>

0800092e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <MemManage_Handler+0x4>

08000934 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <BusFault_Handler+0x4>

0800093a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <UsageFault_Handler+0x4>

08000940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000972:	490d      	ldr	r1, [pc, #52]	; (80009a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000988:	4c0a      	ldr	r4, [pc, #40]	; (80009b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000996:	f7ff ffe5 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099a:	f000 f80f 	bl	80009bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800099e:	f7ff ff9b 	bl	80008d8 <main>
  bx lr
 80009a2:	4770      	bx	lr
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80009ac:	08000a24 	.word	0x08000a24
  ldr r2, =_sbss
 80009b0:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80009b4:	200001c8 	.word	0x200001c8

080009b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC1_2_IRQHandler>
	...

080009bc <__libc_init_array>:
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	2500      	movs	r5, #0
 80009c0:	4e0c      	ldr	r6, [pc, #48]	; (80009f4 <__libc_init_array+0x38>)
 80009c2:	4c0d      	ldr	r4, [pc, #52]	; (80009f8 <__libc_init_array+0x3c>)
 80009c4:	1ba4      	subs	r4, r4, r6
 80009c6:	10a4      	asrs	r4, r4, #2
 80009c8:	42a5      	cmp	r5, r4
 80009ca:	d109      	bne.n	80009e0 <__libc_init_array+0x24>
 80009cc:	f000 f81a 	bl	8000a04 <_init>
 80009d0:	2500      	movs	r5, #0
 80009d2:	4e0a      	ldr	r6, [pc, #40]	; (80009fc <__libc_init_array+0x40>)
 80009d4:	4c0a      	ldr	r4, [pc, #40]	; (8000a00 <__libc_init_array+0x44>)
 80009d6:	1ba4      	subs	r4, r4, r6
 80009d8:	10a4      	asrs	r4, r4, #2
 80009da:	42a5      	cmp	r5, r4
 80009dc:	d105      	bne.n	80009ea <__libc_init_array+0x2e>
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009e4:	4798      	blx	r3
 80009e6:	3501      	adds	r5, #1
 80009e8:	e7ee      	b.n	80009c8 <__libc_init_array+0xc>
 80009ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009ee:	4798      	blx	r3
 80009f0:	3501      	adds	r5, #1
 80009f2:	e7f2      	b.n	80009da <__libc_init_array+0x1e>
 80009f4:	08000a1c 	.word	0x08000a1c
 80009f8:	08000a1c 	.word	0x08000a1c
 80009fc:	08000a1c 	.word	0x08000a1c
 8000a00:	08000a20 	.word	0x08000a20

08000a04 <_init>:
 8000a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a06:	bf00      	nop
 8000a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a0a:	bc08      	pop	{r3}
 8000a0c:	469e      	mov	lr, r3
 8000a0e:	4770      	bx	lr

08000a10 <_fini>:
 8000a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a12:	bf00      	nop
 8000a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a16:	bc08      	pop	{r3}
 8000a18:	469e      	mov	lr, r3
 8000a1a:	4770      	bx	lr
