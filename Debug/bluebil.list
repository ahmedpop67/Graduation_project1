
bluebil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004610  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08004720  08004720  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08004720  08004720  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004728  08004728  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004728  08004728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08004730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200000dc  0800480c  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  0800480c  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002822  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000de3  00000000  00000000  00022927  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000478  00000000  00000000  00023710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000388  00000000  00000000  00023b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000024a0  00000000  00000000  00023f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002633  00000000  00000000  000263b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083ea5  00000000  00000000  000289e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac888  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010e8  00000000  00000000  000ac904  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000dc 	.word	0x200000dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004708 	.word	0x08004708

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000e0 	.word	0x200000e0
 800014c:	08004708 	.word	0x08004708

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_frsub>:
 8000a3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a40:	e002      	b.n	8000a48 <__addsf3>
 8000a42:	bf00      	nop

08000a44 <__aeabi_fsub>:
 8000a44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a48 <__addsf3>:
 8000a48:	0042      	lsls	r2, r0, #1
 8000a4a:	bf1f      	itttt	ne
 8000a4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a50:	ea92 0f03 	teqne	r2, r3
 8000a54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a5c:	d06a      	beq.n	8000b34 <__addsf3+0xec>
 8000a5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a66:	bfc1      	itttt	gt
 8000a68:	18d2      	addgt	r2, r2, r3
 8000a6a:	4041      	eorgt	r1, r0
 8000a6c:	4048      	eorgt	r0, r1
 8000a6e:	4041      	eorgt	r1, r0
 8000a70:	bfb8      	it	lt
 8000a72:	425b      	neglt	r3, r3
 8000a74:	2b19      	cmp	r3, #25
 8000a76:	bf88      	it	hi
 8000a78:	4770      	bxhi	lr
 8000a7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a96:	bf18      	it	ne
 8000a98:	4249      	negne	r1, r1
 8000a9a:	ea92 0f03 	teq	r2, r3
 8000a9e:	d03f      	beq.n	8000b20 <__addsf3+0xd8>
 8000aa0:	f1a2 0201 	sub.w	r2, r2, #1
 8000aa4:	fa41 fc03 	asr.w	ip, r1, r3
 8000aa8:	eb10 000c 	adds.w	r0, r0, ip
 8000aac:	f1c3 0320 	rsb	r3, r3, #32
 8000ab0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ab4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ab8:	d502      	bpl.n	8000ac0 <__addsf3+0x78>
 8000aba:	4249      	negs	r1, r1
 8000abc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ac0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ac4:	d313      	bcc.n	8000aee <__addsf3+0xa6>
 8000ac6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aca:	d306      	bcc.n	8000ada <__addsf3+0x92>
 8000acc:	0840      	lsrs	r0, r0, #1
 8000ace:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ad2:	f102 0201 	add.w	r2, r2, #1
 8000ad6:	2afe      	cmp	r2, #254	; 0xfe
 8000ad8:	d251      	bcs.n	8000b7e <__addsf3+0x136>
 8000ada:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ade:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ae2:	bf08      	it	eq
 8000ae4:	f020 0001 	biceq.w	r0, r0, #1
 8000ae8:	ea40 0003 	orr.w	r0, r0, r3
 8000aec:	4770      	bx	lr
 8000aee:	0049      	lsls	r1, r1, #1
 8000af0:	eb40 0000 	adc.w	r0, r0, r0
 8000af4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000af8:	f1a2 0201 	sub.w	r2, r2, #1
 8000afc:	d1ed      	bne.n	8000ada <__addsf3+0x92>
 8000afe:	fab0 fc80 	clz	ip, r0
 8000b02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b06:	ebb2 020c 	subs.w	r2, r2, ip
 8000b0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b0e:	bfaa      	itet	ge
 8000b10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b14:	4252      	neglt	r2, r2
 8000b16:	4318      	orrge	r0, r3
 8000b18:	bfbc      	itt	lt
 8000b1a:	40d0      	lsrlt	r0, r2
 8000b1c:	4318      	orrlt	r0, r3
 8000b1e:	4770      	bx	lr
 8000b20:	f092 0f00 	teq	r2, #0
 8000b24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b28:	bf06      	itte	eq
 8000b2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b2e:	3201      	addeq	r2, #1
 8000b30:	3b01      	subne	r3, #1
 8000b32:	e7b5      	b.n	8000aa0 <__addsf3+0x58>
 8000b34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b3c:	bf18      	it	ne
 8000b3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b42:	d021      	beq.n	8000b88 <__addsf3+0x140>
 8000b44:	ea92 0f03 	teq	r2, r3
 8000b48:	d004      	beq.n	8000b54 <__addsf3+0x10c>
 8000b4a:	f092 0f00 	teq	r2, #0
 8000b4e:	bf08      	it	eq
 8000b50:	4608      	moveq	r0, r1
 8000b52:	4770      	bx	lr
 8000b54:	ea90 0f01 	teq	r0, r1
 8000b58:	bf1c      	itt	ne
 8000b5a:	2000      	movne	r0, #0
 8000b5c:	4770      	bxne	lr
 8000b5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b62:	d104      	bne.n	8000b6e <__addsf3+0x126>
 8000b64:	0040      	lsls	r0, r0, #1
 8000b66:	bf28      	it	cs
 8000b68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	4770      	bx	lr
 8000b6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b72:	bf3c      	itt	cc
 8000b74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bxcc	lr
 8000b7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b86:	4770      	bx	lr
 8000b88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b8c:	bf16      	itet	ne
 8000b8e:	4608      	movne	r0, r1
 8000b90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b94:	4601      	movne	r1, r0
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	bf06      	itte	eq
 8000b9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b9e:	ea90 0f01 	teqeq	r0, r1
 8000ba2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_ui2f>:
 8000ba8:	f04f 0300 	mov.w	r3, #0
 8000bac:	e004      	b.n	8000bb8 <__aeabi_i2f+0x8>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_i2f>:
 8000bb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bb4:	bf48      	it	mi
 8000bb6:	4240      	negmi	r0, r0
 8000bb8:	ea5f 0c00 	movs.w	ip, r0
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bc4:	4601      	mov	r1, r0
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	e01c      	b.n	8000c06 <__aeabi_l2f+0x2a>

08000bcc <__aeabi_ul2f>:
 8000bcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd0:	bf08      	it	eq
 8000bd2:	4770      	bxeq	lr
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e00a      	b.n	8000bf0 <__aeabi_l2f+0x14>
 8000bda:	bf00      	nop

08000bdc <__aeabi_l2f>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000be8:	d502      	bpl.n	8000bf0 <__aeabi_l2f+0x14>
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	ea5f 0c01 	movs.w	ip, r1
 8000bf4:	bf02      	ittt	eq
 8000bf6:	4684      	moveq	ip, r0
 8000bf8:	4601      	moveq	r1, r0
 8000bfa:	2000      	moveq	r0, #0
 8000bfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c00:	bf08      	it	eq
 8000c02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c0a:	fabc f28c 	clz	r2, ip
 8000c0e:	3a08      	subs	r2, #8
 8000c10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c14:	db10      	blt.n	8000c38 <__aeabi_l2f+0x5c>
 8000c16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c20:	f1c2 0220 	rsb	r2, r2, #32
 8000c24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c28:	fa20 f202 	lsr.w	r2, r0, r2
 8000c2c:	eb43 0002 	adc.w	r0, r3, r2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f102 0220 	add.w	r2, r2, #32
 8000c3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c40:	f1c2 0220 	rsb	r2, r2, #32
 8000c44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c48:	fa21 f202 	lsr.w	r2, r1, r2
 8000c4c:	eb43 0002 	adc.w	r0, r3, r2
 8000c50:	bf08      	it	eq
 8000c52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	468c      	mov	ip, r1
 8000c8e:	4604      	mov	r4, r0
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0c03 	orr.w	ip, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	fbbc f7fe 	udiv	r7, ip, lr
 8000cbe:	fa1f f885 	uxth.w	r8, r5
 8000cc2:	fb0e c317 	mls	r3, lr, r7, ip
 8000cc6:	fb07 f908 	mul.w	r9, r7, r8
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cd0:	4599      	cmp	r9, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 31ff 	add.w	r1, r7, #4294967295
 8000cda:	f080 811c 	bcs.w	8000f16 <__udivmoddi4+0x28e>
 8000cde:	4599      	cmp	r9, r3
 8000ce0:	f240 8119 	bls.w	8000f16 <__udivmoddi4+0x28e>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	eba3 0309 	sub.w	r3, r3, r9
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	fb00 f108 	mul.w	r1, r0, r8
 8000cf8:	b2a4      	uxth	r4, r4
 8000cfa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfe:	42a1      	cmp	r1, r4
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	192c      	adds	r4, r5, r4
 8000d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d08:	f080 8107 	bcs.w	8000f1a <__udivmoddi4+0x292>
 8000d0c:	42a1      	cmp	r1, r4
 8000d0e:	f240 8104 	bls.w	8000f1a <__udivmoddi4+0x292>
 8000d12:	3802      	subs	r0, #2
 8000d14:	442c      	add	r4, r5
 8000d16:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d1a:	2700      	movs	r7, #0
 8000d1c:	1a64      	subs	r4, r4, r1
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	2300      	movs	r3, #0
 8000d22:	40d4      	lsrs	r4, r2
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ec 	beq.w	8000f10 <__udivmoddi4+0x288>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d148      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fb 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	469c      	mov	ip, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	2701      	movs	r7, #1
 8000d7c:	1b49      	subs	r1, r1, r5
 8000d7e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000d82:	fa1f f985 	uxth.w	r9, r5
 8000d86:	fbb1 fef8 	udiv	lr, r1, r8
 8000d8a:	fb08 111e 	mls	r1, r8, lr, r1
 8000d8e:	fb09 f00e 	mul.w	r0, r9, lr
 8000d92:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000d96:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000d9a:	4298      	cmp	r0, r3
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x126>
 8000d9e:	18eb      	adds	r3, r5, r3
 8000da0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x124>
 8000da6:	4298      	cmp	r0, r3
 8000da8:	f200 80cd 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000dac:	468e      	mov	lr, r1
 8000dae:	1a1b      	subs	r3, r3, r0
 8000db0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db4:	fb08 3310 	mls	r3, r8, r0, r3
 8000db8:	fb09 f900 	mul.w	r9, r9, r0
 8000dbc:	b2a4      	uxth	r4, r4
 8000dbe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc6:	192c      	adds	r4, r5, r4
 8000dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a1      	cmp	r9, r4
 8000dd0:	f200 80b6 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	eba4 0409 	sub.w	r4, r4, r9
 8000dda:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000dde:	e79e      	b.n	8000d1e <__udivmoddi4+0x96>
 8000de0:	f1c7 0520 	rsb	r5, r7, #32
 8000de4:	40bb      	lsls	r3, r7
 8000de6:	fa22 fc05 	lsr.w	ip, r2, r5
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa21 f405 	lsr.w	r4, r1, r5
 8000df2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000df6:	fbb4 f9fe 	udiv	r9, r4, lr
 8000dfa:	fa1f f88c 	uxth.w	r8, ip
 8000dfe:	fb0e 4419 	mls	r4, lr, r9, r4
 8000e02:	fa20 f305 	lsr.w	r3, r0, r5
 8000e06:	40b9      	lsls	r1, r7
 8000e08:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0c:	4319      	orrs	r1, r3
 8000e0e:	0c0b      	lsrs	r3, r1, #16
 8000e10:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e14:	45a2      	cmp	sl, r4
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f307 	lsl.w	r3, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	eba4 040a 	sub.w	r4, r4, sl
 8000e3c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e40:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e44:	fb00 fa08 	mul.w	sl, r0, r8
 8000e48:	b289      	uxth	r1, r1
 8000e4a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000e4e:	45a2      	cmp	sl, r4
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x1dc>
 8000e52:	eb1c 0404 	adds.w	r4, ip, r4
 8000e56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e5a:	d26b      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d969      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4464      	add	r4, ip
 8000e64:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e68:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6c:	eba4 040a 	sub.w	r4, r4, sl
 8000e70:	454c      	cmp	r4, r9
 8000e72:	4641      	mov	r1, r8
 8000e74:	46ce      	mov	lr, r9
 8000e76:	d354      	bcc.n	8000f22 <__udivmoddi4+0x29a>
 8000e78:	d051      	beq.n	8000f1e <__udivmoddi4+0x296>
 8000e7a:	2e00      	cmp	r6, #0
 8000e7c:	d069      	beq.n	8000f52 <__udivmoddi4+0x2ca>
 8000e7e:	1a5a      	subs	r2, r3, r1
 8000e80:	eb64 040e 	sbc.w	r4, r4, lr
 8000e84:	fa04 f505 	lsl.w	r5, r4, r5
 8000e88:	fa22 f307 	lsr.w	r3, r2, r7
 8000e8c:	40fc      	lsrs	r4, r7
 8000e8e:	431d      	orrs	r5, r3
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	4095      	lsls	r5, r2
 8000e9a:	f1c2 0320 	rsb	r3, r2, #32
 8000e9e:	fa21 f003 	lsr.w	r0, r1, r3
 8000ea2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000ea6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000eaa:	fa1f f985 	uxth.w	r9, r5
 8000eae:	fb08 0017 	mls	r0, r8, r7, r0
 8000eb2:	fa24 f303 	lsr.w	r3, r4, r3
 8000eb6:	4091      	lsls	r1, r2
 8000eb8:	fb07 fc09 	mul.w	ip, r7, r9
 8000ebc:	430b      	orrs	r3, r1
 8000ebe:	0c19      	lsrs	r1, r3, #16
 8000ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec4:	458c      	cmp	ip, r1
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d907      	bls.n	8000edc <__udivmoddi4+0x254>
 8000ecc:	1869      	adds	r1, r5, r1
 8000ece:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ed2:	d231      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed4:	458c      	cmp	ip, r1
 8000ed6:	d92f      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	3f02      	subs	r7, #2
 8000eda:	4429      	add	r1, r5
 8000edc:	eba1 010c 	sub.w	r1, r1, ip
 8000ee0:	fbb1 f0f8 	udiv	r0, r1, r8
 8000ee4:	fb08 1c10 	mls	ip, r8, r0, r1
 8000ee8:	fb00 fe09 	mul.w	lr, r0, r9
 8000eec:	b299      	uxth	r1, r3
 8000eee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ef2:	458e      	cmp	lr, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000efc:	d218      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d916      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	eba1 010e 	sub.w	r1, r1, lr
 8000f0a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0e:	e73a      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f10:	4637      	mov	r7, r6
 8000f12:	4630      	mov	r0, r6
 8000f14:	e708      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f16:	460f      	mov	r7, r1
 8000f18:	e6e6      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	e6fb      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000f1e:	4543      	cmp	r3, r8
 8000f20:	d2ab      	bcs.n	8000e7a <__udivmoddi4+0x1f2>
 8000f22:	ebb8 0102 	subs.w	r1, r8, r2
 8000f26:	eb69 020c 	sbc.w	r2, r9, ip
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	4696      	mov	lr, r2
 8000f2e:	e7a4      	b.n	8000e7a <__udivmoddi4+0x1f2>
 8000f30:	4618      	mov	r0, r3
 8000f32:	e7e8      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e795      	b.n	8000e64 <__udivmoddi4+0x1dc>
 8000f38:	4607      	mov	r7, r0
 8000f3a:	e7cf      	b.n	8000edc <__udivmoddi4+0x254>
 8000f3c:	4681      	mov	r9, r0
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3802      	subs	r0, #2
 8000f42:	442c      	add	r4, r5
 8000f44:	e747      	b.n	8000dd6 <__udivmoddi4+0x14e>
 8000f46:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f4a:	442b      	add	r3, r5
 8000f4c:	e72f      	b.n	8000dae <__udivmoddi4+0x126>
 8000f4e:	4638      	mov	r0, r7
 8000f50:	e707      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f52:	4637      	mov	r7, r6
 8000f54:	e6e8      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f56:	bf00      	nop

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <EXTI0_IRQHandler>:
	EXTI0_CallBack = ptr ;
	
}	

void EXTI0_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <EXTI0_IRQHandler+0x1c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4798      	blx	r3
	/*	Clear pending Bit For EXTI0		*/
	SET_BIT(EXTI -> PR , 0);	
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <EXTI0_IRQHandler+0x20>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <EXTI0_IRQHandler+0x20>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6153      	str	r3, [r2, #20]
}	
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000f8 	.word	0x200000f8
 8000f7c:	40010400 	.word	0x40010400

08000f80 <GPIO_voidSetPinMode>:
					
}
void  GPIO_VoidDeInit();

u8 GPIO_voidSetPinMode(u8 copy_u8portID,u8 copy_u8PinID,u8 copy_u8Mode)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	71bb      	strb	r3, [r7, #6]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	717b      	strb	r3, [r7, #5]
	u8 lacal_u8ErrorState = STD_TYPE_OK;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15 && copy_u8Mode <= GPIO_OUTPUT_50M_AF_OD)
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b07      	cmp	r3, #7
 8000f9a:	f200 817a 	bhi.w	8001292 <GPIO_voidSetPinMode+0x312>
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	f200 8176 	bhi.w	8001292 <GPIO_voidSetPinMode+0x312>
 8000fa6:	797b      	ldrb	r3, [r7, #5]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	f200 8172 	bhi.w	8001292 <GPIO_voidSetPinMode+0x312>
	{
		switch(copy_u8portID)
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	f200 8170 	bhi.w	8001298 <GPIO_voidSetPinMode+0x318>
 8000fb8:	a201      	add	r2, pc, #4	; (adr r2, 8000fc0 <GPIO_voidSetPinMode+0x40>)
 8000fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fbe:	bf00      	nop
 8000fc0:	08000fdd 	.word	0x08000fdd
 8000fc4:	0800103d 	.word	0x0800103d
 8000fc8:	0800109d 	.word	0x0800109d
 8000fcc:	080010fd 	.word	0x080010fd
 8000fd0:	0800115d 	.word	0x0800115d
 8000fd4:	080011bb 	.word	0x080011bb
 8000fd8:	08001219 	.word	0x08001219
		{
			case GPIO_PORTA: 
				if(copy_u8PinID<=7)
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	2b07      	cmp	r3, #7
 8000fe0:	d812      	bhi.n	8001008 <GPIO_voidSetPinMode+0x88>
				{
					SET_4BIT_Val(GPIOA->CRL,copy_u8PinID*4,copy_u8Mode);
 8000fe2:	4bb1      	ldr	r3, [pc, #708]	; (80012a8 <GPIO_voidSetPinMode+0x328>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	79ba      	ldrb	r2, [r7, #6]
 8000fe8:	0092      	lsls	r2, r2, #2
 8000fea:	210f      	movs	r1, #15
 8000fec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff0:	43d2      	mvns	r2, r2
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	7979      	ldrb	r1, [r7, #5]
 8000ff6:	79ba      	ldrb	r2, [r7, #6]
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffe:	4611      	mov	r1, r2
 8001000:	4aa9      	ldr	r2, [pc, #676]	; (80012a8 <GPIO_voidSetPinMode+0x328>)
 8001002:	430b      	orrs	r3, r1
 8001004:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOA->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8001006:	e136      	b.n	8001276 <GPIO_voidSetPinMode+0x2f6>
				else if(copy_u8PinID <=15)
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	2b0f      	cmp	r3, #15
 800100c:	f200 8133 	bhi.w	8001276 <GPIO_voidSetPinMode+0x2f6>
					copy_u8PinID-=8;
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	3b08      	subs	r3, #8
 8001014:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOA->CRH,copy_u8PinID*4,copy_u8Mode);
 8001016:	4ba4      	ldr	r3, [pc, #656]	; (80012a8 <GPIO_voidSetPinMode+0x328>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	79ba      	ldrb	r2, [r7, #6]
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	210f      	movs	r1, #15
 8001020:	fa01 f202 	lsl.w	r2, r1, r2
 8001024:	43d2      	mvns	r2, r2
 8001026:	4013      	ands	r3, r2
 8001028:	7979      	ldrb	r1, [r7, #5]
 800102a:	79ba      	ldrb	r2, [r7, #6]
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	fa01 f202 	lsl.w	r2, r1, r2
 8001032:	4611      	mov	r1, r2
 8001034:	4a9c      	ldr	r2, [pc, #624]	; (80012a8 <GPIO_voidSetPinMode+0x328>)
 8001036:	430b      	orrs	r3, r1
 8001038:	6053      	str	r3, [r2, #4]
				break;
 800103a:	e11c      	b.n	8001276 <GPIO_voidSetPinMode+0x2f6>
			case GPIO_PORTB: 
				if(copy_u8PinID<=7)
 800103c:	79bb      	ldrb	r3, [r7, #6]
 800103e:	2b07      	cmp	r3, #7
 8001040:	d812      	bhi.n	8001068 <GPIO_voidSetPinMode+0xe8>
				{
					SET_4BIT_Val(GPIOB->CRL,copy_u8PinID*4,copy_u8Mode);
 8001042:	4b9a      	ldr	r3, [pc, #616]	; (80012ac <GPIO_voidSetPinMode+0x32c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	79ba      	ldrb	r2, [r7, #6]
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	210f      	movs	r1, #15
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	43d2      	mvns	r2, r2
 8001052:	4013      	ands	r3, r2
 8001054:	7979      	ldrb	r1, [r7, #5]
 8001056:	79ba      	ldrb	r2, [r7, #6]
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	fa01 f202 	lsl.w	r2, r1, r2
 800105e:	4611      	mov	r1, r2
 8001060:	4a92      	ldr	r2, [pc, #584]	; (80012ac <GPIO_voidSetPinMode+0x32c>)
 8001062:	430b      	orrs	r3, r1
 8001064:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOB->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8001066:	e108      	b.n	800127a <GPIO_voidSetPinMode+0x2fa>
				else if(copy_u8PinID <=15)
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	2b0f      	cmp	r3, #15
 800106c:	f200 8105 	bhi.w	800127a <GPIO_voidSetPinMode+0x2fa>
					copy_u8PinID-=8;
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	3b08      	subs	r3, #8
 8001074:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOB->CRH,copy_u8PinID*4,copy_u8Mode);
 8001076:	4b8d      	ldr	r3, [pc, #564]	; (80012ac <GPIO_voidSetPinMode+0x32c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	79ba      	ldrb	r2, [r7, #6]
 800107c:	0092      	lsls	r2, r2, #2
 800107e:	210f      	movs	r1, #15
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	43d2      	mvns	r2, r2
 8001086:	4013      	ands	r3, r2
 8001088:	7979      	ldrb	r1, [r7, #5]
 800108a:	79ba      	ldrb	r2, [r7, #6]
 800108c:	0092      	lsls	r2, r2, #2
 800108e:	fa01 f202 	lsl.w	r2, r1, r2
 8001092:	4611      	mov	r1, r2
 8001094:	4a85      	ldr	r2, [pc, #532]	; (80012ac <GPIO_voidSetPinMode+0x32c>)
 8001096:	430b      	orrs	r3, r1
 8001098:	6053      	str	r3, [r2, #4]
				break;
 800109a:	e0ee      	b.n	800127a <GPIO_voidSetPinMode+0x2fa>
			case GPIO_PORTC: 
				if(copy_u8PinID<=7)
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	2b07      	cmp	r3, #7
 80010a0:	d812      	bhi.n	80010c8 <GPIO_voidSetPinMode+0x148>
				{
					SET_4BIT_Val(GPIOC->CRL,copy_u8PinID*4,copy_u8Mode);
 80010a2:	4b83      	ldr	r3, [pc, #524]	; (80012b0 <GPIO_voidSetPinMode+0x330>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	79ba      	ldrb	r2, [r7, #6]
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	210f      	movs	r1, #15
 80010ac:	fa01 f202 	lsl.w	r2, r1, r2
 80010b0:	43d2      	mvns	r2, r2
 80010b2:	4013      	ands	r3, r2
 80010b4:	7979      	ldrb	r1, [r7, #5]
 80010b6:	79ba      	ldrb	r2, [r7, #6]
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	fa01 f202 	lsl.w	r2, r1, r2
 80010be:	4611      	mov	r1, r2
 80010c0:	4a7b      	ldr	r2, [pc, #492]	; (80012b0 <GPIO_voidSetPinMode+0x330>)
 80010c2:	430b      	orrs	r3, r1
 80010c4:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOC->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 80010c6:	e0da      	b.n	800127e <GPIO_voidSetPinMode+0x2fe>
				else if(copy_u8PinID <=15)
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	2b0f      	cmp	r3, #15
 80010cc:	f200 80d7 	bhi.w	800127e <GPIO_voidSetPinMode+0x2fe>
					copy_u8PinID-=8;
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	3b08      	subs	r3, #8
 80010d4:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOC->CRH,copy_u8PinID*4,copy_u8Mode);
 80010d6:	4b76      	ldr	r3, [pc, #472]	; (80012b0 <GPIO_voidSetPinMode+0x330>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	79ba      	ldrb	r2, [r7, #6]
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	210f      	movs	r1, #15
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	43d2      	mvns	r2, r2
 80010e6:	4013      	ands	r3, r2
 80010e8:	7979      	ldrb	r1, [r7, #5]
 80010ea:	79ba      	ldrb	r2, [r7, #6]
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	fa01 f202 	lsl.w	r2, r1, r2
 80010f2:	4611      	mov	r1, r2
 80010f4:	4a6e      	ldr	r2, [pc, #440]	; (80012b0 <GPIO_voidSetPinMode+0x330>)
 80010f6:	430b      	orrs	r3, r1
 80010f8:	6053      	str	r3, [r2, #4]
				break;
 80010fa:	e0c0      	b.n	800127e <GPIO_voidSetPinMode+0x2fe>
			case GPIO_PORTD: 
				if(copy_u8PinID<=7)
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	2b07      	cmp	r3, #7
 8001100:	d812      	bhi.n	8001128 <GPIO_voidSetPinMode+0x1a8>
				{
					SET_4BIT_Val(GPIOD->CRL,copy_u8PinID*4,copy_u8Mode);
 8001102:	4b6c      	ldr	r3, [pc, #432]	; (80012b4 <GPIO_voidSetPinMode+0x334>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	79ba      	ldrb	r2, [r7, #6]
 8001108:	0092      	lsls	r2, r2, #2
 800110a:	210f      	movs	r1, #15
 800110c:	fa01 f202 	lsl.w	r2, r1, r2
 8001110:	43d2      	mvns	r2, r2
 8001112:	4013      	ands	r3, r2
 8001114:	7979      	ldrb	r1, [r7, #5]
 8001116:	79ba      	ldrb	r2, [r7, #6]
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	fa01 f202 	lsl.w	r2, r1, r2
 800111e:	4611      	mov	r1, r2
 8001120:	4a64      	ldr	r2, [pc, #400]	; (80012b4 <GPIO_voidSetPinMode+0x334>)
 8001122:	430b      	orrs	r3, r1
 8001124:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOD->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8001126:	e0ac      	b.n	8001282 <GPIO_voidSetPinMode+0x302>
				else if(copy_u8PinID <=15)
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	2b0f      	cmp	r3, #15
 800112c:	f200 80a9 	bhi.w	8001282 <GPIO_voidSetPinMode+0x302>
					copy_u8PinID-=8;
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	3b08      	subs	r3, #8
 8001134:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOD->CRH,copy_u8PinID*4,copy_u8Mode);
 8001136:	4b5f      	ldr	r3, [pc, #380]	; (80012b4 <GPIO_voidSetPinMode+0x334>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	79ba      	ldrb	r2, [r7, #6]
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	210f      	movs	r1, #15
 8001140:	fa01 f202 	lsl.w	r2, r1, r2
 8001144:	43d2      	mvns	r2, r2
 8001146:	4013      	ands	r3, r2
 8001148:	7979      	ldrb	r1, [r7, #5]
 800114a:	79ba      	ldrb	r2, [r7, #6]
 800114c:	0092      	lsls	r2, r2, #2
 800114e:	fa01 f202 	lsl.w	r2, r1, r2
 8001152:	4611      	mov	r1, r2
 8001154:	4a57      	ldr	r2, [pc, #348]	; (80012b4 <GPIO_voidSetPinMode+0x334>)
 8001156:	430b      	orrs	r3, r1
 8001158:	6053      	str	r3, [r2, #4]
				break;
 800115a:	e092      	b.n	8001282 <GPIO_voidSetPinMode+0x302>
			case GPIO_PORTE: 
				if(copy_u8PinID<=7)
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	2b07      	cmp	r3, #7
 8001160:	d812      	bhi.n	8001188 <GPIO_voidSetPinMode+0x208>
				{
					SET_4BIT_Val(GPIOE->CRL,copy_u8PinID*4,copy_u8Mode);
 8001162:	4b55      	ldr	r3, [pc, #340]	; (80012b8 <GPIO_voidSetPinMode+0x338>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	79ba      	ldrb	r2, [r7, #6]
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	210f      	movs	r1, #15
 800116c:	fa01 f202 	lsl.w	r2, r1, r2
 8001170:	43d2      	mvns	r2, r2
 8001172:	4013      	ands	r3, r2
 8001174:	7979      	ldrb	r1, [r7, #5]
 8001176:	79ba      	ldrb	r2, [r7, #6]
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	fa01 f202 	lsl.w	r2, r1, r2
 800117e:	4611      	mov	r1, r2
 8001180:	4a4d      	ldr	r2, [pc, #308]	; (80012b8 <GPIO_voidSetPinMode+0x338>)
 8001182:	430b      	orrs	r3, r1
 8001184:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOE->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8001186:	e07e      	b.n	8001286 <GPIO_voidSetPinMode+0x306>
				else if(copy_u8PinID <=15)
 8001188:	79bb      	ldrb	r3, [r7, #6]
 800118a:	2b0f      	cmp	r3, #15
 800118c:	d87b      	bhi.n	8001286 <GPIO_voidSetPinMode+0x306>
					copy_u8PinID-=8;
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	3b08      	subs	r3, #8
 8001192:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOE->CRH,copy_u8PinID*4,copy_u8Mode);
 8001194:	4b48      	ldr	r3, [pc, #288]	; (80012b8 <GPIO_voidSetPinMode+0x338>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	79ba      	ldrb	r2, [r7, #6]
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	210f      	movs	r1, #15
 800119e:	fa01 f202 	lsl.w	r2, r1, r2
 80011a2:	43d2      	mvns	r2, r2
 80011a4:	4013      	ands	r3, r2
 80011a6:	7979      	ldrb	r1, [r7, #5]
 80011a8:	79ba      	ldrb	r2, [r7, #6]
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	fa01 f202 	lsl.w	r2, r1, r2
 80011b0:	4611      	mov	r1, r2
 80011b2:	4a41      	ldr	r2, [pc, #260]	; (80012b8 <GPIO_voidSetPinMode+0x338>)
 80011b4:	430b      	orrs	r3, r1
 80011b6:	6053      	str	r3, [r2, #4]
				break;
 80011b8:	e065      	b.n	8001286 <GPIO_voidSetPinMode+0x306>
		    case GPIO_PORTF: 
				if(copy_u8PinID<=7)
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	2b07      	cmp	r3, #7
 80011be:	d812      	bhi.n	80011e6 <GPIO_voidSetPinMode+0x266>
				{
					SET_4BIT_Val(GPIOF->CRL,copy_u8PinID*4,copy_u8Mode);
 80011c0:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <GPIO_voidSetPinMode+0x33c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	79ba      	ldrb	r2, [r7, #6]
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	210f      	movs	r1, #15
 80011ca:	fa01 f202 	lsl.w	r2, r1, r2
 80011ce:	43d2      	mvns	r2, r2
 80011d0:	4013      	ands	r3, r2
 80011d2:	7979      	ldrb	r1, [r7, #5]
 80011d4:	79ba      	ldrb	r2, [r7, #6]
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	fa01 f202 	lsl.w	r2, r1, r2
 80011dc:	4611      	mov	r1, r2
 80011de:	4a37      	ldr	r2, [pc, #220]	; (80012bc <GPIO_voidSetPinMode+0x33c>)
 80011e0:	430b      	orrs	r3, r1
 80011e2:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOF->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 80011e4:	e051      	b.n	800128a <GPIO_voidSetPinMode+0x30a>
				else if(copy_u8PinID <=15)
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d84e      	bhi.n	800128a <GPIO_voidSetPinMode+0x30a>
					copy_u8PinID-=8;
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	3b08      	subs	r3, #8
 80011f0:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOF->CRH,copy_u8PinID*4,copy_u8Mode);
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <GPIO_voidSetPinMode+0x33c>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	79ba      	ldrb	r2, [r7, #6]
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	210f      	movs	r1, #15
 80011fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001200:	43d2      	mvns	r2, r2
 8001202:	4013      	ands	r3, r2
 8001204:	7979      	ldrb	r1, [r7, #5]
 8001206:	79ba      	ldrb	r2, [r7, #6]
 8001208:	0092      	lsls	r2, r2, #2
 800120a:	fa01 f202 	lsl.w	r2, r1, r2
 800120e:	4611      	mov	r1, r2
 8001210:	4a2a      	ldr	r2, [pc, #168]	; (80012bc <GPIO_voidSetPinMode+0x33c>)
 8001212:	430b      	orrs	r3, r1
 8001214:	6053      	str	r3, [r2, #4]
				break;
 8001216:	e038      	b.n	800128a <GPIO_voidSetPinMode+0x30a>
			case GPIO_PORTG: 
				if(copy_u8PinID<=7)
 8001218:	79bb      	ldrb	r3, [r7, #6]
 800121a:	2b07      	cmp	r3, #7
 800121c:	d812      	bhi.n	8001244 <GPIO_voidSetPinMode+0x2c4>
				{
					SET_4BIT_Val(GPIOG->CRL,copy_u8PinID*4,copy_u8Mode);
 800121e:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <GPIO_voidSetPinMode+0x340>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	79ba      	ldrb	r2, [r7, #6]
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	210f      	movs	r1, #15
 8001228:	fa01 f202 	lsl.w	r2, r1, r2
 800122c:	43d2      	mvns	r2, r2
 800122e:	4013      	ands	r3, r2
 8001230:	7979      	ldrb	r1, [r7, #5]
 8001232:	79ba      	ldrb	r2, [r7, #6]
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	fa01 f202 	lsl.w	r2, r1, r2
 800123a:	4611      	mov	r1, r2
 800123c:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <GPIO_voidSetPinMode+0x340>)
 800123e:	430b      	orrs	r3, r1
 8001240:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOG->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8001242:	e024      	b.n	800128e <GPIO_voidSetPinMode+0x30e>
				else if(copy_u8PinID <=15)
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	2b0f      	cmp	r3, #15
 8001248:	d821      	bhi.n	800128e <GPIO_voidSetPinMode+0x30e>
					copy_u8PinID-=8;
 800124a:	79bb      	ldrb	r3, [r7, #6]
 800124c:	3b08      	subs	r3, #8
 800124e:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOG->CRH,copy_u8PinID*4,copy_u8Mode);
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <GPIO_voidSetPinMode+0x340>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	79ba      	ldrb	r2, [r7, #6]
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	210f      	movs	r1, #15
 800125a:	fa01 f202 	lsl.w	r2, r1, r2
 800125e:	43d2      	mvns	r2, r2
 8001260:	4013      	ands	r3, r2
 8001262:	7979      	ldrb	r1, [r7, #5]
 8001264:	79ba      	ldrb	r2, [r7, #6]
 8001266:	0092      	lsls	r2, r2, #2
 8001268:	fa01 f202 	lsl.w	r2, r1, r2
 800126c:	4611      	mov	r1, r2
 800126e:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <GPIO_voidSetPinMode+0x340>)
 8001270:	430b      	orrs	r3, r1
 8001272:	6053      	str	r3, [r2, #4]
				break;
 8001274:	e00b      	b.n	800128e <GPIO_voidSetPinMode+0x30e>
				break;
 8001276:	bf00      	nop
 8001278:	e00e      	b.n	8001298 <GPIO_voidSetPinMode+0x318>
				break;
 800127a:	bf00      	nop
 800127c:	e00c      	b.n	8001298 <GPIO_voidSetPinMode+0x318>
				break;
 800127e:	bf00      	nop
 8001280:	e00a      	b.n	8001298 <GPIO_voidSetPinMode+0x318>
				break;
 8001282:	bf00      	nop
 8001284:	e008      	b.n	8001298 <GPIO_voidSetPinMode+0x318>
				break;
 8001286:	bf00      	nop
 8001288:	e006      	b.n	8001298 <GPIO_voidSetPinMode+0x318>
				break;
 800128a:	bf00      	nop
 800128c:	e004      	b.n	8001298 <GPIO_voidSetPinMode+0x318>
				break;
 800128e:	bf00      	nop
		}
	}
 8001290:	e002      	b.n	8001298 <GPIO_voidSetPinMode+0x318>
	else 
		lacal_u8ErrorState = STD_TYPE_NOK;
 8001292:	2300      	movs	r3, #0
 8001294:	73fb      	strb	r3, [r7, #15]
 8001296:	e000      	b.n	800129a <GPIO_voidSetPinMode+0x31a>
	}
 8001298:	bf00      	nop
	return lacal_u8ErrorState;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40010800 	.word	0x40010800
 80012ac:	40010c00 	.word	0x40010c00
 80012b0:	40011000 	.word	0x40011000
 80012b4:	40011400 	.word	0x40011400
 80012b8:	40011800 	.word	0x40011800
 80012bc:	40011c00 	.word	0x40011c00
 80012c0:	40012000 	.word	0x40012000

080012c4 <GPIO_voidSetPinValue>:


u8 GPIO_voidSetPinValue(u8 copy_u8portID,u8 copy_u8PinID,u8 copy_u8PinValue)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	460b      	mov	r3, r1
 80012d0:	71bb      	strb	r3, [r7, #6]
 80012d2:	4613      	mov	r3, r2
 80012d4:	717b      	strb	r3, [r7, #5]
	u8 lacal_u8ErrorState = STD_TYPE_OK;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15 && (copy_u8PinValue == 1 || copy_u8PinValue ==0 ))
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b07      	cmp	r3, #7
 80012de:	f200 80a7 	bhi.w	8001430 <GPIO_voidSetPinValue+0x16c>
 80012e2:	79bb      	ldrb	r3, [r7, #6]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	f200 80a3 	bhi.w	8001430 <GPIO_voidSetPinValue+0x16c>
 80012ea:	797b      	ldrb	r3, [r7, #5]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d003      	beq.n	80012f8 <GPIO_voidSetPinValue+0x34>
 80012f0:	797b      	ldrb	r3, [r7, #5]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f040 809c 	bne.w	8001430 <GPIO_voidSetPinValue+0x16c>
	{
		switch(copy_u8portID)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	2b06      	cmp	r3, #6
 80012fe:	f200 809a 	bhi.w	8001436 <GPIO_voidSetPinValue+0x172>
 8001302:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <GPIO_voidSetPinValue+0x44>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001325 	.word	0x08001325
 800130c:	0800134b 	.word	0x0800134b
 8001310:	08001371 	.word	0x08001371
 8001314:	08001397 	.word	0x08001397
 8001318:	080013bd 	.word	0x080013bd
 800131c:	080013e3 	.word	0x080013e3
 8001320:	08001409 	.word	0x08001409
		{
			case GPIO_PORTA:
				switch(copy_u8PinValue){
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <GPIO_voidSetPinValue+0x6c>
 800132a:	2b01      	cmp	r3, #1
 800132c:	d006      	beq.n	800133c <GPIO_voidSetPinValue+0x78>
				case 0:WRITE_BIT(GPIOA->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOA->BSRR,copy_u8PinID);break;}
				break;
 800132e:	e07e      	b.n	800142e <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOA->BRR,copy_u8PinID);break;
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	2201      	movs	r2, #1
 8001334:	409a      	lsls	r2, r3
 8001336:	4b43      	ldr	r3, [pc, #268]	; (8001444 <GPIO_voidSetPinValue+0x180>)
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	e005      	b.n	8001348 <GPIO_voidSetPinValue+0x84>
				case 1:WRITE_BIT(GPIOA->BSRR,copy_u8PinID);break;}
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	2201      	movs	r2, #1
 8001340:	409a      	lsls	r2, r3
 8001342:	4b40      	ldr	r3, [pc, #256]	; (8001444 <GPIO_voidSetPinValue+0x180>)
 8001344:	611a      	str	r2, [r3, #16]
 8001346:	bf00      	nop
				break;
 8001348:	e071      	b.n	800142e <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTB:
				switch(copy_u8PinValue){
 800134a:	797b      	ldrb	r3, [r7, #5]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <GPIO_voidSetPinValue+0x92>
 8001350:	2b01      	cmp	r3, #1
 8001352:	d006      	beq.n	8001362 <GPIO_voidSetPinValue+0x9e>
				case 0:WRITE_BIT(GPIOB->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOB->BSRR,copy_u8PinID);break;}
				break;
 8001354:	e06b      	b.n	800142e <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOB->BRR,copy_u8PinID);break;
 8001356:	79bb      	ldrb	r3, [r7, #6]
 8001358:	2201      	movs	r2, #1
 800135a:	409a      	lsls	r2, r3
 800135c:	4b3a      	ldr	r3, [pc, #232]	; (8001448 <GPIO_voidSetPinValue+0x184>)
 800135e:	615a      	str	r2, [r3, #20]
 8001360:	e005      	b.n	800136e <GPIO_voidSetPinValue+0xaa>
				case 1:WRITE_BIT(GPIOB->BSRR,copy_u8PinID);break;}
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	2201      	movs	r2, #1
 8001366:	409a      	lsls	r2, r3
 8001368:	4b37      	ldr	r3, [pc, #220]	; (8001448 <GPIO_voidSetPinValue+0x184>)
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	bf00      	nop
				break;
 800136e:	e05e      	b.n	800142e <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTC:
				switch(copy_u8PinValue){
 8001370:	797b      	ldrb	r3, [r7, #5]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <GPIO_voidSetPinValue+0xb8>
 8001376:	2b01      	cmp	r3, #1
 8001378:	d006      	beq.n	8001388 <GPIO_voidSetPinValue+0xc4>
				case 0:WRITE_BIT(GPIOC->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOC->BSRR,copy_u8PinID);break;}
				break;
 800137a:	e058      	b.n	800142e <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOC->BRR,copy_u8PinID);break;
 800137c:	79bb      	ldrb	r3, [r7, #6]
 800137e:	2201      	movs	r2, #1
 8001380:	409a      	lsls	r2, r3
 8001382:	4b32      	ldr	r3, [pc, #200]	; (800144c <GPIO_voidSetPinValue+0x188>)
 8001384:	615a      	str	r2, [r3, #20]
 8001386:	e005      	b.n	8001394 <GPIO_voidSetPinValue+0xd0>
				case 1:WRITE_BIT(GPIOC->BSRR,copy_u8PinID);break;}
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	2201      	movs	r2, #1
 800138c:	409a      	lsls	r2, r3
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <GPIO_voidSetPinValue+0x188>)
 8001390:	611a      	str	r2, [r3, #16]
 8001392:	bf00      	nop
				break;
 8001394:	e04b      	b.n	800142e <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTD:
				switch(copy_u8PinValue){
 8001396:	797b      	ldrb	r3, [r7, #5]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <GPIO_voidSetPinValue+0xde>
 800139c:	2b01      	cmp	r3, #1
 800139e:	d006      	beq.n	80013ae <GPIO_voidSetPinValue+0xea>
				case 0:WRITE_BIT(GPIOD->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOD->BSRR,copy_u8PinID);break;}
				break;
 80013a0:	e045      	b.n	800142e <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOD->BRR,copy_u8PinID);break;
 80013a2:	79bb      	ldrb	r3, [r7, #6]
 80013a4:	2201      	movs	r2, #1
 80013a6:	409a      	lsls	r2, r3
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <GPIO_voidSetPinValue+0x18c>)
 80013aa:	615a      	str	r2, [r3, #20]
 80013ac:	e005      	b.n	80013ba <GPIO_voidSetPinValue+0xf6>
				case 1:WRITE_BIT(GPIOD->BSRR,copy_u8PinID);break;}
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	2201      	movs	r2, #1
 80013b2:	409a      	lsls	r2, r3
 80013b4:	4b26      	ldr	r3, [pc, #152]	; (8001450 <GPIO_voidSetPinValue+0x18c>)
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	bf00      	nop
				break;
 80013ba:	e038      	b.n	800142e <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTE:
				switch(copy_u8PinValue){
 80013bc:	797b      	ldrb	r3, [r7, #5]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <GPIO_voidSetPinValue+0x104>
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d006      	beq.n	80013d4 <GPIO_voidSetPinValue+0x110>
				case 0:WRITE_BIT(GPIOE->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOE->BSRR,copy_u8PinID);break;}
				break;
 80013c6:	e032      	b.n	800142e <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOE->BRR,copy_u8PinID);break;
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	2201      	movs	r2, #1
 80013cc:	409a      	lsls	r2, r3
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <GPIO_voidSetPinValue+0x190>)
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	e005      	b.n	80013e0 <GPIO_voidSetPinValue+0x11c>
				case 1:WRITE_BIT(GPIOE->BSRR,copy_u8PinID);break;}
 80013d4:	79bb      	ldrb	r3, [r7, #6]
 80013d6:	2201      	movs	r2, #1
 80013d8:	409a      	lsls	r2, r3
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <GPIO_voidSetPinValue+0x190>)
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	bf00      	nop
				break;
 80013e0:	e025      	b.n	800142e <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTF:
				switch(copy_u8PinValue){
 80013e2:	797b      	ldrb	r3, [r7, #5]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <GPIO_voidSetPinValue+0x12a>
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d006      	beq.n	80013fa <GPIO_voidSetPinValue+0x136>
				case 0:WRITE_BIT(GPIOF->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOF->BSRR,copy_u8PinID);break;}
				break;
 80013ec:	e01f      	b.n	800142e <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOF->BRR,copy_u8PinID);break;
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	2201      	movs	r2, #1
 80013f2:	409a      	lsls	r2, r3
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <GPIO_voidSetPinValue+0x194>)
 80013f6:	615a      	str	r2, [r3, #20]
 80013f8:	e005      	b.n	8001406 <GPIO_voidSetPinValue+0x142>
				case 1:WRITE_BIT(GPIOF->BSRR,copy_u8PinID);break;}
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	2201      	movs	r2, #1
 80013fe:	409a      	lsls	r2, r3
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <GPIO_voidSetPinValue+0x194>)
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	bf00      	nop
				break;
 8001406:	e012      	b.n	800142e <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTG:
				switch(copy_u8PinValue){
 8001408:	797b      	ldrb	r3, [r7, #5]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <GPIO_voidSetPinValue+0x150>
 800140e:	2b01      	cmp	r3, #1
 8001410:	d006      	beq.n	8001420 <GPIO_voidSetPinValue+0x15c>
				case 0:WRITE_BIT(GPIOG->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOG->BSRR,copy_u8PinID);break;}
				break;
 8001412:	e00b      	b.n	800142c <GPIO_voidSetPinValue+0x168>
				case 0:WRITE_BIT(GPIOG->BRR,copy_u8PinID);break;
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	2201      	movs	r2, #1
 8001418:	409a      	lsls	r2, r3
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <GPIO_voidSetPinValue+0x198>)
 800141c:	615a      	str	r2, [r3, #20]
 800141e:	e005      	b.n	800142c <GPIO_voidSetPinValue+0x168>
				case 1:WRITE_BIT(GPIOG->BSRR,copy_u8PinID);break;}
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	2201      	movs	r2, #1
 8001424:	409a      	lsls	r2, r3
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <GPIO_voidSetPinValue+0x198>)
 8001428:	611a      	str	r2, [r3, #16]
 800142a:	bf00      	nop
				break;
 800142c:	bf00      	nop
		}
	}
 800142e:	e002      	b.n	8001436 <GPIO_voidSetPinValue+0x172>
    else 
		lacal_u8ErrorState = STD_TYPE_NOK;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]
 8001434:	e000      	b.n	8001438 <GPIO_voidSetPinValue+0x174>
	}
 8001436:	bf00      	nop
	return lacal_u8ErrorState;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	40010800 	.word	0x40010800
 8001448:	40010c00 	.word	0x40010c00
 800144c:	40011000 	.word	0x40011000
 8001450:	40011400 	.word	0x40011400
 8001454:	40011800 	.word	0x40011800
 8001458:	40011c00 	.word	0x40011c00
 800145c:	40012000 	.word	0x40012000

08001460 <GPIO_GetPinValue>:
		lacal_u8ErrorState = STD_TYPE_NOK;
	return lacal_u8ErrorState;
}

u8 GPIO_GetPinValue(u8 copy_u8portID,u8 copy_u8PinID)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	460a      	mov	r2, r1
 800146a:	71fb      	strb	r3, [r7, #7]
 800146c:	4613      	mov	r3, r2
 800146e:	71bb      	strb	r3, [r7, #6]
	//u8 lacal_u8ErrorState = STD_TYPE_OK;
	u8 Pin_Value=0;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	2b07      	cmp	r3, #7
 8001478:	d85e      	bhi.n	8001538 <GPIO_GetPinValue+0xd8>
 800147a:	79bb      	ldrb	r3, [r7, #6]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d85b      	bhi.n	8001538 <GPIO_GetPinValue+0xd8>
	{
		switch(copy_u8portID)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	3b01      	subs	r3, #1
 8001484:	2b06      	cmp	r3, #6
 8001486:	d857      	bhi.n	8001538 <GPIO_GetPinValue+0xd8>
 8001488:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <GPIO_GetPinValue+0x30>)
 800148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148e:	bf00      	nop
 8001490:	080014ad 	.word	0x080014ad
 8001494:	080014c1 	.word	0x080014c1
 8001498:	080014d5 	.word	0x080014d5
 800149c:	080014e9 	.word	0x080014e9
 80014a0:	080014fd 	.word	0x080014fd
 80014a4:	08001511 	.word	0x08001511
 80014a8:	08001525 	.word	0x08001525
		{
			case GPIO_PORTA:  Pin_Value = GET_BIT(GPIOA->IDR,copy_u8PinID);break;
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <GPIO_GetPinValue+0xe4>)
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	fa22 f303 	lsr.w	r3, r2, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
 80014be:	e03b      	b.n	8001538 <GPIO_GetPinValue+0xd8>
			case GPIO_PORTB:  Pin_Value = GET_BIT(GPIOB->IDR,copy_u8PinID);break;
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <GPIO_GetPinValue+0xe8>)
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	e031      	b.n	8001538 <GPIO_GetPinValue+0xd8>
			case GPIO_PORTC:  Pin_Value = GET_BIT(GPIOC->IDR,copy_u8PinID);break;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <GPIO_GetPinValue+0xec>)
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	79bb      	ldrb	r3, [r7, #6]
 80014da:	fa22 f303 	lsr.w	r3, r2, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	73fb      	strb	r3, [r7, #15]
 80014e6:	e027      	b.n	8001538 <GPIO_GetPinValue+0xd8>
			case GPIO_PORTD:  Pin_Value = GET_BIT(GPIOD->IDR,copy_u8PinID);break;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <GPIO_GetPinValue+0xf0>)
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	79bb      	ldrb	r3, [r7, #6]
 80014ee:	fa22 f303 	lsr.w	r3, r2, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	e01d      	b.n	8001538 <GPIO_GetPinValue+0xd8>
			case GPIO_PORTE:  Pin_Value = GET_BIT(GPIOE->IDR,copy_u8PinID);break;
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <GPIO_GetPinValue+0xf4>)
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	79bb      	ldrb	r3, [r7, #6]
 8001502:	fa22 f303 	lsr.w	r3, r2, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	e013      	b.n	8001538 <GPIO_GetPinValue+0xd8>
			case GPIO_PORTF:  Pin_Value = GET_BIT(GPIOF->IDR,copy_u8PinID);break;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <GPIO_GetPinValue+0xf8>)
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	fa22 f303 	lsr.w	r3, r2, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	73fb      	strb	r3, [r7, #15]
 8001522:	e009      	b.n	8001538 <GPIO_GetPinValue+0xd8>
			case GPIO_PORTG:  Pin_Value = GET_BIT(GPIOG->IDR,copy_u8PinID);break;
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <GPIO_GetPinValue+0xfc>)
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	79bb      	ldrb	r3, [r7, #6]
 800152a:	fa22 f303 	lsr.w	r3, r2, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	bf00      	nop
		}             
	}
		//else
		//lacal_u8ErrorState = STD_TYPE_NOK;
	return Pin_Value;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40010800 	.word	0x40010800
 8001548:	40010c00 	.word	0x40010c00
 800154c:	40011000 	.word	0x40011000
 8001550:	40011400 	.word	0x40011400
 8001554:	40011800 	.word	0x40011800
 8001558:	40011c00 	.word	0x40011c00
 800155c:	40012000 	.word	0x40012000

08001560 <NVIC_voidEnableInterrupt>:
 #include "NVIC_interface.h"
 #include "NVIC_private.h"
 #include "NVIC_config.h"
 
void NVIC_voidEnableInterrupt(u8 copy_u8IntNumber)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
	if(copy_u8IntNumber<31)
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b1e      	cmp	r3, #30
 800156e:	d805      	bhi.n	800157c <NVIC_voidEnableInterrupt+0x1c>
	{
		NVIC_ISER0=1<<copy_u8IntNumber;
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2201      	movs	r2, #1
 8001574:	409a      	lsls	r2, r3
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <NVIC_voidEnableInterrupt+0x54>)
 8001578:	601a      	str	r2, [r3, #0]
	else if(copy_u8IntNumber<95)
	{
		copy_u8IntNumber-=64;
		NVIC_ISER2=1<<copy_u8IntNumber;
	}
}
 800157a:	e016      	b.n	80015aa <NVIC_voidEnableInterrupt+0x4a>
	else if(copy_u8IntNumber<63)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	2b3e      	cmp	r3, #62	; 0x3e
 8001580:	d808      	bhi.n	8001594 <NVIC_voidEnableInterrupt+0x34>
		copy_u8IntNumber-=32;
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	3b20      	subs	r3, #32
 8001586:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1=1<<copy_u8IntNumber;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2201      	movs	r2, #1
 800158c:	409a      	lsls	r2, r3
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <NVIC_voidEnableInterrupt+0x58>)
 8001590:	601a      	str	r2, [r3, #0]
}
 8001592:	e00a      	b.n	80015aa <NVIC_voidEnableInterrupt+0x4a>
	else if(copy_u8IntNumber<95)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	2b5e      	cmp	r3, #94	; 0x5e
 8001598:	d807      	bhi.n	80015aa <NVIC_voidEnableInterrupt+0x4a>
		copy_u8IntNumber-=64;
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	3b40      	subs	r3, #64	; 0x40
 800159e:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER2=1<<copy_u8IntNumber;
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2201      	movs	r2, #1
 80015a4:	409a      	lsls	r2, r3
 80015a6:	4b05      	ldr	r3, [pc, #20]	; (80015bc <NVIC_voidEnableInterrupt+0x5c>)
 80015a8:	601a      	str	r2, [r3, #0]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	e000e100 	.word	0xe000e100
 80015b8:	e000e104 	.word	0xe000e104
 80015bc:	e000e108 	.word	0xe000e108

080015c0 <MOTOR_init>:
#include "PWM_DCmotor_init.h"
#include "GPIO_interface.h"


void MOTOR_init (u8 A_u8MotorNum)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
	if (A_u8MotorNum>0)
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d021      	beq.n	8001614 <MOTOR_init+0x54>
	{
		switch(A_u8MotorNum)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d002      	beq.n	80015dc <MOTOR_init+0x1c>
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d00e      	beq.n	80015f8 <MOTOR_init+0x38>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINL,GPIO_OUTPUT_10M_PP);
//			MTimer_voidInit(MOTOR2_SecondTimerType);
			break;
		}
	}
}
 80015da:	e01b      	b.n	8001614 <MOTOR_init+0x54>
			MTimer_voidInit(MOTOR1_FirstTimerType);
 80015dc:	2002      	movs	r0, #2
 80015de:	f000 f9cd 	bl	800197c <MTimer_voidInit>
			GPIO_voidSetPinMode(MOTOR1_PORT,MOTOR1_PINR,GPIO_OUTPUT_10M_PP);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2100      	movs	r1, #0
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff fcca 	bl	8000f80 <GPIO_voidSetPinMode>
		    GPIO_voidSetPinMode(MOTOR1_PORT,MOTOR1_PINL,GPIO_OUTPUT_10M_PP);
 80015ec:	2201      	movs	r2, #1
 80015ee:	2105      	movs	r1, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff fcc5 	bl	8000f80 <GPIO_voidSetPinMode>
			break;
 80015f6:	e00d      	b.n	8001614 <MOTOR_init+0x54>
			MTimer_voidInit(MOTOR2_FirstTimerType);
 80015f8:	2002      	movs	r0, #2
 80015fa:	f000 f9bf 	bl	800197c <MTimer_voidInit>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINR,GPIO_OUTPUT_10M_PP);
 80015fe:	2201      	movs	r2, #1
 8001600:	2106      	movs	r1, #6
 8001602:	2001      	movs	r0, #1
 8001604:	f7ff fcbc 	bl	8000f80 <GPIO_voidSetPinMode>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINL,GPIO_OUTPUT_10M_PP);
 8001608:	2201      	movs	r2, #1
 800160a:	2107      	movs	r1, #7
 800160c:	2001      	movs	r0, #1
 800160e:	f7ff fcb7 	bl	8000f80 <GPIO_voidSetPinMode>
			break;
 8001612:	bf00      	nop
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <MOTOR_CounterClockWise>:

void MOTOR_CounterClockWise  (u8 A_u8MotorNum , u16 A_u16CaptureValue )
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	460a      	mov	r2, r1
 8001626:	71fb      	strb	r3, [r7, #7]
 8001628:	4613      	mov	r3, r2
 800162a:	80bb      	strh	r3, [r7, #4]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d02a      	beq.n	8001688 <MOTOR_CounterClockWise+0x6c>
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d827      	bhi.n	8001688 <MOTOR_CounterClockWise+0x6c>
	{
		switch(A_u8MotorNum)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d002      	beq.n	8001644 <MOTOR_CounterClockWise+0x28>
 800163e:	2b02      	cmp	r3, #2
 8001640:	d011      	beq.n	8001666 <MOTOR_CounterClockWise+0x4a>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_LOW);
//			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_SecondChannelNumber,0);
			break;
		}
	}
}
 8001642:	e021      	b.n	8001688 <MOTOR_CounterClockWise+0x6c>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,A_u16CaptureValue);
 8001644:	88bb      	ldrh	r3, [r7, #4]
 8001646:	461a      	mov	r2, r3
 8001648:	2103      	movs	r1, #3
 800164a:	2002      	movs	r0, #2
 800164c:	f000 faa0 	bl	8001b90 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINR, GPIO_HIGH);
 8001650:	2201      	movs	r2, #1
 8001652:	2100      	movs	r1, #0
 8001654:	2001      	movs	r0, #1
 8001656:	f7ff fe35 	bl	80012c4 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINL, GPIO_LOW);
 800165a:	2200      	movs	r2, #0
 800165c:	2105      	movs	r1, #5
 800165e:	2001      	movs	r0, #1
 8001660:	f7ff fe30 	bl	80012c4 <GPIO_voidSetPinValue>
			break;
 8001664:	e010      	b.n	8001688 <MOTOR_CounterClockWise+0x6c>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,A_u16CaptureValue);
 8001666:	88bb      	ldrh	r3, [r7, #4]
 8001668:	461a      	mov	r2, r3
 800166a:	2104      	movs	r1, #4
 800166c:	2002      	movs	r0, #2
 800166e:	f000 fa8f 	bl	8001b90 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINR, GPIO_HIGH);
 8001672:	2201      	movs	r2, #1
 8001674:	2106      	movs	r1, #6
 8001676:	2001      	movs	r0, #1
 8001678:	f7ff fe24 	bl	80012c4 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_LOW);
 800167c:	2200      	movs	r2, #0
 800167e:	2107      	movs	r1, #7
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff fe1f 	bl	80012c4 <GPIO_voidSetPinValue>
			break;
 8001686:	bf00      	nop
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <MOTOR_ClockWise>:

void MOTOR_ClockWise  (u8 A_u8MotorNum , u16 A_u16CaptureValue)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	460a      	mov	r2, r1
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	4613      	mov	r3, r2
 800169e:	80bb      	strh	r3, [r7, #4]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d02a      	beq.n	80016fc <MOTOR_ClockWise+0x6c>
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d827      	bhi.n	80016fc <MOTOR_ClockWise+0x6c>
	{
		switch(A_u8MotorNum)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d002      	beq.n	80016b8 <MOTOR_ClockWise+0x28>
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d011      	beq.n	80016da <MOTOR_ClockWise+0x4a>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_HIGH);
//			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR2_SecondChannelNumber,A_u16CaptureValue);
			break;
		}
	}
}
 80016b6:	e021      	b.n	80016fc <MOTOR_ClockWise+0x6c>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,A_u16CaptureValue);
 80016b8:	88bb      	ldrh	r3, [r7, #4]
 80016ba:	461a      	mov	r2, r3
 80016bc:	2103      	movs	r1, #3
 80016be:	2002      	movs	r0, #2
 80016c0:	f000 fa66 	bl	8001b90 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINR, GPIO_LOW);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2100      	movs	r1, #0
 80016c8:	2001      	movs	r0, #1
 80016ca:	f7ff fdfb 	bl	80012c4 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINL, GPIO_HIGH);
 80016ce:	2201      	movs	r2, #1
 80016d0:	2105      	movs	r1, #5
 80016d2:	2001      	movs	r0, #1
 80016d4:	f7ff fdf6 	bl	80012c4 <GPIO_voidSetPinValue>
			break;
 80016d8:	e010      	b.n	80016fc <MOTOR_ClockWise+0x6c>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR2_FirstChannelNumber,A_u16CaptureValue);
 80016da:	88bb      	ldrh	r3, [r7, #4]
 80016dc:	461a      	mov	r2, r3
 80016de:	2104      	movs	r1, #4
 80016e0:	2002      	movs	r0, #2
 80016e2:	f000 fa55 	bl	8001b90 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINR, GPIO_LOW);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2106      	movs	r1, #6
 80016ea:	2001      	movs	r0, #1
 80016ec:	f7ff fdea 	bl	80012c4 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_HIGH);
 80016f0:	2201      	movs	r2, #1
 80016f2:	2107      	movs	r1, #7
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff fde5 	bl	80012c4 <GPIO_voidSetPinValue>
			break;
 80016fa:	bf00      	nop
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <MOTOR_Stop>:

void MOTOR_Stop  (u8 A_u8MotorNum)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d014      	beq.n	800173e <MOTOR_Stop+0x3a>
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d811      	bhi.n	800173e <MOTOR_Stop+0x3a>
	{
		switch(A_u8MotorNum)
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d002      	beq.n	8001726 <MOTOR_Stop+0x22>
 8001720:	2b02      	cmp	r3, #2
 8001722:	d006      	beq.n	8001732 <MOTOR_Stop+0x2e>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,0);
//			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_SecondChannelNumber,0);
			break;
		}
	}
}
 8001724:	e00b      	b.n	800173e <MOTOR_Stop+0x3a>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,0);
 8001726:	2200      	movs	r2, #0
 8001728:	2103      	movs	r1, #3
 800172a:	2002      	movs	r0, #2
 800172c:	f000 fa30 	bl	8001b90 <MTimer_voidPWM>
			break;
 8001730:	e005      	b.n	800173e <MOTOR_Stop+0x3a>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,0);
 8001732:	2200      	movs	r2, #0
 8001734:	2104      	movs	r1, #4
 8001736:	2002      	movs	r0, #2
 8001738:	f000 fa2a 	bl	8001b90 <MTimer_voidPWM>
			break;
 800173c:	bf00      	nop
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <RCC_voidInitSysClock>:
#include "RCC_interface.h"
#include "RCC_config.h"


void RCC_voidInitSysClock(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
	#if RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		SET_BIT(RCC->RCC_CR,16);
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <RCC_voidInitSysClock+0x60>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <RCC_voidInitSysClock+0x60>)
 8001752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CR,18);
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <RCC_voidInitSysClock+0x60>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <RCC_voidInitSysClock+0x60>)
 800175e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CFGR,0);
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <RCC_voidInitSysClock+0x60>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <RCC_voidInitSysClock+0x60>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->RCC_CFGR,1);
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <RCC_voidInitSysClock+0x60>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <RCC_voidInitSysClock+0x60>)
 8001776:	f023 0302 	bic.w	r3, r3, #2
 800177a:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->RCC_CFGR,1);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_AHP_PRESCALER   ==RCC_AHP_DIV_1
		CLR_BIT(RCC->RCC_CFGR,7);
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <RCC_voidInitSysClock+0x60>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <RCC_voidInitSysClock+0x60>)
 8001782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001786:	6053      	str	r3, [r2, #4]
	     SET_BIT(RCC->RCC_CFGR,7);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_APB1_PRESCALER   ==RCC_APB1_DIV_1
		CLR_BIT(RCC->RCC_CFGR,8);
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <RCC_voidInitSysClock+0x60>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <RCC_voidInitSysClock+0x60>)
 800178e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001792:	6053      	str	r3, [r2, #4]
	    SET_BIT(RCC->RCC_CFGR,10);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_APB2_PRESCALER   ==RCC_APB2_DIV_1
		CLR_BIT(RCC->RCC_CFGR,11);
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <RCC_voidInitSysClock+0x60>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a03      	ldr	r2, [pc, #12]	; (80017a8 <RCC_voidInitSysClock+0x60>)
 800179a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800179e:	6053      	str	r3, [r2, #4]
	    SET_BIT(RCC->RCC_CFGR,12);
	    SET_BIT(RCC->RCC_CFGR,13);
	#else 
		#error("wrong choise")
	#endif
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000

080017ac <RCC_voidEnablePeripheral>:
	#endif
}


void RCC_voidEnablePeripheral(u8 Copy_u8Bus, u8 Copy_u8Peripheral)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	460a      	mov	r2, r1
 80017b6:	71fb      	strb	r3, [r7, #7]
 80017b8:	4613      	mov	r3, r2
 80017ba:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8Bus)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d00f      	beq.n	80017e2 <RCC_voidEnablePeripheral+0x36>
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d018      	beq.n	80017f8 <RCC_voidEnablePeripheral+0x4c>
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d000      	beq.n	80017cc <RCC_voidEnablePeripheral+0x20>
			break;
		case RCC_APB2:
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
			break;
	}
}
 80017ca:	e020      	b.n	800180e <RCC_voidEnablePeripheral+0x62>
			SET_BIT(RCC->RCC_AHBENR,Copy_u8Peripheral);
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <RCC_voidEnablePeripheral+0x6c>)
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	79ba      	ldrb	r2, [r7, #6]
 80017d2:	2101      	movs	r1, #1
 80017d4:	fa01 f202 	lsl.w	r2, r1, r2
 80017d8:	4611      	mov	r1, r2
 80017da:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <RCC_voidEnablePeripheral+0x6c>)
 80017dc:	430b      	orrs	r3, r1
 80017de:	6153      	str	r3, [r2, #20]
			break;
 80017e0:	e015      	b.n	800180e <RCC_voidEnablePeripheral+0x62>
			SET_BIT(RCC->RCC_APB1ENR,Copy_u8Peripheral);
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <RCC_voidEnablePeripheral+0x6c>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	79ba      	ldrb	r2, [r7, #6]
 80017e8:	2101      	movs	r1, #1
 80017ea:	fa01 f202 	lsl.w	r2, r1, r2
 80017ee:	4611      	mov	r1, r2
 80017f0:	4a09      	ldr	r2, [pc, #36]	; (8001818 <RCC_voidEnablePeripheral+0x6c>)
 80017f2:	430b      	orrs	r3, r1
 80017f4:	61d3      	str	r3, [r2, #28]
			break;
 80017f6:	e00a      	b.n	800180e <RCC_voidEnablePeripheral+0x62>
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <RCC_voidEnablePeripheral+0x6c>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	79ba      	ldrb	r2, [r7, #6]
 80017fe:	2101      	movs	r1, #1
 8001800:	fa01 f202 	lsl.w	r2, r1, r2
 8001804:	4611      	mov	r1, r2
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <RCC_voidEnablePeripheral+0x6c>)
 8001808:	430b      	orrs	r3, r1
 800180a:	6193      	str	r3, [r2, #24]
			break;
 800180c:	bf00      	nop
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	40021000 	.word	0x40021000

0800181c <truncate_queue>:
}


// function to handle dequeue operation
static SPI_ERROR_STATUS_t truncate_queue(void)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
	
	//status code
    SPI_ERROR_STATUS_t loc_enu_StatusCode = SPI_OKAY;
 8001822:	2300      	movs	r3, #0
 8001824:	71fb      	strb	r3, [r7, #7]
	
	// check if all bytes has been sent OR queue is empty
	if((gl_SPI_data_queue.s16_front_queue > gl_SPI_data_queue.s16_rear_queue) || (gl_SPI_data_queue.s16_front_queue == EMPTY_POSITOIN))
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <truncate_queue+0x70>)
 8001828:	f993 20c8 	ldrsb.w	r2, [r3, #200]	; 0xc8
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <truncate_queue+0x70>)
 800182e:	f993 30c9 	ldrsb.w	r3, [r3, #201]	; 0xc9
 8001832:	429a      	cmp	r2, r3
 8001834:	dc05      	bgt.n	8001842 <truncate_queue+0x26>
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <truncate_queue+0x70>)
 8001838:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d10a      	bne.n	8001858 <truncate_queue+0x3c>
	{
		// set front and rear to defaults
		gl_SPI_data_queue.s16_front_queue = EMPTY_POSITOIN;
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <truncate_queue+0x70>)
 8001844:	22ff      	movs	r2, #255	; 0xff
 8001846:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		gl_SPI_data_queue.s16_rear_queue  = EMPTY_POSITOIN;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <truncate_queue+0x70>)
 800184c:	22ff      	movs	r2, #255	; 0xff
 800184e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		
		//status code queue is empty
		loc_enu_StatusCode = QUEUE_EMPTY;
 8001852:	2302      	movs	r3, #2
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	e012      	b.n	800187e <truncate_queue+0x62>
	}
	else
	{
		//send current byte and increment front
		SPI1->DR = gl_SPI_data_queue.u16_arr_data[gl_SPI_data_queue.s16_front_queue];
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <truncate_queue+0x70>)
 800185a:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800185e:	461a      	mov	r2, r3
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <truncate_queue+0x70>)
 8001862:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <truncate_queue+0x74>)
 8001868:	60da      	str	r2, [r3, #12]
		gl_SPI_data_queue.s16_front_queue++;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <truncate_queue+0x70>)
 800186c:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 8001870:	b2db      	uxtb	r3, r3
 8001872:	3301      	adds	r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	b25a      	sxtb	r2, r3
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <truncate_queue+0x70>)
 800187a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	}
	return loc_enu_StatusCode;
 800187e:	79fb      	ldrb	r3, [r7, #7]
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000000 	.word	0x20000000
 8001890:	40013000 	.word	0x40013000

08001894 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
    // TODO HANDLE ISR FOR RECEPTION
	#if   SPI1_MASTER_SLAVE == SPI_SLAVE
       sgl_Recieve_Index = (u8)SPI1->DR;
       gl_ptr_Function();
    #elif SPI1_MASTER_SLAVE == SPI_MASTER
      if (truncate_queue() == QUEUE_EMPTY)
 8001898:	f7ff ffc0 	bl	800181c <truncate_queue>
 800189c:	4603      	mov	r3, r0
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d106      	bne.n	80018b0 <SPI1_IRQHandler+0x1c>
      {
        if (gl_ptr_Function != PTR_NULL)
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SPI1_IRQHandler+0x20>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <SPI1_IRQHandler+0x1c>
        {
            gl_ptr_Function();
 80018aa:	4b02      	ldr	r3, [pc, #8]	; (80018b4 <SPI1_IRQHandler+0x20>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4798      	blx	r3
        }
      }
    #endif

}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200000fc 	.word	0x200000fc

080018b8 <MSTK_voidInit>:

/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;

void MSTK_voidInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
#if MSTK_CLK_SRC == MSTK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	MSTK -> CTRL = 0x00000004;
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	MSTK -> CTRL = 0;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <MSTK_voidInit+0x14>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]

#endif
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <MSTK_voidSetBusyWait>:

void MSTK_voidSetBusyWait( u32 Copy_u32Ticks )
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks;
 80018d8:	4a10      	ldr	r2, [pc, #64]	; (800191c <MSTK_voidSetBusyWait+0x4c>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6053      	str	r3, [r2, #4]

	/* Start Timer */
	SET_BIT(MSTK->CTRL, 0);
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MSTK_voidSetBusyWait+0x4c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <MSTK_voidSetBusyWait+0x4c>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6013      	str	r3, [r2, #0]

	/* Wait till flag is raised */
	while( (GET_BIT(MSTK->CTRL,16)) == 0);
 80018ea:	bf00      	nop
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MSTK_voidSetBusyWait+0x4c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0c1b      	lsrs	r3, r3, #16
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f8      	beq.n	80018ec <MSTK_voidSetBusyWait+0x1c>

	/* Stop Timer */
	SET_BIT(MSTK->CTRL, 0);
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MSTK_voidSetBusyWait+0x4c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a07      	ldr	r2, [pc, #28]	; (800191c <MSTK_voidSetBusyWait+0x4c>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD = 0;
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <MSTK_voidSetBusyWait+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
	MSTK -> VAL  = 0;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <MSTK_voidSetBusyWait+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
	
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	e000e010 	.word	0xe000e010

08001920 <SysTick_Handler>:

	return Local_u32RemainTime;
}

void SysTick_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary ;

	if (MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <SysTick_Handler+0x50>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d111      	bne.n	8001952 <SysTick_Handler+0x32>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK->CTRL, 1);
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <SysTick_Handler+0x54>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a10      	ldr	r2, [pc, #64]	; (8001974 <SysTick_Handler+0x54>)
 8001934:	f023 0302 	bic.w	r3, r3, #2
 8001938:	6013      	str	r3, [r2, #0]

		/* Stop Timer */
		SET_BIT(MSTK->CTRL, 0);
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <SysTick_Handler+0x54>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <SysTick_Handler+0x54>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD = 0;
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <SysTick_Handler+0x54>)
 8001948:	2200      	movs	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
		MSTK -> VAL  = 0;
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <SysTick_Handler+0x54>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
	}

	/* Callback notification */
	MSTK_CallBack();
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <SysTick_Handler+0x58>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4798      	blx	r3

	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(MSTK->CTRL,16);
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <SysTick_Handler+0x54>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	0c1b      	lsrs	r3, r3, #16
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	71fb      	strb	r3, [r7, #7]
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000104 	.word	0x20000104
 8001974:	e000e010 	.word	0xe000e010
 8001978:	20000100 	.word	0x20000100

0800197c <MTimer_voidInit>:
u8 channel31_set = 0;
u8 channel32_set = 0;


void MTimer_voidInit (u8 A_u8TimerSelected)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]

	/* Enable pinout of ADC (PortA , PORTB) from RCC */
	//MRCC_voidEnablePerephiralClock(RCC_AHB1 , RCC_EN_GPIOA) ;
	//MRCC_voidEnablePerephiralClock(RCC_AHB1 , RCC_EN_GPIOB) ;

	switch (A_u8TimerSelected)
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	3b01      	subs	r3, #1
 800198a:	2b03      	cmp	r3, #3
 800198c:	f200 80f5 	bhi.w	8001b7a <MTimer_voidInit+0x1fe>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <MTimer_voidInit+0x1c>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	080019a9 	.word	0x080019a9
 800199c:	08001a0d 	.word	0x08001a0d
 80019a0:	08001a9f 	.word	0x08001a9f
 80019a4:	08001b0d 	.word	0x08001b0d
		/**                             Init TIM1                                    **/
		/******************************************************************************/

			/* Select the Direction */
            #if   TIM1_DIRECTION == UP_COUNTER
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_DIR_BIT) ;
 80019a8:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <MTimer_voidInit+0x208>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a75      	ldr	r2, [pc, #468]	; (8001b84 <MTimer_voidInit+0x208>)
 80019ae:	f023 0310 	bic.w	r3, r3, #16
 80019b2:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM1_DIRECTION"
            #endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_1->CR1 , TIM1_CR1_CMS_BIT0) ;
 80019b4:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <MTimer_voidInit+0x208>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a72      	ldr	r2, [pc, #456]	; (8001b84 <MTimer_voidInit+0x208>)
 80019ba:	f023 0320 	bic.w	r3, r3, #32
 80019be:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_1->CR1 , TIM1_CR1_CMS_BIT1) ;
 80019c0:	4b70      	ldr	r3, [pc, #448]	; (8001b84 <MTimer_voidInit+0x208>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a6f      	ldr	r2, [pc, #444]	; (8001b84 <MTimer_voidInit+0x208>)
 80019c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019ca:	6013      	str	r3, [r2, #0]

			/* set the timer division */
            #if   TIM1_DIVISION == tCK_INT_x_1
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_CKD_BIT0) ;
 80019cc:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <MTimer_voidInit+0x208>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a6c      	ldr	r2, [pc, #432]	; (8001b84 <MTimer_voidInit+0x208>)
 80019d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019d6:	6013      	str	r3, [r2, #0]
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_CKD_BIT1) ;
 80019d8:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <MTimer_voidInit+0x208>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a69      	ldr	r2, [pc, #420]	; (8001b84 <MTimer_voidInit+0x208>)
 80019de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019e2:	6013      	str	r3, [r2, #0]
                  #error "Invalid Selection of TIM1_DIVISION"
            #endif

			/* set the timer prescaller */
            #if    TIM1_PRESCALLER <= MAX_TIM_PRESCALLER
            	   TIM_1 ->PSC = TIM1_PRESCALLER ;
 80019e4:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <MTimer_voidInit+0x208>)
 80019e6:	2208      	movs	r2, #8
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
            #else
                   #error "TIM1_PRESCALLER out of range"
            #endif

            /* Enable auto-reload preload */
            SET_BIT(TIM_1->CR1 , TIM1_CR1_ARPE_BIT) ;
 80019ea:	4b66      	ldr	r3, [pc, #408]	; (8001b84 <MTimer_voidInit+0x208>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a65      	ldr	r2, [pc, #404]	; (8001b84 <MTimer_voidInit+0x208>)
 80019f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f4:	6013      	str	r3, [r2, #0]

            /* Set the Auto-reload value */
            #if  TIM1_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
            	   TIM_1->ARR = TIM1_PRELOAD_VALUE ;
 80019f6:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <MTimer_voidInit+0x208>)
 80019f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fc:	62da      	str	r2, [r3, #44]	; 0x2c
           //       #error "REPETATION_COUNTER out of range"
           // #endif

            /* Generate an update event to reload the Prescaler
            and the repetition counter(only for TIM1 and TIM5) value immediately */
            SET_BIT(TIM_1->EGR , TIM1_EGR_UG_BIT );
 80019fe:	4b61      	ldr	r3, [pc, #388]	; (8001b84 <MTimer_voidInit+0x208>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	4a60      	ldr	r2, [pc, #384]	; (8001b84 <MTimer_voidInit+0x208>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6153      	str	r3, [r2, #20]

		break ;
 8001a0a:	e0b6      	b.n	8001b7a <MTimer_voidInit+0x1fe>
		/******************************************************************************/
		/**                             Init TIM2                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_2 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8001a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a1a:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
            #if   TIM2_DIRECTION == UP_COUNTER
			      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 8001a1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a26:	f023 0310 	bic.w	r3, r3, #16
 8001a2a:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM2_DIRECTION"
            #endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8001a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a36:	f023 0320 	bic.w	r3, r3, #32
 8001a3a:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8001a3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a4a:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM2_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8001a4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a5a:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 8001a5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a6a:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM2_DIVISION"
			#endif

		    /* set the timer prescaller */
	        #if    TIM2_PRESCALLER <= MAX_TIM_PRESCALLER
	        	   TIM_2 ->PSC = TIM2_PRESCALLER ;
 8001a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a70:	2208      	movs	r2, #8
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
	        #else
	               #error "TIM2_PRESCALLER out of range"
	        #endif

	        /* Enable auto-reload preload */
	        SET_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 8001a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a82:	6013      	str	r3, [r2, #0]

	        /* Set the Auto-reload value */
	        #if  TIM2_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
	        	   TIM_2->ARR = TIM2_PRELOAD_VALUE ;
 8001a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a88:	220f      	movs	r2, #15
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
	              #error "TIM2_PRELOAD_VALUE out of range"
	        #endif

	        /* Generate an update event to reload the Prescaler
	         and the repetition counter(only for TIM1 and TIM5) value immediately */
	        SET_BIT(TIM_2->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8001a8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6153      	str	r3, [r2, #20]

		break ;
 8001a9c:	e06d      	b.n	8001b7a <MTimer_voidInit+0x1fe>
		/******************************************************************************/
		/**                             Init TIM3                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_3 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8001a9e:	4b3a      	ldr	r3, [pc, #232]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	4a39      	ldr	r2, [pc, #228]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa8:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
            #if   TIM3_DIRECTION == UP_COUNTER
	           CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 8001aaa:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a36      	ldr	r2, [pc, #216]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001ab0:	f023 0310 	bic.w	r3, r3, #16
 8001ab4:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM3_DIRECTION"
            #endif

	        /* Edge-aligned mode */
	        CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8001ab6:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a33      	ldr	r2, [pc, #204]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001abc:	f023 0320 	bic.w	r3, r3, #32
 8001ac0:	6013      	str	r3, [r2, #0]
	        CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8001ac2:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a30      	ldr	r2, [pc, #192]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001acc:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM3_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a2d      	ldr	r2, [pc, #180]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a2a      	ldr	r2, [pc, #168]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ae4:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM3_DIVISION"
			#endif

			/* set the timer prescaller */
		    #if    TIM3_PRESCALLER <= MAX_TIM_PRESCALLER
		    	   TIM_3 ->PSC = TIM3_PRESCALLER ;
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001ae8:	2208      	movs	r2, #8
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
		    #else
		           #error "TIM3_PRESCALLER out of range"
		    #endif

		    /* Enable auto-reload preload */
			SET_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a25      	ldr	r2, [pc, #148]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af6:	6013      	str	r3, [r2, #0]

			/* Set the Auto-reload value */
			#if  TIM3_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
				   TIM_3->ARR = TIM3_PRELOAD_VALUE ;
 8001af8:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001afa:	220f      	movs	r2, #15
 8001afc:	62da      	str	r2, [r3, #44]	; 0x2c
			      #error "TIM3_PRELOAD_VALUE out of range"
			#endif

			/* Generate an update event to reload the Prescaler
			 and the repetition counter(only for TIM1 and TIM5) value immediately */
			SET_BIT(TIM_3->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8001afe:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	4a21      	ldr	r2, [pc, #132]	; (8001b88 <MTimer_voidInit+0x20c>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6153      	str	r3, [r2, #20]

		break ;
 8001b0a:	e036      	b.n	8001b7a <MTimer_voidInit+0x1fe>
		/******************************************************************************/
		/**                             Init TIM4                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_4 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b16:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
			#if   TIM4_DIRECTION == UP_COUNTER
			     CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b1e:	f023 0310 	bic.w	r3, r3, #16
 8001b22:	6013      	str	r3, [r2, #0]
			#else
			      #error "Invalid Selection of TIM4_DIRECTION"
			#endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b2a:	f023 0320 	bic.w	r3, r3, #32
 8001b2e:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b3a:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM4_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b46:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b52:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM4_DIVISION"
			#endif

		    /* set the timer prescaller */
			#if    TIM4_PRESCALLER <= MAX_TIM_PRESCALLER
				   TIM_4 ->PSC = TIM4_PRESCALLER ;
 8001b54:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b56:	2208      	movs	r2, #8
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
			#else
			       #error "TIM4_PRESCALLER out of range"
			#endif

			/* Enable auto-reload preload */
			SET_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b64:	6013      	str	r3, [r2, #0]

			/* Set the Auto-reload value */
			#if  TIM4_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
				   TIM_4->ARR = TIM4_PRELOAD_VALUE ;
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b68:	220f      	movs	r2, #15
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c
			      #error "TIM4_PRELOAD_VALUE out of range"
			#endif

		    /* Generate an update event to reload the Prescaler
		    	  and the repetition counter(only for TIM1 and TIM5) value immediately */
		    SET_BIT(TIM_4->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8001b6c:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <MTimer_voidInit+0x210>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6153      	str	r3, [r2, #20]
		break ;
 8001b78:	bf00      	nop
	}
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40012c00 	.word	0x40012c00
 8001b88:	40000400 	.word	0x40000400
 8001b8c:	40000800 	.word	0x40000800

08001b90 <MTimer_voidPWM>:

void MTimer_voidPWM (u8 A_u8TimerSelected , u8 A_u8Channel , u16 A_u16CompareValue)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b0b2      	sub	sp, #200	; 0xc8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	71bb      	strb	r3, [r7, #6]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	80bb      	strh	r3, [r7, #4]
	if (A_u8TimerSelected == TIM1_TYPE)
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	f040 81ef 	bne.w	8001f88 <MTimer_voidPWM+0x3f8>
	{
		if (A_u8Channel == TIM_CHANNEL_1)
 8001baa:	79bb      	ldrb	r3, [r7, #6]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d178      	bne.n	8001ca2 <MTimer_voidPWM+0x112>
		{
			if (channel1_set==0)
 8001bb0:	4b7a      	ldr	r3, [pc, #488]	; (8001d9c <MTimer_voidPWM+0x20c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d107      	bne.n	8001bc8 <MTimer_voidPWM+0x38>
			{
				GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN8,GPIO_OUTPUT_10M_AF_PP);
 8001bb8:	2209      	movs	r2, #9
 8001bba:	2108      	movs	r1, #8
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f7ff f9df 	bl	8000f80 <GPIO_voidSetPinMode>
				channel1_set=1;
 8001bc2:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <MTimer_voidPWM+0x20c>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
			}

			u32 L_u32TempCCMRX = 0 ;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
			u32 L_u32TempCCER  = 0 ;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
		    u32 L_u32TempCR2   = 0 ;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]

			/* Disable the Channel 1: Reset the CC1E Bit */
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC1E_BIT) ;
 8001bd4:	4b72      	ldr	r3, [pc, #456]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4a71      	ldr	r2, [pc, #452]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001bda:	f023 0301 	bic.w	r3, r3, #1
 8001bde:	6213      	str	r3, [r2, #32]

			/* Get the TIM CCER register value */
			L_u32TempCCMRX = TIM_1->CCER;
 8001be0:	4b6f      	ldr	r3, [pc, #444]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	613b      	str	r3, [r7, #16]
			/* Get the TIM CR2 register value */
			L_u32TempCR2 = TIM_1->CR2;
 8001be6:	4b6e      	ldr	r3, [pc, #440]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	60bb      	str	r3, [r7, #8]

			/* Get the TIM CCMR1 register value */
			L_u32TempCCMRX = TIM_1->CCMR1;
 8001bec:	4b6c      	ldr	r3, [pc, #432]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	613b      	str	r3, [r7, #16]

			/* Reset the Output Compare Mode Bits */
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT0) ;
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	f023 0310 	bic.w	r3, r3, #16
 8001bf8:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT1) ;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	f023 0320 	bic.w	r3, r3, #32
 8001c00:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT2) ;
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c08:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC1S_BIT0) ;
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC1S_BIT1) ;
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	f023 0302 	bic.w	r3, r3, #2
 8001c18:	613b      	str	r3, [r7, #16]
			/* Select the Output Compare Mode1 */
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c20:	613b      	str	r3, [r7, #16]

			/* Set the Output Compare Polarity as active high */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1P_BIT);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f023 0302 	bic.w	r3, r3, #2
 8001c28:	60fb      	str	r3, [r7, #12]

			/* Set the Output N Polarity as active high */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1NP_BIT) ;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f023 0308 	bic.w	r3, r3, #8
 8001c30:	60fb      	str	r3, [r7, #12]
			/* Reset the Output N State */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1NE_BIT) ;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	60fb      	str	r3, [r7, #12]

			/* Reset the Output Compare and Output Compare N IDLE State */
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS1N_BIT) ;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c40:	60bb      	str	r3, [r7, #8]
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS1N_BIT) ;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c48:	60bb      	str	r3, [r7, #8]

			/* Write to TIM CR2 */
			TIM_1->CR2 = L_u32TempCR2;
 8001c4a:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	6053      	str	r3, [r2, #4]

			/* Write to TIM CCMR1 */
			TIM_1->CCMR1 = L_u32TempCCMRX;
 8001c50:	4a53      	ldr	r2, [pc, #332]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	6193      	str	r3, [r2, #24]

			/* Set the Capture Compare Register value */
			TIM_1->CCR1 = A_u16CompareValue ;
 8001c56:	4a52      	ldr	r2, [pc, #328]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001c58:	88bb      	ldrh	r3, [r7, #4]
 8001c5a:	6353      	str	r3, [r2, #52]	; 0x34

			/* Write to TIM CCER */
			TIM_1->CCER = L_u32TempCCER;
 8001c5c:	4a50      	ldr	r2, [pc, #320]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6213      	str	r3, [r2, #32]

			/* Set the Preload enable bit for channel1 */
			SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC1PE_BIT);
 8001c62:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	4a4e      	ldr	r2, [pc, #312]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	6193      	str	r3, [r2, #24]

			/* Configure the Output Fast mode */
			SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC1FE_BIT) ;
 8001c6e:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	4a4b      	ldr	r2, [pc, #300]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6193      	str	r3, [r2, #24]

			/* Enable the Capture compare channel */
			SET_BIT(TIM_1-> CCER , TIM1_CCER_CC1E_BIT) ;
 8001c7a:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4a48      	ldr	r2, [pc, #288]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6213      	str	r3, [r2, #32]

			/* Enable the main output */
			SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8001c86:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a45      	ldr	r2, [pc, #276]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44

			/* Enable the timer */
			SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8001c92:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a42      	ldr	r2, [pc, #264]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6013      	str	r3, [r2, #0]
	}
	else
	{
		// error type of A_u8TimerSelected
	}
}
 8001c9e:	f000 bec8 	b.w	8002a32 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_2)
 8001ca2:	79bb      	ldrb	r3, [r7, #6]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d17f      	bne.n	8001da8 <MTimer_voidPWM+0x218>
			if (channel2_set==0)
 8001ca8:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <MTimer_voidPWM+0x214>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <MTimer_voidPWM+0x130>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN9,GPIO_OUTPUT_10M_AF_PP);
 8001cb0:	2209      	movs	r2, #9
 8001cb2:	2109      	movs	r1, #9
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f7ff f963 	bl	8000f80 <GPIO_voidSetPinMode>
					channel2_set=1;
 8001cba:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <MTimer_voidPWM+0x214>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
			u32 L_u32TempCCER  = 0 ;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
		    u32 L_u32TempCR2   = 0 ;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
		    CLR_BIT(TIM_1->CCER , TIM1_CCER_CC2E_BIT);
 8001ccc:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4a33      	ldr	r2, [pc, #204]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001cd2:	f023 0310 	bic.w	r3, r3, #16
 8001cd6:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_1->CCER;
 8001cd8:	4b31      	ldr	r3, [pc, #196]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	61bb      	str	r3, [r7, #24]
		    L_u32TempCR2 = TIM_1->CR2;
 8001cde:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	617b      	str	r3, [r7, #20]
		    L_u32TempCCMRX = TIM_1->CCMR1;
 8001ce4:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT0);
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cf0:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT1);
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001cf8:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT0);
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d00:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT1);
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d08:	61fb      	str	r3, [r7, #28]
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001d10:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2P_BIT);
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	f023 0320 	bic.w	r3, r3, #32
 8001d18:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NP_BIT) ;
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d20:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NP_BIT) ;
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d28:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NE_BIT);
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d30:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS2_BIT);
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d38:	617b      	str	r3, [r7, #20]
		    CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS2N_BIT);
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d40:	617b      	str	r3, [r7, #20]
		    TIM_1->CR2 = L_u32TempCR2;
 8001d42:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	6053      	str	r3, [r2, #4]
		    TIM_1->CCMR1 = L_u32TempCCMRX;
 8001d48:	4a15      	ldr	r2, [pc, #84]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	6193      	str	r3, [r2, #24]
		    TIM_1->CCR2 = A_u16CompareValue;
 8001d4e:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001d50:	88bb      	ldrh	r3, [r7, #4]
 8001d52:	6393      	str	r3, [r2, #56]	; 0x38
		    TIM_1->CCER = L_u32TempCCER;
 8001d54:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC2PE_BIT);
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001d60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d64:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC2FE_BIT) ;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001d6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d70:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_1-> CCER , TIM1_CCER_CC2E_BIT) ;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001d78:	f043 0310 	orr.w	r3, r3, #16
 8001d7c:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
		    SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <MTimer_voidPWM+0x210>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6013      	str	r3, [r2, #0]
}
 8001d96:	f000 be4c 	b.w	8002a32 <MTimer_voidPWM+0xea2>
 8001d9a:	bf00      	nop
 8001d9c:	20000105 	.word	0x20000105
 8001da0:	40012c00 	.word	0x40012c00
 8001da4:	20000106 	.word	0x20000106
		else if (A_u8Channel == TIM_CHANNEL_3)
 8001da8:	79bb      	ldrb	r3, [r7, #6]
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d178      	bne.n	8001ea0 <MTimer_voidPWM+0x310>
			if (channel3_set==0)
 8001dae:	4b73      	ldr	r3, [pc, #460]	; (8001f7c <MTimer_voidPWM+0x3ec>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d107      	bne.n	8001dc6 <MTimer_voidPWM+0x236>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN10,GPIO_OUTPUT_10M_AF_PP);
 8001db6:	2209      	movs	r2, #9
 8001db8:	210a      	movs	r1, #10
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f7ff f8e0 	bl	8000f80 <GPIO_voidSetPinMode>
					channel3_set=1;
 8001dc0:	4b6e      	ldr	r3, [pc, #440]	; (8001f7c <MTimer_voidPWM+0x3ec>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
			u32 L_u32TempCCER  = 0 ;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
			u32 L_u32TempCR2   = 0 ;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC3E_BIT);
 8001dd2:	4b6b      	ldr	r3, [pc, #428]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a6a      	ldr	r2, [pc, #424]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ddc:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_1->CCER;
 8001dde:	4b68      	ldr	r3, [pc, #416]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
			L_u32TempCR2 = TIM_1->CR2;
 8001de4:	4b66      	ldr	r3, [pc, #408]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	623b      	str	r3, [r7, #32]
			L_u32TempCCMRX = TIM_1->CCMR2;
 8001dea:	4b65      	ldr	r3, [pc, #404]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_OC3M_BIT0);
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	f023 0310 	bic.w	r3, r3, #16
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_OC3M_BIT1);
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	f023 0320 	bic.w	r3, r3, #32
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_CC3S_BIT0);
 8001e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_CC3S_BIT1);
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	f023 0302 	bic.w	r3, r3, #2
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U);
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3P_BIT);
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NP_BIT) ;
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NP_BIT) ;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NE_BIT);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS3_BIT);
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e3e:	623b      	str	r3, [r7, #32]
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS3N_BIT);
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e46:	623b      	str	r3, [r7, #32]
			TIM_1->CR2 = L_u32TempCR2;
 8001e48:	4a4d      	ldr	r2, [pc, #308]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	6053      	str	r3, [r2, #4]
			TIM_1->CCMR2 = L_u32TempCCMRX;
 8001e4e:	4a4c      	ldr	r2, [pc, #304]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e52:	61d3      	str	r3, [r2, #28]
			TIM_1->CCR3 = A_u16CompareValue;
 8001e54:	4a4a      	ldr	r2, [pc, #296]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001e56:	88bb      	ldrh	r3, [r7, #4]
 8001e58:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM_1->CCER = L_u32TempCCER;
 8001e5a:	4a49      	ldr	r2, [pc, #292]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC3PE_BIT);
 8001e60:	4b47      	ldr	r3, [pc, #284]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	4a46      	ldr	r2, [pc, #280]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001e66:	f043 0308 	orr.w	r3, r3, #8
 8001e6a:	61d3      	str	r3, [r2, #28]
		    SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC3FE_BIT) ;
 8001e6c:	4b44      	ldr	r3, [pc, #272]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	4a43      	ldr	r2, [pc, #268]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	61d3      	str	r3, [r2, #28]
		    SET_BIT(TIM_1-> CCER , TIM1_CCER_CC3E_BIT) ;
 8001e78:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a40      	ldr	r2, [pc, #256]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e82:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8001e84:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	4a3d      	ldr	r2, [pc, #244]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8e:	6453      	str	r3, [r2, #68]	; 0x44
		    SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8001e90:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a3a      	ldr	r2, [pc, #232]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6013      	str	r3, [r2, #0]
}
 8001e9c:	f000 bdc9 	b.w	8002a32 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_4)
 8001ea0:	79bb      	ldrb	r3, [r7, #6]
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	f040 85c5 	bne.w	8002a32 <MTimer_voidPWM+0xea2>
			if (channel4_set==0)
 8001ea8:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <MTimer_voidPWM+0x3f4>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d107      	bne.n	8001ec0 <MTimer_voidPWM+0x330>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN11,GPIO_OUTPUT_10M_AF_PP);
 8001eb0:	2209      	movs	r2, #9
 8001eb2:	210b      	movs	r1, #11
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f7ff f863 	bl	8000f80 <GPIO_voidSetPinMode>
					channel4_set=1;
 8001eba:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <MTimer_voidPWM+0x3f4>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
			u32 L_u32TempCCER  = 0 ;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
			u32 L_u32TempCR2   = 0 ;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC4E_BIT);
 8001ecc:	4b2c      	ldr	r3, [pc, #176]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a2b      	ldr	r2, [pc, #172]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ed6:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_1->CCER;
 8001ed8:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	633b      	str	r3, [r7, #48]	; 0x30
			L_u32TempCR2 = TIM_1->CR2;
 8001ede:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
			L_u32TempCCMRX = TIM_1->CCMR2;
 8001ee4:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT0);
 8001eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT1);
 8001ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ef8:	637b      	str	r3, [r7, #52]	; 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT0);
 8001efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT1);
 8001f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC4P_BIT);
 8001f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS4_BIT);
 8001f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
			TIM_1->CR2 = L_u32TempCR2;
 8001f22:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f26:	6053      	str	r3, [r2, #4]
			TIM_1->CCMR2 = L_u32TempCCMRX;
 8001f28:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2c:	61d3      	str	r3, [r2, #28]
			TIM_1->CCR4 = A_u16CompareValue;
 8001f2e:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001f30:	88bb      	ldrh	r3, [r7, #4]
 8001f32:	6413      	str	r3, [r2, #64]	; 0x40
			TIM_1->CCER = L_u32TempCCER;
 8001f34:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f38:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC4PE_BIT);
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a10      	ldr	r2, [pc, #64]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001f40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f44:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC4FE_BIT) ;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a0d      	ldr	r2, [pc, #52]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001f4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f50:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_1-> CCER , TIM1_CCER_CC4E_BIT) ;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001f58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f5c:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
			SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <MTimer_voidPWM+0x3f0>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6013      	str	r3, [r2, #0]
}
 8001f76:	f000 bd5c 	b.w	8002a32 <MTimer_voidPWM+0xea2>
 8001f7a:	bf00      	nop
 8001f7c:	20000107 	.word	0x20000107
 8001f80:	40012c00 	.word	0x40012c00
 8001f84:	20000108 	.word	0x20000108
	else if (A_u8TimerSelected == TIM2_TYPE)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	f040 81dd 	bne.w	800234a <MTimer_voidPWM+0x7ba>
		if (A_u8Channel == TIM_CHANNEL_1)
 8001f90:	79bb      	ldrb	r3, [r7, #6]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d173      	bne.n	800207e <MTimer_voidPWM+0x4ee>
			if (channel21_set==0)
 8001f96:	4bb0      	ldr	r3, [pc, #704]	; (8002258 <MTimer_voidPWM+0x6c8>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d107      	bne.n	8001fae <MTimer_voidPWM+0x41e>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN15,GPIO_OUTPUT_10M_AF_PP);
 8001f9e:	2209      	movs	r2, #9
 8001fa0:	210f      	movs	r1, #15
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f7fe ffec 	bl	8000f80 <GPIO_voidSetPinMode>
					channel21_set=1;
 8001fa8:	4bab      	ldr	r3, [pc, #684]	; (8002258 <MTimer_voidPWM+0x6c8>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	643b      	str	r3, [r7, #64]	; 0x40
			u32 L_u32TempCCER  = 0 ;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
			u32 L_u32TempCR2   = 0 ;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	63bb      	str	r3, [r7, #56]	; 0x38
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001fba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_2->CCER;
 8001fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	643b      	str	r3, [r7, #64]	; 0x40
			L_u32TempCR2 = TIM_2->CR2;
 8001fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	63bb      	str	r3, [r7, #56]	; 0x38
			L_u32TempCCMRX = TIM_2->CCMR1;
 8001fda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	643b      	str	r3, [r7, #64]	; 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 8001fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe4:	f023 0310 	bic.w	r3, r3, #16
 8001fe8:	643b      	str	r3, [r7, #64]	; 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 8001fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fec:	f023 0320 	bic.w	r3, r3, #32
 8001ff0:	643b      	str	r3, [r7, #64]	; 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 8001ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ff8:	643b      	str	r3, [r7, #64]	; 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 8001ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	643b      	str	r3, [r7, #64]	; 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 8002002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002004:	f023 0302 	bic.w	r3, r3, #2
 8002008:	643b      	str	r3, [r7, #64]	; 0x40
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 800200a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002010:	643b      	str	r3, [r7, #64]	; 0x40
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 8002012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002014:	f023 0302 	bic.w	r3, r3, #2
 8002018:	63fb      	str	r3, [r7, #60]	; 0x3c
			TIM_2->CR2 = L_u32TempCR2;
 800201a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800201e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002020:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR1 = L_u32TempCCMRX;
 8002022:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002028:	6193      	str	r3, [r2, #24]
			TIM_2->CCR1 = A_u16CompareValue;
 800202a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800202e:	88bb      	ldrh	r3, [r7, #4]
 8002030:	6353      	str	r3, [r2, #52]	; 0x34
			TIM_2->CCER = L_u32TempCCER;
 8002032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002038:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 800203a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002044:	f043 0308 	orr.w	r3, r3, #8
 8002048:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 800204a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 800205a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 800206a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6013      	str	r3, [r2, #0]
}
 800207a:	f000 bcda 	b.w	8002a32 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_2)
 800207e:	79bb      	ldrb	r3, [r7, #6]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d173      	bne.n	800216c <MTimer_voidPWM+0x5dc>
			if (channel22_set==0)
 8002084:	4b75      	ldr	r3, [pc, #468]	; (800225c <MTimer_voidPWM+0x6cc>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d107      	bne.n	800209c <MTimer_voidPWM+0x50c>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN1,GPIO_OUTPUT_10M_AF_PP);
 800208c:	2209      	movs	r2, #9
 800208e:	2101      	movs	r1, #1
 8002090:	2001      	movs	r0, #1
 8002092:	f7fe ff75 	bl	8000f80 <GPIO_voidSetPinMode>
					channel22_set=1;
 8002096:	4b71      	ldr	r3, [pc, #452]	; (800225c <MTimer_voidPWM+0x6cc>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 800209c:	2300      	movs	r3, #0
 800209e:	64fb      	str	r3, [r7, #76]	; 0x4c
			u32 L_u32TempCCER  = 0 ;
 80020a0:	2300      	movs	r3, #0
 80020a2:	64bb      	str	r3, [r7, #72]	; 0x48
		    u32 L_u32TempCR2   = 0 ;
 80020a4:	2300      	movs	r3, #0
 80020a6:	647b      	str	r3, [r7, #68]	; 0x44
		    CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 80020a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020b2:	f023 0310 	bic.w	r3, r3, #16
 80020b6:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_2->CCER;
 80020b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	64bb      	str	r3, [r7, #72]	; 0x48
		    L_u32TempCR2 = TIM_2->CR2;
 80020c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	647b      	str	r3, [r7, #68]	; 0x44
		    L_u32TempCCMRX = TIM_2->CCMR1;
 80020c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 80020d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020d6:	64fb      	str	r3, [r7, #76]	; 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 80020d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020de:	64fb      	str	r3, [r7, #76]	; 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 80020e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 80020e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 80020f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f2:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80020f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 80020f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020fa:	f023 0320 	bic.w	r3, r3, #32
 80020fe:	64bb      	str	r3, [r7, #72]	; 0x48
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 8002100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002106:	64bb      	str	r3, [r7, #72]	; 0x48
		    TIM_2->CR2 = L_u32TempCR2;
 8002108:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800210c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210e:	6053      	str	r3, [r2, #4]
		    TIM_2->CCMR1 = L_u32TempCCMRX;
 8002110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002116:	6193      	str	r3, [r2, #24]
		    TIM_2->CCR2 = A_u16CompareValue;
 8002118:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800211c:	88bb      	ldrh	r3, [r7, #4]
 800211e:	6393      	str	r3, [r2, #56]	; 0x38
		    TIM_2->CCER = L_u32TempCCER;
 8002120:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002126:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 8002128:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002132:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002136:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 8002138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002146:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 8002148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002152:	f043 0310 	orr.w	r3, r3, #16
 8002156:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8002158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	f000 bc63 	b.w	8002a32 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_3)
 800216c:	79bb      	ldrb	r3, [r7, #6]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d178      	bne.n	8002264 <MTimer_voidPWM+0x6d4>
			if (channel23_set==0)
 8002172:	4b3b      	ldr	r3, [pc, #236]	; (8002260 <MTimer_voidPWM+0x6d0>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <MTimer_voidPWM+0x5fa>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN2,GPIO_OUTPUT_10M_AF_PP);
 800217a:	2209      	movs	r2, #9
 800217c:	2102      	movs	r1, #2
 800217e:	2001      	movs	r0, #1
 8002180:	f7fe fefe 	bl	8000f80 <GPIO_voidSetPinMode>
					channel23_set=1;
 8002184:	4b36      	ldr	r3, [pc, #216]	; (8002260 <MTimer_voidPWM+0x6d0>)
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 800218a:	2300      	movs	r3, #0
 800218c:	65bb      	str	r3, [r7, #88]	; 0x58
			u32 L_u32TempCCER  = 0 ;
 800218e:	2300      	movs	r3, #0
 8002190:	657b      	str	r3, [r7, #84]	; 0x54
			u32 L_u32TempCR2   = 0 ;
 8002192:	2300      	movs	r3, #0
 8002194:	653b      	str	r3, [r7, #80]	; 0x50
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 8002196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021a4:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_2->CCER;
 80021a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	657b      	str	r3, [r7, #84]	; 0x54
			L_u32TempCR2 = TIM_2->CR2;
 80021ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	653b      	str	r3, [r7, #80]	; 0x50
			L_u32TempCCMRX = TIM_2->CCMR2;
 80021b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	65bb      	str	r3, [r7, #88]	; 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 80021be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021c0:	f023 0310 	bic.w	r3, r3, #16
 80021c4:	65bb      	str	r3, [r7, #88]	; 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 80021c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021c8:	f023 0320 	bic.w	r3, r3, #32
 80021cc:	65bb      	str	r3, [r7, #88]	; 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 80021ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	65bb      	str	r3, [r7, #88]	; 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 80021d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d8:	f023 0302 	bic.w	r3, r3, #2
 80021dc:	65bb      	str	r3, [r7, #88]	; 0x58
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 80021de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021e4:	65bb      	str	r3, [r7, #88]	; 0x58
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 80021e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021ec:	657b      	str	r3, [r7, #84]	; 0x54
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 80021ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021f4:	657b      	str	r3, [r7, #84]	; 0x54
			TIM_2->CR2 = L_u32TempCR2;
 80021f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021fc:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR2 = L_u32TempCCMRX;
 80021fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002204:	61d3      	str	r3, [r2, #28]
			TIM_2->CCR3 = A_u16CompareValue;
 8002206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800220a:	88bb      	ldrh	r3, [r7, #4]
 800220c:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM_2->CCER = L_u32TempCCER;
 800220e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002214:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 8002216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002220:	f043 0308 	orr.w	r3, r3, #8
 8002224:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 8002226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 8002236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002244:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8002246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6013      	str	r3, [r2, #0]
}
 8002256:	e3ec      	b.n	8002a32 <MTimer_voidPWM+0xea2>
 8002258:	20000109 	.word	0x20000109
 800225c:	2000010a 	.word	0x2000010a
 8002260:	2000010b 	.word	0x2000010b
		else if (A_u8Channel == TIM_CHANNEL_4)
 8002264:	79bb      	ldrb	r3, [r7, #6]
 8002266:	2b04      	cmp	r3, #4
 8002268:	f040 83e3 	bne.w	8002a32 <MTimer_voidPWM+0xea2>
			if (channel24_set==0)
 800226c:	4b9e      	ldr	r3, [pc, #632]	; (80024e8 <MTimer_voidPWM+0x958>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <MTimer_voidPWM+0x6f4>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN3,GPIO_OUTPUT_10M_AF_PP);
 8002274:	2209      	movs	r2, #9
 8002276:	2103      	movs	r1, #3
 8002278:	2001      	movs	r0, #1
 800227a:	f7fe fe81 	bl	8000f80 <GPIO_voidSetPinMode>
					channel24_set=1;
 800227e:	4b9a      	ldr	r3, [pc, #616]	; (80024e8 <MTimer_voidPWM+0x958>)
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8002284:	2300      	movs	r3, #0
 8002286:	667b      	str	r3, [r7, #100]	; 0x64
			u32 L_u32TempCCER  = 0 ;
 8002288:	2300      	movs	r3, #0
 800228a:	663b      	str	r3, [r7, #96]	; 0x60
			u32 L_u32TempCR2   = 0 ;
 800228c:	2300      	movs	r3, #0
 800228e:	65fb      	str	r3, [r7, #92]	; 0x5c
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 8002290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800229a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800229e:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_2->CCER;
 80022a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	663b      	str	r3, [r7, #96]	; 0x60
			L_u32TempCR2 = TIM_2->CR2;
 80022a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	65fb      	str	r3, [r7, #92]	; 0x5c
			L_u32TempCCMRX = TIM_2->CCMR2;
 80022b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	667b      	str	r3, [r7, #100]	; 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC4M_BIT0);
 80022b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022be:	667b      	str	r3, [r7, #100]	; 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC4M_BIT1);
 80022c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022c6:	667b      	str	r3, [r7, #100]	; 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC4S_BIT0);
 80022c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022ce:	667b      	str	r3, [r7, #100]	; 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC4S_BIT1);
 80022d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022d6:	667b      	str	r3, [r7, #100]	; 0x64
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 80022d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022da:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80022de:	667b      	str	r3, [r7, #100]	; 0x64
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 80022e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022e6:	663b      	str	r3, [r7, #96]	; 0x60
			TIM_2->CR2 = L_u32TempCR2;
 80022e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ee:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR2 = L_u32TempCCMRX;
 80022f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022f6:	61d3      	str	r3, [r2, #28]
			TIM_2->CCR4 = A_u16CompareValue;
 80022f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022fc:	88bb      	ldrh	r3, [r7, #4]
 80022fe:	6413      	str	r3, [r2, #64]	; 0x40
			TIM_2->CCER = L_u32TempCCER;
 8002300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002304:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002306:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 8002308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002312:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002316:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 8002318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002326:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 8002328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002332:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002336:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8002338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	e373      	b.n	8002a32 <MTimer_voidPWM+0xea2>
	else if (A_u8TimerSelected == TIM3_TYPE)
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2b03      	cmp	r3, #3
 800234e:	f040 81ae 	bne.w	80026ae <MTimer_voidPWM+0xb1e>
		if (A_u8Channel == TIM_CHANNEL_1)
 8002352:	79bb      	ldrb	r3, [r7, #6]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d161      	bne.n	800241c <MTimer_voidPWM+0x88c>
			if (channel31_set==0)
 8002358:	4b64      	ldr	r3, [pc, #400]	; (80024ec <MTimer_voidPWM+0x95c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d107      	bne.n	8002370 <MTimer_voidPWM+0x7e0>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN6,GPIO_OUTPUT_10M_AF_PP);
 8002360:	2209      	movs	r2, #9
 8002362:	2106      	movs	r1, #6
 8002364:	2001      	movs	r0, #1
 8002366:	f7fe fe0b 	bl	8000f80 <GPIO_voidSetPinMode>
					channel31_set=1;
 800236a:	4b60      	ldr	r3, [pc, #384]	; (80024ec <MTimer_voidPWM+0x95c>)
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8002370:	2300      	movs	r3, #0
 8002372:	673b      	str	r3, [r7, #112]	; 0x70
			u32 L_u32TempCCER  = 0 ;
 8002374:	2300      	movs	r3, #0
 8002376:	66fb      	str	r3, [r7, #108]	; 0x6c
			u32 L_u32TempCR2   = 0 ;
 8002378:	2300      	movs	r3, #0
 800237a:	66bb      	str	r3, [r7, #104]	; 0x68
			CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 800237c:	4b5c      	ldr	r3, [pc, #368]	; (80024f0 <MTimer_voidPWM+0x960>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4a5b      	ldr	r2, [pc, #364]	; (80024f0 <MTimer_voidPWM+0x960>)
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_3->CCER;
 8002388:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <MTimer_voidPWM+0x960>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	673b      	str	r3, [r7, #112]	; 0x70
			L_u32TempCR2 = TIM_3->CR2;
 800238e:	4b58      	ldr	r3, [pc, #352]	; (80024f0 <MTimer_voidPWM+0x960>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	66bb      	str	r3, [r7, #104]	; 0x68
			L_u32TempCCMRX = TIM_3->CCMR1;
 8002394:	4b56      	ldr	r3, [pc, #344]	; (80024f0 <MTimer_voidPWM+0x960>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	673b      	str	r3, [r7, #112]	; 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 800239a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800239c:	f023 0310 	bic.w	r3, r3, #16
 80023a0:	673b      	str	r3, [r7, #112]	; 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 80023a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023a4:	f023 0320 	bic.w	r3, r3, #32
 80023a8:	673b      	str	r3, [r7, #112]	; 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 80023aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023b0:	673b      	str	r3, [r7, #112]	; 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 80023b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	673b      	str	r3, [r7, #112]	; 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 80023ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023bc:	f023 0302 	bic.w	r3, r3, #2
 80023c0:	673b      	str	r3, [r7, #112]	; 0x70
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 80023c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023c8:	673b      	str	r3, [r7, #112]	; 0x70
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 80023ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023cc:	f023 0302 	bic.w	r3, r3, #2
 80023d0:	66fb      	str	r3, [r7, #108]	; 0x6c
			TIM_3->CR2 = L_u32TempCR2;
 80023d2:	4a47      	ldr	r2, [pc, #284]	; (80024f0 <MTimer_voidPWM+0x960>)
 80023d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023d6:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR1 = L_u32TempCCMRX;
 80023d8:	4a45      	ldr	r2, [pc, #276]	; (80024f0 <MTimer_voidPWM+0x960>)
 80023da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023dc:	6193      	str	r3, [r2, #24]
			TIM_3->CCR1 = A_u16CompareValue;
 80023de:	4a44      	ldr	r2, [pc, #272]	; (80024f0 <MTimer_voidPWM+0x960>)
 80023e0:	88bb      	ldrh	r3, [r7, #4]
 80023e2:	6353      	str	r3, [r2, #52]	; 0x34
			TIM_3->CCER = L_u32TempCCER;
 80023e4:	4a42      	ldr	r2, [pc, #264]	; (80024f0 <MTimer_voidPWM+0x960>)
 80023e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e8:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <MTimer_voidPWM+0x960>)
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	4a40      	ldr	r2, [pc, #256]	; (80024f0 <MTimer_voidPWM+0x960>)
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 80023f6:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <MTimer_voidPWM+0x960>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	4a3d      	ldr	r2, [pc, #244]	; (80024f0 <MTimer_voidPWM+0x960>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <MTimer_voidPWM+0x960>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a3a      	ldr	r2, [pc, #232]	; (80024f0 <MTimer_voidPWM+0x960>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 800240e:	4b38      	ldr	r3, [pc, #224]	; (80024f0 <MTimer_voidPWM+0x960>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a37      	ldr	r2, [pc, #220]	; (80024f0 <MTimer_voidPWM+0x960>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6013      	str	r3, [r2, #0]
}
 800241a:	e30a      	b.n	8002a32 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_2)
 800241c:	79bb      	ldrb	r3, [r7, #6]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d16a      	bne.n	80024f8 <MTimer_voidPWM+0x968>
			if (channel32_set==0)
 8002422:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <MTimer_voidPWM+0x964>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d107      	bne.n	800243a <MTimer_voidPWM+0x8aa>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN7,GPIO_OUTPUT_10M_AF_PP);
 800242a:	2209      	movs	r2, #9
 800242c:	2107      	movs	r1, #7
 800242e:	2001      	movs	r0, #1
 8002430:	f7fe fda6 	bl	8000f80 <GPIO_voidSetPinMode>
					channel32_set=1;
 8002434:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <MTimer_voidPWM+0x964>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 800243a:	2300      	movs	r3, #0
 800243c:	67fb      	str	r3, [r7, #124]	; 0x7c
			u32 L_u32TempCCER  = 0 ;
 800243e:	2300      	movs	r3, #0
 8002440:	67bb      	str	r3, [r7, #120]	; 0x78
		    u32 L_u32TempCR2   = 0 ;
 8002442:	2300      	movs	r3, #0
 8002444:	677b      	str	r3, [r7, #116]	; 0x74
		    CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 8002446:	4b2a      	ldr	r3, [pc, #168]	; (80024f0 <MTimer_voidPWM+0x960>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <MTimer_voidPWM+0x960>)
 800244c:	f023 0310 	bic.w	r3, r3, #16
 8002450:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_3->CCER;
 8002452:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <MTimer_voidPWM+0x960>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	67bb      	str	r3, [r7, #120]	; 0x78
		    L_u32TempCR2 = TIM_3->CR2;
 8002458:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <MTimer_voidPWM+0x960>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	677b      	str	r3, [r7, #116]	; 0x74
		    L_u32TempCCMRX = TIM_3->CCMR1;
 800245e:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <MTimer_voidPWM+0x960>)
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	67fb      	str	r3, [r7, #124]	; 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8002464:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800246a:	67fb      	str	r3, [r7, #124]	; 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 800246c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800246e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002472:	67fb      	str	r3, [r7, #124]	; 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8002474:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800247a:	67fb      	str	r3, [r7, #124]	; 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 800247c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800247e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002482:	67fb      	str	r3, [r7, #124]	; 0x7c
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8002484:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002486:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800248a:	67fb      	str	r3, [r7, #124]	; 0x7c
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 800248c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800248e:	f023 0320 	bic.w	r3, r3, #32
 8002492:	67bb      	str	r3, [r7, #120]	; 0x78
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 8002494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800249a:	67bb      	str	r3, [r7, #120]	; 0x78
		    TIM_3->CR2 = L_u32TempCR2;
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <MTimer_voidPWM+0x960>)
 800249e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a0:	6053      	str	r3, [r2, #4]
		    TIM_3->CCMR1 = L_u32TempCCMRX;
 80024a2:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <MTimer_voidPWM+0x960>)
 80024a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024a6:	6193      	str	r3, [r2, #24]
		    TIM_3->CCR2 = A_u16CompareValue;
 80024a8:	4a11      	ldr	r2, [pc, #68]	; (80024f0 <MTimer_voidPWM+0x960>)
 80024aa:	88bb      	ldrh	r3, [r7, #4]
 80024ac:	6393      	str	r3, [r2, #56]	; 0x38
		    TIM_3->CCER = L_u32TempCCER;
 80024ae:	4a10      	ldr	r2, [pc, #64]	; (80024f0 <MTimer_voidPWM+0x960>)
 80024b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b2:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 80024b4:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <MTimer_voidPWM+0x960>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	4a0d      	ldr	r2, [pc, #52]	; (80024f0 <MTimer_voidPWM+0x960>)
 80024ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024be:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <MTimer_voidPWM+0x960>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <MTimer_voidPWM+0x960>)
 80024c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ca:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <MTimer_voidPWM+0x960>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a07      	ldr	r2, [pc, #28]	; (80024f0 <MTimer_voidPWM+0x960>)
 80024d2:	f043 0310 	orr.w	r3, r3, #16
 80024d6:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <MTimer_voidPWM+0x960>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <MTimer_voidPWM+0x960>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	e2a5      	b.n	8002a32 <MTimer_voidPWM+0xea2>
 80024e6:	bf00      	nop
 80024e8:	2000010c 	.word	0x2000010c
 80024ec:	2000010d 	.word	0x2000010d
 80024f0:	40000400 	.word	0x40000400
 80024f4:	2000010e 	.word	0x2000010e
		else if (A_u8Channel == TIM_CHANNEL_3)
 80024f8:	79bb      	ldrb	r3, [r7, #6]
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d16c      	bne.n	80025d8 <MTimer_voidPWM+0xa48>
			u32 L_u32TempCCMRX = 0 ;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			u32 L_u32TempCCER  = 0 ;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			u32 L_u32TempCR2   = 0 ;
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 8002510:	4ba1      	ldr	r3, [pc, #644]	; (8002798 <MTimer_voidPWM+0xc08>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4aa0      	ldr	r2, [pc, #640]	; (8002798 <MTimer_voidPWM+0xc08>)
 8002516:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800251a:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_3->CCER;
 800251c:	4b9e      	ldr	r3, [pc, #632]	; (8002798 <MTimer_voidPWM+0xc08>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			L_u32TempCR2 = TIM_3->CR2;
 8002524:	4b9c      	ldr	r3, [pc, #624]	; (8002798 <MTimer_voidPWM+0xc08>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			L_u32TempCCMRX = TIM_3->CCMR2;
 800252c:	4b9a      	ldr	r3, [pc, #616]	; (8002798 <MTimer_voidPWM+0xc08>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 8002534:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002538:	f023 0310 	bic.w	r3, r3, #16
 800253c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 8002540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002544:	f023 0320 	bic.w	r3, r3, #32
 8002548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 800254c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 8002558:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800255c:	f023 0302 	bic.w	r3, r3, #2
 8002560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			L_u32TempCCMRX |= (TIM_PWM_MODE1 <<4U) ;
 8002564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002568:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800256c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 8002570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 800257c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			TIM_3->CR2 = L_u32TempCR2;
 8002588:	4a83      	ldr	r2, [pc, #524]	; (8002798 <MTimer_voidPWM+0xc08>)
 800258a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800258e:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR2 = L_u32TempCCMRX;
 8002590:	4a81      	ldr	r2, [pc, #516]	; (8002798 <MTimer_voidPWM+0xc08>)
 8002592:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002596:	61d3      	str	r3, [r2, #28]
			TIM_3->CCR3 = A_u16CompareValue;
 8002598:	4a7f      	ldr	r2, [pc, #508]	; (8002798 <MTimer_voidPWM+0xc08>)
 800259a:	88bb      	ldrh	r3, [r7, #4]
 800259c:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM_3->CCER = L_u32TempCCER;
 800259e:	4a7e      	ldr	r2, [pc, #504]	; (8002798 <MTimer_voidPWM+0xc08>)
 80025a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025a4:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 80025a6:	4b7c      	ldr	r3, [pc, #496]	; (8002798 <MTimer_voidPWM+0xc08>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4a7b      	ldr	r2, [pc, #492]	; (8002798 <MTimer_voidPWM+0xc08>)
 80025ac:	f043 0308 	orr.w	r3, r3, #8
 80025b0:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 80025b2:	4b79      	ldr	r3, [pc, #484]	; (8002798 <MTimer_voidPWM+0xc08>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a78      	ldr	r2, [pc, #480]	; (8002798 <MTimer_voidPWM+0xc08>)
 80025b8:	f043 0304 	orr.w	r3, r3, #4
 80025bc:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 80025be:	4b76      	ldr	r3, [pc, #472]	; (8002798 <MTimer_voidPWM+0xc08>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	4a75      	ldr	r2, [pc, #468]	; (8002798 <MTimer_voidPWM+0xc08>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c8:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80025ca:	4b73      	ldr	r3, [pc, #460]	; (8002798 <MTimer_voidPWM+0xc08>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a72      	ldr	r2, [pc, #456]	; (8002798 <MTimer_voidPWM+0xc08>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6013      	str	r3, [r2, #0]
}
 80025d6:	e22c      	b.n	8002a32 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_4)
 80025d8:	79bb      	ldrb	r3, [r7, #6]
 80025da:	2b04      	cmp	r3, #4
 80025dc:	f040 8229 	bne.w	8002a32 <MTimer_voidPWM+0xea2>
			u32 L_u32TempCCMRX = 0 ;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			u32 L_u32TempCCER  = 0 ;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			u32 L_u32TempCR2   = 0 ;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 80025f2:	4b69      	ldr	r3, [pc, #420]	; (8002798 <MTimer_voidPWM+0xc08>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4a68      	ldr	r2, [pc, #416]	; (8002798 <MTimer_voidPWM+0xc08>)
 80025f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025fc:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_3->CCER;
 80025fe:	4b66      	ldr	r3, [pc, #408]	; (8002798 <MTimer_voidPWM+0xc08>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			L_u32TempCR2 = TIM_3->CR2;
 8002606:	4b64      	ldr	r3, [pc, #400]	; (8002798 <MTimer_voidPWM+0xc08>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			L_u32TempCCMRX = TIM_3->CCMR2;
 800260e:	4b62      	ldr	r3, [pc, #392]	; (8002798 <MTimer_voidPWM+0xc08>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8002616:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800261a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800261e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8002622:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800262a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 800262e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002632:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002636:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 800263a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800263e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8002646:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800264a:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800264e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 8002652:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800265a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			TIM_3->CR2 = L_u32TempCR2;
 800265e:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <MTimer_voidPWM+0xc08>)
 8002660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002664:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR2 = L_u32TempCCMRX;
 8002666:	4a4c      	ldr	r2, [pc, #304]	; (8002798 <MTimer_voidPWM+0xc08>)
 8002668:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800266c:	61d3      	str	r3, [r2, #28]
			TIM_3->CCR4 = A_u16CompareValue;
 800266e:	4a4a      	ldr	r2, [pc, #296]	; (8002798 <MTimer_voidPWM+0xc08>)
 8002670:	88bb      	ldrh	r3, [r7, #4]
 8002672:	6413      	str	r3, [r2, #64]	; 0x40
			TIM_3->CCER = L_u32TempCCER;
 8002674:	4a48      	ldr	r2, [pc, #288]	; (8002798 <MTimer_voidPWM+0xc08>)
 8002676:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800267a:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 800267c:	4b46      	ldr	r3, [pc, #280]	; (8002798 <MTimer_voidPWM+0xc08>)
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	4a45      	ldr	r2, [pc, #276]	; (8002798 <MTimer_voidPWM+0xc08>)
 8002682:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002686:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 8002688:	4b43      	ldr	r3, [pc, #268]	; (8002798 <MTimer_voidPWM+0xc08>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	4a42      	ldr	r2, [pc, #264]	; (8002798 <MTimer_voidPWM+0xc08>)
 800268e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002692:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 8002694:	4b40      	ldr	r3, [pc, #256]	; (8002798 <MTimer_voidPWM+0xc08>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4a3f      	ldr	r2, [pc, #252]	; (8002798 <MTimer_voidPWM+0xc08>)
 800269a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800269e:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80026a0:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <MTimer_voidPWM+0xc08>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a3c      	ldr	r2, [pc, #240]	; (8002798 <MTimer_voidPWM+0xc08>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6013      	str	r3, [r2, #0]
}
 80026ac:	e1c1      	b.n	8002a32 <MTimer_voidPWM+0xea2>
	else if (A_u8TimerSelected == TIM4_TYPE)
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	f040 81be 	bne.w	8002a32 <MTimer_voidPWM+0xea2>
		if (A_u8Channel == TIM_CHANNEL_1)
 80026b6:	79bb      	ldrb	r3, [r7, #6]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d171      	bne.n	80027a0 <MTimer_voidPWM+0xc10>
			u32 L_u32TempCCMRX = 0 ;
 80026bc:	2300      	movs	r3, #0
 80026be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			u32 L_u32TempCCER  = 0 ;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			u32 L_u32TempCR2   = 0 ;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 80026ce:	4b33      	ldr	r3, [pc, #204]	; (800279c <MTimer_voidPWM+0xc0c>)
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	4a32      	ldr	r2, [pc, #200]	; (800279c <MTimer_voidPWM+0xc0c>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_4->CCER;
 80026da:	4b30      	ldr	r3, [pc, #192]	; (800279c <MTimer_voidPWM+0xc0c>)
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			L_u32TempCR2 = TIM_4->CR2;
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <MTimer_voidPWM+0xc0c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			L_u32TempCCMRX = TIM_4->CCMR1;
 80026ea:	4b2c      	ldr	r3, [pc, #176]	; (800279c <MTimer_voidPWM+0xc0c>)
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 80026f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026f6:	f023 0310 	bic.w	r3, r3, #16
 80026fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 80026fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002702:	f023 0320 	bic.w	r3, r3, #32
 8002706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 800270a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800270e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 8002716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 8002722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002726:	f023 0302 	bic.w	r3, r3, #2
 800272a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 800272e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002732:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 800273a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800273e:	f023 0302 	bic.w	r3, r3, #2
 8002742:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			TIM_4->CR2 = L_u32TempCR2;
 8002746:	4a15      	ldr	r2, [pc, #84]	; (800279c <MTimer_voidPWM+0xc0c>)
 8002748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800274c:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR1 = L_u32TempCCMRX;
 800274e:	4a13      	ldr	r2, [pc, #76]	; (800279c <MTimer_voidPWM+0xc0c>)
 8002750:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002754:	6193      	str	r3, [r2, #24]
			TIM_4->CCR1 = A_u16CompareValue;
 8002756:	4a11      	ldr	r2, [pc, #68]	; (800279c <MTimer_voidPWM+0xc0c>)
 8002758:	88bb      	ldrh	r3, [r7, #4]
 800275a:	6353      	str	r3, [r2, #52]	; 0x34
			TIM_4->CCER = L_u32TempCCER;
 800275c:	4a0f      	ldr	r2, [pc, #60]	; (800279c <MTimer_voidPWM+0xc0c>)
 800275e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002762:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <MTimer_voidPWM+0xc0c>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	4a0c      	ldr	r2, [pc, #48]	; (800279c <MTimer_voidPWM+0xc0c>)
 800276a:	f043 0308 	orr.w	r3, r3, #8
 800276e:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <MTimer_voidPWM+0xc0c>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4a09      	ldr	r2, [pc, #36]	; (800279c <MTimer_voidPWM+0xc0c>)
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <MTimer_voidPWM+0xc0c>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4a06      	ldr	r2, [pc, #24]	; (800279c <MTimer_voidPWM+0xc0c>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <MTimer_voidPWM+0xc0c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a03      	ldr	r2, [pc, #12]	; (800279c <MTimer_voidPWM+0xc0c>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	e14d      	b.n	8002a32 <MTimer_voidPWM+0xea2>
 8002796:	bf00      	nop
 8002798:	40000400 	.word	0x40000400
 800279c:	40000800 	.word	0x40000800
		else if (A_u8Channel == TIM_CHANNEL_2)
 80027a0:	79bb      	ldrb	r3, [r7, #6]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d16c      	bne.n	8002880 <MTimer_voidPWM+0xcf0>
			u32 L_u32TempCCMRX = 0 ;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			u32 L_u32TempCCER  = 0 ;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		    u32 L_u32TempCR2   = 0 ;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		    CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 80027b8:	4ba0      	ldr	r3, [pc, #640]	; (8002a3c <MTimer_voidPWM+0xeac>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4a9f      	ldr	r2, [pc, #636]	; (8002a3c <MTimer_voidPWM+0xeac>)
 80027be:	f023 0310 	bic.w	r3, r3, #16
 80027c2:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_4->CCER;
 80027c4:	4b9d      	ldr	r3, [pc, #628]	; (8002a3c <MTimer_voidPWM+0xeac>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		    L_u32TempCR2 = TIM_4->CR2;
 80027cc:	4b9b      	ldr	r3, [pc, #620]	; (8002a3c <MTimer_voidPWM+0xeac>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		    L_u32TempCCMRX = TIM_4->CCMR1;
 80027d4:	4b99      	ldr	r3, [pc, #612]	; (8002a3c <MTimer_voidPWM+0xeac>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 80027dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 80027e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 80027f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8002800:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 800280c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002810:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8002814:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 8002818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800281c:	f023 0320 	bic.w	r3, r3, #32
 8002820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 8002824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800282c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		    TIM_4->CR2 = L_u32TempCR2;
 8002830:	4a82      	ldr	r2, [pc, #520]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002832:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002836:	6053      	str	r3, [r2, #4]
		    TIM_4->CCMR1 = L_u32TempCCMRX;
 8002838:	4a80      	ldr	r2, [pc, #512]	; (8002a3c <MTimer_voidPWM+0xeac>)
 800283a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800283e:	6193      	str	r3, [r2, #24]
		    TIM_4->CCR2 = A_u16CompareValue;
 8002840:	4a7e      	ldr	r2, [pc, #504]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002842:	88bb      	ldrh	r3, [r7, #4]
 8002844:	6393      	str	r3, [r2, #56]	; 0x38
		    TIM_4->CCER = L_u32TempCCER;
 8002846:	4a7d      	ldr	r2, [pc, #500]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800284c:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 800284e:	4b7b      	ldr	r3, [pc, #492]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	4a7a      	ldr	r2, [pc, #488]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002858:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 800285a:	4b78      	ldr	r3, [pc, #480]	; (8002a3c <MTimer_voidPWM+0xeac>)
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	4a77      	ldr	r2, [pc, #476]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002860:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002864:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 8002866:	4b75      	ldr	r3, [pc, #468]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4a74      	ldr	r2, [pc, #464]	; (8002a3c <MTimer_voidPWM+0xeac>)
 800286c:	f043 0310 	orr.w	r3, r3, #16
 8002870:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8002872:	4b72      	ldr	r3, [pc, #456]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a71      	ldr	r2, [pc, #452]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6013      	str	r3, [r2, #0]
}
 800287e:	e0d8      	b.n	8002a32 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_3)
 8002880:	79bb      	ldrb	r3, [r7, #6]
 8002882:	2b03      	cmp	r3, #3
 8002884:	d16c      	bne.n	8002960 <MTimer_voidPWM+0xdd0>
			u32 L_u32TempCCMRX = 0 ;
 8002886:	2300      	movs	r3, #0
 8002888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			u32 L_u32TempCCER  = 0 ;
 800288c:	2300      	movs	r3, #0
 800288e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			u32 L_u32TempCR2   = 0 ;
 8002892:	2300      	movs	r3, #0
 8002894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 8002898:	4b68      	ldr	r3, [pc, #416]	; (8002a3c <MTimer_voidPWM+0xeac>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4a67      	ldr	r2, [pc, #412]	; (8002a3c <MTimer_voidPWM+0xeac>)
 800289e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028a2:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_4->CCER;
 80028a4:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <MTimer_voidPWM+0xeac>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			L_u32TempCR2 = TIM_4->CR2;
 80028ac:	4b63      	ldr	r3, [pc, #396]	; (8002a3c <MTimer_voidPWM+0xeac>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			L_u32TempCCMRX = TIM_4->CCMR2;
 80028b4:	4b61      	ldr	r3, [pc, #388]	; (8002a3c <MTimer_voidPWM+0xeac>)
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 80028bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028c0:	f023 0310 	bic.w	r3, r3, #16
 80028c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 80028c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028cc:	f023 0320 	bic.w	r3, r3, #32
 80028d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 80028d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 80028e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028e4:	f023 0302 	bic.w	r3, r3, #2
 80028e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 80028ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 80028f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 8002904:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800290c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			TIM_4->CR2 = L_u32TempCR2;
 8002910:	4a4a      	ldr	r2, [pc, #296]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002912:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002916:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR2 = L_u32TempCCMRX;
 8002918:	4a48      	ldr	r2, [pc, #288]	; (8002a3c <MTimer_voidPWM+0xeac>)
 800291a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800291e:	61d3      	str	r3, [r2, #28]
			TIM_4->CCR3 = A_u16CompareValue;
 8002920:	4a46      	ldr	r2, [pc, #280]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002922:	88bb      	ldrh	r3, [r7, #4]
 8002924:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM_4->CCER = L_u32TempCCER;
 8002926:	4a45      	ldr	r2, [pc, #276]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002928:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800292c:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 800292e:	4b43      	ldr	r3, [pc, #268]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4a42      	ldr	r2, [pc, #264]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002934:	f043 0308 	orr.w	r3, r3, #8
 8002938:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 800293a:	4b40      	ldr	r3, [pc, #256]	; (8002a3c <MTimer_voidPWM+0xeac>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	4a3f      	ldr	r2, [pc, #252]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 8002946:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4a3c      	ldr	r2, [pc, #240]	; (8002a3c <MTimer_voidPWM+0xeac>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8002952:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a39      	ldr	r2, [pc, #228]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6013      	str	r3, [r2, #0]
}
 800295e:	e068      	b.n	8002a32 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_4)
 8002960:	79bb      	ldrb	r3, [r7, #6]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d165      	bne.n	8002a32 <MTimer_voidPWM+0xea2>
			u32 L_u32TempCCMRX = 0 ;
 8002966:	2300      	movs	r3, #0
 8002968:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			u32 L_u32TempCCER  = 0 ;
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			u32 L_u32TempCR2   = 0 ;
 8002972:	2300      	movs	r3, #0
 8002974:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 8002978:	4b30      	ldr	r3, [pc, #192]	; (8002a3c <MTimer_voidPWM+0xeac>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	4a2f      	ldr	r2, [pc, #188]	; (8002a3c <MTimer_voidPWM+0xeac>)
 800297e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002982:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_4->CCER;
 8002984:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			L_u32TempCR2 = TIM_4->CR2;
 800298c:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <MTimer_voidPWM+0xeac>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			L_u32TempCCMRX = TIM_4->CCMR2;
 8002994:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 800299c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 80029a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 80029b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 80029c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 80029cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029d0:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80029d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 80029d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			TIM_4->CR2 = L_u32TempCR2;
 80029e4:	4a15      	ldr	r2, [pc, #84]	; (8002a3c <MTimer_voidPWM+0xeac>)
 80029e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029ea:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR2 = L_u32TempCCMRX;
 80029ec:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <MTimer_voidPWM+0xeac>)
 80029ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029f2:	61d3      	str	r3, [r2, #28]
			TIM_4->CCR4 = A_u16CompareValue;
 80029f4:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <MTimer_voidPWM+0xeac>)
 80029f6:	88bb      	ldrh	r3, [r7, #4]
 80029f8:	6413      	str	r3, [r2, #64]	; 0x40
			TIM_4->CCER = L_u32TempCCER;
 80029fa:	4a10      	ldr	r2, [pc, #64]	; (8002a3c <MTimer_voidPWM+0xeac>)
 80029fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a00:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	4a0d      	ldr	r2, [pc, #52]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002a08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a0c:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002a14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a18:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	4a07      	ldr	r2, [pc, #28]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002a20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a24:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <MTimer_voidPWM+0xeac>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6013      	str	r3, [r2, #0]
}
 8002a32:	bf00      	nop
 8002a34:	37c8      	adds	r7, #200	; 0xc8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40000800 	.word	0x40000800

08002a40 <MUART_voidInit>:
Buffer_state (*MUSART2_CallBack)(void);



void MUART_voidInit(USART_InitType *A_InitStruct,USART_ClockInitTypeDef *A_xUART_ClockInitStruct,USART_t *A_xUART_Type)
{
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]

	//MRCC_voidEnablePerephiralClock(RCC_AHB1, RCC_EN_GPIOA); /* Enable GPIOA from RCC */
	//MRCC_voidEnablePerephiralClock(RCC_AHB1, RCC_EN_GPIOB); /* Enable GPIOB from RCC */

	/* Enable selected UART from RCC */
	if (A_xUART_Type == UART1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a74      	ldr	r2, [pc, #464]	; (8002c20 <MUART_voidInit+0x1e0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d10d      	bne.n	8002a70 <MUART_voidInit+0x30>
	{
		/*configer Tx1 as alt fun*/
		GPIO_voidSetPinMode(GPIO_PORTA , GPIO_PIN2 , GPIO_OUTPUT_10M_AF_PP) ;
 8002a54:	2209      	movs	r2, #9
 8002a56:	2102      	movs	r1, #2
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f7fe fa91 	bl	8000f80 <GPIO_voidSetPinMode>

		/*configer Rx1 as alt fun*/
		GPIO_voidSetPinMode(GPIO_PORTA , GPIO_PIN2 , GPIO_OUTPUT_10M_AF_PP) ;
 8002a5e:	2209      	movs	r2, #9
 8002a60:	2102      	movs	r1, #2
 8002a62:	2001      	movs	r0, #1
 8002a64:	f7fe fa8c 	bl	8000f80 <GPIO_voidSetPinMode>

		/*Enable interrupt of UART1 from NVIC*/
		NVIC_voidEnableInterrupt(37);
 8002a68:	2025      	movs	r0, #37	; 0x25
 8002a6a:	f7fe fd79 	bl	8001560 <NVIC_voidEnableInterrupt>
 8002a6e:	e010      	b.n	8002a92 <MUART_voidInit+0x52>
	}
	else if (A_xUART_Type == UART2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a6c      	ldr	r2, [pc, #432]	; (8002c24 <MUART_voidInit+0x1e4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d10c      	bne.n	8002a92 <MUART_voidInit+0x52>
	{
		/*configer Tx2 as alt fun*/
		GPIO_voidSetPinMode(GPIO_PORTA , GPIO_PIN2 , GPIO_OUTPUT_10M_AF_PP) ;
 8002a78:	2209      	movs	r2, #9
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f7fe fa7f 	bl	8000f80 <GPIO_voidSetPinMode>

		/*configer Rx2 as alt fun*/
		GPIO_voidSetPinMode(GPIO_PORTA , GPIO_PIN2 , GPIO_OUTPUT_10M_AF_PP) ;
 8002a82:	2209      	movs	r2, #9
 8002a84:	2102      	movs	r1, #2
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7fe fa7a 	bl	8000f80 <GPIO_voidSetPinMode>

		/*Enable interrupt of UART2 from NVIC*/
		NVIC_voidEnableInterrupt(38);
 8002a8c:	2026      	movs	r0, #38	; 0x26
 8002a8e:	f7fe fd67 	bl	8001560 <NVIC_voidEnableInterrupt>
	}

		 A_xUART_Type->BRR = UART_BRR_SAMPLING16(__PCLK__,A_InitStruct->BaudRate);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4619      	mov	r1, r3
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	f04f 0400 	mov.w	r4, #0
 8002aa4:	0094      	lsls	r4, r2, #2
 8002aa6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002aaa:	008b      	lsls	r3, r1, #2
 8002aac:	461a      	mov	r2, r3
 8002aae:	4623      	mov	r3, r4
 8002ab0:	a159      	add	r1, pc, #356	; (adr r1, 8002c18 <MUART_voidInit+0x1d8>)
 8002ab2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ab6:	f7fe f8cf 	bl	8000c58 <__aeabi_uldivmod>
 8002aba:	4603      	mov	r3, r0
 8002abc:	460c      	mov	r4, r1
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4b59      	ldr	r3, [pc, #356]	; (8002c28 <MUART_voidInit+0x1e8>)
 8002ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	011d      	lsls	r5, r3, #4
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	f04f 0400 	mov.w	r4, #0
 8002adc:	0094      	lsls	r4, r2, #2
 8002ade:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ae2:	008b      	lsls	r3, r1, #2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	a14b      	add	r1, pc, #300	; (adr r1, 8002c18 <MUART_voidInit+0x1d8>)
 8002aea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002aee:	f7fe f8b3 	bl	8000c58 <__aeabi_uldivmod>
 8002af2:	4603      	mov	r3, r0
 8002af4:	460c      	mov	r4, r1
 8002af6:	461a      	mov	r2, r3
 8002af8:	4b4b      	ldr	r3, [pc, #300]	; (8002c28 <MUART_voidInit+0x1e8>)
 8002afa:	fba3 1302 	umull	r1, r3, r3, r2
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2164      	movs	r1, #100	; 0x64
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	3332      	adds	r3, #50	; 0x32
 8002b0c:	4a46      	ldr	r2, [pc, #280]	; (8002c28 <MUART_voidInit+0x1e8>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b18:	441d      	add	r5, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	f04f 0400 	mov.w	r4, #0
 8002b2c:	0094      	lsls	r4, r2, #2
 8002b2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b32:	008b      	lsls	r3, r1, #2
 8002b34:	461a      	mov	r2, r3
 8002b36:	4623      	mov	r3, r4
 8002b38:	a137      	add	r1, pc, #220	; (adr r1, 8002c18 <MUART_voidInit+0x1d8>)
 8002b3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b3e:	f7fe f88b 	bl	8000c58 <__aeabi_uldivmod>
 8002b42:	4603      	mov	r3, r0
 8002b44:	460c      	mov	r4, r1
 8002b46:	461a      	mov	r2, r3
 8002b48:	4b37      	ldr	r3, [pc, #220]	; (8002c28 <MUART_voidInit+0x1e8>)
 8002b4a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2164      	movs	r1, #100	; 0x64
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	3332      	adds	r3, #50	; 0x32
 8002b5c:	4a32      	ldr	r2, [pc, #200]	; (8002c28 <MUART_voidInit+0x1e8>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	18ea      	adds	r2, r5, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	609a      	str	r2, [r3, #8]

		 A_xUART_Type->CR1 =(A_InitStruct->HardwareFlowControl << MUSART_CR1_UE_BIT    ) |
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	7a5b      	ldrb	r3, [r3, #9]
 8002b72:	035a      	lsls	r2, r3, #13
    			        (A_InitStruct->DataWidth           << MUSART_CR1_M_BIT     ) |
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	791b      	ldrb	r3, [r3, #4]
 8002b78:	031b      	lsls	r3, r3, #12
		 A_xUART_Type->CR1 =(A_InitStruct->HardwareFlowControl << MUSART_CR1_UE_BIT    ) |
 8002b7a:	431a      	orrs	r2, r3
    			        (A_InitStruct->Parity_Enable       << MUSART_CR1_PCE_BIT   ) |
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	799b      	ldrb	r3, [r3, #6]
 8002b80:	029b      	lsls	r3, r3, #10
    			        (A_InitStruct->DataWidth           << MUSART_CR1_M_BIT     ) |
 8002b82:	431a      	orrs	r2, r3
    			        (A_InitStruct->Parity_Selection    << MUSART_CR1_PS_BIT    ) ;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	79db      	ldrb	r3, [r3, #7]
 8002b88:	025b      	lsls	r3, r3, #9
    			        (A_InitStruct->Parity_Enable       << MUSART_CR1_PCE_BIT   ) |
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	461a      	mov	r2, r3
		 A_xUART_Type->CR1 =(A_InitStruct->HardwareFlowControl << MUSART_CR1_UE_BIT    ) |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60da      	str	r2, [r3, #12]

    switch (A_InitStruct->TransferDirection)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	7a1b      	ldrb	r3, [r3, #8]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d00a      	beq.n	8002bb0 <MUART_voidInit+0x170>
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d00f      	beq.n	8002bbe <MUART_voidInit+0x17e>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d11a      	bne.n	8002bd8 <MUART_voidInit+0x198>
    {
    case TX_ONLY:
    	 SET_BIT(A_xUART_Type->CR1, MUSART_CR1_TE_BIT);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f043 0208 	orr.w	r2, r3, #8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	60da      	str	r2, [r3, #12]
    	 break;
 8002bae:	e013      	b.n	8002bd8 <MUART_voidInit+0x198>
    case RX_ONLY:
    	 SET_BIT(A_xUART_Type->CR1, MUSART_CR1_RE_BIT);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f043 0204 	orr.w	r2, r3, #4
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	60da      	str	r2, [r3, #12]
    	 break;
 8002bbc:	e00c      	b.n	8002bd8 <MUART_voidInit+0x198>
    case TX_RX:
    	 SET_BIT(A_xUART_Type->CR1, MUSART_CR1_TE_BIT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f043 0208 	orr.w	r2, r3, #8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	60da      	str	r2, [r3, #12]
    	 SET_BIT(A_xUART_Type->CR1, MUSART_CR1_RE_BIT);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f043 0204 	orr.w	r2, r3, #4
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	60da      	str	r2, [r3, #12]
    	 break;
 8002bd6:	bf00      	nop
    }
    A_xUART_Type->CR2 =   (A_InitStruct           ->StopBits          << MUSART_CR2_STOP_BIT  )  |
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	795b      	ldrb	r3, [r3, #5]
 8002bdc:	031a      	lsls	r2, r3, #12
    				      (A_xUART_ClockInitStruct->ClockOutput       << MUSART_CR2_CLKEN_BIT )  |
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	02db      	lsls	r3, r3, #11
    A_xUART_Type->CR2 =   (A_InitStruct           ->StopBits          << MUSART_CR2_STOP_BIT  )  |
 8002be4:	431a      	orrs	r2, r3
    				      (A_xUART_ClockInitStruct->ClockPhase        << MUSART_CR2_CPHA_BIT  )  |
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	789b      	ldrb	r3, [r3, #2]
 8002bea:	025b      	lsls	r3, r3, #9
    				      (A_xUART_ClockInitStruct->ClockOutput       << MUSART_CR2_CLKEN_BIT )  |
 8002bec:	431a      	orrs	r2, r3
    				      (A_xUART_ClockInitStruct->ClockPolarity     << MUSART_CR2_CPOL_BIT  )  |
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	785b      	ldrb	r3, [r3, #1]
 8002bf2:	029b      	lsls	r3, r3, #10
    				      (A_xUART_ClockInitStruct->ClockPhase        << MUSART_CR2_CPHA_BIT  )  |
 8002bf4:	431a      	orrs	r2, r3
    				      (A_xUART_ClockInitStruct->LastBitClockPulse << MUSART_CR2_LBCL_BIT  )  ;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	78db      	ldrb	r3, [r3, #3]
 8002bfa:	021b      	lsls	r3, r3, #8
    				      (A_xUART_ClockInitStruct->ClockPolarity     << MUSART_CR2_CPOL_BIT  )  |
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	461a      	mov	r2, r3
    A_xUART_Type->CR2 =   (A_InitStruct           ->StopBits          << MUSART_CR2_STOP_BIT  )  |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	611a      	str	r2, [r3, #16]

    A_xUART_Type->SR = 0;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
    local_u8_RX_Busyflag=0;
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <MUART_voidInit+0x1ec>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bdb0      	pop	{r4, r5, r7, pc}
 8002c18:	0bebc200 	.word	0x0bebc200
 8002c1c:	00000000 	.word	0x00000000
 8002c20:	40013800 	.word	0x40013800
 8002c24:	40004400 	.word	0x40004400
 8002c28:	51eb851f 	.word	0x51eb851f
 8002c2c:	200001df 	.word	0x200001df

08002c30 <MUART_voidEnable>:

void MUART_voidEnable( USART_t *A_xUART_Type)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	SET_BIT(A_xUART_Type->CR1,MUSART_CR1_UE_BIT);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	60da      	str	r2, [r3, #12]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
	...

08002c50 <MUART_u8ReceiveByteASynch>:
	}
	return L_u8Data;
}

void MUART_u8ReceiveByteASynch (USART_t *A_xUART_Type )
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
		local_u8_RX_Busyflag=1;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <MUART_u8ReceiveByteASynch+0x24>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
		SET_BIT(A_xUART_Type->CR1 , MUSART_CR1_RXNEIE_BIT);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f043 0220 	orr.w	r2, r3, #32
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	60da      	str	r2, [r3, #12]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	200001df 	.word	0x200001df

08002c78 <MUART_Buffer_Write>:
	case DISABLE:  CLR_BIT(USARTx->CR1 , MUSART_CR1_RXNEIE_BIT); break;
	}
}

Buffer_state MUART_Buffer_Write()
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
	Buffer_state Local_BufferState = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	71fb      	strb	r3, [r7, #7]
	u8 L_u8temp;
	if (G_u8RxCounter == MAX_SIZE_DATA_BUFFER)
 8002c82:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <MUART_Buffer_Write+0x70>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2bc8      	cmp	r3, #200	; 0xc8
 8002c88:	d102      	bne.n	8002c90 <MUART_Buffer_Write+0x18>
	{
		Local_BufferState = Buffer_is_full;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	71fb      	strb	r3, [r7, #7]
 8002c8e:	e026      	b.n	8002cde <MUART_Buffer_Write+0x66>
	}else{
		Local_BufferState = Buffer_is_success;
 8002c90:	2302      	movs	r3, #2
 8002c92:	71fb      	strb	r3, [r7, #7]
		//TODO Different UART
		L_u8temp =  MUART_u8ReadDataRegister(UART1);
 8002c94:	4815      	ldr	r0, [pc, #84]	; (8002cec <MUART_Buffer_Write+0x74>)
 8002c96:	f000 fc2f 	bl	80034f8 <MUART_u8ReadDataRegister>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71bb      	strb	r3, [r7, #6]
		G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = L_u8temp;
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <MUART_Buffer_Write+0x78>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4a13      	ldr	r2, [pc, #76]	; (8002cf4 <MUART_Buffer_Write+0x7c>)
 8002ca6:	79bb      	ldrb	r3, [r7, #6]
 8002ca8:	5453      	strb	r3, [r2, r1]
		G_u8RxBufferTailIndex = (G_u8RxBufferTailIndex+1) % MAX_SIZE_DATA_BUFFER;
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <MUART_Buffer_Write+0x78>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	4a11      	ldr	r2, [pc, #68]	; (8002cf8 <MUART_Buffer_Write+0x80>)
 8002cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8002cb6:	1191      	asrs	r1, r2, #6
 8002cb8:	17da      	asrs	r2, r3, #31
 8002cba:	1a8a      	subs	r2, r1, r2
 8002cbc:	21c8      	movs	r1, #200	; 0xc8
 8002cbe:	fb01 f202 	mul.w	r2, r1, r2
 8002cc2:	1a9a      	subs	r2, r3, r2
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <MUART_Buffer_Write+0x78>)
 8002cc8:	701a      	strb	r2, [r3, #0]
		G_u8RxCounter++;
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <MUART_Buffer_Write+0x70>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <MUART_Buffer_Write+0x70>)
 8002cd4:	701a      	strb	r2, [r3, #0]
		MUART_voidCleanRxBuffer(L_u8temp);
 8002cd6:	79bb      	ldrb	r3, [r7, #6]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 f90f 	bl	8002efc <MUART_voidCleanRxBuffer>
	}
	return Local_BufferState;
 8002cde:	79fb      	ldrb	r3, [r7, #7]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	200001de 	.word	0x200001de
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	200001dd 	.word	0x200001dd
 8002cf4:	20000114 	.word	0x20000114
 8002cf8:	51eb851f 	.word	0x51eb851f

08002cfc <MUART_ReadData>:

Buffer_state MUART_ReadData(u8* A_u8PtrData)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
	Buffer_state L_BufferState=0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	73fb      	strb	r3, [r7, #15]
	if (G_u8RxCounter == 0)
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <MUART_ReadData+0x84>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d102      	bne.n	8002d16 <MUART_ReadData+0x1a>
	{
		L_BufferState = Buffer_is_empty;
 8002d10:	2300      	movs	r3, #0
 8002d12:	73fb      	strb	r3, [r7, #15]
 8002d14:	e02e      	b.n	8002d74 <MUART_ReadData+0x78>
	}
	else{
		*A_u8PtrData = G_Au8UART_RxBuffer[G_u8RxBufferHeadIndex];
 8002d16:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <MUART_ReadData+0x88>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <MUART_ReadData+0x8c>)
 8002d1e:	5c9a      	ldrb	r2, [r3, r2]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	701a      	strb	r2, [r3, #0]
		G_Au8UART_RxBuffer[G_u8RxBufferHeadIndex] = 0;
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <MUART_ReadData+0x88>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b17      	ldr	r3, [pc, #92]	; (8002d88 <MUART_ReadData+0x8c>)
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	5499      	strb	r1, [r3, r2]
		G_u8RxBufferHeadIndex = (G_u8RxBufferHeadIndex+1) % MAX_SIZE_DATA_BUFFER;
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <MUART_ReadData+0x88>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	3301      	adds	r3, #1
 8002d36:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <MUART_ReadData+0x90>)
 8002d38:	fb82 1203 	smull	r1, r2, r2, r3
 8002d3c:	1191      	asrs	r1, r2, #6
 8002d3e:	17da      	asrs	r2, r3, #31
 8002d40:	1a8a      	subs	r2, r1, r2
 8002d42:	21c8      	movs	r1, #200	; 0xc8
 8002d44:	fb01 f202 	mul.w	r2, r1, r2
 8002d48:	1a9a      	subs	r2, r3, r2
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <MUART_ReadData+0x88>)
 8002d4e:	701a      	strb	r2, [r3, #0]
		G_u8RxCounter--;
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <MUART_ReadData+0x84>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <MUART_ReadData+0x84>)
 8002d5a:	701a      	strb	r2, [r3, #0]
		L_BufferState = Buffer_is_success;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	73fb      	strb	r3, [r7, #15]
		if(!G_u8RxCounter){
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <MUART_ReadData+0x84>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <MUART_ReadData+0x78>
			G_u8RxBufferHeadIndex = 0;
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <MUART_ReadData+0x88>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
			G_u8RxBufferTailIndex = 0;
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <MUART_ReadData+0x94>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
		}
	}
	return L_BufferState;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	200001de 	.word	0x200001de
 8002d84:	200001dc 	.word	0x200001dc
 8002d88:	20000114 	.word	0x20000114
 8002d8c:	51eb851f 	.word	0x51eb851f
 8002d90:	200001dd 	.word	0x200001dd

08002d94 <APP_Sort_Buffer>:
	}
	return L_ErrorStatus;
}

void APP_Sort_Buffer()
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
	u8 L_u8Temp =0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	717b      	strb	r3, [r7, #5]
	u8 i = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	71fb      	strb	r3, [r7, #7]
	u8 L_u8Sorted = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	71bb      	strb	r3, [r7, #6]
	if(G_u8RxBufferHeadIndex < G_u8RxBufferTailIndex ){
 8002da6:	4b52      	ldr	r3, [pc, #328]	; (8002ef0 <APP_Sort_Buffer+0x15c>)
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	4b52      	ldr	r3, [pc, #328]	; (8002ef4 <APP_Sort_Buffer+0x160>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d22a      	bcs.n	8002e08 <APP_Sort_Buffer+0x74>
		for (i = G_u8RxBufferTailIndex - 1; i > G_u8RxBufferHeadIndex ; i-- )
 8002db2:	4b50      	ldr	r3, [pc, #320]	; (8002ef4 <APP_Sort_Buffer+0x160>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	71fb      	strb	r3, [r7, #7]
 8002dba:	e01f      	b.n	8002dfc <APP_Sort_Buffer+0x68>
		{
			if(G_Au8UART_RxBuffer[i] < G_Au8UART_RxBuffer[i-1])
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	4a4e      	ldr	r2, [pc, #312]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002dc0:	5cd2      	ldrb	r2, [r2, r3]
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	494c      	ldr	r1, [pc, #304]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002dc8:	5ccb      	ldrb	r3, [r1, r3]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d210      	bcs.n	8002df0 <APP_Sort_Buffer+0x5c>
			{
				L_u8Temp = G_Au8UART_RxBuffer[i];
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	4a49      	ldr	r2, [pc, #292]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	717b      	strb	r3, [r7, #5]
				G_Au8UART_RxBuffer[i] = G_Au8UART_RxBuffer[i-1];
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	1e5a      	subs	r2, r3, #1
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	4946      	ldr	r1, [pc, #280]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002dde:	5c89      	ldrb	r1, [r1, r2]
 8002de0:	4a45      	ldr	r2, [pc, #276]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002de2:	54d1      	strb	r1, [r2, r3]
				G_Au8UART_RxBuffer[i-1] = L_u8Temp;
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	4943      	ldr	r1, [pc, #268]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002dea:	797a      	ldrb	r2, [r7, #5]
 8002dec:	54ca      	strb	r2, [r1, r3]
 8002dee:	e002      	b.n	8002df6 <APP_Sort_Buffer+0x62>
			}else{
				//Buffer is sorted
				L_u8Sorted = 1;
 8002df0:	2301      	movs	r3, #1
 8002df2:	71bb      	strb	r3, [r7, #6]
				break;
 8002df4:	e076      	b.n	8002ee4 <APP_Sort_Buffer+0x150>
		for (i = G_u8RxBufferTailIndex - 1; i > G_u8RxBufferHeadIndex ; i-- )
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	71fb      	strb	r3, [r7, #7]
 8002dfc:	4b3c      	ldr	r3, [pc, #240]	; (8002ef0 <APP_Sort_Buffer+0x15c>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	79fa      	ldrb	r2, [r7, #7]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d8da      	bhi.n	8002dbc <APP_Sort_Buffer+0x28>
		else{
			//Buffer is sorted
		}
	}

}
 8002e06:	e06d      	b.n	8002ee4 <APP_Sort_Buffer+0x150>
		if(G_u8RxBufferTailIndex  != 0){
 8002e08:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <APP_Sort_Buffer+0x160>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d069      	beq.n	8002ee4 <APP_Sort_Buffer+0x150>
		for (i = G_u8RxBufferTailIndex - 1; i > 0; i-- )
 8002e10:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <APP_Sort_Buffer+0x160>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	71fb      	strb	r3, [r7, #7]
 8002e18:	e01f      	b.n	8002e5a <APP_Sort_Buffer+0xc6>
			if(G_Au8UART_RxBuffer[i] < G_Au8UART_RxBuffer[i-1])
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	4a36      	ldr	r2, [pc, #216]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002e1e:	5cd2      	ldrb	r2, [r2, r3]
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	4934      	ldr	r1, [pc, #208]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d210      	bcs.n	8002e4e <APP_Sort_Buffer+0xba>
				L_u8Temp = G_Au8UART_RxBuffer[i];
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	4a32      	ldr	r2, [pc, #200]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002e30:	5cd3      	ldrb	r3, [r2, r3]
 8002e32:	717b      	strb	r3, [r7, #5]
				G_Au8UART_RxBuffer[i] = G_Au8UART_RxBuffer[i-1];
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	1e5a      	subs	r2, r3, #1
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	492f      	ldr	r1, [pc, #188]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002e3c:	5c89      	ldrb	r1, [r1, r2]
 8002e3e:	4a2e      	ldr	r2, [pc, #184]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002e40:	54d1      	strb	r1, [r2, r3]
				G_Au8UART_RxBuffer[i-1] = L_u8Temp;
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	492c      	ldr	r1, [pc, #176]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002e48:	797a      	ldrb	r2, [r7, #5]
 8002e4a:	54ca      	strb	r2, [r1, r3]
 8002e4c:	e002      	b.n	8002e54 <APP_Sort_Buffer+0xc0>
				L_u8Sorted = 1;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	71bb      	strb	r3, [r7, #6]
				break;
 8002e52:	e005      	b.n	8002e60 <APP_Sort_Buffer+0xcc>
		for (i = G_u8RxBufferTailIndex - 1; i > 0; i-- )
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	71fb      	strb	r3, [r7, #7]
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1dc      	bne.n	8002e1a <APP_Sort_Buffer+0x86>
		if(!L_u8Sorted){
 8002e60:	79bb      	ldrb	r3, [r7, #6]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d13e      	bne.n	8002ee4 <APP_Sort_Buffer+0x150>
			if(G_Au8UART_RxBuffer[0] < G_Au8UART_RxBuffer[MAX_SIZE_DATA_BUFFER - 1]){
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002e68:	781a      	ldrb	r2, [r3, #0]
 8002e6a:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002e6c:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d20e      	bcs.n	8002e92 <APP_Sort_Buffer+0xfe>
				i= MAX_SIZE_DATA_BUFFER - 1; //last element in buffer
 8002e74:	23c7      	movs	r3, #199	; 0xc7
 8002e76:	71fb      	strb	r3, [r7, #7]
				L_u8Temp = G_Au8UART_RxBuffer[0];
 8002e78:	4b1f      	ldr	r3, [pc, #124]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	717b      	strb	r3, [r7, #5]
				G_Au8UART_RxBuffer[0] = G_Au8UART_RxBuffer[i];
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002e82:	5cd2      	ldrb	r2, [r2, r3]
 8002e84:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002e86:	701a      	strb	r2, [r3, #0]
				G_Au8UART_RxBuffer[i] = L_u8Temp;
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	491b      	ldr	r1, [pc, #108]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002e8c:	797a      	ldrb	r2, [r7, #5]
 8002e8e:	54ca      	strb	r2, [r1, r3]
 8002e90:	e022      	b.n	8002ed8 <APP_Sort_Buffer+0x144>
			i = MAX_SIZE_DATA_BUFFER - 1;
 8002e92:	23c7      	movs	r3, #199	; 0xc7
 8002e94:	71fb      	strb	r3, [r7, #7]
				for(;i> G_u8RxBufferHeadIndex ; i-- ){
 8002e96:	e01f      	b.n	8002ed8 <APP_Sort_Buffer+0x144>
					if(G_Au8UART_RxBuffer[i] < G_Au8UART_RxBuffer[i-1])
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	4a17      	ldr	r2, [pc, #92]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002e9c:	5cd2      	ldrb	r2, [r2, r3]
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	4915      	ldr	r1, [pc, #84]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002ea4:	5ccb      	ldrb	r3, [r1, r3]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d210      	bcs.n	8002ecc <APP_Sort_Buffer+0x138>
						L_u8Temp = G_Au8UART_RxBuffer[i];
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002eae:	5cd3      	ldrb	r3, [r2, r3]
 8002eb0:	717b      	strb	r3, [r7, #5]
						G_Au8UART_RxBuffer[i] = G_Au8UART_RxBuffer[i-1];
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	1e5a      	subs	r2, r3, #1
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	490f      	ldr	r1, [pc, #60]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002eba:	5c89      	ldrb	r1, [r1, r2]
 8002ebc:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002ebe:	54d1      	strb	r1, [r2, r3]
						G_Au8UART_RxBuffer[i-1] = L_u8Temp;
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	490c      	ldr	r1, [pc, #48]	; (8002ef8 <APP_Sort_Buffer+0x164>)
 8002ec6:	797a      	ldrb	r2, [r7, #5]
 8002ec8:	54ca      	strb	r2, [r1, r3]
 8002eca:	e002      	b.n	8002ed2 <APP_Sort_Buffer+0x13e>
						L_u8Sorted = 1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	71bb      	strb	r3, [r7, #6]
						break;
 8002ed0:	e008      	b.n	8002ee4 <APP_Sort_Buffer+0x150>
				for(;i> G_u8RxBufferHeadIndex ; i-- ){
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	71fb      	strb	r3, [r7, #7]
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <APP_Sort_Buffer+0x15c>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	79fa      	ldrb	r2, [r7, #7]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d8da      	bhi.n	8002e98 <APP_Sort_Buffer+0x104>
}
 8002ee2:	e7ff      	b.n	8002ee4 <APP_Sort_Buffer+0x150>
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	200001dc 	.word	0x200001dc
 8002ef4:	200001dd 	.word	0x200001dd
 8002ef8:	20000114 	.word	0x20000114

08002efc <MUART_voidCleanRxBuffer>:

void MUART_voidCleanRxBuffer(u8 A_u8NewData)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
	u8 i=0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
	u8 counter = G_u8RxCounter-1;
 8002f0a:	4b95      	ldr	r3, [pc, #596]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	73bb      	strb	r3, [r7, #14]
	if(!counter){
 8002f12:	7bbb      	ldrb	r3, [r7, #14]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 82e4 	bne.w	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
		i = G_u8RxBufferHeadIndex;
 8002f1a:	4b92      	ldr	r3, [pc, #584]	; (8003164 <MUART_voidCleanRxBuffer+0x268>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	73fb      	strb	r3, [r7, #15]
		if(A_u8NewData < 0x21){//stop command
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d852      	bhi.n	8002fcc <MUART_voidCleanRxBuffer+0xd0>
			if(G_u8RxBufferHeadIndex>G_u8RxBufferTailIndex){
 8002f26:	4b8f      	ldr	r3, [pc, #572]	; (8003164 <MUART_voidCleanRxBuffer+0x268>)
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	4b8f      	ldr	r3, [pc, #572]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d946      	bls.n	8002fc0 <MUART_voidCleanRxBuffer+0xc4>
				while(counter--){
 8002f32:	e022      	b.n	8002f7a <MUART_voidCleanRxBuffer+0x7e>
					if(G_Au8UART_RxBuffer[i]<0x80){
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	4a8d      	ldr	r2, [pc, #564]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 8002f38:	5cd3      	ldrb	r3, [r2, r3]
 8002f3a:	b25b      	sxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	db13      	blt.n	8002f68 <MUART_voidCleanRxBuffer+0x6c>
						//moving command
						//delete
						G_Au8UART_RxBuffer[i] = 0;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	4a8a      	ldr	r2, [pc, #552]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 8002f44:	2100      	movs	r1, #0
 8002f46:	54d1      	strb	r1, [r2, r3]
						G_u8RxBufferHeadIndex++;
 8002f48:	4b86      	ldr	r3, [pc, #536]	; (8003164 <MUART_voidCleanRxBuffer+0x268>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	4b84      	ldr	r3, [pc, #528]	; (8003164 <MUART_voidCleanRxBuffer+0x268>)
 8002f52:	701a      	strb	r2, [r3, #0]
						G_u8RxCounter--;
 8002f54:	4b82      	ldr	r3, [pc, #520]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	4b80      	ldr	r3, [pc, #512]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 8002f5e:	701a      	strb	r2, [r3, #0]
					else{
						//data commands
						APP_Sort_Buffer();
						break;
					}
					i = ((i<MAX_SIZE_DATA_BUFFER)?(i+1):(0));
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2bc7      	cmp	r3, #199	; 0xc7
 8002f64:	d807      	bhi.n	8002f76 <MUART_voidCleanRxBuffer+0x7a>
 8002f66:	e002      	b.n	8002f6e <MUART_voidCleanRxBuffer+0x72>
						APP_Sort_Buffer();
 8002f68:	f7ff ff14 	bl	8002d94 <APP_Sort_Buffer>
						break;
 8002f6c:	e2b9      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					i = ((i<MAX_SIZE_DATA_BUFFER)?(i+1):(0));
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	3301      	adds	r3, #1
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	e000      	b.n	8002f78 <MUART_voidCleanRxBuffer+0x7c>
 8002f76:	2300      	movs	r3, #0
 8002f78:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 8002f7a:	7bbb      	ldrb	r3, [r7, #14]
 8002f7c:	1e5a      	subs	r2, r3, #1
 8002f7e:	73ba      	strb	r2, [r7, #14]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1d7      	bne.n	8002f34 <MUART_voidCleanRxBuffer+0x38>
		else{//Error in ACK
			//permits duplicates
			APP_Sort_Buffer();
		}
	}
}
 8002f84:	e2ad      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					if(G_Au8UART_RxBuffer[i]<0x80){
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	4a78      	ldr	r2, [pc, #480]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 8002f8a:	5cd3      	ldrb	r3, [r2, r3]
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	db10      	blt.n	8002fb4 <MUART_voidCleanRxBuffer+0xb8>
						G_Au8UART_RxBuffer[i] = 0;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	4a75      	ldr	r2, [pc, #468]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 8002f96:	2100      	movs	r1, #0
 8002f98:	54d1      	strb	r1, [r2, r3]
						G_u8RxBufferHeadIndex++;
 8002f9a:	4b72      	ldr	r3, [pc, #456]	; (8003164 <MUART_voidCleanRxBuffer+0x268>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4b70      	ldr	r3, [pc, #448]	; (8003164 <MUART_voidCleanRxBuffer+0x268>)
 8002fa4:	701a      	strb	r2, [r3, #0]
						G_u8RxCounter--;
 8002fa6:	4b6e      	ldr	r3, [pc, #440]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4b6c      	ldr	r3, [pc, #432]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	e002      	b.n	8002fba <MUART_voidCleanRxBuffer+0xbe>
						APP_Sort_Buffer();
 8002fb4:	f7ff feee 	bl	8002d94 <APP_Sort_Buffer>
						break;
 8002fb8:	e293      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					i++;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 8002fc0:	7bbb      	ldrb	r3, [r7, #14]
 8002fc2:	1e5a      	subs	r2, r3, #1
 8002fc4:	73ba      	strb	r2, [r7, #14]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1dd      	bne.n	8002f86 <MUART_voidCleanRxBuffer+0x8a>
}
 8002fca:	e28a      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0x60){//turn command
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	2b5f      	cmp	r3, #95	; 0x5f
 8002fd0:	f200 809b 	bhi.w	800310a <MUART_voidCleanRxBuffer+0x20e>
			if(G_u8RxBufferHeadIndex>G_u8RxBufferTailIndex){
 8002fd4:	4b63      	ldr	r3, [pc, #396]	; (8003164 <MUART_voidCleanRxBuffer+0x268>)
 8002fd6:	781a      	ldrb	r2, [r3, #0]
 8002fd8:	4b63      	ldr	r3, [pc, #396]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	f240 808d 	bls.w	80030fc <MUART_voidCleanRxBuffer+0x200>
				while(counter--){
 8002fe2:	e042      	b.n	800306a <MUART_voidCleanRxBuffer+0x16e>
					if(G_Au8UART_RxBuffer[i]<0x21){
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	4a61      	ldr	r2, [pc, #388]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 8002fe8:	5cd3      	ldrb	r3, [r2, r3]
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d818      	bhi.n	8003020 <MUART_voidCleanRxBuffer+0x124>
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 8002fee:	4b5e      	ldr	r3, [pc, #376]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d004      	beq.n	8003000 <MUART_voidCleanRxBuffer+0x104>
 8002ff6:	4b5c      	ldr	r3, [pc, #368]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e000      	b.n	8003002 <MUART_voidCleanRxBuffer+0x106>
 8003000:	23c8      	movs	r3, #200	; 0xc8
 8003002:	4a59      	ldr	r2, [pc, #356]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8003004:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8003006:	4b58      	ldr	r3, [pc, #352]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	4b57      	ldr	r3, [pc, #348]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 800300e:	2100      	movs	r1, #0
 8003010:	5499      	strb	r1, [r3, r2]
						G_u8RxCounter--;
 8003012:	4b53      	ldr	r3, [pc, #332]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	3b01      	subs	r3, #1
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4b51      	ldr	r3, [pc, #324]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 800301c:	701a      	strb	r2, [r3, #0]
						break;
 800301e:	e260      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					else if(G_Au8UART_RxBuffer[i]<0x60){
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	4a52      	ldr	r2, [pc, #328]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 8003024:	5cd3      	ldrb	r3, [r2, r3]
 8003026:	2b5f      	cmp	r3, #95	; 0x5f
 8003028:	d81c      	bhi.n	8003064 <MUART_voidCleanRxBuffer+0x168>
						G_Au8UART_RxBuffer[i] = A_u8NewData;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	494f      	ldr	r1, [pc, #316]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 800302e:	79fa      	ldrb	r2, [r7, #7]
 8003030:	54ca      	strb	r2, [r1, r3]
						G_u8RxCounter--;
 8003032:	4b4b      	ldr	r3, [pc, #300]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	3b01      	subs	r3, #1
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4b49      	ldr	r3, [pc, #292]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 800303c:	701a      	strb	r2, [r3, #0]
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 800303e:	4b4a      	ldr	r3, [pc, #296]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d004      	beq.n	8003050 <MUART_voidCleanRxBuffer+0x154>
 8003046:	4b48      	ldr	r3, [pc, #288]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	3b01      	subs	r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	e000      	b.n	8003052 <MUART_voidCleanRxBuffer+0x156>
 8003050:	23c8      	movs	r3, #200	; 0xc8
 8003052:	4a45      	ldr	r2, [pc, #276]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8003054:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8003056:	4b44      	ldr	r3, [pc, #272]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	4b43      	ldr	r3, [pc, #268]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 800305e:	2100      	movs	r1, #0
 8003060:	5499      	strb	r1, [r3, r2]
						break;
 8003062:	e23e      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 8003064:	f7ff fe96 	bl	8002d94 <APP_Sort_Buffer>
						break;
 8003068:	e23b      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
				while(counter--){
 800306a:	7bbb      	ldrb	r3, [r7, #14]
 800306c:	1e5a      	subs	r2, r3, #1
 800306e:	73ba      	strb	r2, [r7, #14]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1b7      	bne.n	8002fe4 <MUART_voidCleanRxBuffer+0xe8>
}
 8003074:	e235      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					if(G_Au8UART_RxBuffer[i]<0x21){
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	4a3c      	ldr	r2, [pc, #240]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	2b20      	cmp	r3, #32
 800307e:	d818      	bhi.n	80030b2 <MUART_voidCleanRxBuffer+0x1b6>
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 8003080:	4b39      	ldr	r3, [pc, #228]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d004      	beq.n	8003092 <MUART_voidCleanRxBuffer+0x196>
 8003088:	4b37      	ldr	r3, [pc, #220]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	3b01      	subs	r3, #1
 800308e:	b2db      	uxtb	r3, r3
 8003090:	e000      	b.n	8003094 <MUART_voidCleanRxBuffer+0x198>
 8003092:	23c8      	movs	r3, #200	; 0xc8
 8003094:	4a34      	ldr	r2, [pc, #208]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8003096:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8003098:	4b33      	ldr	r3, [pc, #204]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4b33      	ldr	r3, [pc, #204]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 80030a0:	2100      	movs	r1, #0
 80030a2:	5499      	strb	r1, [r3, r2]
						G_u8RxCounter--;
 80030a4:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 80030ae:	701a      	strb	r2, [r3, #0]
						break;
 80030b0:	e217      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					else if(G_Au8UART_RxBuffer[i]<0x60){
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	4a2d      	ldr	r2, [pc, #180]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 80030b6:	5cd3      	ldrb	r3, [r2, r3]
 80030b8:	2b5f      	cmp	r3, #95	; 0x5f
 80030ba:	d81c      	bhi.n	80030f6 <MUART_voidCleanRxBuffer+0x1fa>
						G_Au8UART_RxBuffer[i] = A_u8NewData;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	492b      	ldr	r1, [pc, #172]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 80030c0:	79fa      	ldrb	r2, [r7, #7]
 80030c2:	54ca      	strb	r2, [r1, r3]
						G_u8RxCounter--;
 80030c4:	4b26      	ldr	r3, [pc, #152]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 80030ce:	701a      	strb	r2, [r3, #0]
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 80030d0:	4b25      	ldr	r3, [pc, #148]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d004      	beq.n	80030e2 <MUART_voidCleanRxBuffer+0x1e6>
 80030d8:	4b23      	ldr	r3, [pc, #140]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	3b01      	subs	r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	e000      	b.n	80030e4 <MUART_voidCleanRxBuffer+0x1e8>
 80030e2:	23c8      	movs	r3, #200	; 0xc8
 80030e4:	4a20      	ldr	r2, [pc, #128]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 80030e6:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 80030e8:	4b1f      	ldr	r3, [pc, #124]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b1f      	ldr	r3, [pc, #124]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 80030f0:	2100      	movs	r1, #0
 80030f2:	5499      	strb	r1, [r3, r2]
						break;
 80030f4:	e1f5      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 80030f6:	f7ff fe4d 	bl	8002d94 <APP_Sort_Buffer>
						break;
 80030fa:	e1f2      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
				while(counter--){
 80030fc:	bf00      	nop
 80030fe:	7bbb      	ldrb	r3, [r7, #14]
 8003100:	1e5a      	subs	r2, r3, #1
 8003102:	73ba      	strb	r2, [r7, #14]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1b6      	bne.n	8003076 <MUART_voidCleanRxBuffer+0x17a>
}
 8003108:	e1eb      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0x80){//speed command
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f2c0 80ba 	blt.w	8003288 <MUART_voidCleanRxBuffer+0x38c>
			if(G_u8RxBufferHeadIndex>G_u8RxBufferTailIndex){
 8003114:	4b13      	ldr	r3, [pc, #76]	; (8003164 <MUART_voidCleanRxBuffer+0x268>)
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	4b13      	ldr	r3, [pc, #76]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	f240 80ad 	bls.w	800327c <MUART_voidCleanRxBuffer+0x380>
				while(counter--){
 8003122:	e059      	b.n	80031d8 <MUART_voidCleanRxBuffer+0x2dc>
					if(G_Au8UART_RxBuffer[i]<0x21){
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	4a11      	ldr	r2, [pc, #68]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 8003128:	5cd3      	ldrb	r3, [r2, r3]
 800312a:	2b20      	cmp	r3, #32
 800312c:	d820      	bhi.n	8003170 <MUART_voidCleanRxBuffer+0x274>
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d004      	beq.n	8003140 <MUART_voidCleanRxBuffer+0x244>
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	3b01      	subs	r3, #1
 800313c:	b2db      	uxtb	r3, r3
 800313e:	e000      	b.n	8003142 <MUART_voidCleanRxBuffer+0x246>
 8003140:	23c8      	movs	r3, #200	; 0xc8
 8003142:	4a09      	ldr	r2, [pc, #36]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8003144:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <MUART_voidCleanRxBuffer+0x26c>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	4b07      	ldr	r3, [pc, #28]	; (800316c <MUART_voidCleanRxBuffer+0x270>)
 800314e:	2100      	movs	r1, #0
 8003150:	5499      	strb	r1, [r3, r2]
						G_u8RxCounter--;
 8003152:	4b03      	ldr	r3, [pc, #12]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	3b01      	subs	r3, #1
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b01      	ldr	r3, [pc, #4]	; (8003160 <MUART_voidCleanRxBuffer+0x264>)
 800315c:	701a      	strb	r2, [r3, #0]
						break;
 800315e:	e1c0      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
 8003160:	200001de 	.word	0x200001de
 8003164:	200001dc 	.word	0x200001dc
 8003168:	200001dd 	.word	0x200001dd
 800316c:	20000114 	.word	0x20000114
					else if(G_Au8UART_RxBuffer[i]<0x60){
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	4a8a      	ldr	r2, [pc, #552]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 8003174:	5cd3      	ldrb	r3, [r2, r3]
 8003176:	2b5f      	cmp	r3, #95	; 0x5f
 8003178:	d925      	bls.n	80031c6 <MUART_voidCleanRxBuffer+0x2ca>
					else if(G_Au8UART_RxBuffer[i]<0x80){
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	4a87      	ldr	r2, [pc, #540]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 800317e:	5cd3      	ldrb	r3, [r2, r3]
 8003180:	b25b      	sxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	db1c      	blt.n	80031c0 <MUART_voidCleanRxBuffer+0x2c4>
						G_Au8UART_RxBuffer[i] = A_u8NewData;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	4984      	ldr	r1, [pc, #528]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 800318a:	79fa      	ldrb	r2, [r7, #7]
 800318c:	54ca      	strb	r2, [r1, r3]
						G_u8RxCounter--;
 800318e:	4b84      	ldr	r3, [pc, #528]	; (80033a0 <MUART_voidCleanRxBuffer+0x4a4>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	3b01      	subs	r3, #1
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4b82      	ldr	r3, [pc, #520]	; (80033a0 <MUART_voidCleanRxBuffer+0x4a4>)
 8003198:	701a      	strb	r2, [r3, #0]
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 800319a:	4b82      	ldr	r3, [pc, #520]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d004      	beq.n	80031ac <MUART_voidCleanRxBuffer+0x2b0>
 80031a2:	4b80      	ldr	r3, [pc, #512]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e000      	b.n	80031ae <MUART_voidCleanRxBuffer+0x2b2>
 80031ac:	23c8      	movs	r3, #200	; 0xc8
 80031ae:	4a7d      	ldr	r2, [pc, #500]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 80031b0:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 80031b2:	4b7c      	ldr	r3, [pc, #496]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	4b78      	ldr	r3, [pc, #480]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 80031ba:	2100      	movs	r1, #0
 80031bc:	5499      	strb	r1, [r3, r2]
						break;
 80031be:	e190      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 80031c0:	f7ff fde8 	bl	8002d94 <APP_Sort_Buffer>
						break;
 80031c4:	e18d      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					i = ((i<MAX_SIZE_DATA_BUFFER)?(i+1):(0));
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	2bc7      	cmp	r3, #199	; 0xc7
 80031ca:	d803      	bhi.n	80031d4 <MUART_voidCleanRxBuffer+0x2d8>
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	3301      	adds	r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e000      	b.n	80031d6 <MUART_voidCleanRxBuffer+0x2da>
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 80031d8:	7bbb      	ldrb	r3, [r7, #14]
 80031da:	1e5a      	subs	r2, r3, #1
 80031dc:	73ba      	strb	r2, [r7, #14]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1a0      	bne.n	8003124 <MUART_voidCleanRxBuffer+0x228>
}
 80031e2:	e17e      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					if(G_Au8UART_RxBuffer[i]<0x21){
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	4a6d      	ldr	r2, [pc, #436]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 80031e8:	5cd3      	ldrb	r3, [r2, r3]
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d818      	bhi.n	8003220 <MUART_voidCleanRxBuffer+0x324>
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 80031ee:	4b6d      	ldr	r3, [pc, #436]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d004      	beq.n	8003200 <MUART_voidCleanRxBuffer+0x304>
 80031f6:	4b6b      	ldr	r3, [pc, #428]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e000      	b.n	8003202 <MUART_voidCleanRxBuffer+0x306>
 8003200:	23c8      	movs	r3, #200	; 0xc8
 8003202:	4a68      	ldr	r2, [pc, #416]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 8003204:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8003206:	4b67      	ldr	r3, [pc, #412]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	4b63      	ldr	r3, [pc, #396]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 800320e:	2100      	movs	r1, #0
 8003210:	5499      	strb	r1, [r3, r2]
						G_u8RxCounter--;
 8003212:	4b63      	ldr	r3, [pc, #396]	; (80033a0 <MUART_voidCleanRxBuffer+0x4a4>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	3b01      	subs	r3, #1
 8003218:	b2da      	uxtb	r2, r3
 800321a:	4b61      	ldr	r3, [pc, #388]	; (80033a0 <MUART_voidCleanRxBuffer+0x4a4>)
 800321c:	701a      	strb	r2, [r3, #0]
						break;
 800321e:	e160      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					else if(G_Au8UART_RxBuffer[i]<0x60){
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	4a5e      	ldr	r2, [pc, #376]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 8003224:	5cd3      	ldrb	r3, [r2, r3]
 8003226:	2b5f      	cmp	r3, #95	; 0x5f
 8003228:	d925      	bls.n	8003276 <MUART_voidCleanRxBuffer+0x37a>
					else if(G_Au8UART_RxBuffer[i]<0x80){
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	4a5b      	ldr	r2, [pc, #364]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 800322e:	5cd3      	ldrb	r3, [r2, r3]
 8003230:	b25b      	sxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	db1c      	blt.n	8003270 <MUART_voidCleanRxBuffer+0x374>
						G_Au8UART_RxBuffer[i] = A_u8NewData;
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	4958      	ldr	r1, [pc, #352]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 800323a:	79fa      	ldrb	r2, [r7, #7]
 800323c:	54ca      	strb	r2, [r1, r3]
						G_u8RxCounter--;
 800323e:	4b58      	ldr	r3, [pc, #352]	; (80033a0 <MUART_voidCleanRxBuffer+0x4a4>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	3b01      	subs	r3, #1
 8003244:	b2da      	uxtb	r2, r3
 8003246:	4b56      	ldr	r3, [pc, #344]	; (80033a0 <MUART_voidCleanRxBuffer+0x4a4>)
 8003248:	701a      	strb	r2, [r3, #0]
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 800324a:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d004      	beq.n	800325c <MUART_voidCleanRxBuffer+0x360>
 8003252:	4b54      	ldr	r3, [pc, #336]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	3b01      	subs	r3, #1
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e000      	b.n	800325e <MUART_voidCleanRxBuffer+0x362>
 800325c:	23c8      	movs	r3, #200	; 0xc8
 800325e:	4a51      	ldr	r2, [pc, #324]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 8003260:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8003262:	4b50      	ldr	r3, [pc, #320]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	4b4c      	ldr	r3, [pc, #304]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 800326a:	2100      	movs	r1, #0
 800326c:	5499      	strb	r1, [r3, r2]
						break;
 800326e:	e138      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 8003270:	f7ff fd90 	bl	8002d94 <APP_Sort_Buffer>
						break;
 8003274:	e135      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					i++;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	3301      	adds	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 800327c:	7bbb      	ldrb	r3, [r7, #14]
 800327e:	1e5a      	subs	r2, r3, #1
 8003280:	73ba      	strb	r2, [r7, #14]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1ae      	bne.n	80031e4 <MUART_voidCleanRxBuffer+0x2e8>
}
 8003286:	e12c      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0x90){//bump data
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	2b8f      	cmp	r3, #143	; 0x8f
 800328c:	d874      	bhi.n	8003378 <MUART_voidCleanRxBuffer+0x47c>
			if(G_u8RxBufferHeadIndex>G_u8RxBufferTailIndex){
 800328e:	4b46      	ldr	r3, [pc, #280]	; (80033a8 <MUART_voidCleanRxBuffer+0x4ac>)
 8003290:	781a      	ldrb	r2, [r3, #0]
 8003292:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d968      	bls.n	800336c <MUART_voidCleanRxBuffer+0x470>
				while(counter--){
 800329a:	e033      	b.n	8003304 <MUART_voidCleanRxBuffer+0x408>
					if(G_Au8UART_RxBuffer[i]<0x80){
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	4a3f      	ldr	r2, [pc, #252]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 80032a0:	5cd3      	ldrb	r3, [r2, r3]
 80032a2:	b25b      	sxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	da24      	bge.n	80032f2 <MUART_voidCleanRxBuffer+0x3f6>
					else if(G_Au8UART_RxBuffer[i]<0x90){
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	4a3c      	ldr	r2, [pc, #240]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 80032ac:	5cd3      	ldrb	r3, [r2, r3]
 80032ae:	2b8f      	cmp	r3, #143	; 0x8f
 80032b0:	d81c      	bhi.n	80032ec <MUART_voidCleanRxBuffer+0x3f0>
						G_Au8UART_RxBuffer[i] = A_u8NewData;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	4939      	ldr	r1, [pc, #228]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 80032b6:	79fa      	ldrb	r2, [r7, #7]
 80032b8:	54ca      	strb	r2, [r1, r3]
						G_u8RxCounter--;
 80032ba:	4b39      	ldr	r3, [pc, #228]	; (80033a0 <MUART_voidCleanRxBuffer+0x4a4>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	3b01      	subs	r3, #1
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b37      	ldr	r3, [pc, #220]	; (80033a0 <MUART_voidCleanRxBuffer+0x4a4>)
 80032c4:	701a      	strb	r2, [r3, #0]
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 80032c6:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <MUART_voidCleanRxBuffer+0x3dc>
 80032ce:	4b35      	ldr	r3, [pc, #212]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e000      	b.n	80032da <MUART_voidCleanRxBuffer+0x3de>
 80032d8:	23c8      	movs	r3, #200	; 0xc8
 80032da:	4a32      	ldr	r2, [pc, #200]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 80032dc:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 80032de:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	4b2d      	ldr	r3, [pc, #180]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 80032e6:	2100      	movs	r1, #0
 80032e8:	5499      	strb	r1, [r3, r2]
						break;
 80032ea:	e0fa      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 80032ec:	f7ff fd52 	bl	8002d94 <APP_Sort_Buffer>
						break;
 80032f0:	e0f7      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					i = ((i<MAX_SIZE_DATA_BUFFER)?(i+1):(0));
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2bc7      	cmp	r3, #199	; 0xc7
 80032f6:	d803      	bhi.n	8003300 <MUART_voidCleanRxBuffer+0x404>
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	3301      	adds	r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	e000      	b.n	8003302 <MUART_voidCleanRxBuffer+0x406>
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 8003304:	7bbb      	ldrb	r3, [r7, #14]
 8003306:	1e5a      	subs	r2, r3, #1
 8003308:	73ba      	strb	r2, [r7, #14]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1c6      	bne.n	800329c <MUART_voidCleanRxBuffer+0x3a0>
}
 800330e:	e0e8      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					if(G_Au8UART_RxBuffer[i]<0x80){
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	4a22      	ldr	r2, [pc, #136]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 8003314:	5cd3      	ldrb	r3, [r2, r3]
 8003316:	b25b      	sxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	da24      	bge.n	8003366 <MUART_voidCleanRxBuffer+0x46a>
					else if(G_Au8UART_RxBuffer[i]<0x90){
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	4a1f      	ldr	r2, [pc, #124]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 8003320:	5cd3      	ldrb	r3, [r2, r3]
 8003322:	2b8f      	cmp	r3, #143	; 0x8f
 8003324:	d81c      	bhi.n	8003360 <MUART_voidCleanRxBuffer+0x464>
						G_Au8UART_RxBuffer[i] = A_u8NewData;
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	491c      	ldr	r1, [pc, #112]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 800332a:	79fa      	ldrb	r2, [r7, #7]
 800332c:	54ca      	strb	r2, [r1, r3]
						G_u8RxCounter--;
 800332e:	4b1c      	ldr	r3, [pc, #112]	; (80033a0 <MUART_voidCleanRxBuffer+0x4a4>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	3b01      	subs	r3, #1
 8003334:	b2da      	uxtb	r2, r3
 8003336:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <MUART_voidCleanRxBuffer+0x4a4>)
 8003338:	701a      	strb	r2, [r3, #0]
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 800333a:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d004      	beq.n	800334c <MUART_voidCleanRxBuffer+0x450>
 8003342:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	3b01      	subs	r3, #1
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e000      	b.n	800334e <MUART_voidCleanRxBuffer+0x452>
 800334c:	23c8      	movs	r3, #200	; 0xc8
 800334e:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 8003350:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8003352:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <MUART_voidCleanRxBuffer+0x4a0>)
 800335a:	2100      	movs	r1, #0
 800335c:	5499      	strb	r1, [r3, r2]
						break;
 800335e:	e0c0      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 8003360:	f7ff fd18 	bl	8002d94 <APP_Sort_Buffer>
						break;
 8003364:	e0bd      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					i++;
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	3301      	adds	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 800336c:	7bbb      	ldrb	r3, [r7, #14]
 800336e:	1e5a      	subs	r2, r3, #1
 8003370:	73ba      	strb	r2, [r7, #14]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1cc      	bne.n	8003310 <MUART_voidCleanRxBuffer+0x414>
}
 8003376:	e0b4      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0xa0){//sign data
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	2b9f      	cmp	r3, #159	; 0x9f
 800337c:	d802      	bhi.n	8003384 <MUART_voidCleanRxBuffer+0x488>
			APP_Sort_Buffer();
 800337e:	f7ff fd09 	bl	8002d94 <APP_Sort_Buffer>
}
 8003382:	e0ae      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0xb0){//Lane data
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	2baf      	cmp	r3, #175	; 0xaf
 8003388:	f200 8090 	bhi.w	80034ac <MUART_voidCleanRxBuffer+0x5b0>
			if(G_u8RxBufferHeadIndex>G_u8RxBufferTailIndex){
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <MUART_voidCleanRxBuffer+0x4ac>)
 800338e:	781a      	ldrb	r2, [r3, #0]
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <MUART_voidCleanRxBuffer+0x4a8>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	f240 8083 	bls.w	80034a0 <MUART_voidCleanRxBuffer+0x5a4>
				while(counter--){
 800339a:	e044      	b.n	8003426 <MUART_voidCleanRxBuffer+0x52a>
 800339c:	20000114 	.word	0x20000114
 80033a0:	200001de 	.word	0x200001de
 80033a4:	200001dd 	.word	0x200001dd
 80033a8:	200001dc 	.word	0x200001dc
					if(G_Au8UART_RxBuffer[i]<0xa0){
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	4a4f      	ldr	r2, [pc, #316]	; (80034ec <MUART_voidCleanRxBuffer+0x5f0>)
 80033b0:	5cd3      	ldrb	r3, [r2, r3]
 80033b2:	2b9f      	cmp	r3, #159	; 0x9f
 80033b4:	d92e      	bls.n	8003414 <MUART_voidCleanRxBuffer+0x518>
					else if(G_Au8UART_RxBuffer[i]<0xb0){
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	4a4c      	ldr	r2, [pc, #304]	; (80034ec <MUART_voidCleanRxBuffer+0x5f0>)
 80033ba:	5cd3      	ldrb	r3, [r2, r3]
 80033bc:	2baf      	cmp	r3, #175	; 0xaf
 80033be:	d826      	bhi.n	800340e <MUART_voidCleanRxBuffer+0x512>
						if((G_Au8UART_RxBuffer[i]+A_u8NewData)&1){
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	4a4a      	ldr	r2, [pc, #296]	; (80034ec <MUART_voidCleanRxBuffer+0x5f0>)
 80033c4:	5cd2      	ldrb	r2, [r2, r3]
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	4413      	add	r3, r2
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d11f      	bne.n	8003414 <MUART_voidCleanRxBuffer+0x518>
							G_Au8UART_RxBuffer[i] = A_u8NewData;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	4945      	ldr	r1, [pc, #276]	; (80034ec <MUART_voidCleanRxBuffer+0x5f0>)
 80033d8:	79fa      	ldrb	r2, [r7, #7]
 80033da:	54ca      	strb	r2, [r1, r3]
							G_u8RxCounter--;
 80033dc:	4b44      	ldr	r3, [pc, #272]	; (80034f0 <MUART_voidCleanRxBuffer+0x5f4>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	4b42      	ldr	r3, [pc, #264]	; (80034f0 <MUART_voidCleanRxBuffer+0x5f4>)
 80033e6:	701a      	strb	r2, [r3, #0]
							G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <MUART_voidCleanRxBuffer+0x5f8>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d004      	beq.n	80033fa <MUART_voidCleanRxBuffer+0x4fe>
 80033f0:	4b40      	ldr	r3, [pc, #256]	; (80034f4 <MUART_voidCleanRxBuffer+0x5f8>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	e000      	b.n	80033fc <MUART_voidCleanRxBuffer+0x500>
 80033fa:	23c8      	movs	r3, #200	; 0xc8
 80033fc:	4a3d      	ldr	r2, [pc, #244]	; (80034f4 <MUART_voidCleanRxBuffer+0x5f8>)
 80033fe:	7013      	strb	r3, [r2, #0]
							G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8003400:	4b3c      	ldr	r3, [pc, #240]	; (80034f4 <MUART_voidCleanRxBuffer+0x5f8>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	4b39      	ldr	r3, [pc, #228]	; (80034ec <MUART_voidCleanRxBuffer+0x5f0>)
 8003408:	2100      	movs	r1, #0
 800340a:	5499      	strb	r1, [r3, r2]
							break;
 800340c:	e069      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 800340e:	f7ff fcc1 	bl	8002d94 <APP_Sort_Buffer>
						break;
 8003412:	e066      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					i = ((i<MAX_SIZE_DATA_BUFFER)?(i+1):(0));
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2bc7      	cmp	r3, #199	; 0xc7
 8003418:	d803      	bhi.n	8003422 <MUART_voidCleanRxBuffer+0x526>
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	3301      	adds	r3, #1
 800341e:	b2db      	uxtb	r3, r3
 8003420:	e000      	b.n	8003424 <MUART_voidCleanRxBuffer+0x528>
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 8003426:	7bbb      	ldrb	r3, [r7, #14]
 8003428:	1e5a      	subs	r2, r3, #1
 800342a:	73ba      	strb	r2, [r7, #14]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1bd      	bne.n	80033ac <MUART_voidCleanRxBuffer+0x4b0>
}
 8003430:	e057      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					if(G_Au8UART_RxBuffer[i]<0xa0){
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	4a2d      	ldr	r2, [pc, #180]	; (80034ec <MUART_voidCleanRxBuffer+0x5f0>)
 8003436:	5cd3      	ldrb	r3, [r2, r3]
 8003438:	2b9f      	cmp	r3, #159	; 0x9f
 800343a:	d92e      	bls.n	800349a <MUART_voidCleanRxBuffer+0x59e>
					else if(G_Au8UART_RxBuffer[i]<0xb0){
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	4a2b      	ldr	r2, [pc, #172]	; (80034ec <MUART_voidCleanRxBuffer+0x5f0>)
 8003440:	5cd3      	ldrb	r3, [r2, r3]
 8003442:	2baf      	cmp	r3, #175	; 0xaf
 8003444:	d826      	bhi.n	8003494 <MUART_voidCleanRxBuffer+0x598>
						if((G_Au8UART_RxBuffer[i]+A_u8NewData)&1){
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	4a28      	ldr	r2, [pc, #160]	; (80034ec <MUART_voidCleanRxBuffer+0x5f0>)
 800344a:	5cd2      	ldrb	r2, [r2, r3]
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	4413      	add	r3, r2
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d11f      	bne.n	800349a <MUART_voidCleanRxBuffer+0x59e>
							G_Au8UART_RxBuffer[i] = A_u8NewData;
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	4923      	ldr	r1, [pc, #140]	; (80034ec <MUART_voidCleanRxBuffer+0x5f0>)
 800345e:	79fa      	ldrb	r2, [r7, #7]
 8003460:	54ca      	strb	r2, [r1, r3]
							G_u8RxCounter--;
 8003462:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <MUART_voidCleanRxBuffer+0x5f4>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	3b01      	subs	r3, #1
 8003468:	b2da      	uxtb	r2, r3
 800346a:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <MUART_voidCleanRxBuffer+0x5f4>)
 800346c:	701a      	strb	r2, [r3, #0]
							G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 800346e:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <MUART_voidCleanRxBuffer+0x5f8>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <MUART_voidCleanRxBuffer+0x584>
 8003476:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <MUART_voidCleanRxBuffer+0x5f8>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	3b01      	subs	r3, #1
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e000      	b.n	8003482 <MUART_voidCleanRxBuffer+0x586>
 8003480:	23c8      	movs	r3, #200	; 0xc8
 8003482:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <MUART_voidCleanRxBuffer+0x5f8>)
 8003484:	7013      	strb	r3, [r2, #0]
							G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <MUART_voidCleanRxBuffer+0x5f8>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	4b17      	ldr	r3, [pc, #92]	; (80034ec <MUART_voidCleanRxBuffer+0x5f0>)
 800348e:	2100      	movs	r1, #0
 8003490:	5499      	strb	r1, [r3, r2]
							break;
 8003492:	e026      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 8003494:	f7ff fc7e 	bl	8002d94 <APP_Sort_Buffer>
						break;
 8003498:	e023      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
					i++;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	3301      	adds	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 80034a0:	7bbb      	ldrb	r3, [r7, #14]
 80034a2:	1e5a      	subs	r2, r3, #1
 80034a4:	73ba      	strb	r2, [r7, #14]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1c3      	bne.n	8003432 <MUART_voidCleanRxBuffer+0x536>
}
 80034aa:	e01a      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0xc0){//Distance
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	2bbf      	cmp	r3, #191	; 0xbf
 80034b0:	d802      	bhi.n	80034b8 <MUART_voidCleanRxBuffer+0x5bc>
			APP_Sort_Buffer();
 80034b2:	f7ff fc6f 	bl	8002d94 <APP_Sort_Buffer>
}
 80034b6:	e014      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0xd0){//V2V Connection
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	2bcf      	cmp	r3, #207	; 0xcf
 80034bc:	d802      	bhi.n	80034c4 <MUART_voidCleanRxBuffer+0x5c8>
			APP_Sort_Buffer();
 80034be:	f7ff fc69 	bl	8002d94 <APP_Sort_Buffer>
}
 80034c2:	e00e      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0xe0){//V2V message
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	2bdf      	cmp	r3, #223	; 0xdf
 80034c8:	d802      	bhi.n	80034d0 <MUART_voidCleanRxBuffer+0x5d4>
			APP_Sort_Buffer();
 80034ca:	f7ff fc63 	bl	8002d94 <APP_Sort_Buffer>
}
 80034ce:	e008      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0xf0){//Requests ACKs
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	2bef      	cmp	r3, #239	; 0xef
 80034d4:	d802      	bhi.n	80034dc <MUART_voidCleanRxBuffer+0x5e0>
			APP_Sort_Buffer();
 80034d6:	f7ff fc5d 	bl	8002d94 <APP_Sort_Buffer>
}
 80034da:	e002      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
			APP_Sort_Buffer();
 80034dc:	f7ff fc5a 	bl	8002d94 <APP_Sort_Buffer>
}
 80034e0:	e7ff      	b.n	80034e2 <MUART_voidCleanRxBuffer+0x5e6>
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000114 	.word	0x20000114
 80034f0:	200001de 	.word	0x200001de
 80034f4:	200001dd 	.word	0x200001dd

080034f8 <MUART_u8ReadDataRegister>:
{
	USARTx->SR = 0;
}

u8 MUART_u8ReadDataRegister(USART_t *USARTx)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	return USARTx -> DR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	b2db      	uxtb	r3, r3
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <MUART1_voidSetCallBack>:

void MUART1_voidSetCallBack( Buffer_state (*ptr) (void) )
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

	MUSART1_CallBack =ptr;
 8003518:	4a03      	ldr	r2, [pc, #12]	; (8003528 <MUART1_voidSetCallBack+0x18>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6013      	str	r3, [r2, #0]
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	200002c0 	.word	0x200002c0

0800352c <USART1_IRQHandler>:
	MUSART2_CallBack = ptr;
}

/*IRQ of UART1*/
void USART1_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
    UART1->SR = 0;
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <USART1_IRQHandler+0x1c>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
    //G_u8DataFromUART = MUART_u8ReadDataRegister(UART1);
	if(MUSART1_CallBack!=NULL)
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <USART1_IRQHandler+0x20>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <USART1_IRQHandler+0x18>
	{
		MUSART1_CallBack();
 800353e:	4b03      	ldr	r3, [pc, #12]	; (800354c <USART1_IRQHandler+0x20>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4798      	blx	r3
	}
}
 8003544:	bf00      	nop
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40013800 	.word	0x40013800
 800354c:	200002c0 	.word	0x200002c0

08003550 <USART2_IRQHandler>:

/*IRQ of UART2*/
void USART2_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
	UART2->SR = 0;
 8003554:	4b07      	ldr	r3, [pc, #28]	; (8003574 <USART2_IRQHandler+0x24>)
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
	//G_u8DataFromUART = MUART_u8ReadDataRegister(UART2);
	local_u8_RX_Busyflag=0;
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <USART2_IRQHandler+0x28>)
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
	if(MUSART2_CallBack!=NULL)
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <USART2_IRQHandler+0x2c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <USART2_IRQHandler+0x1e>
	{
		MUSART2_CallBack();
 8003568:	4b04      	ldr	r3, [pc, #16]	; (800357c <USART2_IRQHandler+0x2c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4798      	blx	r3
	}
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40004400 	.word	0x40004400
 8003578:	200001df 	.word	0x200001df
 800357c:	200002bc 	.word	0x200002bc

08003580 <HUltrasonic_f32CalcDistance>:
#include "Ultrasonic_config.h"
#include "Ultrasonic_private.h"


u8 HUltrasonic_f32CalcDistance (u8 Ultra_Num)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	71fb      	strb	r3, [r7, #7]
	u32 L_u32TicksNumber = 0   ;
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
	u8 L_f32Distance    = 0.0 ;
 800358e:	2300      	movs	r3, #0
 8003590:	727b      	strb	r3, [r7, #9]
	u16 u16_Time_out = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	817b      	strh	r3, [r7, #10]
	switch(Ultra_Num)
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d063      	beq.n	8003664 <HUltrasonic_f32CalcDistance+0xe4>
 800359c:	2b03      	cmp	r3, #3
 800359e:	f000 80bd 	beq.w	800371c <HUltrasonic_f32CalcDistance+0x19c>
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	f040 8116 	bne.w	80037d4 <HUltrasonic_f32CalcDistance+0x254>
		/*trig pulse to trigger pin
		 * 3us low
		 * 10us high
		 * then low
		 */
		GPIO_voidSetPinValue (Ultrasonic1_TrigPort,Ultrasonic1_TrigPin, GPIO_LOW ) ;
 80035a8:	2200      	movs	r2, #0
 80035aa:	210a      	movs	r1, #10
 80035ac:	2002      	movs	r0, #2
 80035ae:	f7fd fe89 	bl	80012c4 <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_LOW_PULSE) ;
 80035b2:	2006      	movs	r0, #6
 80035b4:	f7fe f98c 	bl	80018d0 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic1_TrigPort,Ultrasonic1_TrigPin, GPIO_HIGH) ;
 80035b8:	2201      	movs	r2, #1
 80035ba:	210a      	movs	r1, #10
 80035bc:	2002      	movs	r0, #2
 80035be:	f7fd fe81 	bl	80012c4 <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_HIGH_PULSE) ;
 80035c2:	201e      	movs	r0, #30
 80035c4:	f7fe f984 	bl	80018d0 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic1_TrigPort,Ultrasonic1_TrigPin, GPIO_LOW ) ;
 80035c8:	2200      	movs	r2, #0
 80035ca:	210a      	movs	r1, #10
 80035cc:	2002      	movs	r0, #2
 80035ce:	f7fd fe79 	bl	80012c4 <GPIO_voidSetPinValue>

		/*wait for generate 8 pulses (40KHZ)*/
		MSTK_voidSetBusyWait(TIME_FOR_EIGHT_PULSES) ;
 80035d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035d6:	f7fe f97b 	bl	80018d0 <MSTK_voidSetBusyWait>

		/*wait until generating rising edge for echo pin*/
      	while ((GPIO_GetPinValue( Ultrasonic1_EchoPort, Ultrasonic1_EchoPin) == GPIO_LOW) && u16_Time_out < 1000000)
 80035da:	e002      	b.n	80035e2 <HUltrasonic_f32CalcDistance+0x62>
      	{
      		u16_Time_out ++;
 80035dc:	897b      	ldrh	r3, [r7, #10]
 80035de:	3301      	adds	r3, #1
 80035e0:	817b      	strh	r3, [r7, #10]
      	while ((GPIO_GetPinValue( Ultrasonic1_EchoPort, Ultrasonic1_EchoPin) == GPIO_LOW) && u16_Time_out < 1000000)
 80035e2:	210b      	movs	r1, #11
 80035e4:	2002      	movs	r0, #2
 80035e6:	f7fd ff3b 	bl	8001460 <GPIO_GetPinValue>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f5      	beq.n	80035dc <HUltrasonic_f32CalcDistance+0x5c>
      	if(u16_Time_out >= 1000000)
      	{
      		return 255;
      	}

		while (GPIO_GetPinValue( Ultrasonic1_EchoPort, Ultrasonic1_EchoPin) == GPIO_HIGH)
 80035f0:	e005      	b.n	80035fe <HUltrasonic_f32CalcDistance+0x7e>
		{
			/*each iteration take 4.9 us*/
			L_u32TicksNumber ++ ;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3301      	adds	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
			MSTK_voidSetBusyWait(2) ;
 80035f8:	2002      	movs	r0, #2
 80035fa:	f7fe f969 	bl	80018d0 <MSTK_voidSetBusyWait>
		while (GPIO_GetPinValue( Ultrasonic1_EchoPort, Ultrasonic1_EchoPin) == GPIO_HIGH)
 80035fe:	210b      	movs	r1, #11
 8003600:	2002      	movs	r0, #2
 8003602:	f7fd ff2d 	bl	8001460 <GPIO_GetPinValue>
 8003606:	4603      	mov	r3, r0
 8003608:	2b01      	cmp	r3, #1
 800360a:	d0f2      	beq.n	80035f2 <HUltrasonic_f32CalcDistance+0x72>
		}
		L_f32Distance = (L_u32TicksNumber + 0.0f)*TIME_OF_EACH_ITERATION_IN_MICRO*SPEED_OF_SIGNAL_CM_PER_U ;
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f7fd facb 	bl	8000ba8 <__aeabi_ui2f>
 8003612:	4603      	mov	r3, r0
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f7fd fa15 	bl	8000a48 <__addsf3>
 800361e:	4603      	mov	r3, r0
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc fef9 	bl	8000418 <__aeabi_f2d>
 8003626:	a36e      	add	r3, pc, #440	; (adr r3, 80037e0 <HUltrasonic_f32CalcDistance+0x260>)
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f7fc ff4c 	bl	80004c8 <__aeabi_dmul>
 8003630:	4603      	mov	r3, r0
 8003632:	460c      	mov	r4, r1
 8003634:	4618      	mov	r0, r3
 8003636:	4621      	mov	r1, r4
 8003638:	a36b      	add	r3, pc, #428	; (adr r3, 80037e8 <HUltrasonic_f32CalcDistance+0x268>)
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	f7fc ff43 	bl	80004c8 <__aeabi_dmul>
 8003642:	4603      	mov	r3, r0
 8003644:	460c      	mov	r4, r1
 8003646:	4618      	mov	r0, r3
 8003648:	4621      	mov	r1, r4
 800364a:	f7fd f9d7 	bl	80009fc <__aeabi_d2uiz>
 800364e:	4603      	mov	r3, r0
 8003650:	727b      	strb	r3, [r7, #9]
		L_f32Distance = L_f32Distance / 2 ;
 8003652:	7a7b      	ldrb	r3, [r7, #9]
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	727b      	strb	r3, [r7, #9]

		/*initialize L_u32TicksNumber for next read*/
		L_u32TicksNumber = 0 ;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
		u16_Time_out = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	817b      	strh	r3, [r7, #10]
		return L_f32Distance ;
 8003660:	7a7b      	ldrb	r3, [r7, #9]
 8003662:	e0b8      	b.n	80037d6 <HUltrasonic_f32CalcDistance+0x256>
		/*trig pulse to trigger pin
		 * 3us low
		 * 10us high
		 * then low
		 */
		GPIO_voidSetPinValue (Ultrasonic2_TrigPort,Ultrasonic2_TrigPin, GPIO_LOW ) ;
 8003664:	2200      	movs	r2, #0
 8003666:	210c      	movs	r1, #12
 8003668:	2002      	movs	r0, #2
 800366a:	f7fd fe2b 	bl	80012c4 <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_LOW_PULSE) ;
 800366e:	2006      	movs	r0, #6
 8003670:	f7fe f92e 	bl	80018d0 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic2_TrigPort,Ultrasonic2_TrigPin, GPIO_HIGH) ;
 8003674:	2201      	movs	r2, #1
 8003676:	210c      	movs	r1, #12
 8003678:	2002      	movs	r0, #2
 800367a:	f7fd fe23 	bl	80012c4 <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_HIGH_PULSE) ;
 800367e:	201e      	movs	r0, #30
 8003680:	f7fe f926 	bl	80018d0 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic2_TrigPort,Ultrasonic2_TrigPin, GPIO_LOW ) ;
 8003684:	2200      	movs	r2, #0
 8003686:	210c      	movs	r1, #12
 8003688:	2002      	movs	r0, #2
 800368a:	f7fd fe1b 	bl	80012c4 <GPIO_voidSetPinValue>

		/*wait for generate 8 pulses (40KHZ)*/
		MSTK_voidSetBusyWait(TIME_FOR_EIGHT_PULSES) ;
 800368e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003692:	f7fe f91d 	bl	80018d0 <MSTK_voidSetBusyWait>

		/*wait until generating rising edge for echo pin*/
		while ((GPIO_GetPinValue( Ultrasonic2_EchoPort, Ultrasonic2_EchoPin) == GPIO_LOW) && u16_Time_out < 1000000)
 8003696:	e002      	b.n	800369e <HUltrasonic_f32CalcDistance+0x11e>
	      	{
	      		u16_Time_out ++;
 8003698:	897b      	ldrh	r3, [r7, #10]
 800369a:	3301      	adds	r3, #1
 800369c:	817b      	strh	r3, [r7, #10]
		while ((GPIO_GetPinValue( Ultrasonic2_EchoPort, Ultrasonic2_EchoPin) == GPIO_LOW) && u16_Time_out < 1000000)
 800369e:	210d      	movs	r1, #13
 80036a0:	2002      	movs	r0, #2
 80036a2:	f7fd fedd 	bl	8001460 <GPIO_GetPinValue>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f5      	beq.n	8003698 <HUltrasonic_f32CalcDistance+0x118>
	      	if(u16_Time_out >= 1000000)
	      	{
	      		return 255;
	      	}

		while (GPIO_GetPinValue( Ultrasonic2_EchoPort, Ultrasonic2_EchoPin) == GPIO_HIGH)
 80036ac:	e005      	b.n	80036ba <HUltrasonic_f32CalcDistance+0x13a>
		{
			/*each iteration take 4.9 us*/
			L_u32TicksNumber ++ ;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3301      	adds	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
			MSTK_voidSetBusyWait(2) ;
 80036b4:	2002      	movs	r0, #2
 80036b6:	f7fe f90b 	bl	80018d0 <MSTK_voidSetBusyWait>
		while (GPIO_GetPinValue( Ultrasonic2_EchoPort, Ultrasonic2_EchoPin) == GPIO_HIGH)
 80036ba:	210d      	movs	r1, #13
 80036bc:	2002      	movs	r0, #2
 80036be:	f7fd fecf 	bl	8001460 <GPIO_GetPinValue>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d0f2      	beq.n	80036ae <HUltrasonic_f32CalcDistance+0x12e>
		}
		L_f32Distance = (L_u32TicksNumber + 0.0f)*TIME_OF_EACH_ITERATION_IN_MICRO*SPEED_OF_SIGNAL_CM_PER_U ;
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f7fd fa6d 	bl	8000ba8 <__aeabi_ui2f>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f04f 0100 	mov.w	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fd f9b7 	bl	8000a48 <__addsf3>
 80036da:	4603      	mov	r3, r0
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fc fe9b 	bl	8000418 <__aeabi_f2d>
 80036e2:	a33f      	add	r3, pc, #252	; (adr r3, 80037e0 <HUltrasonic_f32CalcDistance+0x260>)
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	f7fc feee 	bl	80004c8 <__aeabi_dmul>
 80036ec:	4603      	mov	r3, r0
 80036ee:	460c      	mov	r4, r1
 80036f0:	4618      	mov	r0, r3
 80036f2:	4621      	mov	r1, r4
 80036f4:	a33c      	add	r3, pc, #240	; (adr r3, 80037e8 <HUltrasonic_f32CalcDistance+0x268>)
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	f7fc fee5 	bl	80004c8 <__aeabi_dmul>
 80036fe:	4603      	mov	r3, r0
 8003700:	460c      	mov	r4, r1
 8003702:	4618      	mov	r0, r3
 8003704:	4621      	mov	r1, r4
 8003706:	f7fd f979 	bl	80009fc <__aeabi_d2uiz>
 800370a:	4603      	mov	r3, r0
 800370c:	727b      	strb	r3, [r7, #9]
		L_f32Distance = L_f32Distance / 2 ;
 800370e:	7a7b      	ldrb	r3, [r7, #9]
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	727b      	strb	r3, [r7, #9]

		/*initialize L_u32TicksNumber for next read*/
		L_u32TicksNumber = 0 ;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
		return L_f32Distance ;
 8003718:	7a7b      	ldrb	r3, [r7, #9]
 800371a:	e05c      	b.n	80037d6 <HUltrasonic_f32CalcDistance+0x256>
		/*trig pulse to trigger pin
		 * 3us low
		 * 10us high
		 * then low
		 */
		GPIO_voidSetPinValue (Ultrasonic3_TrigPort,Ultrasonic3_TrigPin, GPIO_LOW ) ;
 800371c:	2200      	movs	r2, #0
 800371e:	210e      	movs	r1, #14
 8003720:	2002      	movs	r0, #2
 8003722:	f7fd fdcf 	bl	80012c4 <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_LOW_PULSE) ;
 8003726:	2006      	movs	r0, #6
 8003728:	f7fe f8d2 	bl	80018d0 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic3_TrigPort,Ultrasonic3_TrigPin, GPIO_HIGH) ;
 800372c:	2201      	movs	r2, #1
 800372e:	210e      	movs	r1, #14
 8003730:	2002      	movs	r0, #2
 8003732:	f7fd fdc7 	bl	80012c4 <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_HIGH_PULSE) ;
 8003736:	201e      	movs	r0, #30
 8003738:	f7fe f8ca 	bl	80018d0 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic3_TrigPort,Ultrasonic3_TrigPin, GPIO_LOW ) ;
 800373c:	2200      	movs	r2, #0
 800373e:	210e      	movs	r1, #14
 8003740:	2002      	movs	r0, #2
 8003742:	f7fd fdbf 	bl	80012c4 <GPIO_voidSetPinValue>

		/*wait for generate 8 pulses (40KHZ)*/
		MSTK_voidSetBusyWait(TIME_FOR_EIGHT_PULSES) ;
 8003746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800374a:	f7fe f8c1 	bl	80018d0 <MSTK_voidSetBusyWait>

		/*wait until generating rising edge for echo pin*/
		while ((GPIO_GetPinValue( Ultrasonic3_EchoPort, Ultrasonic3_EchoPin) == GPIO_LOW) && u16_Time_out < 1000000)
 800374e:	e002      	b.n	8003756 <HUltrasonic_f32CalcDistance+0x1d6>
	      	{
	      		u16_Time_out ++;
 8003750:	897b      	ldrh	r3, [r7, #10]
 8003752:	3301      	adds	r3, #1
 8003754:	817b      	strh	r3, [r7, #10]
		while ((GPIO_GetPinValue( Ultrasonic3_EchoPort, Ultrasonic3_EchoPin) == GPIO_LOW) && u16_Time_out < 1000000)
 8003756:	210f      	movs	r1, #15
 8003758:	2002      	movs	r0, #2
 800375a:	f7fd fe81 	bl	8001460 <GPIO_GetPinValue>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f5      	beq.n	8003750 <HUltrasonic_f32CalcDistance+0x1d0>
	      	if(u16_Time_out >= 1000000)
	      	{
	      		return 255;
	      	} ;

		while (GPIO_GetPinValue( Ultrasonic3_EchoPort, Ultrasonic3_EchoPin) == GPIO_HIGH)
 8003764:	e005      	b.n	8003772 <HUltrasonic_f32CalcDistance+0x1f2>
		{
			/*each iteration take 4.9 us*/
			L_u32TicksNumber ++ ;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3301      	adds	r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
			MSTK_voidSetBusyWait(2) ;
 800376c:	2002      	movs	r0, #2
 800376e:	f7fe f8af 	bl	80018d0 <MSTK_voidSetBusyWait>
		while (GPIO_GetPinValue( Ultrasonic3_EchoPort, Ultrasonic3_EchoPin) == GPIO_HIGH)
 8003772:	210f      	movs	r1, #15
 8003774:	2002      	movs	r0, #2
 8003776:	f7fd fe73 	bl	8001460 <GPIO_GetPinValue>
 800377a:	4603      	mov	r3, r0
 800377c:	2b01      	cmp	r3, #1
 800377e:	d0f2      	beq.n	8003766 <HUltrasonic_f32CalcDistance+0x1e6>
		}
		L_f32Distance = (L_u32TicksNumber + 0.0f)*TIME_OF_EACH_ITERATION_IN_MICRO*SPEED_OF_SIGNAL_CM_PER_U ;
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7fd fa11 	bl	8000ba8 <__aeabi_ui2f>
 8003786:	4603      	mov	r3, r0
 8003788:	f04f 0100 	mov.w	r1, #0
 800378c:	4618      	mov	r0, r3
 800378e:	f7fd f95b 	bl	8000a48 <__addsf3>
 8003792:	4603      	mov	r3, r0
 8003794:	4618      	mov	r0, r3
 8003796:	f7fc fe3f 	bl	8000418 <__aeabi_f2d>
 800379a:	a311      	add	r3, pc, #68	; (adr r3, 80037e0 <HUltrasonic_f32CalcDistance+0x260>)
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	f7fc fe92 	bl	80004c8 <__aeabi_dmul>
 80037a4:	4603      	mov	r3, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	4618      	mov	r0, r3
 80037aa:	4621      	mov	r1, r4
 80037ac:	a30e      	add	r3, pc, #56	; (adr r3, 80037e8 <HUltrasonic_f32CalcDistance+0x268>)
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f7fc fe89 	bl	80004c8 <__aeabi_dmul>
 80037b6:	4603      	mov	r3, r0
 80037b8:	460c      	mov	r4, r1
 80037ba:	4618      	mov	r0, r3
 80037bc:	4621      	mov	r1, r4
 80037be:	f7fd f91d 	bl	80009fc <__aeabi_d2uiz>
 80037c2:	4603      	mov	r3, r0
 80037c4:	727b      	strb	r3, [r7, #9]
		L_f32Distance = L_f32Distance / 2 ;
 80037c6:	7a7b      	ldrb	r3, [r7, #9]
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	727b      	strb	r3, [r7, #9]

		/*initialize L_u32TicksNumber for next read*/
		L_u32TicksNumber = 0 ;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
		return L_f32Distance ;
 80037d0:	7a7b      	ldrb	r3, [r7, #9]
 80037d2:	e000      	b.n	80037d6 <HUltrasonic_f32CalcDistance+0x256>
		break;
	}
	return 0;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd90      	pop	{r4, r7, pc}
 80037de:	bf00      	nop
 80037e0:	9999999a 	.word	0x9999999a
 80037e4:	40139999 	.word	0x40139999
 80037e8:	04816f00 	.word	0x04816f00
 80037ec:	3fa18fc5 	.word	0x3fa18fc5

080037f0 <HUltrasonic_voidInit>:


void HUltrasonic_voidInit (u8 Ultra_Num)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	71fb      	strb	r3, [r7, #7]
	switch(Ultra_Num)
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d84a      	bhi.n	8003898 <HUltrasonic_voidInit+0xa8>
 8003802:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <HUltrasonic_voidInit+0x18>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	08003819 	.word	0x08003819
 800380c:	08003839 	.word	0x08003839
 8003810:	08003859 	.word	0x08003859
 8003814:	08003879 	.word	0x08003879
	{
	case 1:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic1_TrigPort,Ultrasonic1_TrigPin,GPIO_OUTPUT_2M_PP);
 8003818:	2202      	movs	r2, #2
 800381a:	210a      	movs	r1, #10
 800381c:	2002      	movs	r0, #2
 800381e:	f7fd fbaf 	bl	8000f80 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic1_TrigPort, Ultrasonic1_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic1_EchoPort,Ultrasonic1_EchoPin,GPIO_INPUT_PU_PD);
 8003822:	2208      	movs	r2, #8
 8003824:	210b      	movs	r1, #11
 8003826:	2002      	movs	r0, #2
 8003828:	f7fd fbaa 	bl	8000f80 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic1_EchoPort, Ultrasonic1_EchoPin, GPIO_INPUT_PD);
 800382c:	2200      	movs	r2, #0
 800382e:	210b      	movs	r1, #11
 8003830:	2002      	movs	r0, #2
 8003832:	f7fd fd47 	bl	80012c4 <GPIO_voidSetPinValue>
		break;
 8003836:	e02f      	b.n	8003898 <HUltrasonic_voidInit+0xa8>
	case 2:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic2_TrigPort,Ultrasonic2_TrigPin,GPIO_OUTPUT_2M_PP);
 8003838:	2202      	movs	r2, #2
 800383a:	210c      	movs	r1, #12
 800383c:	2002      	movs	r0, #2
 800383e:	f7fd fb9f 	bl	8000f80 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic2_TrigPort, Ultrasonic2_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic2_EchoPort,Ultrasonic2_EchoPin,GPIO_INPUT_PU_PD);
 8003842:	2208      	movs	r2, #8
 8003844:	210d      	movs	r1, #13
 8003846:	2002      	movs	r0, #2
 8003848:	f7fd fb9a 	bl	8000f80 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic2_EchoPort, Ultrasonic2_EchoPin, GPIO_INPUT_PD);
 800384c:	2200      	movs	r2, #0
 800384e:	210d      	movs	r1, #13
 8003850:	2002      	movs	r0, #2
 8003852:	f7fd fd37 	bl	80012c4 <GPIO_voidSetPinValue>
		break;
 8003856:	e01f      	b.n	8003898 <HUltrasonic_voidInit+0xa8>
	case 3:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic3_TrigPort,Ultrasonic3_TrigPin,GPIO_OUTPUT_2M_PP);
 8003858:	2202      	movs	r2, #2
 800385a:	210e      	movs	r1, #14
 800385c:	2002      	movs	r0, #2
 800385e:	f7fd fb8f 	bl	8000f80 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic3_TrigPort, Ultrasonic3_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic3_EchoPort,Ultrasonic3_EchoPin,GPIO_INPUT_PU_PD);
 8003862:	2208      	movs	r2, #8
 8003864:	210f      	movs	r1, #15
 8003866:	2002      	movs	r0, #2
 8003868:	f7fd fb8a 	bl	8000f80 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic3_EchoPort, Ultrasonic3_EchoPin, GPIO_INPUT_PD);
 800386c:	2200      	movs	r2, #0
 800386e:	210f      	movs	r1, #15
 8003870:	2002      	movs	r0, #2
 8003872:	f7fd fd27 	bl	80012c4 <GPIO_voidSetPinValue>
		break;
 8003876:	e00f      	b.n	8003898 <HUltrasonic_voidInit+0xa8>
	case 4:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic4_TrigPort,Ultrasonic4_TrigPin,GPIO_OUTPUT_2M_PP);
 8003878:	2202      	movs	r2, #2
 800387a:	2107      	movs	r1, #7
 800387c:	2001      	movs	r0, #1
 800387e:	f7fd fb7f 	bl	8000f80 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic3_TrigPort, Ultrasonic3_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic4_EchoPort,Ultrasonic4_EchoPin,GPIO_INPUT_PU_PD);
 8003882:	2208      	movs	r2, #8
 8003884:	2108      	movs	r1, #8
 8003886:	2001      	movs	r0, #1
 8003888:	f7fd fb7a 	bl	8000f80 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic4_EchoPort, Ultrasonic4_EchoPin, GPIO_INPUT_PD);
 800388c:	2200      	movs	r2, #0
 800388e:	2108      	movs	r1, #8
 8003890:	2001      	movs	r0, #1
 8003892:	f7fd fd17 	bl	80012c4 <GPIO_voidSetPinValue>
		break;
 8003896:	bf00      	nop
	}
	/*initialize systick timer*/
	MSTK_voidInit() ;
 8003898:	f7fe f80e 	bl	80018b8 <MSTK_voidInit>
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <init_conf>:




void init_conf()
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 80038a8:	f7fd ff4e 	bl	8001748 <RCC_voidInitSysClock>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOA);
 80038ac:	2102      	movs	r1, #2
 80038ae:	2002      	movs	r0, #2
 80038b0:	f7fd ff7c 	bl	80017ac <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOB);
 80038b4:	2103      	movs	r1, #3
 80038b6:	2002      	movs	r0, #2
 80038b8:	f7fd ff78 	bl	80017ac <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOC);
 80038bc:	2104      	movs	r1, #4
 80038be:	2002      	movs	r0, #2
 80038c0:	f7fd ff74 	bl	80017ac <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,TIM1);
 80038c4:	210b      	movs	r1, #11
 80038c6:	2002      	movs	r0, #2
 80038c8:	f7fd ff70 	bl	80017ac <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB1,TIM2);
 80038cc:	2100      	movs	r1, #0
 80038ce:	2001      	movs	r0, #1
 80038d0:	f7fd ff6c 	bl	80017ac <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,USART1);
 80038d4:	210e      	movs	r1, #14
 80038d6:	2002      	movs	r0, #2
 80038d8:	f7fd ff68 	bl	80017ac <RCC_voidEnablePeripheral>
	MSTK_voidInit();
 80038dc:	f7fd ffec 	bl	80018b8 <MSTK_voidInit>
	MOTOR_init(MOTOR_1);
 80038e0:	2001      	movs	r0, #1
 80038e2:	f7fd fe6d 	bl	80015c0 <MOTOR_init>
	MOTOR_init(MOTOR_2);
 80038e6:	2002      	movs	r0, #2
 80038e8:	f7fd fe6a 	bl	80015c0 <MOTOR_init>
	GPIO_voidSetPinMode(2,5,GPIO_OUTPUT_10M_PP);
 80038ec:	2201      	movs	r2, #1
 80038ee:	2105      	movs	r1, #5
 80038f0:	2002      	movs	r0, #2
 80038f2:	f7fd fb45 	bl	8000f80 <GPIO_voidSetPinMode>
	HUltrasonic_voidInit(ULTR_1);
 80038f6:	2001      	movs	r0, #1
 80038f8:	f7ff ff7a 	bl	80037f0 <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_2);
 80038fc:	2002      	movs	r0, #2
 80038fe:	f7ff ff77 	bl	80037f0 <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_3);
 8003902:	2003      	movs	r0, #3
 8003904:	f7ff ff74 	bl	80037f0 <HUltrasonic_voidInit>
    //HUltrasonic_voidInit(ULTR_4);
	MUART_voidInit(&MUART_Init,&MUART_clock,UART1);
 8003908:	4a07      	ldr	r2, [pc, #28]	; (8003928 <init_conf+0x84>)
 800390a:	4908      	ldr	r1, [pc, #32]	; (800392c <init_conf+0x88>)
 800390c:	4808      	ldr	r0, [pc, #32]	; (8003930 <init_conf+0x8c>)
 800390e:	f7ff f897 	bl	8002a40 <MUART_voidInit>
	MUART1_voidSetCallBack(&MUART_Buffer_Write);
 8003912:	4808      	ldr	r0, [pc, #32]	; (8003934 <init_conf+0x90>)
 8003914:	f7ff fdfc 	bl	8003510 <MUART1_voidSetCallBack>
	MUART_voidEnable(UART1);
 8003918:	4803      	ldr	r0, [pc, #12]	; (8003928 <init_conf+0x84>)
 800391a:	f7ff f989 	bl	8002c30 <MUART_voidEnable>
	MUART_u8ReceiveByteASynch(UART1);
 800391e:	4802      	ldr	r0, [pc, #8]	; (8003928 <init_conf+0x84>)
 8003920:	f7ff f996 	bl	8002c50 <MUART_u8ReceiveByteASynch>

}
 8003924:	bf00      	nop
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40013800 	.word	0x40013800
 800392c:	20000110 	.word	0x20000110
 8003930:	200000cc 	.word	0x200000cc
 8003934:	08002c79 	.word	0x08002c79

08003938 <main>:


int main()
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
		//MOTOR_Stop(MOTOR_1) ;
		//MOTOR_Stop(MOTOR_2) ;
		//MSTK_voidSetBusyWait(1000000);
		//MSTK_voidSetBusyWait(1000000);
	//}
	init_conf();
 800393c:	f7ff ffb2 	bl	80038a4 <init_conf>
	MSTK_voidSetBusyWait(1000000);
 8003940:	4806      	ldr	r0, [pc, #24]	; (800395c <main+0x24>)
 8003942:	f7fd ffc5 	bl	80018d0 <MSTK_voidSetBusyWait>
	GPIO_voidSetPinValue(2,5,1);
 8003946:	2201      	movs	r2, #1
 8003948:	2105      	movs	r1, #5
 800394a:	2002      	movs	r0, #2
 800394c:	f7fd fcba 	bl	80012c4 <GPIO_voidSetPinValue>

	while(1)
	{
		UART_Task();
 8003950:	f000 fba2 	bl	8004098 <UART_Task>

		/*Encoding received data and take Direction (second 3bits)*/
		APP_Direction_Control();
 8003954:	f000 fd8e 	bl	8004474 <APP_Direction_Control>
		UART_Task();
 8003958:	e7fa      	b.n	8003950 <main+0x18>
 800395a:	bf00      	nop
 800395c:	000f4240 	.word	0x000f4240

08003960 <APP_Update_Distance>:
    return 0;
}


void APP_Update_Distance()
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
	G_xNear_Distance.Distance_Forword = HUltrasonic_f32CalcDistance(ULTR_1);
 8003964:	2001      	movs	r0, #1
 8003966:	f7ff fe0b 	bl	8003580 <HUltrasonic_f32CalcDistance>
 800396a:	4603      	mov	r3, r0
 800396c:	461a      	mov	r2, r3
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <APP_Update_Distance+0x34>)
 8003970:	701a      	strb	r2, [r3, #0]
	G_xNear_Distance.Distance_Right   = HUltrasonic_f32CalcDistance(ULTR_2);
 8003972:	2002      	movs	r0, #2
 8003974:	f7ff fe04 	bl	8003580 <HUltrasonic_f32CalcDistance>
 8003978:	4603      	mov	r3, r0
 800397a:	461a      	mov	r2, r3
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <APP_Update_Distance+0x34>)
 800397e:	70da      	strb	r2, [r3, #3]
	G_xNear_Distance.Distance_Left    = HUltrasonic_f32CalcDistance(ULTR_3);
 8003980:	2003      	movs	r0, #3
 8003982:	f7ff fdfd 	bl	8003580 <HUltrasonic_f32CalcDistance>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	4b02      	ldr	r3, [pc, #8]	; (8003994 <APP_Update_Distance+0x34>)
 800398c:	709a      	strb	r2, [r3, #2]
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	200001e8 	.word	0x200001e8

08003998 <APP_VoidStop>:



void APP_VoidStop()
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
	//direction = stop
	G_u16DataAfterProccing.Direction = Stop;
 800399c:	4a08      	ldr	r2, [pc, #32]	; (80039c0 <APP_VoidStop+0x28>)
 800399e:	7813      	ldrb	r3, [r2, #0]
 80039a0:	f36f 0303 	bfc	r3, #0, #4
 80039a4:	7013      	strb	r3, [r2, #0]
	/*flag = 3*/
	G_u16DataAfterProccing.Flag = 3;
 80039a6:	4a06      	ldr	r2, [pc, #24]	; (80039c0 <APP_VoidStop+0x28>)
 80039a8:	7853      	ldrb	r3, [r2, #1]
 80039aa:	f043 0303 	orr.w	r3, r3, #3
 80039ae:	7053      	strb	r3, [r2, #1]
	GPIO_voidSetPinValue(2,5,0);
 80039b0:	2200      	movs	r2, #0
 80039b2:	2105      	movs	r1, #5
 80039b4:	2002      	movs	r0, #2
 80039b6:	f7fd fc85 	bl	80012c4 <GPIO_voidSetPinValue>
	/*stop car + alarm*/
//	G_u16DataAfterProccing = G_u16DataAfterProccing & 0xFF8F ;
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200001f0 	.word	0x200001f0

080039c4 <APP_voidGoTasks>:

void APP_voidGoTasks ()
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Go)
 80039c8:	4a42      	ldr	r2, [pc, #264]	; (8003ad4 <APP_voidGoTasks+0x110>)
 80039ca:	7813      	ldrb	r3, [r2, #0]
 80039cc:	2108      	movs	r1, #8
 80039ce:	f361 0303 	bfi	r3, r1, #0, #4
 80039d2:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Forword  <= SO_SHORT_DISTANCE) // stop car
 80039d4:	4b40      	ldr	r3, [pc, #256]	; (8003ad8 <APP_voidGoTasks+0x114>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fc fd0b 	bl	80003f4 <__aeabi_i2d>
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	4b3e      	ldr	r3, [pc, #248]	; (8003adc <APP_voidGoTasks+0x118>)
 80039e4:	f7fc ffec 	bl	80009c0 <__aeabi_dcmple>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <APP_voidGoTasks+0x40>
			{
				//direction = stop
				G_u16DataAfterProccing.Direction = Stop;
 80039ee:	4a39      	ldr	r2, [pc, #228]	; (8003ad4 <APP_voidGoTasks+0x110>)
 80039f0:	7813      	ldrb	r3, [r2, #0]
 80039f2:	f36f 0303 	bfc	r3, #0, #4
 80039f6:	7013      	strb	r3, [r2, #0]
				/*flag = 3*/
				G_u16DataAfterProccing.Flag = 3;
 80039f8:	4a36      	ldr	r2, [pc, #216]	; (8003ad4 <APP_voidGoTasks+0x110>)
 80039fa:	7853      	ldrb	r3, [r2, #1]
 80039fc:	f043 0303 	orr.w	r3, r3, #3
 8003a00:	7053      	strb	r3, [r2, #1]
					G_u16DataAfterProccing.Speed = max_speed;
				else
					G_u16DataAfterProccing.Speed = G_xMy_Data.Speed;
			}
	}
}
 8003a02:	e065      	b.n	8003ad0 <APP_voidGoTasks+0x10c>
		else if (G_xNear_Distance.Distance_Forword <= UN_SAFE_DISTANCE) //Un Safed Distance
 8003a04:	4b34      	ldr	r3, [pc, #208]	; (8003ad8 <APP_voidGoTasks+0x114>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fc fcf3 	bl	80003f4 <__aeabi_i2d>
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	4b33      	ldr	r3, [pc, #204]	; (8003ae0 <APP_voidGoTasks+0x11c>)
 8003a14:	f7fc ffd4 	bl	80009c0 <__aeabi_dcmple>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d03f      	beq.n	8003a9e <APP_voidGoTasks+0xda>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8003a1e:	4b31      	ldr	r3, [pc, #196]	; (8003ae4 <APP_voidGoTasks+0x120>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ae8 <APP_voidGoTasks+0x124>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	dc1a      	bgt.n	8003a68 <APP_voidGoTasks+0xa4>
					G_u16DataAfterProccing.Flag = 1;
 8003a32:	4a28      	ldr	r2, [pc, #160]	; (8003ad4 <APP_voidGoTasks+0x110>)
 8003a34:	7853      	ldrb	r3, [r2, #1]
 8003a36:	2101      	movs	r1, #1
 8003a38:	f361 0301 	bfi	r3, r1, #0, #2
 8003a3c:	7053      	strb	r3, [r2, #1]
					G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 8003a3e:	4b29      	ldr	r3, [pc, #164]	; (8003ae4 <APP_voidGoTasks+0x120>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003a46:	b2d9      	uxtb	r1, r3
 8003a48:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <APP_voidGoTasks+0x110>)
 8003a4a:	7813      	ldrb	r3, [r2, #0]
 8003a4c:	f361 0303 	bfi	r3, r1, #0, #4
 8003a50:	7013      	strb	r3, [r2, #0]
					G_u16DataAfterProccing.Speed = G_xMy_Data.Speed;
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <APP_voidGoTasks+0x120>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003a5a:	b2d9      	uxtb	r1, r3
 8003a5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <APP_voidGoTasks+0x110>)
 8003a5e:	7813      	ldrb	r3, [r2, #0]
 8003a60:	f361 1306 	bfi	r3, r1, #4, #3
 8003a64:	7013      	strb	r3, [r2, #0]
}
 8003a66:	e033      	b.n	8003ad0 <APP_voidGoTasks+0x10c>
					G_u16DataAfterProccing.Flag = 2;
 8003a68:	4a1a      	ldr	r2, [pc, #104]	; (8003ad4 <APP_voidGoTasks+0x110>)
 8003a6a:	7853      	ldrb	r3, [r2, #1]
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	f361 0301 	bfi	r3, r1, #0, #2
 8003a72:	7053      	strb	r3, [r2, #1]
					G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <APP_voidGoTasks+0x120>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003a7c:	b2d9      	uxtb	r1, r3
 8003a7e:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <APP_voidGoTasks+0x110>)
 8003a80:	7813      	ldrb	r3, [r2, #0]
 8003a82:	f361 0303 	bfi	r3, r1, #0, #4
 8003a86:	7013      	strb	r3, [r2, #0]
					G_u16DataAfterProccing.Speed = G_xMy_Data.Speed;
 8003a88:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <APP_voidGoTasks+0x120>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003a90:	b2d9      	uxtb	r1, r3
 8003a92:	4a10      	ldr	r2, [pc, #64]	; (8003ad4 <APP_voidGoTasks+0x110>)
 8003a94:	7813      	ldrb	r3, [r2, #0]
 8003a96:	f361 1306 	bfi	r3, r1, #4, #3
 8003a9a:	7013      	strb	r3, [r2, #0]
}
 8003a9c:	e018      	b.n	8003ad0 <APP_voidGoTasks+0x10c>
				G_u16DataAfterProccing.Flag = 0;
 8003a9e:	4a0d      	ldr	r2, [pc, #52]	; (8003ad4 <APP_voidGoTasks+0x110>)
 8003aa0:	7853      	ldrb	r3, [r2, #1]
 8003aa2:	f36f 0301 	bfc	r3, #0, #2
 8003aa6:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <APP_voidGoTasks+0x120>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003ab0:	b2d9      	uxtb	r1, r3
 8003ab2:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <APP_voidGoTasks+0x110>)
 8003ab4:	7813      	ldrb	r3, [r2, #0]
 8003ab6:	f361 0303 	bfi	r3, r1, #0, #4
 8003aba:	7013      	strb	r3, [r2, #0]
				GPIO_voidSetPinValue(2,5,1);
 8003abc:	2201      	movs	r2, #1
 8003abe:	2105      	movs	r1, #5
 8003ac0:	2002      	movs	r0, #2
 8003ac2:	f7fd fbff 	bl	80012c4 <GPIO_voidSetPinValue>
					G_u16DataAfterProccing.Speed = max_speed;
 8003ac6:	4a03      	ldr	r2, [pc, #12]	; (8003ad4 <APP_voidGoTasks+0x110>)
 8003ac8:	7813      	ldrb	r3, [r2, #0]
 8003aca:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003ace:	7013      	strb	r3, [r2, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	200001f0 	.word	0x200001f0
 8003ad8:	200001e8 	.word	0x200001e8
 8003adc:	40240000 	.word	0x40240000
 8003ae0:	40340000 	.word	0x40340000
 8003ae4:	200001e4 	.word	0x200001e4
 8003ae8:	200000d8 	.word	0x200000d8

08003aec <APP_voidBackTasks>:
void APP_voidBackTasks ()
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Back)
 8003af0:	4a40      	ldr	r2, [pc, #256]	; (8003bf4 <APP_voidBackTasks+0x108>)
 8003af2:	7813      	ldrb	r3, [r2, #0]
 8003af4:	2101      	movs	r1, #1
 8003af6:	f361 0303 	bfi	r3, r1, #0, #4
 8003afa:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Back  <= SO_SHORT_DISTANCE) // stop car
 8003afc:	4b3e      	ldr	r3, [pc, #248]	; (8003bf8 <APP_voidBackTasks+0x10c>)
 8003afe:	785b      	ldrb	r3, [r3, #1]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fc fc77 	bl	80003f4 <__aeabi_i2d>
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	4b3c      	ldr	r3, [pc, #240]	; (8003bfc <APP_voidBackTasks+0x110>)
 8003b0c:	f7fc ff58 	bl	80009c0 <__aeabi_dcmple>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <APP_voidBackTasks+0x40>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8003b16:	4a37      	ldr	r2, [pc, #220]	; (8003bf4 <APP_voidBackTasks+0x108>)
 8003b18:	7813      	ldrb	r3, [r2, #0]
 8003b1a:	f36f 0303 	bfc	r3, #0, #4
 8003b1e:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 8003b20:	4a34      	ldr	r2, [pc, #208]	; (8003bf4 <APP_voidBackTasks+0x108>)
 8003b22:	7853      	ldrb	r3, [r2, #1]
 8003b24:	f043 0303 	orr.w	r3, r3, #3
 8003b28:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 8003b2a:	e060      	b.n	8003bee <APP_voidBackTasks+0x102>
		else if (G_xNear_Distance.Distance_Back <= UN_SAFE_DISTANCE) //Un Safed Distance
 8003b2c:	4b32      	ldr	r3, [pc, #200]	; (8003bf8 <APP_voidBackTasks+0x10c>)
 8003b2e:	785b      	ldrb	r3, [r3, #1]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fc fc5f 	bl	80003f4 <__aeabi_i2d>
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <APP_voidBackTasks+0x114>)
 8003b3c:	f7fc ff40 	bl	80009c0 <__aeabi_dcmple>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d03f      	beq.n	8003bc6 <APP_voidBackTasks+0xda>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8003b46:	4b2f      	ldr	r3, [pc, #188]	; (8003c04 <APP_voidBackTasks+0x118>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	4b2d      	ldr	r3, [pc, #180]	; (8003c08 <APP_voidBackTasks+0x11c>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	dc1a      	bgt.n	8003b90 <APP_voidBackTasks+0xa4>
				G_u16DataAfterProccing.Flag = 1; ;
 8003b5a:	4a26      	ldr	r2, [pc, #152]	; (8003bf4 <APP_voidBackTasks+0x108>)
 8003b5c:	7853      	ldrb	r3, [r2, #1]
 8003b5e:	2101      	movs	r1, #1
 8003b60:	f361 0301 	bfi	r3, r1, #0, #2
 8003b64:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003b66:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <APP_voidBackTasks+0x118>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003b6e:	b2d9      	uxtb	r1, r3
 8003b70:	4a20      	ldr	r2, [pc, #128]	; (8003bf4 <APP_voidBackTasks+0x108>)
 8003b72:	7813      	ldrb	r3, [r2, #0]
 8003b74:	f361 0303 	bfi	r3, r1, #0, #4
 8003b78:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8003b7a:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <APP_voidBackTasks+0x118>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003b82:	b2d9      	uxtb	r1, r3
 8003b84:	4a1b      	ldr	r2, [pc, #108]	; (8003bf4 <APP_voidBackTasks+0x108>)
 8003b86:	7813      	ldrb	r3, [r2, #0]
 8003b88:	f361 1306 	bfi	r3, r1, #4, #3
 8003b8c:	7013      	strb	r3, [r2, #0]
}
 8003b8e:	e02e      	b.n	8003bee <APP_voidBackTasks+0x102>
				G_u16DataAfterProccing.Flag = 2;
 8003b90:	4a18      	ldr	r2, [pc, #96]	; (8003bf4 <APP_voidBackTasks+0x108>)
 8003b92:	7853      	ldrb	r3, [r2, #1]
 8003b94:	2102      	movs	r1, #2
 8003b96:	f361 0301 	bfi	r3, r1, #0, #2
 8003b9a:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003b9c:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <APP_voidBackTasks+0x118>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003ba4:	b2d9      	uxtb	r1, r3
 8003ba6:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <APP_voidBackTasks+0x108>)
 8003ba8:	7813      	ldrb	r3, [r2, #0]
 8003baa:	f361 0303 	bfi	r3, r1, #0, #4
 8003bae:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 8003bb0:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <APP_voidBackTasks+0x11c>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	b2d9      	uxtb	r1, r3
 8003bba:	4a0e      	ldr	r2, [pc, #56]	; (8003bf4 <APP_voidBackTasks+0x108>)
 8003bbc:	7813      	ldrb	r3, [r2, #0]
 8003bbe:	f361 1306 	bfi	r3, r1, #4, #3
 8003bc2:	7013      	strb	r3, [r2, #0]
}
 8003bc4:	e013      	b.n	8003bee <APP_voidBackTasks+0x102>
			G_u16DataAfterProccing.Flag = 0;
 8003bc6:	4a0b      	ldr	r2, [pc, #44]	; (8003bf4 <APP_voidBackTasks+0x108>)
 8003bc8:	7853      	ldrb	r3, [r2, #1]
 8003bca:	f36f 0301 	bfc	r3, #0, #2
 8003bce:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <APP_voidBackTasks+0x118>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003bd8:	b2d9      	uxtb	r1, r3
 8003bda:	4a06      	ldr	r2, [pc, #24]	; (8003bf4 <APP_voidBackTasks+0x108>)
 8003bdc:	7813      	ldrb	r3, [r2, #0]
 8003bde:	f361 0303 	bfi	r3, r1, #0, #4
 8003be2:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 8003be4:	4a03      	ldr	r2, [pc, #12]	; (8003bf4 <APP_voidBackTasks+0x108>)
 8003be6:	7813      	ldrb	r3, [r2, #0]
 8003be8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003bec:	7013      	strb	r3, [r2, #0]
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	200001f0 	.word	0x200001f0
 8003bf8:	200001e8 	.word	0x200001e8
 8003bfc:	40240000 	.word	0x40240000
 8003c00:	40340000 	.word	0x40340000
 8003c04:	200001e4 	.word	0x200001e4
 8003c08:	200000d8 	.word	0x200000d8

08003c0c <APP_voidBackward_RightTasks>:
void APP_voidBackward_RightTasks ()
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Backward_Right)
 8003c10:	4a40      	ldr	r2, [pc, #256]	; (8003d14 <APP_voidBackward_RightTasks+0x108>)
 8003c12:	7813      	ldrb	r3, [r2, #0]
 8003c14:	2106      	movs	r1, #6
 8003c16:	f361 0303 	bfi	r3, r1, #0, #4
 8003c1a:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Left  <= SO_SHORT_DISTANCE) // stop car
 8003c1c:	4b3e      	ldr	r3, [pc, #248]	; (8003d18 <APP_voidBackward_RightTasks+0x10c>)
 8003c1e:	789b      	ldrb	r3, [r3, #2]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fc fbe7 	bl	80003f4 <__aeabi_i2d>
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	4b3c      	ldr	r3, [pc, #240]	; (8003d1c <APP_voidBackward_RightTasks+0x110>)
 8003c2c:	f7fc fec8 	bl	80009c0 <__aeabi_dcmple>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <APP_voidBackward_RightTasks+0x40>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8003c36:	4a37      	ldr	r2, [pc, #220]	; (8003d14 <APP_voidBackward_RightTasks+0x108>)
 8003c38:	7813      	ldrb	r3, [r2, #0]
 8003c3a:	f36f 0303 	bfc	r3, #0, #4
 8003c3e:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 8003c40:	4a34      	ldr	r2, [pc, #208]	; (8003d14 <APP_voidBackward_RightTasks+0x108>)
 8003c42:	7853      	ldrb	r3, [r2, #1]
 8003c44:	f043 0303 	orr.w	r3, r3, #3
 8003c48:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 8003c4a:	e060      	b.n	8003d0e <APP_voidBackward_RightTasks+0x102>
		else if (G_xNear_Distance.Distance_Left <= UN_SAFE_DISTANCE) //Un Safed Distance
 8003c4c:	4b32      	ldr	r3, [pc, #200]	; (8003d18 <APP_voidBackward_RightTasks+0x10c>)
 8003c4e:	789b      	ldrb	r3, [r3, #2]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fc fbcf 	bl	80003f4 <__aeabi_i2d>
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	4b31      	ldr	r3, [pc, #196]	; (8003d20 <APP_voidBackward_RightTasks+0x114>)
 8003c5c:	f7fc feb0 	bl	80009c0 <__aeabi_dcmple>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d03f      	beq.n	8003ce6 <APP_voidBackward_RightTasks+0xda>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8003c66:	4b2f      	ldr	r3, [pc, #188]	; (8003d24 <APP_voidBackward_RightTasks+0x118>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b2d      	ldr	r3, [pc, #180]	; (8003d28 <APP_voidBackward_RightTasks+0x11c>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	dc1a      	bgt.n	8003cb0 <APP_voidBackward_RightTasks+0xa4>
				G_u16DataAfterProccing.Flag = 1; ;
 8003c7a:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <APP_voidBackward_RightTasks+0x108>)
 8003c7c:	7853      	ldrb	r3, [r2, #1]
 8003c7e:	2101      	movs	r1, #1
 8003c80:	f361 0301 	bfi	r3, r1, #0, #2
 8003c84:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003c86:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <APP_voidBackward_RightTasks+0x118>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003c8e:	b2d9      	uxtb	r1, r3
 8003c90:	4a20      	ldr	r2, [pc, #128]	; (8003d14 <APP_voidBackward_RightTasks+0x108>)
 8003c92:	7813      	ldrb	r3, [r2, #0]
 8003c94:	f361 0303 	bfi	r3, r1, #0, #4
 8003c98:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8003c9a:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <APP_voidBackward_RightTasks+0x118>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003ca2:	b2d9      	uxtb	r1, r3
 8003ca4:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <APP_voidBackward_RightTasks+0x108>)
 8003ca6:	7813      	ldrb	r3, [r2, #0]
 8003ca8:	f361 1306 	bfi	r3, r1, #4, #3
 8003cac:	7013      	strb	r3, [r2, #0]
}
 8003cae:	e02e      	b.n	8003d0e <APP_voidBackward_RightTasks+0x102>
				G_u16DataAfterProccing.Flag = 2;
 8003cb0:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <APP_voidBackward_RightTasks+0x108>)
 8003cb2:	7853      	ldrb	r3, [r2, #1]
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	f361 0301 	bfi	r3, r1, #0, #2
 8003cba:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003cbc:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <APP_voidBackward_RightTasks+0x118>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003cc4:	b2d9      	uxtb	r1, r3
 8003cc6:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <APP_voidBackward_RightTasks+0x108>)
 8003cc8:	7813      	ldrb	r3, [r2, #0]
 8003cca:	f361 0303 	bfi	r3, r1, #0, #4
 8003cce:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 8003cd0:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <APP_voidBackward_RightTasks+0x11c>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	b2d9      	uxtb	r1, r3
 8003cda:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <APP_voidBackward_RightTasks+0x108>)
 8003cdc:	7813      	ldrb	r3, [r2, #0]
 8003cde:	f361 1306 	bfi	r3, r1, #4, #3
 8003ce2:	7013      	strb	r3, [r2, #0]
}
 8003ce4:	e013      	b.n	8003d0e <APP_voidBackward_RightTasks+0x102>
			G_u16DataAfterProccing.Flag = 0;
 8003ce6:	4a0b      	ldr	r2, [pc, #44]	; (8003d14 <APP_voidBackward_RightTasks+0x108>)
 8003ce8:	7853      	ldrb	r3, [r2, #1]
 8003cea:	f36f 0301 	bfc	r3, #0, #2
 8003cee:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <APP_voidBackward_RightTasks+0x118>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003cf8:	b2d9      	uxtb	r1, r3
 8003cfa:	4a06      	ldr	r2, [pc, #24]	; (8003d14 <APP_voidBackward_RightTasks+0x108>)
 8003cfc:	7813      	ldrb	r3, [r2, #0]
 8003cfe:	f361 0303 	bfi	r3, r1, #0, #4
 8003d02:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 8003d04:	4a03      	ldr	r2, [pc, #12]	; (8003d14 <APP_voidBackward_RightTasks+0x108>)
 8003d06:	7813      	ldrb	r3, [r2, #0]
 8003d08:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003d0c:	7013      	strb	r3, [r2, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	200001f0 	.word	0x200001f0
 8003d18:	200001e8 	.word	0x200001e8
 8003d1c:	40240000 	.word	0x40240000
 8003d20:	40340000 	.word	0x40340000
 8003d24:	200001e4 	.word	0x200001e4
 8003d28:	200000d8 	.word	0x200000d8

08003d2c <APP_voidBackward_LEFTTasks>:
void APP_voidBackward_LEFTTasks ()
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Backward_Left)
 8003d30:	4a40      	ldr	r2, [pc, #256]	; (8003e34 <APP_voidBackward_LEFTTasks+0x108>)
 8003d32:	7813      	ldrb	r3, [r2, #0]
 8003d34:	2107      	movs	r1, #7
 8003d36:	f361 0303 	bfi	r3, r1, #0, #4
 8003d3a:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Right  <= SO_SHORT_DISTANCE) // stop car
 8003d3c:	4b3e      	ldr	r3, [pc, #248]	; (8003e38 <APP_voidBackward_LEFTTasks+0x10c>)
 8003d3e:	78db      	ldrb	r3, [r3, #3]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fc fb57 	bl	80003f4 <__aeabi_i2d>
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	4b3c      	ldr	r3, [pc, #240]	; (8003e3c <APP_voidBackward_LEFTTasks+0x110>)
 8003d4c:	f7fc fe38 	bl	80009c0 <__aeabi_dcmple>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <APP_voidBackward_LEFTTasks+0x40>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8003d56:	4a37      	ldr	r2, [pc, #220]	; (8003e34 <APP_voidBackward_LEFTTasks+0x108>)
 8003d58:	7813      	ldrb	r3, [r2, #0]
 8003d5a:	f36f 0303 	bfc	r3, #0, #4
 8003d5e:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 8003d60:	4a34      	ldr	r2, [pc, #208]	; (8003e34 <APP_voidBackward_LEFTTasks+0x108>)
 8003d62:	7853      	ldrb	r3, [r2, #1]
 8003d64:	f043 0303 	orr.w	r3, r3, #3
 8003d68:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 8003d6a:	e060      	b.n	8003e2e <APP_voidBackward_LEFTTasks+0x102>
		else if (G_xNear_Distance.Distance_Right <= UN_SAFE_DISTANCE) //Un Safed Distance
 8003d6c:	4b32      	ldr	r3, [pc, #200]	; (8003e38 <APP_voidBackward_LEFTTasks+0x10c>)
 8003d6e:	78db      	ldrb	r3, [r3, #3]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fc fb3f 	bl	80003f4 <__aeabi_i2d>
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <APP_voidBackward_LEFTTasks+0x114>)
 8003d7c:	f7fc fe20 	bl	80009c0 <__aeabi_dcmple>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d03f      	beq.n	8003e06 <APP_voidBackward_LEFTTasks+0xda>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8003d86:	4b2f      	ldr	r3, [pc, #188]	; (8003e44 <APP_voidBackward_LEFTTasks+0x118>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	4b2d      	ldr	r3, [pc, #180]	; (8003e48 <APP_voidBackward_LEFTTasks+0x11c>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	dc1a      	bgt.n	8003dd0 <APP_voidBackward_LEFTTasks+0xa4>
				G_u16DataAfterProccing.Flag = 1;
 8003d9a:	4a26      	ldr	r2, [pc, #152]	; (8003e34 <APP_voidBackward_LEFTTasks+0x108>)
 8003d9c:	7853      	ldrb	r3, [r2, #1]
 8003d9e:	2101      	movs	r1, #1
 8003da0:	f361 0301 	bfi	r3, r1, #0, #2
 8003da4:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003da6:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <APP_voidBackward_LEFTTasks+0x118>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003dae:	b2d9      	uxtb	r1, r3
 8003db0:	4a20      	ldr	r2, [pc, #128]	; (8003e34 <APP_voidBackward_LEFTTasks+0x108>)
 8003db2:	7813      	ldrb	r3, [r2, #0]
 8003db4:	f361 0303 	bfi	r3, r1, #0, #4
 8003db8:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8003dba:	4b22      	ldr	r3, [pc, #136]	; (8003e44 <APP_voidBackward_LEFTTasks+0x118>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003dc2:	b2d9      	uxtb	r1, r3
 8003dc4:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <APP_voidBackward_LEFTTasks+0x108>)
 8003dc6:	7813      	ldrb	r3, [r2, #0]
 8003dc8:	f361 1306 	bfi	r3, r1, #4, #3
 8003dcc:	7013      	strb	r3, [r2, #0]
}
 8003dce:	e02e      	b.n	8003e2e <APP_voidBackward_LEFTTasks+0x102>
				G_u16DataAfterProccing.Flag = 2;
 8003dd0:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <APP_voidBackward_LEFTTasks+0x108>)
 8003dd2:	7853      	ldrb	r3, [r2, #1]
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	f361 0301 	bfi	r3, r1, #0, #2
 8003dda:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003ddc:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <APP_voidBackward_LEFTTasks+0x118>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003de4:	b2d9      	uxtb	r1, r3
 8003de6:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <APP_voidBackward_LEFTTasks+0x108>)
 8003de8:	7813      	ldrb	r3, [r2, #0]
 8003dea:	f361 0303 	bfi	r3, r1, #0, #4
 8003dee:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <APP_voidBackward_LEFTTasks+0x11c>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	b2d9      	uxtb	r1, r3
 8003dfa:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <APP_voidBackward_LEFTTasks+0x108>)
 8003dfc:	7813      	ldrb	r3, [r2, #0]
 8003dfe:	f361 1306 	bfi	r3, r1, #4, #3
 8003e02:	7013      	strb	r3, [r2, #0]
}
 8003e04:	e013      	b.n	8003e2e <APP_voidBackward_LEFTTasks+0x102>
			G_u16DataAfterProccing.Flag = 0;
 8003e06:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <APP_voidBackward_LEFTTasks+0x108>)
 8003e08:	7853      	ldrb	r3, [r2, #1]
 8003e0a:	f36f 0301 	bfc	r3, #0, #2
 8003e0e:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003e10:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <APP_voidBackward_LEFTTasks+0x118>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003e18:	b2d9      	uxtb	r1, r3
 8003e1a:	4a06      	ldr	r2, [pc, #24]	; (8003e34 <APP_voidBackward_LEFTTasks+0x108>)
 8003e1c:	7813      	ldrb	r3, [r2, #0]
 8003e1e:	f361 0303 	bfi	r3, r1, #0, #4
 8003e22:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 8003e24:	4a03      	ldr	r2, [pc, #12]	; (8003e34 <APP_voidBackward_LEFTTasks+0x108>)
 8003e26:	7813      	ldrb	r3, [r2, #0]
 8003e28:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003e2c:	7013      	strb	r3, [r2, #0]
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200001f0 	.word	0x200001f0
 8003e38:	200001e8 	.word	0x200001e8
 8003e3c:	40240000 	.word	0x40240000
 8003e40:	40340000 	.word	0x40340000
 8003e44:	200001e4 	.word	0x200001e4
 8003e48:	200000d8 	.word	0x200000d8

08003e4c <APP_voidRight_LeftTasks>:
void APP_voidRight_LeftTasks ()
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
	APP_Update_Distance();
 8003e50:	f7ff fd86 	bl	8003960 <APP_Update_Distance>

}
 8003e54:	bf00      	nop
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <APP_voidForward_RightTasks>:
void APP_voidForward_RightTasks ()
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Forward_Right)
 8003e5c:	4a40      	ldr	r2, [pc, #256]	; (8003f60 <APP_voidForward_RightTasks+0x108>)
 8003e5e:	7813      	ldrb	r3, [r2, #0]
 8003e60:	2104      	movs	r1, #4
 8003e62:	f361 0303 	bfi	r3, r1, #0, #4
 8003e66:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Right  <= SO_SHORT_DISTANCE) // stop car
 8003e68:	4b3e      	ldr	r3, [pc, #248]	; (8003f64 <APP_voidForward_RightTasks+0x10c>)
 8003e6a:	78db      	ldrb	r3, [r3, #3]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fc fac1 	bl	80003f4 <__aeabi_i2d>
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	4b3c      	ldr	r3, [pc, #240]	; (8003f68 <APP_voidForward_RightTasks+0x110>)
 8003e78:	f7fc fda2 	bl	80009c0 <__aeabi_dcmple>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <APP_voidForward_RightTasks+0x40>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8003e82:	4a37      	ldr	r2, [pc, #220]	; (8003f60 <APP_voidForward_RightTasks+0x108>)
 8003e84:	7813      	ldrb	r3, [r2, #0]
 8003e86:	f36f 0303 	bfc	r3, #0, #4
 8003e8a:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 8003e8c:	4a34      	ldr	r2, [pc, #208]	; (8003f60 <APP_voidForward_RightTasks+0x108>)
 8003e8e:	7853      	ldrb	r3, [r2, #1]
 8003e90:	f043 0303 	orr.w	r3, r3, #3
 8003e94:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 8003e96:	e060      	b.n	8003f5a <APP_voidForward_RightTasks+0x102>
		else if (G_xNear_Distance.Distance_Right <= UN_SAFE_DISTANCE) //Un Safed Distance
 8003e98:	4b32      	ldr	r3, [pc, #200]	; (8003f64 <APP_voidForward_RightTasks+0x10c>)
 8003e9a:	78db      	ldrb	r3, [r3, #3]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fc faa9 	bl	80003f4 <__aeabi_i2d>
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	4b31      	ldr	r3, [pc, #196]	; (8003f6c <APP_voidForward_RightTasks+0x114>)
 8003ea8:	f7fc fd8a 	bl	80009c0 <__aeabi_dcmple>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d03f      	beq.n	8003f32 <APP_voidForward_RightTasks+0xda>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8003eb2:	4b2f      	ldr	r3, [pc, #188]	; (8003f70 <APP_voidForward_RightTasks+0x118>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <APP_voidForward_RightTasks+0x11c>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	dc1a      	bgt.n	8003efc <APP_voidForward_RightTasks+0xa4>
				G_u16DataAfterProccing.Flag = 1;
 8003ec6:	4a26      	ldr	r2, [pc, #152]	; (8003f60 <APP_voidForward_RightTasks+0x108>)
 8003ec8:	7853      	ldrb	r3, [r2, #1]
 8003eca:	2101      	movs	r1, #1
 8003ecc:	f361 0301 	bfi	r3, r1, #0, #2
 8003ed0:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003ed2:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <APP_voidForward_RightTasks+0x118>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003eda:	b2d9      	uxtb	r1, r3
 8003edc:	4a20      	ldr	r2, [pc, #128]	; (8003f60 <APP_voidForward_RightTasks+0x108>)
 8003ede:	7813      	ldrb	r3, [r2, #0]
 8003ee0:	f361 0303 	bfi	r3, r1, #0, #4
 8003ee4:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8003ee6:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <APP_voidForward_RightTasks+0x118>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003eee:	b2d9      	uxtb	r1, r3
 8003ef0:	4a1b      	ldr	r2, [pc, #108]	; (8003f60 <APP_voidForward_RightTasks+0x108>)
 8003ef2:	7813      	ldrb	r3, [r2, #0]
 8003ef4:	f361 1306 	bfi	r3, r1, #4, #3
 8003ef8:	7013      	strb	r3, [r2, #0]
}
 8003efa:	e02e      	b.n	8003f5a <APP_voidForward_RightTasks+0x102>
				G_u16DataAfterProccing.Flag = 2;
 8003efc:	4a18      	ldr	r2, [pc, #96]	; (8003f60 <APP_voidForward_RightTasks+0x108>)
 8003efe:	7853      	ldrb	r3, [r2, #1]
 8003f00:	2102      	movs	r1, #2
 8003f02:	f361 0301 	bfi	r3, r1, #0, #2
 8003f06:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <APP_voidForward_RightTasks+0x118>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003f10:	b2d9      	uxtb	r1, r3
 8003f12:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <APP_voidForward_RightTasks+0x108>)
 8003f14:	7813      	ldrb	r3, [r2, #0]
 8003f16:	f361 0303 	bfi	r3, r1, #0, #4
 8003f1a:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 8003f1c:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <APP_voidForward_RightTasks+0x11c>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	b2d9      	uxtb	r1, r3
 8003f26:	4a0e      	ldr	r2, [pc, #56]	; (8003f60 <APP_voidForward_RightTasks+0x108>)
 8003f28:	7813      	ldrb	r3, [r2, #0]
 8003f2a:	f361 1306 	bfi	r3, r1, #4, #3
 8003f2e:	7013      	strb	r3, [r2, #0]
}
 8003f30:	e013      	b.n	8003f5a <APP_voidForward_RightTasks+0x102>
			G_u16DataAfterProccing.Flag = 0;
 8003f32:	4a0b      	ldr	r2, [pc, #44]	; (8003f60 <APP_voidForward_RightTasks+0x108>)
 8003f34:	7853      	ldrb	r3, [r2, #1]
 8003f36:	f36f 0301 	bfc	r3, #0, #2
 8003f3a:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <APP_voidForward_RightTasks+0x118>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003f44:	b2d9      	uxtb	r1, r3
 8003f46:	4a06      	ldr	r2, [pc, #24]	; (8003f60 <APP_voidForward_RightTasks+0x108>)
 8003f48:	7813      	ldrb	r3, [r2, #0]
 8003f4a:	f361 0303 	bfi	r3, r1, #0, #4
 8003f4e:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 8003f50:	4a03      	ldr	r2, [pc, #12]	; (8003f60 <APP_voidForward_RightTasks+0x108>)
 8003f52:	7813      	ldrb	r3, [r2, #0]
 8003f54:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003f58:	7013      	strb	r3, [r2, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	200001f0 	.word	0x200001f0
 8003f64:	200001e8 	.word	0x200001e8
 8003f68:	40240000 	.word	0x40240000
 8003f6c:	40340000 	.word	0x40340000
 8003f70:	200001e4 	.word	0x200001e4
 8003f74:	200000d8 	.word	0x200000d8

08003f78 <APP_voidForward_LeftTasks>:
void APP_voidForward_LeftTasks ()
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Forward_Left)
 8003f7c:	4a40      	ldr	r2, [pc, #256]	; (8004080 <APP_voidForward_LeftTasks+0x108>)
 8003f7e:	7813      	ldrb	r3, [r2, #0]
 8003f80:	2105      	movs	r1, #5
 8003f82:	f361 0303 	bfi	r3, r1, #0, #4
 8003f86:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Left  <= SO_SHORT_DISTANCE) // stop car
 8003f88:	4b3e      	ldr	r3, [pc, #248]	; (8004084 <APP_voidForward_LeftTasks+0x10c>)
 8003f8a:	789b      	ldrb	r3, [r3, #2]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fc fa31 	bl	80003f4 <__aeabi_i2d>
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	4b3c      	ldr	r3, [pc, #240]	; (8004088 <APP_voidForward_LeftTasks+0x110>)
 8003f98:	f7fc fd12 	bl	80009c0 <__aeabi_dcmple>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <APP_voidForward_LeftTasks+0x40>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8003fa2:	4a37      	ldr	r2, [pc, #220]	; (8004080 <APP_voidForward_LeftTasks+0x108>)
 8003fa4:	7813      	ldrb	r3, [r2, #0]
 8003fa6:	f36f 0303 	bfc	r3, #0, #4
 8003faa:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 8003fac:	4a34      	ldr	r2, [pc, #208]	; (8004080 <APP_voidForward_LeftTasks+0x108>)
 8003fae:	7853      	ldrb	r3, [r2, #1]
 8003fb0:	f043 0303 	orr.w	r3, r3, #3
 8003fb4:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 8003fb6:	e060      	b.n	800407a <APP_voidForward_LeftTasks+0x102>
		else if (G_xNear_Distance.Distance_Left <= UN_SAFE_DISTANCE) //Un Safed Distance
 8003fb8:	4b32      	ldr	r3, [pc, #200]	; (8004084 <APP_voidForward_LeftTasks+0x10c>)
 8003fba:	789b      	ldrb	r3, [r3, #2]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fc fa19 	bl	80003f4 <__aeabi_i2d>
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	4b31      	ldr	r3, [pc, #196]	; (800408c <APP_voidForward_LeftTasks+0x114>)
 8003fc8:	f7fc fcfa 	bl	80009c0 <__aeabi_dcmple>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d03f      	beq.n	8004052 <APP_voidForward_LeftTasks+0xda>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8003fd2:	4b2f      	ldr	r3, [pc, #188]	; (8004090 <APP_voidForward_LeftTasks+0x118>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b2d      	ldr	r3, [pc, #180]	; (8004094 <APP_voidForward_LeftTasks+0x11c>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	dc1a      	bgt.n	800401c <APP_voidForward_LeftTasks+0xa4>
				G_u16DataAfterProccing.Flag = 1;
 8003fe6:	4a26      	ldr	r2, [pc, #152]	; (8004080 <APP_voidForward_LeftTasks+0x108>)
 8003fe8:	7853      	ldrb	r3, [r2, #1]
 8003fea:	2101      	movs	r1, #1
 8003fec:	f361 0301 	bfi	r3, r1, #0, #2
 8003ff0:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003ff2:	4b27      	ldr	r3, [pc, #156]	; (8004090 <APP_voidForward_LeftTasks+0x118>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003ffa:	b2d9      	uxtb	r1, r3
 8003ffc:	4a20      	ldr	r2, [pc, #128]	; (8004080 <APP_voidForward_LeftTasks+0x108>)
 8003ffe:	7813      	ldrb	r3, [r2, #0]
 8004000:	f361 0303 	bfi	r3, r1, #0, #4
 8004004:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <APP_voidForward_LeftTasks+0x118>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800400e:	b2d9      	uxtb	r1, r3
 8004010:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <APP_voidForward_LeftTasks+0x108>)
 8004012:	7813      	ldrb	r3, [r2, #0]
 8004014:	f361 1306 	bfi	r3, r1, #4, #3
 8004018:	7013      	strb	r3, [r2, #0]
}
 800401a:	e02e      	b.n	800407a <APP_voidForward_LeftTasks+0x102>
				G_u16DataAfterProccing.Flag = 2;
 800401c:	4a18      	ldr	r2, [pc, #96]	; (8004080 <APP_voidForward_LeftTasks+0x108>)
 800401e:	7853      	ldrb	r3, [r2, #1]
 8004020:	2102      	movs	r1, #2
 8004022:	f361 0301 	bfi	r3, r1, #0, #2
 8004026:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <APP_voidForward_LeftTasks+0x118>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004030:	b2d9      	uxtb	r1, r3
 8004032:	4a13      	ldr	r2, [pc, #76]	; (8004080 <APP_voidForward_LeftTasks+0x108>)
 8004034:	7813      	ldrb	r3, [r2, #0]
 8004036:	f361 0303 	bfi	r3, r1, #0, #4
 800403a:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed;
 800403c:	4b15      	ldr	r3, [pc, #84]	; (8004094 <APP_voidForward_LeftTasks+0x11c>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	b2d9      	uxtb	r1, r3
 8004046:	4a0e      	ldr	r2, [pc, #56]	; (8004080 <APP_voidForward_LeftTasks+0x108>)
 8004048:	7813      	ldrb	r3, [r2, #0]
 800404a:	f361 1306 	bfi	r3, r1, #4, #3
 800404e:	7013      	strb	r3, [r2, #0]
}
 8004050:	e013      	b.n	800407a <APP_voidForward_LeftTasks+0x102>
			G_u16DataAfterProccing.Flag = 0;
 8004052:	4a0b      	ldr	r2, [pc, #44]	; (8004080 <APP_voidForward_LeftTasks+0x108>)
 8004054:	7853      	ldrb	r3, [r2, #1]
 8004056:	f36f 0301 	bfc	r3, #0, #2
 800405a:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <APP_voidForward_LeftTasks+0x118>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004064:	b2d9      	uxtb	r1, r3
 8004066:	4a06      	ldr	r2, [pc, #24]	; (8004080 <APP_voidForward_LeftTasks+0x108>)
 8004068:	7813      	ldrb	r3, [r2, #0]
 800406a:	f361 0303 	bfi	r3, r1, #0, #4
 800406e:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 8004070:	4a03      	ldr	r2, [pc, #12]	; (8004080 <APP_voidForward_LeftTasks+0x108>)
 8004072:	7813      	ldrb	r3, [r2, #0]
 8004074:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004078:	7013      	strb	r3, [r2, #0]
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	200001f0 	.word	0x200001f0
 8004084:	200001e8 	.word	0x200001e8
 8004088:	40240000 	.word	0x40240000
 800408c:	40340000 	.word	0x40340000
 8004090:	200001e4 	.word	0x200001e4
 8004094:	200000d8 	.word	0x200000d8

08004098 <UART_Task>:
		APP_G_u8V2VTxData = 0;
	}

}

void UART_Task(){
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0

		//process received massages
		//TODO send ACKs

	MUART_ReadData(&APP_G_u8DataFromUART);
 800409c:	4804      	ldr	r0, [pc, #16]	; (80040b0 <UART_Task+0x18>)
 800409e:	f7fe fe2d 	bl	8002cfc <MUART_ReadData>
	APP_Update_Distance();
 80040a2:	f7ff fc5d 	bl	8003960 <APP_Update_Distance>
	ProcessingFun();
 80040a6:	f000 f805 	bl	80040b4 <ProcessingFun>
		//send massages to Rasp
	//MUART_ErrorStatusTransmitData(UART1);

}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200001ec 	.word	0x200001ec

080040b4 <ProcessingFun>:


void ProcessingFun (void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
	u8 L_u8Data = APP_G_u8DataFromUART>>4;
 80040ba:	4bbf      	ldr	r3, [pc, #764]	; (80043b8 <ProcessingFun+0x304>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	71fb      	strb	r3, [r7, #7]
	/*Mapping data from UART*/

	switch (APP_G_u8DataFromUART)
 80040c2:	4bbd      	ldr	r3, [pc, #756]	; (80043b8 <ProcessingFun+0x304>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b58      	cmp	r3, #88	; 0x58
 80040c8:	f000 8096 	beq.w	80041f8 <ProcessingFun+0x144>
 80040cc:	2b58      	cmp	r3, #88	; 0x58
 80040ce:	dc16      	bgt.n	80040fe <ProcessingFun+0x4a>
 80040d0:	2b30      	cmp	r3, #48	; 0x30
 80040d2:	d053      	beq.n	800417c <ProcessingFun+0xc8>
 80040d4:	2b30      	cmp	r3, #48	; 0x30
 80040d6:	dc06      	bgt.n	80040e6 <ProcessingFun+0x32>
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d03b      	beq.n	8004154 <ProcessingFun+0xa0>
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d047      	beq.n	8004170 <ProcessingFun+0xbc>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d030      	beq.n	8004146 <ProcessingFun+0x92>
 80040e4:	e152      	b.n	800438c <ProcessingFun+0x2d8>
 80040e6:	2b48      	cmp	r3, #72	; 0x48
 80040e8:	d060      	beq.n	80041ac <ProcessingFun+0xf8>
 80040ea:	2b48      	cmp	r3, #72	; 0x48
 80040ec:	dc02      	bgt.n	80040f4 <ProcessingFun+0x40>
 80040ee:	2b40      	cmp	r3, #64	; 0x40
 80040f0:	d050      	beq.n	8004194 <ProcessingFun+0xe0>
 80040f2:	e14b      	b.n	800438c <ProcessingFun+0x2d8>
 80040f4:	2b4c      	cmp	r3, #76	; 0x4c
 80040f6:	d066      	beq.n	80041c6 <ProcessingFun+0x112>
 80040f8:	2b50      	cmp	r3, #80	; 0x50
 80040fa:	d071      	beq.n	80041e0 <ProcessingFun+0x12c>
 80040fc:	e146      	b.n	800438c <ProcessingFun+0x2d8>
 80040fe:	2b70      	cmp	r3, #112	; 0x70
 8004100:	f000 80ed 	beq.w	80042de <ProcessingFun+0x22a>
 8004104:	2b70      	cmp	r3, #112	; 0x70
 8004106:	dc0e      	bgt.n	8004126 <ProcessingFun+0x72>
 8004108:	2b60      	cmp	r3, #96	; 0x60
 800410a:	f000 808f 	beq.w	800422c <ProcessingFun+0x178>
 800410e:	2b60      	cmp	r3, #96	; 0x60
 8004110:	dc02      	bgt.n	8004118 <ProcessingFun+0x64>
 8004112:	2b5c      	cmp	r3, #92	; 0x5c
 8004114:	d07d      	beq.n	8004212 <ProcessingFun+0x15e>
 8004116:	e139      	b.n	800438c <ProcessingFun+0x2d8>
 8004118:	2b68      	cmp	r3, #104	; 0x68
 800411a:	f000 80a5 	beq.w	8004268 <ProcessingFun+0x1b4>
 800411e:	2b6c      	cmp	r3, #108	; 0x6c
 8004120:	f000 80c0 	beq.w	80042a4 <ProcessingFun+0x1f0>
 8004124:	e132      	b.n	800438c <ProcessingFun+0x2d8>
 8004126:	2b7c      	cmp	r3, #124	; 0x7c
 8004128:	f000 8113 	beq.w	8004352 <ProcessingFun+0x29e>
 800412c:	2b7c      	cmp	r3, #124	; 0x7c
 800412e:	dc03      	bgt.n	8004138 <ProcessingFun+0x84>
 8004130:	2b78      	cmp	r3, #120	; 0x78
 8004132:	f000 80f1 	beq.w	8004318 <ProcessingFun+0x264>
 8004136:	e129      	b.n	800438c <ProcessingFun+0x2d8>
 8004138:	2be8      	cmp	r3, #232	; 0xe8
 800413a:	f000 8143 	beq.w	80043c4 <ProcessingFun+0x310>
 800413e:	2bf0      	cmp	r3, #240	; 0xf0
 8004140:	f000 8142 	beq.w	80043c8 <ProcessingFun+0x314>
 8004144:	e122      	b.n	800438c <ProcessingFun+0x2d8>
	{
	case 0x0:
		G_xMy_Data.Direction = Go;
 8004146:	4a9d      	ldr	r2, [pc, #628]	; (80043bc <ProcessingFun+0x308>)
 8004148:	7813      	ldrb	r3, [r2, #0]
 800414a:	2108      	movs	r1, #8
 800414c:	f361 0303 	bfi	r3, r1, #0, #4
 8004150:	7013      	strb	r3, [r2, #0]
		break;
 8004152:	e13c      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x10: //forced stop
		G_xMy_Data.Direction = Stop;
 8004154:	4a99      	ldr	r2, [pc, #612]	; (80043bc <ProcessingFun+0x308>)
 8004156:	7813      	ldrb	r3, [r2, #0]
 8004158:	f36f 0303 	bfc	r3, #0, #4
 800415c:	7013      	strb	r3, [r2, #0]
		//TODO make it forced
		MOTOR_CounterClockWise(MOTOR_1, 0xff);
 800415e:	21ff      	movs	r1, #255	; 0xff
 8004160:	2001      	movs	r0, #1
 8004162:	f7fd fa5b 	bl	800161c <MOTOR_CounterClockWise>
		MSTK_voidSetBusyWait(1000);
 8004166:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800416a:	f7fd fbb1 	bl	80018d0 <MSTK_voidSetBusyWait>
		break;
 800416e:	e12e      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x20: //normal stop
		G_xMy_Data.Direction = Stop ;
 8004170:	4a92      	ldr	r2, [pc, #584]	; (80043bc <ProcessingFun+0x308>)
 8004172:	7813      	ldrb	r3, [r2, #0]
 8004174:	f36f 0303 	bfc	r3, #0, #4
 8004178:	7013      	strb	r3, [r2, #0]
		break;
 800417a:	e128      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x30:
		//GPIO_voidSetPinValue(2,5,1);
		G_xMy_Data.Direction = Go;
 800417c:	4a8f      	ldr	r2, [pc, #572]	; (80043bc <ProcessingFun+0x308>)
 800417e:	7813      	ldrb	r3, [r2, #0]
 8004180:	2108      	movs	r1, #8
 8004182:	f361 0303 	bfi	r3, r1, #0, #4
 8004186:	7013      	strb	r3, [r2, #0]
		G_xMy_Data.Speed = Speed7;
 8004188:	4a8c      	ldr	r2, [pc, #560]	; (80043bc <ProcessingFun+0x308>)
 800418a:	7813      	ldrb	r3, [r2, #0]
 800418c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004190:	7013      	strb	r3, [r2, #0]
		break;
 8004192:	e11c      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x40: //turn left extremely
		G_xMy_Data.Direction = Left;
 8004194:	4a89      	ldr	r2, [pc, #548]	; (80043bc <ProcessingFun+0x308>)
 8004196:	7813      	ldrb	r3, [r2, #0]
 8004198:	2103      	movs	r1, #3
 800419a:	f361 0303 	bfi	r3, r1, #0, #4
 800419e:	7013      	strb	r3, [r2, #0]
		G_xMy_Data.Speed = Speed7;
 80041a0:	4a86      	ldr	r2, [pc, #536]	; (80043bc <ProcessingFun+0x308>)
 80041a2:	7813      	ldrb	r3, [r2, #0]
 80041a4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80041a8:	7013      	strb	r3, [r2, #0]
		break;
 80041aa:	e110      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x48: //turn left normal (forward left)
		G_xMy_Data.Direction = Left;
 80041ac:	4a83      	ldr	r2, [pc, #524]	; (80043bc <ProcessingFun+0x308>)
 80041ae:	7813      	ldrb	r3, [r2, #0]
 80041b0:	2103      	movs	r1, #3
 80041b2:	f361 0303 	bfi	r3, r1, #0, #4
 80041b6:	7013      	strb	r3, [r2, #0]
		G_xMy_Data.Speed = Speed4;
 80041b8:	4a80      	ldr	r2, [pc, #512]	; (80043bc <ProcessingFun+0x308>)
 80041ba:	7813      	ldrb	r3, [r2, #0]
 80041bc:	2104      	movs	r1, #4
 80041be:	f361 1306 	bfi	r3, r1, #4, #3
 80041c2:	7013      	strb	r3, [r2, #0]
		break;
 80041c4:	e103      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x4c: //turn left slightly
		G_xMy_Data.Direction = Left;
 80041c6:	4a7d      	ldr	r2, [pc, #500]	; (80043bc <ProcessingFun+0x308>)
 80041c8:	7813      	ldrb	r3, [r2, #0]
 80041ca:	2103      	movs	r1, #3
 80041cc:	f361 0303 	bfi	r3, r1, #0, #4
 80041d0:	7013      	strb	r3, [r2, #0]
		//TODO make it slight
		G_xMy_Data.Speed = Speed1;
 80041d2:	4a7a      	ldr	r2, [pc, #488]	; (80043bc <ProcessingFun+0x308>)
 80041d4:	7813      	ldrb	r3, [r2, #0]
 80041d6:	2101      	movs	r1, #1
 80041d8:	f361 1306 	bfi	r3, r1, #4, #3
 80041dc:	7013      	strb	r3, [r2, #0]
		break;
 80041de:	e0f6      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x50: //turn Right extremely
		G_xMy_Data.Direction = Right;
 80041e0:	4a76      	ldr	r2, [pc, #472]	; (80043bc <ProcessingFun+0x308>)
 80041e2:	7813      	ldrb	r3, [r2, #0]
 80041e4:	2102      	movs	r1, #2
 80041e6:	f361 0303 	bfi	r3, r1, #0, #4
 80041ea:	7013      	strb	r3, [r2, #0]
		G_xMy_Data.Speed = Speed7;
 80041ec:	4a73      	ldr	r2, [pc, #460]	; (80043bc <ProcessingFun+0x308>)
 80041ee:	7813      	ldrb	r3, [r2, #0]
 80041f0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80041f4:	7013      	strb	r3, [r2, #0]
		break;
 80041f6:	e0ea      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x58: //turn Right normal (forward Right)
		G_xMy_Data.Direction = Right;
 80041f8:	4a70      	ldr	r2, [pc, #448]	; (80043bc <ProcessingFun+0x308>)
 80041fa:	7813      	ldrb	r3, [r2, #0]
 80041fc:	2102      	movs	r1, #2
 80041fe:	f361 0303 	bfi	r3, r1, #0, #4
 8004202:	7013      	strb	r3, [r2, #0]
		G_xMy_Data.Speed = Speed4;
 8004204:	4a6d      	ldr	r2, [pc, #436]	; (80043bc <ProcessingFun+0x308>)
 8004206:	7813      	ldrb	r3, [r2, #0]
 8004208:	2104      	movs	r1, #4
 800420a:	f361 1306 	bfi	r3, r1, #4, #3
 800420e:	7013      	strb	r3, [r2, #0]
		break;
 8004210:	e0dd      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x5c: //turn Right slightly
		G_xMy_Data.Direction = Forward_Right;
 8004212:	4a6a      	ldr	r2, [pc, #424]	; (80043bc <ProcessingFun+0x308>)
 8004214:	7813      	ldrb	r3, [r2, #0]
 8004216:	2104      	movs	r1, #4
 8004218:	f361 0303 	bfi	r3, r1, #0, #4
 800421c:	7013      	strb	r3, [r2, #0]
		//TODO make it slight
		G_xMy_Data.Speed = Speed1;
 800421e:	4a67      	ldr	r2, [pc, #412]	; (80043bc <ProcessingFun+0x308>)
 8004220:	7813      	ldrb	r3, [r2, #0]
 8004222:	2101      	movs	r1, #1
 8004224:	f361 1306 	bfi	r3, r1, #4, #3
 8004228:	7013      	strb	r3, [r2, #0]
		break;
 800422a:	e0d0      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x60: //Decrease speed greatly
		//TODO
		if(G_xMy_Data.Speed > 4){
 800422c:	4b63      	ldr	r3, [pc, #396]	; (80043bc <ProcessingFun+0x308>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b04      	cmp	r3, #4
 8004238:	d90f      	bls.n	800425a <ProcessingFun+0x1a6>
			G_xMy_Data.Speed -= 4;
 800423a:	4b60      	ldr	r3, [pc, #384]	; (80043bc <ProcessingFun+0x308>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	3b04      	subs	r3, #4
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	b2d9      	uxtb	r1, r3
 800424e:	4a5b      	ldr	r2, [pc, #364]	; (80043bc <ProcessingFun+0x308>)
 8004250:	7813      	ldrb	r3, [r2, #0]
 8004252:	f361 1306 	bfi	r3, r1, #4, #3
 8004256:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed1;
		}
		break;
 8004258:	e0b9      	b.n	80043ce <ProcessingFun+0x31a>
			G_xMy_Data.Speed = Speed1;
 800425a:	4a58      	ldr	r2, [pc, #352]	; (80043bc <ProcessingFun+0x308>)
 800425c:	7813      	ldrb	r3, [r2, #0]
 800425e:	2101      	movs	r1, #1
 8004260:	f361 1306 	bfi	r3, r1, #4, #3
 8004264:	7013      	strb	r3, [r2, #0]
		break;
 8004266:	e0b2      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x68: //Decrease speed
		//TODO
		if(G_xMy_Data.Speed > 2){
 8004268:	4b54      	ldr	r3, [pc, #336]	; (80043bc <ProcessingFun+0x308>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d90f      	bls.n	8004296 <ProcessingFun+0x1e2>
			G_xMy_Data.Speed -= 2;
 8004276:	4b51      	ldr	r3, [pc, #324]	; (80043bc <ProcessingFun+0x308>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	3b02      	subs	r3, #2
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	b2d9      	uxtb	r1, r3
 800428a:	4a4c      	ldr	r2, [pc, #304]	; (80043bc <ProcessingFun+0x308>)
 800428c:	7813      	ldrb	r3, [r2, #0]
 800428e:	f361 1306 	bfi	r3, r1, #4, #3
 8004292:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed1;
		}
		break;
 8004294:	e09b      	b.n	80043ce <ProcessingFun+0x31a>
			G_xMy_Data.Speed = Speed1;
 8004296:	4a49      	ldr	r2, [pc, #292]	; (80043bc <ProcessingFun+0x308>)
 8004298:	7813      	ldrb	r3, [r2, #0]
 800429a:	2101      	movs	r1, #1
 800429c:	f361 1306 	bfi	r3, r1, #4, #3
 80042a0:	7013      	strb	r3, [r2, #0]
		break;
 80042a2:	e094      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x6c: //Decrease speed lightly
		//TODO
		if(G_xMy_Data.Speed > 1){
 80042a4:	4b45      	ldr	r3, [pc, #276]	; (80043bc <ProcessingFun+0x308>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d90f      	bls.n	80042d2 <ProcessingFun+0x21e>
			G_xMy_Data.Speed -= 1;
 80042b2:	4b42      	ldr	r3, [pc, #264]	; (80043bc <ProcessingFun+0x308>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	b2d9      	uxtb	r1, r3
 80042c6:	4a3d      	ldr	r2, [pc, #244]	; (80043bc <ProcessingFun+0x308>)
 80042c8:	7813      	ldrb	r3, [r2, #0]
 80042ca:	f361 1306 	bfi	r3, r1, #4, #3
 80042ce:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Direction = Stop;
		}
		break;
 80042d0:	e07d      	b.n	80043ce <ProcessingFun+0x31a>
			G_xMy_Data.Direction = Stop;
 80042d2:	4a3a      	ldr	r2, [pc, #232]	; (80043bc <ProcessingFun+0x308>)
 80042d4:	7813      	ldrb	r3, [r2, #0]
 80042d6:	f36f 0303 	bfc	r3, #0, #4
 80042da:	7013      	strb	r3, [r2, #0]
		break;
 80042dc:	e077      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x70: //Increase speed greatly
		//TODO
		if(G_xMy_Data.Speed < 4){
 80042de:	4b37      	ldr	r3, [pc, #220]	; (80043bc <ProcessingFun+0x308>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d80f      	bhi.n	800430c <ProcessingFun+0x258>
			G_xMy_Data.Speed += 4;
 80042ec:	4b33      	ldr	r3, [pc, #204]	; (80043bc <ProcessingFun+0x308>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	3304      	adds	r3, #4
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	b2d9      	uxtb	r1, r3
 8004300:	4a2e      	ldr	r2, [pc, #184]	; (80043bc <ProcessingFun+0x308>)
 8004302:	7813      	ldrb	r3, [r2, #0]
 8004304:	f361 1306 	bfi	r3, r1, #4, #3
 8004308:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed7;
		}
		break;
 800430a:	e060      	b.n	80043ce <ProcessingFun+0x31a>
			G_xMy_Data.Speed = Speed7;
 800430c:	4a2b      	ldr	r2, [pc, #172]	; (80043bc <ProcessingFun+0x308>)
 800430e:	7813      	ldrb	r3, [r2, #0]
 8004310:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004314:	7013      	strb	r3, [r2, #0]
		break;
 8004316:	e05a      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x78: //Increase speed
		//TODO
		if(G_xMy_Data.Speed < 6){
 8004318:	4b28      	ldr	r3, [pc, #160]	; (80043bc <ProcessingFun+0x308>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b05      	cmp	r3, #5
 8004324:	d80f      	bhi.n	8004346 <ProcessingFun+0x292>
			G_xMy_Data.Speed += 2;
 8004326:	4b25      	ldr	r3, [pc, #148]	; (80043bc <ProcessingFun+0x308>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	3302      	adds	r3, #2
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	b2d9      	uxtb	r1, r3
 800433a:	4a20      	ldr	r2, [pc, #128]	; (80043bc <ProcessingFun+0x308>)
 800433c:	7813      	ldrb	r3, [r2, #0]
 800433e:	f361 1306 	bfi	r3, r1, #4, #3
 8004342:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed7;
		}
		break;
 8004344:	e043      	b.n	80043ce <ProcessingFun+0x31a>
			G_xMy_Data.Speed = Speed7;
 8004346:	4a1d      	ldr	r2, [pc, #116]	; (80043bc <ProcessingFun+0x308>)
 8004348:	7813      	ldrb	r3, [r2, #0]
 800434a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800434e:	7013      	strb	r3, [r2, #0]
		break;
 8004350:	e03d      	b.n	80043ce <ProcessingFun+0x31a>
	case 0x7c: //Increase speed lightly
		//TODO
		if(G_xMy_Data.Speed != Speed7){
 8004352:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <ProcessingFun+0x308>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b70      	cmp	r3, #112	; 0x70
 800435e:	d00f      	beq.n	8004380 <ProcessingFun+0x2cc>
			G_xMy_Data.Speed += 1;
 8004360:	4b16      	ldr	r3, [pc, #88]	; (80043bc <ProcessingFun+0x308>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004368:	b2db      	uxtb	r3, r3
 800436a:	3301      	adds	r3, #1
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	b2d9      	uxtb	r1, r3
 8004374:	4a11      	ldr	r2, [pc, #68]	; (80043bc <ProcessingFun+0x308>)
 8004376:	7813      	ldrb	r3, [r2, #0]
 8004378:	f361 1306 	bfi	r3, r1, #4, #3
 800437c:	7013      	strb	r3, [r2, #0]
		}else{
			G_xMy_Data.Speed = Speed7;
		}
		break;
 800437e:	e026      	b.n	80043ce <ProcessingFun+0x31a>
			G_xMy_Data.Speed = Speed7;
 8004380:	4a0e      	ldr	r2, [pc, #56]	; (80043bc <ProcessingFun+0x308>)
 8004382:	7813      	ldrb	r3, [r2, #0]
 8004384:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004388:	7013      	strb	r3, [r2, #0]
		break;
 800438a:	e020      	b.n	80043ce <ProcessingFun+0x31a>
		//TODO
		//error in ACK(ACK sent is invalid)
		//retransmition (receive data)
		break;
	default:
		switch(L_u8Data){
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	3b08      	subs	r3, #8
 8004390:	2b06      	cmp	r3, #6
 8004392:	d81b      	bhi.n	80043cc <ProcessingFun+0x318>
 8004394:	a201      	add	r2, pc, #4	; (adr r2, 800439c <ProcessingFun+0x2e8>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	080043c1 	.word	0x080043c1
 80043a0:	080043c1 	.word	0x080043c1
 80043a4:	080043c1 	.word	0x080043c1
 80043a8:	080043c1 	.word	0x080043c1
 80043ac:	080043cd 	.word	0x080043cd
 80043b0:	080043cd 	.word	0x080043cd
 80043b4:	080043c1 	.word	0x080043c1
 80043b8:	200001ec 	.word	0x200001ec
 80043bc:	200001e4 	.word	0x200001e4
		case 0x8:
			//TODO
			//There is a bump with distance
			//distance = APP_G_u8DataFromUART & 0xF

			break;
 80043c0:	bf00      	nop
			//request code x is valid
			//x = APP_G_u8DataFromUART & 0x7
			break;
		}

		break;
 80043c2:	e003      	b.n	80043cc <ProcessingFun+0x318>
		break;
 80043c4:	bf00      	nop
 80043c6:	e002      	b.n	80043ce <ProcessingFun+0x31a>
		break;
 80043c8:	bf00      	nop
 80043ca:	e000      	b.n	80043ce <ProcessingFun+0x31a>
		break;
 80043cc:	bf00      	nop
	}

	G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 80043ce:	4b27      	ldr	r3, [pc, #156]	; (800446c <ProcessingFun+0x3b8>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80043d6:	b2d9      	uxtb	r1, r3
 80043d8:	4a25      	ldr	r2, [pc, #148]	; (8004470 <ProcessingFun+0x3bc>)
 80043da:	7813      	ldrb	r3, [r2, #0]
 80043dc:	f361 0303 	bfi	r3, r1, #0, #4
 80043e0:	7013      	strb	r3, [r2, #0]
	G_u16DataAfterProccing.Speed = G_xMy_Data.Speed;
 80043e2:	4b22      	ldr	r3, [pc, #136]	; (800446c <ProcessingFun+0x3b8>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80043ea:	b2d9      	uxtb	r1, r3
 80043ec:	4a20      	ldr	r2, [pc, #128]	; (8004470 <ProcessingFun+0x3bc>)
 80043ee:	7813      	ldrb	r3, [r2, #0]
 80043f0:	f361 1306 	bfi	r3, r1, #4, #3
 80043f4:	7013      	strb	r3, [r2, #0]
	switch(G_xMy_Data.Direction){
 80043f6:	4b1d      	ldr	r3, [pc, #116]	; (800446c <ProcessingFun+0x3b8>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b08      	cmp	r3, #8
 8004402:	d82d      	bhi.n	8004460 <ProcessingFun+0x3ac>
 8004404:	a201      	add	r2, pc, #4	; (adr r2, 800440c <ProcessingFun+0x358>)
 8004406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440a:	bf00      	nop
 800440c:	08004437 	.word	0x08004437
 8004410:	0800443d 	.word	0x0800443d
 8004414:	0800445b 	.word	0x0800445b
 8004418:	0800445b 	.word	0x0800445b
 800441c:	0800444f 	.word	0x0800444f
 8004420:	08004455 	.word	0x08004455
 8004424:	08004443 	.word	0x08004443
 8004428:	08004449 	.word	0x08004449
 800442c:	08004431 	.word	0x08004431
	case Go:
		APP_voidGoTasks();
 8004430:	f7ff fac8 	bl	80039c4 <APP_voidGoTasks>
		break;
 8004434:	e015      	b.n	8004462 <ProcessingFun+0x3ae>
	case Stop:
		APP_VoidStop();
 8004436:	f7ff faaf 	bl	8003998 <APP_VoidStop>
		break;
 800443a:	e012      	b.n	8004462 <ProcessingFun+0x3ae>
	case Back:
		APP_voidBackTasks();
 800443c:	f7ff fb56 	bl	8003aec <APP_voidBackTasks>
		break;
 8004440:	e00f      	b.n	8004462 <ProcessingFun+0x3ae>
	case Backward_Right:
		APP_voidBackward_RightTasks();
 8004442:	f7ff fbe3 	bl	8003c0c <APP_voidBackward_RightTasks>
		break;
 8004446:	e00c      	b.n	8004462 <ProcessingFun+0x3ae>
	case Backward_Left:
		APP_voidBackward_LEFTTasks();
 8004448:	f7ff fc70 	bl	8003d2c <APP_voidBackward_LEFTTasks>
		break;
 800444c:	e009      	b.n	8004462 <ProcessingFun+0x3ae>
	case Forward_Right:
		APP_voidForward_RightTasks();
 800444e:	f7ff fd03 	bl	8003e58 <APP_voidForward_RightTasks>
		break;
 8004452:	e006      	b.n	8004462 <ProcessingFun+0x3ae>
	case Forward_Left:
		APP_voidForward_LeftTasks();
 8004454:	f7ff fd90 	bl	8003f78 <APP_voidForward_LeftTasks>
		break;
 8004458:	e003      	b.n	8004462 <ProcessingFun+0x3ae>
	case Right:
	case Left:
		APP_voidRight_LeftTasks();
 800445a:	f7ff fcf7 	bl	8003e4c <APP_voidRight_LeftTasks>
		break;
 800445e:	e000      	b.n	8004462 <ProcessingFun+0x3ae>
	default:
		//do nothing
		break;
 8004460:	bf00      	nop
	}
	return;
 8004462:	bf00      	nop
}
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200001e4 	.word	0x200001e4
 8004470:	200001f0 	.word	0x200001f0

08004474 <APP_Direction_Control>:

void APP_Direction_Control()
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
	u8  L_u16Speed = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	71fb      	strb	r3, [r7, #7]
	u8  L_u8Direction = 0 ;
 800447e:	2300      	movs	r3, #0
 8004480:	71bb      	strb	r3, [r7, #6]
	u8  L_u8Flag = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	717b      	strb	r3, [r7, #5]

	L_u8Direction = G_u16DataAfterProccing.Direction;
 8004486:	4b61      	ldr	r3, [pc, #388]	; (800460c <APP_Direction_Control+0x198>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800448e:	b2db      	uxtb	r3, r3
 8004490:	71bb      	strb	r3, [r7, #6]
			/*Encoding received data and take Speed (first 4bits)*/
	L_u16Speed = G_u16DataAfterProccing.Speed;
 8004492:	4b5e      	ldr	r3, [pc, #376]	; (800460c <APP_Direction_Control+0x198>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800449a:	b2db      	uxtb	r3, r3
 800449c:	71fb      	strb	r3, [r7, #7]
			/*Encoding received data and take Flag (last bit)*/
	L_u8Flag = G_u16DataAfterProccing.Flag;
 800449e:	4b5b      	ldr	r3, [pc, #364]	; (800460c <APP_Direction_Control+0x198>)
 80044a0:	785b      	ldrb	r3, [r3, #1]
 80044a2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	717b      	strb	r3, [r7, #5]

	if(L_Previous_speed != L_u16Speed || L_Previous_Direction != L_u8Direction)
 80044aa:	4b59      	ldr	r3, [pc, #356]	; (8004610 <APP_Direction_Control+0x19c>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	79fa      	ldrb	r2, [r7, #7]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d105      	bne.n	80044c0 <APP_Direction_Control+0x4c>
 80044b4:	4b57      	ldr	r3, [pc, #348]	; (8004614 <APP_Direction_Control+0x1a0>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	79ba      	ldrb	r2, [r7, #6]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	f000 80a1 	beq.w	8004602 <APP_Direction_Control+0x18e>
	{
		L_Previous_speed = L_u16Speed;
 80044c0:	4a53      	ldr	r2, [pc, #332]	; (8004610 <APP_Direction_Control+0x19c>)
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	7013      	strb	r3, [r2, #0]
		L_Previous_Direction = L_u8Direction;
 80044c6:	4a53      	ldr	r2, [pc, #332]	; (8004614 <APP_Direction_Control+0x1a0>)
 80044c8:	79bb      	ldrb	r3, [r7, #6]
 80044ca:	7013      	strb	r3, [r2, #0]


		if (L_u8Direction == Stop){
 80044cc:	79bb      	ldrb	r3, [r7, #6]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10e      	bne.n	80044f0 <APP_Direction_Control+0x7c>
			GPIO_voidSetPinValue(2,5,0);
 80044d2:	2200      	movs	r2, #0
 80044d4:	2105      	movs	r1, #5
 80044d6:	2002      	movs	r0, #2
 80044d8:	f7fc fef4 	bl	80012c4 <GPIO_voidSetPinValue>
			MOTOR_Stop(MOTOR_1) ;
 80044dc:	2001      	movs	r0, #1
 80044de:	f7fd f911 	bl	8001704 <MOTOR_Stop>
			MOTOR_Stop(MOTOR_2) ;
 80044e2:	2002      	movs	r0, #2
 80044e4:	f7fd f90e 	bl	8001704 <MOTOR_Stop>
			MSTK_voidSetBusyWait(1000000);
 80044e8:	484b      	ldr	r0, [pc, #300]	; (8004618 <APP_Direction_Control+0x1a4>)
 80044ea:	f7fd f9f1 	bl	80018d0 <MSTK_voidSetBusyWait>
				MSTK_voidSetBusyWait(1000000);
			}
		}
	}

}
 80044ee:	e088      	b.n	8004602 <APP_Direction_Control+0x18e>
			L_u16Speed = (0Xff<<G_xMy_Data.Speed) + 0xf0;
 80044f0:	4b4a      	ldr	r3, [pc, #296]	; (800461c <APP_Direction_Control+0x1a8>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	23ff      	movs	r3, #255	; 0xff
 80044fe:	4093      	lsls	r3, r2
 8004500:	b2db      	uxtb	r3, r3
 8004502:	3b10      	subs	r3, #16
 8004504:	71fb      	strb	r3, [r7, #7]
			if (L_u8Direction == Go)  //Forward direction
 8004506:	79bb      	ldrb	r3, [r7, #6]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d10f      	bne.n	800452c <APP_Direction_Control+0xb8>
				MOTOR_CounterClockWise(MOTOR_1 , L_u16Speed) ;
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	b29b      	uxth	r3, r3
 8004510:	4619      	mov	r1, r3
 8004512:	2001      	movs	r0, #1
 8004514:	f7fd f882 	bl	800161c <MOTOR_CounterClockWise>
				MOTOR_CounterClockWise(MOTOR_2 , L_u16Speed) ;
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	b29b      	uxth	r3, r3
 800451c:	4619      	mov	r1, r3
 800451e:	2002      	movs	r0, #2
 8004520:	f7fd f87c 	bl	800161c <MOTOR_CounterClockWise>
				MSTK_voidSetBusyWait(1000000);
 8004524:	483c      	ldr	r0, [pc, #240]	; (8004618 <APP_Direction_Control+0x1a4>)
 8004526:	f7fd f9d3 	bl	80018d0 <MSTK_voidSetBusyWait>
}
 800452a:	e06a      	b.n	8004602 <APP_Direction_Control+0x18e>
			else if (L_u8Direction == Back)  //Backward direction
 800452c:	79bb      	ldrb	r3, [r7, #6]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d10f      	bne.n	8004552 <APP_Direction_Control+0xde>
				MOTOR_ClockWise(MOTOR_1 , L_u16Speed) ;
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	b29b      	uxth	r3, r3
 8004536:	4619      	mov	r1, r3
 8004538:	2001      	movs	r0, #1
 800453a:	f7fd f8a9 	bl	8001690 <MOTOR_ClockWise>
				MOTOR_ClockWise(MOTOR_2 , L_u16Speed) ;
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	b29b      	uxth	r3, r3
 8004542:	4619      	mov	r1, r3
 8004544:	2002      	movs	r0, #2
 8004546:	f7fd f8a3 	bl	8001690 <MOTOR_ClockWise>
				MSTK_voidSetBusyWait(1000000);
 800454a:	4833      	ldr	r0, [pc, #204]	; (8004618 <APP_Direction_Control+0x1a4>)
 800454c:	f7fd f9c0 	bl	80018d0 <MSTK_voidSetBusyWait>
}
 8004550:	e057      	b.n	8004602 <APP_Direction_Control+0x18e>
			else if (L_u8Direction == Right)  //Right direction
 8004552:	79bb      	ldrb	r3, [r7, #6]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d10c      	bne.n	8004572 <APP_Direction_Control+0xfe>
				MOTOR_Stop(MOTOR_1) ;
 8004558:	2001      	movs	r0, #1
 800455a:	f7fd f8d3 	bl	8001704 <MOTOR_Stop>
				MOTOR_ClockWise(MOTOR_2 , L_u16Speed) ;
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	b29b      	uxth	r3, r3
 8004562:	4619      	mov	r1, r3
 8004564:	2002      	movs	r0, #2
 8004566:	f7fd f893 	bl	8001690 <MOTOR_ClockWise>
				MSTK_voidSetBusyWait(1000000);
 800456a:	482b      	ldr	r0, [pc, #172]	; (8004618 <APP_Direction_Control+0x1a4>)
 800456c:	f7fd f9b0 	bl	80018d0 <MSTK_voidSetBusyWait>
}
 8004570:	e047      	b.n	8004602 <APP_Direction_Control+0x18e>
			else if (L_u8Direction == Left)  //Left direction
 8004572:	79bb      	ldrb	r3, [r7, #6]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d109      	bne.n	800458c <APP_Direction_Control+0x118>
				MOTOR_ClockWise(MOTOR_1 , L_u16Speed) ;
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	b29b      	uxth	r3, r3
 800457c:	4619      	mov	r1, r3
 800457e:	2001      	movs	r0, #1
 8004580:	f7fd f886 	bl	8001690 <MOTOR_ClockWise>
				MOTOR_Stop(MOTOR_2) ;
 8004584:	2002      	movs	r0, #2
 8004586:	f7fd f8bd 	bl	8001704 <MOTOR_Stop>
}
 800458a:	e03a      	b.n	8004602 <APP_Direction_Control+0x18e>
			else if (L_u8Direction == Forward_Right)  //forward right
 800458c:	79bb      	ldrb	r3, [r7, #6]
 800458e:	2b04      	cmp	r3, #4
 8004590:	d10b      	bne.n	80045aa <APP_Direction_Control+0x136>
				MOTOR_ClockWise(MOTOR_1 , 0xa) ;
 8004592:	210a      	movs	r1, #10
 8004594:	2001      	movs	r0, #1
 8004596:	f7fd f87b 	bl	8001690 <MOTOR_ClockWise>
				MOTOR_ClockWise(MOTOR_2 , 0xc) ;
 800459a:	210c      	movs	r1, #12
 800459c:	2002      	movs	r0, #2
 800459e:	f7fd f877 	bl	8001690 <MOTOR_ClockWise>
				MSTK_voidSetBusyWait(1000000);
 80045a2:	481d      	ldr	r0, [pc, #116]	; (8004618 <APP_Direction_Control+0x1a4>)
 80045a4:	f7fd f994 	bl	80018d0 <MSTK_voidSetBusyWait>
}
 80045a8:	e02b      	b.n	8004602 <APP_Direction_Control+0x18e>
			else if (L_u8Direction == Forward_Left)  //forward left
 80045aa:	79bb      	ldrb	r3, [r7, #6]
 80045ac:	2b05      	cmp	r3, #5
 80045ae:	d10b      	bne.n	80045c8 <APP_Direction_Control+0x154>
				MOTOR_ClockWise(MOTOR_1 , 0xa) ;
 80045b0:	210a      	movs	r1, #10
 80045b2:	2001      	movs	r0, #1
 80045b4:	f7fd f86c 	bl	8001690 <MOTOR_ClockWise>
				MOTOR_ClockWise(MOTOR_2 , 0xc) ;
 80045b8:	210c      	movs	r1, #12
 80045ba:	2002      	movs	r0, #2
 80045bc:	f7fd f868 	bl	8001690 <MOTOR_ClockWise>
				MSTK_voidSetBusyWait(1000000);
 80045c0:	4815      	ldr	r0, [pc, #84]	; (8004618 <APP_Direction_Control+0x1a4>)
 80045c2:	f7fd f985 	bl	80018d0 <MSTK_voidSetBusyWait>
}
 80045c6:	e01c      	b.n	8004602 <APP_Direction_Control+0x18e>
			else if (L_u8Direction == Backward_Right)  //backward right
 80045c8:	79bb      	ldrb	r3, [r7, #6]
 80045ca:	2b06      	cmp	r3, #6
 80045cc:	d10b      	bne.n	80045e6 <APP_Direction_Control+0x172>
				MOTOR_CounterClockWise(MOTOR_1 , 0xa) ;
 80045ce:	210a      	movs	r1, #10
 80045d0:	2001      	movs	r0, #1
 80045d2:	f7fd f823 	bl	800161c <MOTOR_CounterClockWise>
				MOTOR_CounterClockWise(MOTOR_2 , 0xc) ;
 80045d6:	210c      	movs	r1, #12
 80045d8:	2002      	movs	r0, #2
 80045da:	f7fd f81f 	bl	800161c <MOTOR_CounterClockWise>
				MSTK_voidSetBusyWait(1000000);
 80045de:	480e      	ldr	r0, [pc, #56]	; (8004618 <APP_Direction_Control+0x1a4>)
 80045e0:	f7fd f976 	bl	80018d0 <MSTK_voidSetBusyWait>
}
 80045e4:	e00d      	b.n	8004602 <APP_Direction_Control+0x18e>
			else if (L_u8Direction == Backward_Left)  //backward left
 80045e6:	79bb      	ldrb	r3, [r7, #6]
 80045e8:	2b07      	cmp	r3, #7
 80045ea:	d10a      	bne.n	8004602 <APP_Direction_Control+0x18e>
				MOTOR_CounterClockWise(MOTOR_1 , 0xa) ;
 80045ec:	210a      	movs	r1, #10
 80045ee:	2001      	movs	r0, #1
 80045f0:	f7fd f814 	bl	800161c <MOTOR_CounterClockWise>
				MOTOR_CounterClockWise(MOTOR_2 , 0xc) ;
 80045f4:	210c      	movs	r1, #12
 80045f6:	2002      	movs	r0, #2
 80045f8:	f7fd f810 	bl	800161c <MOTOR_CounterClockWise>
				MSTK_voidSetBusyWait(1000000);
 80045fc:	4806      	ldr	r0, [pc, #24]	; (8004618 <APP_Direction_Control+0x1a4>)
 80045fe:	f7fd f967 	bl	80018d0 <MSTK_voidSetBusyWait>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	200001f0 	.word	0x200001f0
 8004610:	200001e0 	.word	0x200001e0
 8004614:	200001e1 	.word	0x200001e1
 8004618:	000f4240 	.word	0x000f4240
 800461c:	200001e4 	.word	0x200001e4

08004620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004624:	bf00      	nop
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004630:	e7fe      	b.n	8004630 <HardFault_Handler+0x4>

08004632 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004632:	b480      	push	{r7}
 8004634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004636:	e7fe      	b.n	8004636 <MemManage_Handler+0x4>

08004638 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800463c:	e7fe      	b.n	800463c <BusFault_Handler+0x4>

0800463e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800463e:	b480      	push	{r7}
 8004640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004642:	e7fe      	b.n	8004642 <UsageFault_Handler+0x4>

08004644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004648:	bf00      	nop
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004660:	bf00      	nop
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr

08004668 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr

08004674 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004674:	480c      	ldr	r0, [pc, #48]	; (80046a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004676:	490d      	ldr	r1, [pc, #52]	; (80046ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004678:	4a0d      	ldr	r2, [pc, #52]	; (80046b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800467a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800467c:	e002      	b.n	8004684 <LoopCopyDataInit>

0800467e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800467e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004682:	3304      	adds	r3, #4

08004684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004688:	d3f9      	bcc.n	800467e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800468a:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800468c:	4c0a      	ldr	r4, [pc, #40]	; (80046b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800468e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004690:	e001      	b.n	8004696 <LoopFillZerobss>

08004692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004694:	3204      	adds	r2, #4

08004696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004698:	d3fb      	bcc.n	8004692 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800469a:	f7ff ffe5 	bl	8004668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800469e:	f000 f80f 	bl	80046c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80046a2:	f7ff f949 	bl	8003938 <main>
  bx lr
 80046a6:	4770      	bx	lr
  ldr r0, =_sdata
 80046a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046ac:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80046b0:	08004730 	.word	0x08004730
  ldr r2, =_sbss
 80046b4:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80046b8:	200002c4 	.word	0x200002c4

080046bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046bc:	e7fe      	b.n	80046bc <ADC1_2_IRQHandler>
	...

080046c0 <__libc_init_array>:
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	2500      	movs	r5, #0
 80046c4:	4e0c      	ldr	r6, [pc, #48]	; (80046f8 <__libc_init_array+0x38>)
 80046c6:	4c0d      	ldr	r4, [pc, #52]	; (80046fc <__libc_init_array+0x3c>)
 80046c8:	1ba4      	subs	r4, r4, r6
 80046ca:	10a4      	asrs	r4, r4, #2
 80046cc:	42a5      	cmp	r5, r4
 80046ce:	d109      	bne.n	80046e4 <__libc_init_array+0x24>
 80046d0:	f000 f81a 	bl	8004708 <_init>
 80046d4:	2500      	movs	r5, #0
 80046d6:	4e0a      	ldr	r6, [pc, #40]	; (8004700 <__libc_init_array+0x40>)
 80046d8:	4c0a      	ldr	r4, [pc, #40]	; (8004704 <__libc_init_array+0x44>)
 80046da:	1ba4      	subs	r4, r4, r6
 80046dc:	10a4      	asrs	r4, r4, #2
 80046de:	42a5      	cmp	r5, r4
 80046e0:	d105      	bne.n	80046ee <__libc_init_array+0x2e>
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
 80046e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046e8:	4798      	blx	r3
 80046ea:	3501      	adds	r5, #1
 80046ec:	e7ee      	b.n	80046cc <__libc_init_array+0xc>
 80046ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046f2:	4798      	blx	r3
 80046f4:	3501      	adds	r5, #1
 80046f6:	e7f2      	b.n	80046de <__libc_init_array+0x1e>
 80046f8:	08004728 	.word	0x08004728
 80046fc:	08004728 	.word	0x08004728
 8004700:	08004728 	.word	0x08004728
 8004704:	0800472c 	.word	0x0800472c

08004708 <_init>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	bf00      	nop
 800470c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470e:	bc08      	pop	{r3}
 8004710:	469e      	mov	lr, r3
 8004712:	4770      	bx	lr

08004714 <_fini>:
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	bf00      	nop
 8004718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471a:	bc08      	pop	{r3}
 800471c:	469e      	mov	lr, r3
 800471e:	4770      	bx	lr
