
bluebil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042fc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800440c  0800440c  000060dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800440c  0800440c  000060dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800440c  0800440c  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004414  08004414  000060dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004414  08004414  00005414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004418  08004418  00005418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800441c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200000dc  080044f8  000060dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080044f8  000061fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a26  00000000  00000000  00006105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001083  00000000  00000000  00008b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000480  00000000  00000000  00009bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000324  00000000  00000000  0000a030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024a0  00000000  00000000  0000a354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000039a6  00000000  00000000  0000c7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f3e  00000000  00000000  0001019a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000940d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000104c  00000000  00000000  0009411c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00095168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000dc 	.word	0x200000dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080043f4 	.word	0x080043f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000e0 	.word	0x200000e0
 800014c:	080043f4 	.word	0x080043f4

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_frsub>:
 800075c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000760:	e002      	b.n	8000768 <__addsf3>
 8000762:	bf00      	nop

08000764 <__aeabi_fsub>:
 8000764:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000768 <__addsf3>:
 8000768:	0042      	lsls	r2, r0, #1
 800076a:	bf1f      	itttt	ne
 800076c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000770:	ea92 0f03 	teqne	r2, r3
 8000774:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000778:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077c:	d06a      	beq.n	8000854 <__addsf3+0xec>
 800077e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000782:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000786:	bfc1      	itttt	gt
 8000788:	18d2      	addgt	r2, r2, r3
 800078a:	4041      	eorgt	r1, r0
 800078c:	4048      	eorgt	r0, r1
 800078e:	4041      	eorgt	r1, r0
 8000790:	bfb8      	it	lt
 8000792:	425b      	neglt	r3, r3
 8000794:	2b19      	cmp	r3, #25
 8000796:	bf88      	it	hi
 8000798:	4770      	bxhi	lr
 800079a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800079e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80007a6:	bf18      	it	ne
 80007a8:	4240      	negne	r0, r0
 80007aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80007b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4249      	negne	r1, r1
 80007ba:	ea92 0f03 	teq	r2, r3
 80007be:	d03f      	beq.n	8000840 <__addsf3+0xd8>
 80007c0:	f1a2 0201 	sub.w	r2, r2, #1
 80007c4:	fa41 fc03 	asr.w	ip, r1, r3
 80007c8:	eb10 000c 	adds.w	r0, r0, ip
 80007cc:	f1c3 0320 	rsb	r3, r3, #32
 80007d0:	fa01 f103 	lsl.w	r1, r1, r3
 80007d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	d502      	bpl.n	80007e0 <__addsf3+0x78>
 80007da:	4249      	negs	r1, r1
 80007dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007e4:	d313      	bcc.n	800080e <__addsf3+0xa6>
 80007e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007ea:	d306      	bcc.n	80007fa <__addsf3+0x92>
 80007ec:	0840      	lsrs	r0, r0, #1
 80007ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f2:	f102 0201 	add.w	r2, r2, #1
 80007f6:	2afe      	cmp	r2, #254	@ 0xfe
 80007f8:	d251      	bcs.n	800089e <__addsf3+0x136>
 80007fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000802:	bf08      	it	eq
 8000804:	f020 0001 	biceq.w	r0, r0, #1
 8000808:	ea40 0003 	orr.w	r0, r0, r3
 800080c:	4770      	bx	lr
 800080e:	0049      	lsls	r1, r1, #1
 8000810:	eb40 0000 	adc.w	r0, r0, r0
 8000814:	3a01      	subs	r2, #1
 8000816:	bf28      	it	cs
 8000818:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800081c:	d2ed      	bcs.n	80007fa <__addsf3+0x92>
 800081e:	fab0 fc80 	clz	ip, r0
 8000822:	f1ac 0c08 	sub.w	ip, ip, #8
 8000826:	ebb2 020c 	subs.w	r2, r2, ip
 800082a:	fa00 f00c 	lsl.w	r0, r0, ip
 800082e:	bfaa      	itet	ge
 8000830:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000834:	4252      	neglt	r2, r2
 8000836:	4318      	orrge	r0, r3
 8000838:	bfbc      	itt	lt
 800083a:	40d0      	lsrlt	r0, r2
 800083c:	4318      	orrlt	r0, r3
 800083e:	4770      	bx	lr
 8000840:	f092 0f00 	teq	r2, #0
 8000844:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000848:	bf06      	itte	eq
 800084a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800084e:	3201      	addeq	r2, #1
 8000850:	3b01      	subne	r3, #1
 8000852:	e7b5      	b.n	80007c0 <__addsf3+0x58>
 8000854:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000858:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800085c:	bf18      	it	ne
 800085e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000862:	d021      	beq.n	80008a8 <__addsf3+0x140>
 8000864:	ea92 0f03 	teq	r2, r3
 8000868:	d004      	beq.n	8000874 <__addsf3+0x10c>
 800086a:	f092 0f00 	teq	r2, #0
 800086e:	bf08      	it	eq
 8000870:	4608      	moveq	r0, r1
 8000872:	4770      	bx	lr
 8000874:	ea90 0f01 	teq	r0, r1
 8000878:	bf1c      	itt	ne
 800087a:	2000      	movne	r0, #0
 800087c:	4770      	bxne	lr
 800087e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000882:	d104      	bne.n	800088e <__addsf3+0x126>
 8000884:	0040      	lsls	r0, r0, #1
 8000886:	bf28      	it	cs
 8000888:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000892:	bf3c      	itt	cc
 8000894:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000898:	4770      	bxcc	lr
 800089a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800089e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80008a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008a6:	4770      	bx	lr
 80008a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008ac:	bf16      	itet	ne
 80008ae:	4608      	movne	r0, r1
 80008b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008b4:	4601      	movne	r1, r0
 80008b6:	0242      	lsls	r2, r0, #9
 80008b8:	bf06      	itte	eq
 80008ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008be:	ea90 0f01 	teqeq	r0, r1
 80008c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_ui2f>:
 80008c8:	f04f 0300 	mov.w	r3, #0
 80008cc:	e004      	b.n	80008d8 <__aeabi_i2f+0x8>
 80008ce:	bf00      	nop

080008d0 <__aeabi_i2f>:
 80008d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008d4:	bf48      	it	mi
 80008d6:	4240      	negmi	r0, r0
 80008d8:	ea5f 0c00 	movs.w	ip, r0
 80008dc:	bf08      	it	eq
 80008de:	4770      	bxeq	lr
 80008e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008e4:	4601      	mov	r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	e01c      	b.n	8000926 <__aeabi_l2f+0x2a>

080008ec <__aeabi_ul2f>:
 80008ec:	ea50 0201 	orrs.w	r2, r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	e00a      	b.n	8000910 <__aeabi_l2f+0x14>
 80008fa:	bf00      	nop

080008fc <__aeabi_l2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000908:	d502      	bpl.n	8000910 <__aeabi_l2f+0x14>
 800090a:	4240      	negs	r0, r0
 800090c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000910:	ea5f 0c01 	movs.w	ip, r1
 8000914:	bf02      	ittt	eq
 8000916:	4684      	moveq	ip, r0
 8000918:	4601      	moveq	r1, r0
 800091a:	2000      	moveq	r0, #0
 800091c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000920:	bf08      	it	eq
 8000922:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000926:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800092a:	fabc f28c 	clz	r2, ip
 800092e:	3a08      	subs	r2, #8
 8000930:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000934:	db10      	blt.n	8000958 <__aeabi_l2f+0x5c>
 8000936:	fa01 fc02 	lsl.w	ip, r1, r2
 800093a:	4463      	add	r3, ip
 800093c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000940:	f1c2 0220 	rsb	r2, r2, #32
 8000944:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	eb43 0002 	adc.w	r0, r3, r2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f102 0220 	add.w	r2, r2, #32
 800095c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000960:	f1c2 0220 	rsb	r2, r2, #32
 8000964:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000968:	fa21 f202 	lsr.w	r2, r1, r2
 800096c:	eb43 0002 	adc.w	r0, r3, r2
 8000970:	bf08      	it	eq
 8000972:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000976:	4770      	bx	lr

08000978 <__aeabi_uldivmod>:
 8000978:	b953      	cbnz	r3, 8000990 <__aeabi_uldivmod+0x18>
 800097a:	b94a      	cbnz	r2, 8000990 <__aeabi_uldivmod+0x18>
 800097c:	2900      	cmp	r1, #0
 800097e:	bf08      	it	eq
 8000980:	2800      	cmpeq	r0, #0
 8000982:	bf1c      	itt	ne
 8000984:	f04f 31ff 	movne.w	r1, #4294967295
 8000988:	f04f 30ff 	movne.w	r0, #4294967295
 800098c:	f000 b968 	b.w	8000c60 <__aeabi_idiv0>
 8000990:	f1ad 0c08 	sub.w	ip, sp, #8
 8000994:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000998:	f000 f806 	bl	80009a8 <__udivmoddi4>
 800099c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009a4:	b004      	add	sp, #16
 80009a6:	4770      	bx	lr

080009a8 <__udivmoddi4>:
 80009a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009ac:	9d08      	ldr	r5, [sp, #32]
 80009ae:	460c      	mov	r4, r1
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d14e      	bne.n	8000a52 <__udivmoddi4+0xaa>
 80009b4:	4694      	mov	ip, r2
 80009b6:	458c      	cmp	ip, r1
 80009b8:	4686      	mov	lr, r0
 80009ba:	fab2 f282 	clz	r2, r2
 80009be:	d962      	bls.n	8000a86 <__udivmoddi4+0xde>
 80009c0:	b14a      	cbz	r2, 80009d6 <__udivmoddi4+0x2e>
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	4091      	lsls	r1, r2
 80009c8:	fa20 f303 	lsr.w	r3, r0, r3
 80009cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80009d0:	4319      	orrs	r1, r3
 80009d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80009d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009da:	fbb1 f4f7 	udiv	r4, r1, r7
 80009de:	fb07 1114 	mls	r1, r7, r4, r1
 80009e2:	fa1f f68c 	uxth.w	r6, ip
 80009e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ee:	fb04 f106 	mul.w	r1, r4, r6
 80009f2:	4299      	cmp	r1, r3
 80009f4:	d90a      	bls.n	8000a0c <__udivmoddi4+0x64>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80009fe:	f080 8110 	bcs.w	8000c22 <__udivmoddi4+0x27a>
 8000a02:	4299      	cmp	r1, r3
 8000a04:	f240 810d 	bls.w	8000c22 <__udivmoddi4+0x27a>
 8000a08:	3c02      	subs	r4, #2
 8000a0a:	4463      	add	r3, ip
 8000a0c:	1a59      	subs	r1, r3, r1
 8000a0e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a12:	fb07 1110 	mls	r1, r7, r0, r1
 8000a16:	fb00 f606 	mul.w	r6, r0, r6
 8000a1a:	fa1f f38e 	uxth.w	r3, lr
 8000a1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a22:	429e      	cmp	r6, r3
 8000a24:	d90a      	bls.n	8000a3c <__udivmoddi4+0x94>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a2e:	f080 80fa 	bcs.w	8000c26 <__udivmoddi4+0x27e>
 8000a32:	429e      	cmp	r6, r3
 8000a34:	f240 80f7 	bls.w	8000c26 <__udivmoddi4+0x27e>
 8000a38:	4463      	add	r3, ip
 8000a3a:	3802      	subs	r0, #2
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	1b9b      	subs	r3, r3, r6
 8000a40:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a44:	b11d      	cbz	r5, 8000a4e <__udivmoddi4+0xa6>
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	2200      	movs	r2, #0
 8000a4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d905      	bls.n	8000a62 <__udivmoddi4+0xba>
 8000a56:	b10d      	cbz	r5, 8000a5c <__udivmoddi4+0xb4>
 8000a58:	e9c5 0100 	strd	r0, r1, [r5]
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4608      	mov	r0, r1
 8000a60:	e7f5      	b.n	8000a4e <__udivmoddi4+0xa6>
 8000a62:	fab3 f183 	clz	r1, r3
 8000a66:	2900      	cmp	r1, #0
 8000a68:	d146      	bne.n	8000af8 <__udivmoddi4+0x150>
 8000a6a:	42a3      	cmp	r3, r4
 8000a6c:	d302      	bcc.n	8000a74 <__udivmoddi4+0xcc>
 8000a6e:	4290      	cmp	r0, r2
 8000a70:	f0c0 80ee 	bcc.w	8000c50 <__udivmoddi4+0x2a8>
 8000a74:	1a86      	subs	r6, r0, r2
 8000a76:	eb64 0303 	sbc.w	r3, r4, r3
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	2d00      	cmp	r5, #0
 8000a7e:	d0e6      	beq.n	8000a4e <__udivmoddi4+0xa6>
 8000a80:	e9c5 6300 	strd	r6, r3, [r5]
 8000a84:	e7e3      	b.n	8000a4e <__udivmoddi4+0xa6>
 8000a86:	2a00      	cmp	r2, #0
 8000a88:	f040 808f 	bne.w	8000baa <__udivmoddi4+0x202>
 8000a8c:	eba1 040c 	sub.w	r4, r1, ip
 8000a90:	2101      	movs	r1, #1
 8000a92:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a96:	fa1f f78c 	uxth.w	r7, ip
 8000a9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a9e:	fb08 4416 	mls	r4, r8, r6, r4
 8000aa2:	fb07 f006 	mul.w	r0, r7, r6
 8000aa6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aaa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aae:	4298      	cmp	r0, r3
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x11c>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000aba:	d202      	bcs.n	8000ac2 <__udivmoddi4+0x11a>
 8000abc:	4298      	cmp	r0, r3
 8000abe:	f200 80cb 	bhi.w	8000c58 <__udivmoddi4+0x2b0>
 8000ac2:	4626      	mov	r6, r4
 8000ac4:	1a1c      	subs	r4, r3, r0
 8000ac6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000aca:	fb08 4410 	mls	r4, r8, r0, r4
 8000ace:	fb00 f707 	mul.w	r7, r0, r7
 8000ad2:	fa1f f38e 	uxth.w	r3, lr
 8000ad6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ada:	429f      	cmp	r7, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x148>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x146>
 8000ae8:	429f      	cmp	r7, r3
 8000aea:	f200 80ae 	bhi.w	8000c4a <__udivmoddi4+0x2a2>
 8000aee:	4620      	mov	r0, r4
 8000af0:	1bdb      	subs	r3, r3, r7
 8000af2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000af6:	e7a5      	b.n	8000a44 <__udivmoddi4+0x9c>
 8000af8:	f1c1 0720 	rsb	r7, r1, #32
 8000afc:	408b      	lsls	r3, r1
 8000afe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b06:	fa24 f607 	lsr.w	r6, r4, r7
 8000b0a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b0e:	fbb6 f8f9 	udiv	r8, r6, r9
 8000b12:	fa1f fe8c 	uxth.w	lr, ip
 8000b16:	fb09 6618 	mls	r6, r9, r8, r6
 8000b1a:	fa20 f307 	lsr.w	r3, r0, r7
 8000b1e:	408c      	lsls	r4, r1
 8000b20:	fa00 fa01 	lsl.w	sl, r0, r1
 8000b24:	fb08 f00e 	mul.w	r0, r8, lr
 8000b28:	431c      	orrs	r4, r3
 8000b2a:	0c23      	lsrs	r3, r4, #16
 8000b2c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b30:	4298      	cmp	r0, r3
 8000b32:	fa02 f201 	lsl.w	r2, r2, r1
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x1a6>
 8000b38:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3c:	f108 36ff 	add.w	r6, r8, #4294967295
 8000b40:	f080 8081 	bcs.w	8000c46 <__udivmoddi4+0x29e>
 8000b44:	4298      	cmp	r0, r3
 8000b46:	d97e      	bls.n	8000c46 <__udivmoddi4+0x29e>
 8000b48:	f1a8 0802 	sub.w	r8, r8, #2
 8000b4c:	4463      	add	r3, ip
 8000b4e:	1a1e      	subs	r6, r3, r0
 8000b50:	fbb6 f3f9 	udiv	r3, r6, r9
 8000b54:	fb09 6613 	mls	r6, r9, r3, r6
 8000b58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b5c:	b2a4      	uxth	r4, r4
 8000b5e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000b62:	45a6      	cmp	lr, r4
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x1d0>
 8000b66:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6a:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b6e:	d266      	bcs.n	8000c3e <__udivmoddi4+0x296>
 8000b70:	45a6      	cmp	lr, r4
 8000b72:	d964      	bls.n	8000c3e <__udivmoddi4+0x296>
 8000b74:	3b02      	subs	r3, #2
 8000b76:	4464      	add	r4, ip
 8000b78:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000b7c:	fba0 8302 	umull	r8, r3, r0, r2
 8000b80:	eba4 040e 	sub.w	r4, r4, lr
 8000b84:	429c      	cmp	r4, r3
 8000b86:	46c6      	mov	lr, r8
 8000b88:	461e      	mov	r6, r3
 8000b8a:	d350      	bcc.n	8000c2e <__udivmoddi4+0x286>
 8000b8c:	d04d      	beq.n	8000c2a <__udivmoddi4+0x282>
 8000b8e:	b155      	cbz	r5, 8000ba6 <__udivmoddi4+0x1fe>
 8000b90:	ebba 030e 	subs.w	r3, sl, lr
 8000b94:	eb64 0406 	sbc.w	r4, r4, r6
 8000b98:	fa04 f707 	lsl.w	r7, r4, r7
 8000b9c:	40cb      	lsrs	r3, r1
 8000b9e:	431f      	orrs	r7, r3
 8000ba0:	40cc      	lsrs	r4, r1
 8000ba2:	e9c5 7400 	strd	r7, r4, [r5]
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	e751      	b.n	8000a4e <__udivmoddi4+0xa6>
 8000baa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	40d9      	lsrs	r1, r3
 8000bb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bbc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc0:	fbb1 f0f8 	udiv	r0, r1, r8
 8000bc4:	fb08 1110 	mls	r1, r8, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	431c      	orrs	r4, r3
 8000bcc:	fa1f f78c 	uxth.w	r7, ip
 8000bd0:	0c23      	lsrs	r3, r4, #16
 8000bd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd6:	fb00 f107 	mul.w	r1, r0, r7
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x248>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000be6:	d22c      	bcs.n	8000c42 <__udivmoddi4+0x29a>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	d92a      	bls.n	8000c42 <__udivmoddi4+0x29a>
 8000bec:	3802      	subs	r0, #2
 8000bee:	4463      	add	r3, ip
 8000bf0:	1a5b      	subs	r3, r3, r1
 8000bf2:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bf6:	fb08 3311 	mls	r3, r8, r1, r3
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb01 f307 	mul.w	r3, r1, r7
 8000c04:	42a3      	cmp	r3, r4
 8000c06:	d908      	bls.n	8000c1a <__udivmoddi4+0x272>
 8000c08:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c10:	d213      	bcs.n	8000c3a <__udivmoddi4+0x292>
 8000c12:	42a3      	cmp	r3, r4
 8000c14:	d911      	bls.n	8000c3a <__udivmoddi4+0x292>
 8000c16:	3902      	subs	r1, #2
 8000c18:	4464      	add	r4, ip
 8000c1a:	1ae4      	subs	r4, r4, r3
 8000c1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c20:	e73b      	b.n	8000a9a <__udivmoddi4+0xf2>
 8000c22:	4604      	mov	r4, r0
 8000c24:	e6f2      	b.n	8000a0c <__udivmoddi4+0x64>
 8000c26:	4608      	mov	r0, r1
 8000c28:	e708      	b.n	8000a3c <__udivmoddi4+0x94>
 8000c2a:	45c2      	cmp	sl, r8
 8000c2c:	d2af      	bcs.n	8000b8e <__udivmoddi4+0x1e6>
 8000c2e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c32:	eb63 060c 	sbc.w	r6, r3, ip
 8000c36:	3801      	subs	r0, #1
 8000c38:	e7a9      	b.n	8000b8e <__udivmoddi4+0x1e6>
 8000c3a:	4631      	mov	r1, r6
 8000c3c:	e7ed      	b.n	8000c1a <__udivmoddi4+0x272>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	e79a      	b.n	8000b78 <__udivmoddi4+0x1d0>
 8000c42:	4630      	mov	r0, r6
 8000c44:	e7d4      	b.n	8000bf0 <__udivmoddi4+0x248>
 8000c46:	46b0      	mov	r8, r6
 8000c48:	e781      	b.n	8000b4e <__udivmoddi4+0x1a6>
 8000c4a:	4463      	add	r3, ip
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	e74f      	b.n	8000af0 <__udivmoddi4+0x148>
 8000c50:	4606      	mov	r6, r0
 8000c52:	4623      	mov	r3, r4
 8000c54:	4608      	mov	r0, r1
 8000c56:	e711      	b.n	8000a7c <__udivmoddi4+0xd4>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	e732      	b.n	8000ac4 <__udivmoddi4+0x11c>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_idiv0>:
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <EXTI0_IRQHandler>:
	EXTI0_CallBack = ptr ;
	
}	

void EXTI0_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <EXTI0_IRQHandler+0x1c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4798      	blx	r3
	/*	Clear pending Bit For EXTI0		*/
	SET_BIT(EXTI -> PR , 0);	
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <EXTI0_IRQHandler+0x20>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <EXTI0_IRQHandler+0x20>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6153      	str	r3, [r2, #20]
}	
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000f8 	.word	0x200000f8
 8000c84:	40010400 	.word	0x40010400

08000c88 <GPIO_voidSetPinMode>:
					
}
void  GPIO_VoidDeInit();

u8 GPIO_voidSetPinMode(u8 copy_u8portID,u8 copy_u8PinID,u8 copy_u8Mode)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	460b      	mov	r3, r1
 8000c94:	71bb      	strb	r3, [r7, #6]
 8000c96:	4613      	mov	r3, r2
 8000c98:	717b      	strb	r3, [r7, #5]
	u8 lacal_u8ErrorState = STD_TYPE_OK;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15 && copy_u8Mode <= GPIO_OUTPUT_50M_AF_OD)
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b07      	cmp	r3, #7
 8000ca2:	f200 817a 	bhi.w	8000f9a <GPIO_voidSetPinMode+0x312>
 8000ca6:	79bb      	ldrb	r3, [r7, #6]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	f200 8176 	bhi.w	8000f9a <GPIO_voidSetPinMode+0x312>
 8000cae:	797b      	ldrb	r3, [r7, #5]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	f200 8172 	bhi.w	8000f9a <GPIO_voidSetPinMode+0x312>
	{
		switch(copy_u8portID)
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	f200 816f 	bhi.w	8000f9e <GPIO_voidSetPinMode+0x316>
 8000cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8000cc8 <GPIO_voidSetPinMode+0x40>)
 8000cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc6:	bf00      	nop
 8000cc8:	08000ce5 	.word	0x08000ce5
 8000ccc:	08000d45 	.word	0x08000d45
 8000cd0:	08000da5 	.word	0x08000da5
 8000cd4:	08000e05 	.word	0x08000e05
 8000cd8:	08000e65 	.word	0x08000e65
 8000cdc:	08000ec3 	.word	0x08000ec3
 8000ce0:	08000f21 	.word	0x08000f21
		{
			case GPIO_PORTA: 
				if(copy_u8PinID<=7)
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	2b07      	cmp	r3, #7
 8000ce8:	d812      	bhi.n	8000d10 <GPIO_voidSetPinMode+0x88>
				{
					SET_4BIT_Val(GPIOA->CRL,copy_u8PinID*4,copy_u8Mode);
 8000cea:	4bb0      	ldr	r3, [pc, #704]	@ (8000fac <GPIO_voidSetPinMode+0x324>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	79ba      	ldrb	r2, [r7, #6]
 8000cf0:	0092      	lsls	r2, r2, #2
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf8:	43d2      	mvns	r2, r2
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	7979      	ldrb	r1, [r7, #5]
 8000cfe:	79ba      	ldrb	r2, [r7, #6]
 8000d00:	0092      	lsls	r2, r2, #2
 8000d02:	fa01 f202 	lsl.w	r2, r1, r2
 8000d06:	4611      	mov	r1, r2
 8000d08:	4aa8      	ldr	r2, [pc, #672]	@ (8000fac <GPIO_voidSetPinMode+0x324>)
 8000d0a:	430b      	orrs	r3, r1
 8000d0c:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOA->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000d0e:	e136      	b.n	8000f7e <GPIO_voidSetPinMode+0x2f6>
				else if(copy_u8PinID <=15)
 8000d10:	79bb      	ldrb	r3, [r7, #6]
 8000d12:	2b0f      	cmp	r3, #15
 8000d14:	f200 8133 	bhi.w	8000f7e <GPIO_voidSetPinMode+0x2f6>
					copy_u8PinID-=8;
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	3b08      	subs	r3, #8
 8000d1c:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOA->CRH,copy_u8PinID*4,copy_u8Mode);
 8000d1e:	4ba3      	ldr	r3, [pc, #652]	@ (8000fac <GPIO_voidSetPinMode+0x324>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	79ba      	ldrb	r2, [r7, #6]
 8000d24:	0092      	lsls	r2, r2, #2
 8000d26:	210f      	movs	r1, #15
 8000d28:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2c:	43d2      	mvns	r2, r2
 8000d2e:	4013      	ands	r3, r2
 8000d30:	7979      	ldrb	r1, [r7, #5]
 8000d32:	79ba      	ldrb	r2, [r7, #6]
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4a9b      	ldr	r2, [pc, #620]	@ (8000fac <GPIO_voidSetPinMode+0x324>)
 8000d3e:	430b      	orrs	r3, r1
 8000d40:	6053      	str	r3, [r2, #4]
				break;
 8000d42:	e11c      	b.n	8000f7e <GPIO_voidSetPinMode+0x2f6>
			case GPIO_PORTB: 
				if(copy_u8PinID<=7)
 8000d44:	79bb      	ldrb	r3, [r7, #6]
 8000d46:	2b07      	cmp	r3, #7
 8000d48:	d812      	bhi.n	8000d70 <GPIO_voidSetPinMode+0xe8>
				{
					SET_4BIT_Val(GPIOB->CRL,copy_u8PinID*4,copy_u8Mode);
 8000d4a:	4b99      	ldr	r3, [pc, #612]	@ (8000fb0 <GPIO_voidSetPinMode+0x328>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	79ba      	ldrb	r2, [r7, #6]
 8000d50:	0092      	lsls	r2, r2, #2
 8000d52:	210f      	movs	r1, #15
 8000d54:	fa01 f202 	lsl.w	r2, r1, r2
 8000d58:	43d2      	mvns	r2, r2
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	7979      	ldrb	r1, [r7, #5]
 8000d5e:	79ba      	ldrb	r2, [r7, #6]
 8000d60:	0092      	lsls	r2, r2, #2
 8000d62:	fa01 f202 	lsl.w	r2, r1, r2
 8000d66:	4611      	mov	r1, r2
 8000d68:	4a91      	ldr	r2, [pc, #580]	@ (8000fb0 <GPIO_voidSetPinMode+0x328>)
 8000d6a:	430b      	orrs	r3, r1
 8000d6c:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOB->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000d6e:	e108      	b.n	8000f82 <GPIO_voidSetPinMode+0x2fa>
				else if(copy_u8PinID <=15)
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	2b0f      	cmp	r3, #15
 8000d74:	f200 8105 	bhi.w	8000f82 <GPIO_voidSetPinMode+0x2fa>
					copy_u8PinID-=8;
 8000d78:	79bb      	ldrb	r3, [r7, #6]
 8000d7a:	3b08      	subs	r3, #8
 8000d7c:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOB->CRH,copy_u8PinID*4,copy_u8Mode);
 8000d7e:	4b8c      	ldr	r3, [pc, #560]	@ (8000fb0 <GPIO_voidSetPinMode+0x328>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	79ba      	ldrb	r2, [r7, #6]
 8000d84:	0092      	lsls	r2, r2, #2
 8000d86:	210f      	movs	r1, #15
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	43d2      	mvns	r2, r2
 8000d8e:	4013      	ands	r3, r2
 8000d90:	7979      	ldrb	r1, [r7, #5]
 8000d92:	79ba      	ldrb	r2, [r7, #6]
 8000d94:	0092      	lsls	r2, r2, #2
 8000d96:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4a84      	ldr	r2, [pc, #528]	@ (8000fb0 <GPIO_voidSetPinMode+0x328>)
 8000d9e:	430b      	orrs	r3, r1
 8000da0:	6053      	str	r3, [r2, #4]
				break;
 8000da2:	e0ee      	b.n	8000f82 <GPIO_voidSetPinMode+0x2fa>
			case GPIO_PORTC: 
				if(copy_u8PinID<=7)
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	2b07      	cmp	r3, #7
 8000da8:	d812      	bhi.n	8000dd0 <GPIO_voidSetPinMode+0x148>
				{
					SET_4BIT_Val(GPIOC->CRL,copy_u8PinID*4,copy_u8Mode);
 8000daa:	4b82      	ldr	r3, [pc, #520]	@ (8000fb4 <GPIO_voidSetPinMode+0x32c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	79ba      	ldrb	r2, [r7, #6]
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	210f      	movs	r1, #15
 8000db4:	fa01 f202 	lsl.w	r2, r1, r2
 8000db8:	43d2      	mvns	r2, r2
 8000dba:	4013      	ands	r3, r2
 8000dbc:	7979      	ldrb	r1, [r7, #5]
 8000dbe:	79ba      	ldrb	r2, [r7, #6]
 8000dc0:	0092      	lsls	r2, r2, #2
 8000dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4a7a      	ldr	r2, [pc, #488]	@ (8000fb4 <GPIO_voidSetPinMode+0x32c>)
 8000dca:	430b      	orrs	r3, r1
 8000dcc:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOC->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000dce:	e0da      	b.n	8000f86 <GPIO_voidSetPinMode+0x2fe>
				else if(copy_u8PinID <=15)
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	f200 80d7 	bhi.w	8000f86 <GPIO_voidSetPinMode+0x2fe>
					copy_u8PinID-=8;
 8000dd8:	79bb      	ldrb	r3, [r7, #6]
 8000dda:	3b08      	subs	r3, #8
 8000ddc:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOC->CRH,copy_u8PinID*4,copy_u8Mode);
 8000dde:	4b75      	ldr	r3, [pc, #468]	@ (8000fb4 <GPIO_voidSetPinMode+0x32c>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	79ba      	ldrb	r2, [r7, #6]
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	210f      	movs	r1, #15
 8000de8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	4013      	ands	r3, r2
 8000df0:	7979      	ldrb	r1, [r7, #5]
 8000df2:	79ba      	ldrb	r2, [r7, #6]
 8000df4:	0092      	lsls	r2, r2, #2
 8000df6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4a6d      	ldr	r2, [pc, #436]	@ (8000fb4 <GPIO_voidSetPinMode+0x32c>)
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	6053      	str	r3, [r2, #4]
				break;
 8000e02:	e0c0      	b.n	8000f86 <GPIO_voidSetPinMode+0x2fe>
			case GPIO_PORTD: 
				if(copy_u8PinID<=7)
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	2b07      	cmp	r3, #7
 8000e08:	d812      	bhi.n	8000e30 <GPIO_voidSetPinMode+0x1a8>
				{
					SET_4BIT_Val(GPIOD->CRL,copy_u8PinID*4,copy_u8Mode);
 8000e0a:	4b6b      	ldr	r3, [pc, #428]	@ (8000fb8 <GPIO_voidSetPinMode+0x330>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	79ba      	ldrb	r2, [r7, #6]
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	210f      	movs	r1, #15
 8000e14:	fa01 f202 	lsl.w	r2, r1, r2
 8000e18:	43d2      	mvns	r2, r2
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	7979      	ldrb	r1, [r7, #5]
 8000e1e:	79ba      	ldrb	r2, [r7, #6]
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	4611      	mov	r1, r2
 8000e28:	4a63      	ldr	r2, [pc, #396]	@ (8000fb8 <GPIO_voidSetPinMode+0x330>)
 8000e2a:	430b      	orrs	r3, r1
 8000e2c:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOD->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000e2e:	e0ac      	b.n	8000f8a <GPIO_voidSetPinMode+0x302>
				else if(copy_u8PinID <=15)
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	2b0f      	cmp	r3, #15
 8000e34:	f200 80a9 	bhi.w	8000f8a <GPIO_voidSetPinMode+0x302>
					copy_u8PinID-=8;
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	3b08      	subs	r3, #8
 8000e3c:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOD->CRH,copy_u8PinID*4,copy_u8Mode);
 8000e3e:	4b5e      	ldr	r3, [pc, #376]	@ (8000fb8 <GPIO_voidSetPinMode+0x330>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	79ba      	ldrb	r2, [r7, #6]
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	210f      	movs	r1, #15
 8000e48:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4c:	43d2      	mvns	r2, r2
 8000e4e:	4013      	ands	r3, r2
 8000e50:	7979      	ldrb	r1, [r7, #5]
 8000e52:	79ba      	ldrb	r2, [r7, #6]
 8000e54:	0092      	lsls	r2, r2, #2
 8000e56:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4a56      	ldr	r2, [pc, #344]	@ (8000fb8 <GPIO_voidSetPinMode+0x330>)
 8000e5e:	430b      	orrs	r3, r1
 8000e60:	6053      	str	r3, [r2, #4]
				break;
 8000e62:	e092      	b.n	8000f8a <GPIO_voidSetPinMode+0x302>
			case GPIO_PORTE: 
				if(copy_u8PinID<=7)
 8000e64:	79bb      	ldrb	r3, [r7, #6]
 8000e66:	2b07      	cmp	r3, #7
 8000e68:	d812      	bhi.n	8000e90 <GPIO_voidSetPinMode+0x208>
				{
					SET_4BIT_Val(GPIOE->CRL,copy_u8PinID*4,copy_u8Mode);
 8000e6a:	4b54      	ldr	r3, [pc, #336]	@ (8000fbc <GPIO_voidSetPinMode+0x334>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	79ba      	ldrb	r2, [r7, #6]
 8000e70:	0092      	lsls	r2, r2, #2
 8000e72:	210f      	movs	r1, #15
 8000e74:	fa01 f202 	lsl.w	r2, r1, r2
 8000e78:	43d2      	mvns	r2, r2
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	7979      	ldrb	r1, [r7, #5]
 8000e7e:	79ba      	ldrb	r2, [r7, #6]
 8000e80:	0092      	lsls	r2, r2, #2
 8000e82:	fa01 f202 	lsl.w	r2, r1, r2
 8000e86:	4611      	mov	r1, r2
 8000e88:	4a4c      	ldr	r2, [pc, #304]	@ (8000fbc <GPIO_voidSetPinMode+0x334>)
 8000e8a:	430b      	orrs	r3, r1
 8000e8c:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOE->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000e8e:	e07e      	b.n	8000f8e <GPIO_voidSetPinMode+0x306>
				else if(copy_u8PinID <=15)
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	2b0f      	cmp	r3, #15
 8000e94:	d87b      	bhi.n	8000f8e <GPIO_voidSetPinMode+0x306>
					copy_u8PinID-=8;
 8000e96:	79bb      	ldrb	r3, [r7, #6]
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOE->CRH,copy_u8PinID*4,copy_u8Mode);
 8000e9c:	4b47      	ldr	r3, [pc, #284]	@ (8000fbc <GPIO_voidSetPinMode+0x334>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	79ba      	ldrb	r2, [r7, #6]
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eaa:	43d2      	mvns	r2, r2
 8000eac:	4013      	ands	r3, r2
 8000eae:	7979      	ldrb	r1, [r7, #5]
 8000eb0:	79ba      	ldrb	r2, [r7, #6]
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4a40      	ldr	r2, [pc, #256]	@ (8000fbc <GPIO_voidSetPinMode+0x334>)
 8000ebc:	430b      	orrs	r3, r1
 8000ebe:	6053      	str	r3, [r2, #4]
				break;
 8000ec0:	e065      	b.n	8000f8e <GPIO_voidSetPinMode+0x306>
		    case GPIO_PORTF: 
				if(copy_u8PinID<=7)
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	2b07      	cmp	r3, #7
 8000ec6:	d812      	bhi.n	8000eee <GPIO_voidSetPinMode+0x266>
				{
					SET_4BIT_Val(GPIOF->CRL,copy_u8PinID*4,copy_u8Mode);
 8000ec8:	4b3d      	ldr	r3, [pc, #244]	@ (8000fc0 <GPIO_voidSetPinMode+0x338>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	79ba      	ldrb	r2, [r7, #6]
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed6:	43d2      	mvns	r2, r2
 8000ed8:	4013      	ands	r3, r2
 8000eda:	7979      	ldrb	r1, [r7, #5]
 8000edc:	79ba      	ldrb	r2, [r7, #6]
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4a36      	ldr	r2, [pc, #216]	@ (8000fc0 <GPIO_voidSetPinMode+0x338>)
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOF->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000eec:	e051      	b.n	8000f92 <GPIO_voidSetPinMode+0x30a>
				else if(copy_u8PinID <=15)
 8000eee:	79bb      	ldrb	r3, [r7, #6]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d84e      	bhi.n	8000f92 <GPIO_voidSetPinMode+0x30a>
					copy_u8PinID-=8;
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	3b08      	subs	r3, #8
 8000ef8:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOF->CRH,copy_u8PinID*4,copy_u8Mode);
 8000efa:	4b31      	ldr	r3, [pc, #196]	@ (8000fc0 <GPIO_voidSetPinMode+0x338>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	79ba      	ldrb	r2, [r7, #6]
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	210f      	movs	r1, #15
 8000f04:	fa01 f202 	lsl.w	r2, r1, r2
 8000f08:	43d2      	mvns	r2, r2
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	7979      	ldrb	r1, [r7, #5]
 8000f0e:	79ba      	ldrb	r2, [r7, #6]
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	fa01 f202 	lsl.w	r2, r1, r2
 8000f16:	4611      	mov	r1, r2
 8000f18:	4a29      	ldr	r2, [pc, #164]	@ (8000fc0 <GPIO_voidSetPinMode+0x338>)
 8000f1a:	430b      	orrs	r3, r1
 8000f1c:	6053      	str	r3, [r2, #4]
				break;
 8000f1e:	e038      	b.n	8000f92 <GPIO_voidSetPinMode+0x30a>
			case GPIO_PORTG: 
				if(copy_u8PinID<=7)
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	2b07      	cmp	r3, #7
 8000f24:	d812      	bhi.n	8000f4c <GPIO_voidSetPinMode+0x2c4>
				{
					SET_4BIT_Val(GPIOG->CRL,copy_u8PinID*4,copy_u8Mode);
 8000f26:	4b27      	ldr	r3, [pc, #156]	@ (8000fc4 <GPIO_voidSetPinMode+0x33c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	79ba      	ldrb	r2, [r7, #6]
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	210f      	movs	r1, #15
 8000f30:	fa01 f202 	lsl.w	r2, r1, r2
 8000f34:	43d2      	mvns	r2, r2
 8000f36:	4013      	ands	r3, r2
 8000f38:	7979      	ldrb	r1, [r7, #5]
 8000f3a:	79ba      	ldrb	r2, [r7, #6]
 8000f3c:	0092      	lsls	r2, r2, #2
 8000f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f42:	4611      	mov	r1, r2
 8000f44:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc4 <GPIO_voidSetPinMode+0x33c>)
 8000f46:	430b      	orrs	r3, r1
 8000f48:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOG->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000f4a:	e024      	b.n	8000f96 <GPIO_voidSetPinMode+0x30e>
				else if(copy_u8PinID <=15)
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	d821      	bhi.n	8000f96 <GPIO_voidSetPinMode+0x30e>
					copy_u8PinID-=8;
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	3b08      	subs	r3, #8
 8000f56:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOG->CRH,copy_u8PinID*4,copy_u8Mode);
 8000f58:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <GPIO_voidSetPinMode+0x33c>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	79ba      	ldrb	r2, [r7, #6]
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	210f      	movs	r1, #15
 8000f62:	fa01 f202 	lsl.w	r2, r1, r2
 8000f66:	43d2      	mvns	r2, r2
 8000f68:	4013      	ands	r3, r2
 8000f6a:	7979      	ldrb	r1, [r7, #5]
 8000f6c:	79ba      	ldrb	r2, [r7, #6]
 8000f6e:	0092      	lsls	r2, r2, #2
 8000f70:	fa01 f202 	lsl.w	r2, r1, r2
 8000f74:	4611      	mov	r1, r2
 8000f76:	4a13      	ldr	r2, [pc, #76]	@ (8000fc4 <GPIO_voidSetPinMode+0x33c>)
 8000f78:	430b      	orrs	r3, r1
 8000f7a:	6053      	str	r3, [r2, #4]
				break;
 8000f7c:	e00b      	b.n	8000f96 <GPIO_voidSetPinMode+0x30e>
				break;
 8000f7e:	bf00      	nop
 8000f80:	e00d      	b.n	8000f9e <GPIO_voidSetPinMode+0x316>
				break;
 8000f82:	bf00      	nop
 8000f84:	e00b      	b.n	8000f9e <GPIO_voidSetPinMode+0x316>
				break;
 8000f86:	bf00      	nop
 8000f88:	e009      	b.n	8000f9e <GPIO_voidSetPinMode+0x316>
				break;
 8000f8a:	bf00      	nop
 8000f8c:	e007      	b.n	8000f9e <GPIO_voidSetPinMode+0x316>
				break;
 8000f8e:	bf00      	nop
 8000f90:	e005      	b.n	8000f9e <GPIO_voidSetPinMode+0x316>
				break;
 8000f92:	bf00      	nop
 8000f94:	e003      	b.n	8000f9e <GPIO_voidSetPinMode+0x316>
				break;
 8000f96:	bf00      	nop
		switch(copy_u8portID)
 8000f98:	e001      	b.n	8000f9e <GPIO_voidSetPinMode+0x316>
		}
	}
	else 
		lacal_u8ErrorState = STD_TYPE_NOK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
	return lacal_u8ErrorState;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40010800 	.word	0x40010800
 8000fb0:	40010c00 	.word	0x40010c00
 8000fb4:	40011000 	.word	0x40011000
 8000fb8:	40011400 	.word	0x40011400
 8000fbc:	40011800 	.word	0x40011800
 8000fc0:	40011c00 	.word	0x40011c00
 8000fc4:	40012000 	.word	0x40012000

08000fc8 <GPIO_voidSetPinValue>:


u8 GPIO_voidSetPinValue(u8 copy_u8portID,u8 copy_u8PinID,u8 copy_u8PinValue)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	71bb      	strb	r3, [r7, #6]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	717b      	strb	r3, [r7, #5]
	u8 lacal_u8ErrorState = STD_TYPE_OK;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15 && (copy_u8PinValue == 1 || copy_u8PinValue ==0 ))
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b07      	cmp	r3, #7
 8000fe2:	f200 80a7 	bhi.w	8001134 <GPIO_voidSetPinValue+0x16c>
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	f200 80a3 	bhi.w	8001134 <GPIO_voidSetPinValue+0x16c>
 8000fee:	797b      	ldrb	r3, [r7, #5]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d003      	beq.n	8000ffc <GPIO_voidSetPinValue+0x34>
 8000ff4:	797b      	ldrb	r3, [r7, #5]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 809c 	bne.w	8001134 <GPIO_voidSetPinValue+0x16c>
	{
		switch(copy_u8portID)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	2b06      	cmp	r3, #6
 8001002:	f200 8099 	bhi.w	8001138 <GPIO_voidSetPinValue+0x170>
 8001006:	a201      	add	r2, pc, #4	@ (adr r2, 800100c <GPIO_voidSetPinValue+0x44>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	08001029 	.word	0x08001029
 8001010:	0800104f 	.word	0x0800104f
 8001014:	08001075 	.word	0x08001075
 8001018:	0800109b 	.word	0x0800109b
 800101c:	080010c1 	.word	0x080010c1
 8001020:	080010e7 	.word	0x080010e7
 8001024:	0800110d 	.word	0x0800110d
		{
			case GPIO_PORTA:
				switch(copy_u8PinValue){
 8001028:	797b      	ldrb	r3, [r7, #5]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <GPIO_voidSetPinValue+0x6c>
 800102e:	2b01      	cmp	r3, #1
 8001030:	d006      	beq.n	8001040 <GPIO_voidSetPinValue+0x78>
				case 0:WRITE_BIT(GPIOA->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOA->BSRR,copy_u8PinID);break;}
				break;
 8001032:	e07e      	b.n	8001132 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOA->BRR,copy_u8PinID);break;
 8001034:	79bb      	ldrb	r3, [r7, #6]
 8001036:	2201      	movs	r2, #1
 8001038:	409a      	lsls	r2, r3
 800103a:	4b42      	ldr	r3, [pc, #264]	@ (8001144 <GPIO_voidSetPinValue+0x17c>)
 800103c:	615a      	str	r2, [r3, #20]
 800103e:	e005      	b.n	800104c <GPIO_voidSetPinValue+0x84>
				case 1:WRITE_BIT(GPIOA->BSRR,copy_u8PinID);break;}
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	2201      	movs	r2, #1
 8001044:	409a      	lsls	r2, r3
 8001046:	4b3f      	ldr	r3, [pc, #252]	@ (8001144 <GPIO_voidSetPinValue+0x17c>)
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	bf00      	nop
				break;
 800104c:	e071      	b.n	8001132 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTB:
				switch(copy_u8PinValue){
 800104e:	797b      	ldrb	r3, [r7, #5]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <GPIO_voidSetPinValue+0x92>
 8001054:	2b01      	cmp	r3, #1
 8001056:	d006      	beq.n	8001066 <GPIO_voidSetPinValue+0x9e>
				case 0:WRITE_BIT(GPIOB->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOB->BSRR,copy_u8PinID);break;}
				break;
 8001058:	e06b      	b.n	8001132 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOB->BRR,copy_u8PinID);break;
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	2201      	movs	r2, #1
 800105e:	409a      	lsls	r2, r3
 8001060:	4b39      	ldr	r3, [pc, #228]	@ (8001148 <GPIO_voidSetPinValue+0x180>)
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	e005      	b.n	8001072 <GPIO_voidSetPinValue+0xaa>
				case 1:WRITE_BIT(GPIOB->BSRR,copy_u8PinID);break;}
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	2201      	movs	r2, #1
 800106a:	409a      	lsls	r2, r3
 800106c:	4b36      	ldr	r3, [pc, #216]	@ (8001148 <GPIO_voidSetPinValue+0x180>)
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	bf00      	nop
				break;
 8001072:	e05e      	b.n	8001132 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTC:
				switch(copy_u8PinValue){
 8001074:	797b      	ldrb	r3, [r7, #5]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <GPIO_voidSetPinValue+0xb8>
 800107a:	2b01      	cmp	r3, #1
 800107c:	d006      	beq.n	800108c <GPIO_voidSetPinValue+0xc4>
				case 0:WRITE_BIT(GPIOC->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOC->BSRR,copy_u8PinID);break;}
				break;
 800107e:	e058      	b.n	8001132 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOC->BRR,copy_u8PinID);break;
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	2201      	movs	r2, #1
 8001084:	409a      	lsls	r2, r3
 8001086:	4b31      	ldr	r3, [pc, #196]	@ (800114c <GPIO_voidSetPinValue+0x184>)
 8001088:	615a      	str	r2, [r3, #20]
 800108a:	e005      	b.n	8001098 <GPIO_voidSetPinValue+0xd0>
				case 1:WRITE_BIT(GPIOC->BSRR,copy_u8PinID);break;}
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	2201      	movs	r2, #1
 8001090:	409a      	lsls	r2, r3
 8001092:	4b2e      	ldr	r3, [pc, #184]	@ (800114c <GPIO_voidSetPinValue+0x184>)
 8001094:	611a      	str	r2, [r3, #16]
 8001096:	bf00      	nop
				break;
 8001098:	e04b      	b.n	8001132 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTD:
				switch(copy_u8PinValue){
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <GPIO_voidSetPinValue+0xde>
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d006      	beq.n	80010b2 <GPIO_voidSetPinValue+0xea>
				case 0:WRITE_BIT(GPIOD->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOD->BSRR,copy_u8PinID);break;}
				break;
 80010a4:	e045      	b.n	8001132 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOD->BRR,copy_u8PinID);break;
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	2201      	movs	r2, #1
 80010aa:	409a      	lsls	r2, r3
 80010ac:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <GPIO_voidSetPinValue+0x188>)
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	e005      	b.n	80010be <GPIO_voidSetPinValue+0xf6>
				case 1:WRITE_BIT(GPIOD->BSRR,copy_u8PinID);break;}
 80010b2:	79bb      	ldrb	r3, [r7, #6]
 80010b4:	2201      	movs	r2, #1
 80010b6:	409a      	lsls	r2, r3
 80010b8:	4b25      	ldr	r3, [pc, #148]	@ (8001150 <GPIO_voidSetPinValue+0x188>)
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	bf00      	nop
				break;
 80010be:	e038      	b.n	8001132 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTE:
				switch(copy_u8PinValue){
 80010c0:	797b      	ldrb	r3, [r7, #5]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <GPIO_voidSetPinValue+0x104>
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d006      	beq.n	80010d8 <GPIO_voidSetPinValue+0x110>
				case 0:WRITE_BIT(GPIOE->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOE->BSRR,copy_u8PinID);break;}
				break;
 80010ca:	e032      	b.n	8001132 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOE->BRR,copy_u8PinID);break;
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	2201      	movs	r2, #1
 80010d0:	409a      	lsls	r2, r3
 80010d2:	4b20      	ldr	r3, [pc, #128]	@ (8001154 <GPIO_voidSetPinValue+0x18c>)
 80010d4:	615a      	str	r2, [r3, #20]
 80010d6:	e005      	b.n	80010e4 <GPIO_voidSetPinValue+0x11c>
				case 1:WRITE_BIT(GPIOE->BSRR,copy_u8PinID);break;}
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	2201      	movs	r2, #1
 80010dc:	409a      	lsls	r2, r3
 80010de:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <GPIO_voidSetPinValue+0x18c>)
 80010e0:	611a      	str	r2, [r3, #16]
 80010e2:	bf00      	nop
				break;
 80010e4:	e025      	b.n	8001132 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTF:
				switch(copy_u8PinValue){
 80010e6:	797b      	ldrb	r3, [r7, #5]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <GPIO_voidSetPinValue+0x12a>
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d006      	beq.n	80010fe <GPIO_voidSetPinValue+0x136>
				case 0:WRITE_BIT(GPIOF->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOF->BSRR,copy_u8PinID);break;}
				break;
 80010f0:	e01f      	b.n	8001132 <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOF->BRR,copy_u8PinID);break;
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	2201      	movs	r2, #1
 80010f6:	409a      	lsls	r2, r3
 80010f8:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <GPIO_voidSetPinValue+0x190>)
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	e005      	b.n	800110a <GPIO_voidSetPinValue+0x142>
				case 1:WRITE_BIT(GPIOF->BSRR,copy_u8PinID);break;}
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	2201      	movs	r2, #1
 8001102:	409a      	lsls	r2, r3
 8001104:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <GPIO_voidSetPinValue+0x190>)
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	bf00      	nop
				break;
 800110a:	e012      	b.n	8001132 <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTG:
				switch(copy_u8PinValue){
 800110c:	797b      	ldrb	r3, [r7, #5]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <GPIO_voidSetPinValue+0x150>
 8001112:	2b01      	cmp	r3, #1
 8001114:	d006      	beq.n	8001124 <GPIO_voidSetPinValue+0x15c>
				case 0:WRITE_BIT(GPIOG->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOG->BSRR,copy_u8PinID);break;}
				break;
 8001116:	e00b      	b.n	8001130 <GPIO_voidSetPinValue+0x168>
				case 0:WRITE_BIT(GPIOG->BRR,copy_u8PinID);break;
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	2201      	movs	r2, #1
 800111c:	409a      	lsls	r2, r3
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <GPIO_voidSetPinValue+0x194>)
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	e005      	b.n	8001130 <GPIO_voidSetPinValue+0x168>
				case 1:WRITE_BIT(GPIOG->BSRR,copy_u8PinID);break;}
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	2201      	movs	r2, #1
 8001128:	409a      	lsls	r2, r3
 800112a:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <GPIO_voidSetPinValue+0x194>)
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	bf00      	nop
				break;
 8001130:	bf00      	nop
		switch(copy_u8portID)
 8001132:	e001      	b.n	8001138 <GPIO_voidSetPinValue+0x170>
		}
	}
    else 
		lacal_u8ErrorState = STD_TYPE_NOK;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]
	return lacal_u8ErrorState;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	40010800 	.word	0x40010800
 8001148:	40010c00 	.word	0x40010c00
 800114c:	40011000 	.word	0x40011000
 8001150:	40011400 	.word	0x40011400
 8001154:	40011800 	.word	0x40011800
 8001158:	40011c00 	.word	0x40011c00
 800115c:	40012000 	.word	0x40012000

08001160 <GPIO_GetPinValue>:
		lacal_u8ErrorState = STD_TYPE_NOK;
	return lacal_u8ErrorState;
}

u8 GPIO_GetPinValue(u8 copy_u8portID,u8 copy_u8PinID)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	71bb      	strb	r3, [r7, #6]
	//u8 lacal_u8ErrorState = STD_TYPE_OK;
	u8 Pin_Value=0;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2b07      	cmp	r3, #7
 8001178:	d85e      	bhi.n	8001238 <GPIO_GetPinValue+0xd8>
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d85b      	bhi.n	8001238 <GPIO_GetPinValue+0xd8>
	{
		switch(copy_u8portID)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	3b01      	subs	r3, #1
 8001184:	2b06      	cmp	r3, #6
 8001186:	d857      	bhi.n	8001238 <GPIO_GetPinValue+0xd8>
 8001188:	a201      	add	r2, pc, #4	@ (adr r2, 8001190 <GPIO_GetPinValue+0x30>)
 800118a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118e:	bf00      	nop
 8001190:	080011ad 	.word	0x080011ad
 8001194:	080011c1 	.word	0x080011c1
 8001198:	080011d5 	.word	0x080011d5
 800119c:	080011e9 	.word	0x080011e9
 80011a0:	080011fd 	.word	0x080011fd
 80011a4:	08001211 	.word	0x08001211
 80011a8:	08001225 	.word	0x08001225
		{
			case GPIO_PORTA:  Pin_Value = GET_BIT(GPIOA->IDR,copy_u8PinID);break;
 80011ac:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <GPIO_GetPinValue+0xe4>)
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	79bb      	ldrb	r3, [r7, #6]
 80011b2:	fa22 f303 	lsr.w	r3, r2, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	e03b      	b.n	8001238 <GPIO_GetPinValue+0xd8>
			case GPIO_PORTB:  Pin_Value = GET_BIT(GPIOB->IDR,copy_u8PinID);break;
 80011c0:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <GPIO_GetPinValue+0xe8>)
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	e031      	b.n	8001238 <GPIO_GetPinValue+0xd8>
			case GPIO_PORTC:  Pin_Value = GET_BIT(GPIOC->IDR,copy_u8PinID);break;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	@ (800124c <GPIO_GetPinValue+0xec>)
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	fa22 f303 	lsr.w	r3, r2, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	e027      	b.n	8001238 <GPIO_GetPinValue+0xd8>
			case GPIO_PORTD:  Pin_Value = GET_BIT(GPIOD->IDR,copy_u8PinID);break;
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <GPIO_GetPinValue+0xf0>)
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	fa22 f303 	lsr.w	r3, r2, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	e01d      	b.n	8001238 <GPIO_GetPinValue+0xd8>
			case GPIO_PORTE:  Pin_Value = GET_BIT(GPIOE->IDR,copy_u8PinID);break;
 80011fc:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <GPIO_GetPinValue+0xf4>)
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	fa22 f303 	lsr.w	r3, r2, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e013      	b.n	8001238 <GPIO_GetPinValue+0xd8>
			case GPIO_PORTF:  Pin_Value = GET_BIT(GPIOF->IDR,copy_u8PinID);break;
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <GPIO_GetPinValue+0xf8>)
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	fa22 f303 	lsr.w	r3, r2, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e009      	b.n	8001238 <GPIO_GetPinValue+0xd8>
			case GPIO_PORTG:  Pin_Value = GET_BIT(GPIOG->IDR,copy_u8PinID);break;
 8001224:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <GPIO_GetPinValue+0xfc>)
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	79bb      	ldrb	r3, [r7, #6]
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	bf00      	nop
		}             
	}
		//else
		//lacal_u8ErrorState = STD_TYPE_NOK;
	return Pin_Value;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	40010800 	.word	0x40010800
 8001248:	40010c00 	.word	0x40010c00
 800124c:	40011000 	.word	0x40011000
 8001250:	40011400 	.word	0x40011400
 8001254:	40011800 	.word	0x40011800
 8001258:	40011c00 	.word	0x40011c00
 800125c:	40012000 	.word	0x40012000

08001260 <NVIC_voidEnableInterrupt>:
 #include "NVIC_interface.h"
 #include "NVIC_private.h"
 #include "NVIC_config.h"
 
void NVIC_voidEnableInterrupt(u8 copy_u8IntNumber)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	if(copy_u8IntNumber<31)
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b1e      	cmp	r3, #30
 800126e:	d805      	bhi.n	800127c <NVIC_voidEnableInterrupt+0x1c>
	{
		NVIC_ISER0=1<<copy_u8IntNumber;
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2201      	movs	r2, #1
 8001274:	409a      	lsls	r2, r3
 8001276:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <NVIC_voidEnableInterrupt+0x54>)
 8001278:	601a      	str	r2, [r3, #0]
	else if(copy_u8IntNumber<95)
	{
		copy_u8IntNumber-=64;
		NVIC_ISER2=1<<copy_u8IntNumber;
	}
}
 800127a:	e016      	b.n	80012aa <NVIC_voidEnableInterrupt+0x4a>
	else if(copy_u8IntNumber<63)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001280:	d808      	bhi.n	8001294 <NVIC_voidEnableInterrupt+0x34>
		copy_u8IntNumber-=32;
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	3b20      	subs	r3, #32
 8001286:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1=1<<copy_u8IntNumber;
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2201      	movs	r2, #1
 800128c:	409a      	lsls	r2, r3
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <NVIC_voidEnableInterrupt+0x58>)
 8001290:	601a      	str	r2, [r3, #0]
}
 8001292:	e00a      	b.n	80012aa <NVIC_voidEnableInterrupt+0x4a>
	else if(copy_u8IntNumber<95)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b5e      	cmp	r3, #94	@ 0x5e
 8001298:	d807      	bhi.n	80012aa <NVIC_voidEnableInterrupt+0x4a>
		copy_u8IntNumber-=64;
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	3b40      	subs	r3, #64	@ 0x40
 800129e:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER2=1<<copy_u8IntNumber;
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	2201      	movs	r2, #1
 80012a4:	409a      	lsls	r2, r3
 80012a6:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <NVIC_voidEnableInterrupt+0x5c>)
 80012a8:	601a      	str	r2, [r3, #0]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000e104 	.word	0xe000e104
 80012bc:	e000e108 	.word	0xe000e108

080012c0 <MOTOR_init>:
#include "PWM_DCmotor_init.h"
#include "GPIO_interface.h"


void MOTOR_init (u8 A_u8MotorNum)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	if (A_u8MotorNum>0)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d021      	beq.n	8001314 <MOTOR_init+0x54>
	{
		switch(A_u8MotorNum)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d002      	beq.n	80012dc <MOTOR_init+0x1c>
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d00e      	beq.n	80012f8 <MOTOR_init+0x38>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINL,GPIO_OUTPUT_10M_PP);
//			MTimer_voidInit(MOTOR2_SecondTimerType);
			break;
		}
	}
}
 80012da:	e01b      	b.n	8001314 <MOTOR_init+0x54>
			MTimer_voidInit(MOTOR1_FirstTimerType);
 80012dc:	2002      	movs	r0, #2
 80012de:	f000 f9cf 	bl	8001680 <MTimer_voidInit>
			GPIO_voidSetPinMode(MOTOR1_PORT,MOTOR1_PINR,GPIO_OUTPUT_10M_PP);
 80012e2:	2201      	movs	r2, #1
 80012e4:	2100      	movs	r1, #0
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff fcce 	bl	8000c88 <GPIO_voidSetPinMode>
		    GPIO_voidSetPinMode(MOTOR1_PORT,MOTOR1_PINL,GPIO_OUTPUT_10M_PP);
 80012ec:	2201      	movs	r2, #1
 80012ee:	2105      	movs	r1, #5
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff fcc9 	bl	8000c88 <GPIO_voidSetPinMode>
			break;
 80012f6:	e00d      	b.n	8001314 <MOTOR_init+0x54>
			MTimer_voidInit(MOTOR2_FirstTimerType);
 80012f8:	2002      	movs	r0, #2
 80012fa:	f000 f9c1 	bl	8001680 <MTimer_voidInit>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINR,GPIO_OUTPUT_10M_PP);
 80012fe:	2201      	movs	r2, #1
 8001300:	2106      	movs	r1, #6
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fcc0 	bl	8000c88 <GPIO_voidSetPinMode>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINL,GPIO_OUTPUT_10M_PP);
 8001308:	2201      	movs	r2, #1
 800130a:	2107      	movs	r1, #7
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff fcbb 	bl	8000c88 <GPIO_voidSetPinMode>
			break;
 8001312:	bf00      	nop
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <MOTOR_CounterClockWise>:

void MOTOR_CounterClockWise  (u8 A_u8MotorNum , u16 A_u16CaptureValue )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	4613      	mov	r3, r2
 800132a:	80bb      	strh	r3, [r7, #4]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d02a      	beq.n	8001388 <MOTOR_CounterClockWise+0x6c>
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d827      	bhi.n	8001388 <MOTOR_CounterClockWise+0x6c>
	{
		switch(A_u8MotorNum)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d002      	beq.n	8001344 <MOTOR_CounterClockWise+0x28>
 800133e:	2b02      	cmp	r3, #2
 8001340:	d011      	beq.n	8001366 <MOTOR_CounterClockWise+0x4a>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_LOW);
//			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_SecondChannelNumber,0);
			break;
		}
	}
}
 8001342:	e021      	b.n	8001388 <MOTOR_CounterClockWise+0x6c>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,A_u16CaptureValue);
 8001344:	88bb      	ldrh	r3, [r7, #4]
 8001346:	461a      	mov	r2, r3
 8001348:	2103      	movs	r1, #3
 800134a:	2002      	movs	r0, #2
 800134c:	f000 faa2 	bl	8001894 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINR, GPIO_HIGH);
 8001350:	2201      	movs	r2, #1
 8001352:	2100      	movs	r1, #0
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff fe37 	bl	8000fc8 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINL, GPIO_LOW);
 800135a:	2200      	movs	r2, #0
 800135c:	2105      	movs	r1, #5
 800135e:	2001      	movs	r0, #1
 8001360:	f7ff fe32 	bl	8000fc8 <GPIO_voidSetPinValue>
			break;
 8001364:	e010      	b.n	8001388 <MOTOR_CounterClockWise+0x6c>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,A_u16CaptureValue);
 8001366:	88bb      	ldrh	r3, [r7, #4]
 8001368:	461a      	mov	r2, r3
 800136a:	2104      	movs	r1, #4
 800136c:	2002      	movs	r0, #2
 800136e:	f000 fa91 	bl	8001894 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINR, GPIO_HIGH);
 8001372:	2201      	movs	r2, #1
 8001374:	2106      	movs	r1, #6
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fe26 	bl	8000fc8 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_LOW);
 800137c:	2200      	movs	r2, #0
 800137e:	2107      	movs	r1, #7
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff fe21 	bl	8000fc8 <GPIO_voidSetPinValue>
			break;
 8001386:	bf00      	nop
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <MOTOR_ClockWise>:

void MOTOR_ClockWise  (u8 A_u8MotorNum , u16 A_u16CaptureValue)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	460a      	mov	r2, r1
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	4613      	mov	r3, r2
 800139e:	80bb      	strh	r3, [r7, #4]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d02a      	beq.n	80013fc <MOTOR_ClockWise+0x6c>
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d827      	bhi.n	80013fc <MOTOR_ClockWise+0x6c>
	{
		switch(A_u8MotorNum)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d002      	beq.n	80013b8 <MOTOR_ClockWise+0x28>
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d011      	beq.n	80013da <MOTOR_ClockWise+0x4a>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_HIGH);
//			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR2_SecondChannelNumber,A_u16CaptureValue);
			break;
		}
	}
}
 80013b6:	e021      	b.n	80013fc <MOTOR_ClockWise+0x6c>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,A_u16CaptureValue);
 80013b8:	88bb      	ldrh	r3, [r7, #4]
 80013ba:	461a      	mov	r2, r3
 80013bc:	2103      	movs	r1, #3
 80013be:	2002      	movs	r0, #2
 80013c0:	f000 fa68 	bl	8001894 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINR, GPIO_LOW);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	2001      	movs	r0, #1
 80013ca:	f7ff fdfd 	bl	8000fc8 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINL, GPIO_HIGH);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2105      	movs	r1, #5
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7ff fdf8 	bl	8000fc8 <GPIO_voidSetPinValue>
			break;
 80013d8:	e010      	b.n	80013fc <MOTOR_ClockWise+0x6c>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR2_FirstChannelNumber,A_u16CaptureValue);
 80013da:	88bb      	ldrh	r3, [r7, #4]
 80013dc:	461a      	mov	r2, r3
 80013de:	2104      	movs	r1, #4
 80013e0:	2002      	movs	r0, #2
 80013e2:	f000 fa57 	bl	8001894 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINR, GPIO_LOW);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2106      	movs	r1, #6
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff fdec 	bl	8000fc8 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_HIGH);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2107      	movs	r1, #7
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff fde7 	bl	8000fc8 <GPIO_voidSetPinValue>
			break;
 80013fa:	bf00      	nop
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <MOTOR_Stop>:

void MOTOR_Stop  (u8 A_u8MotorNum)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d014      	beq.n	800143e <MOTOR_Stop+0x3a>
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d811      	bhi.n	800143e <MOTOR_Stop+0x3a>
	{
		switch(A_u8MotorNum)
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d002      	beq.n	8001426 <MOTOR_Stop+0x22>
 8001420:	2b02      	cmp	r3, #2
 8001422:	d006      	beq.n	8001432 <MOTOR_Stop+0x2e>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,0);
//			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_SecondChannelNumber,0);
			break;
		}
	}
}
 8001424:	e00b      	b.n	800143e <MOTOR_Stop+0x3a>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,0);
 8001426:	2200      	movs	r2, #0
 8001428:	2103      	movs	r1, #3
 800142a:	2002      	movs	r0, #2
 800142c:	f000 fa32 	bl	8001894 <MTimer_voidPWM>
			break;
 8001430:	e005      	b.n	800143e <MOTOR_Stop+0x3a>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,0);
 8001432:	2200      	movs	r2, #0
 8001434:	2104      	movs	r1, #4
 8001436:	2002      	movs	r0, #2
 8001438:	f000 fa2c 	bl	8001894 <MTimer_voidPWM>
			break;
 800143c:	bf00      	nop
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <RCC_voidInitSysClock>:
#include "RCC_interface.h"
#include "RCC_config.h"


void RCC_voidInitSysClock(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	#if RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		SET_BIT(RCC->RCC_CR,16);
 800144c:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <RCC_voidInitSysClock+0x60>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a15      	ldr	r2, [pc, #84]	@ (80014a8 <RCC_voidInitSysClock+0x60>)
 8001452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001456:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CR,18);
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <RCC_voidInitSysClock+0x60>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <RCC_voidInitSysClock+0x60>)
 800145e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001462:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CFGR,0);
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <RCC_voidInitSysClock+0x60>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a0f      	ldr	r2, [pc, #60]	@ (80014a8 <RCC_voidInitSysClock+0x60>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->RCC_CFGR,1);
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <RCC_voidInitSysClock+0x60>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a0c      	ldr	r2, [pc, #48]	@ (80014a8 <RCC_voidInitSysClock+0x60>)
 8001476:	f023 0302 	bic.w	r3, r3, #2
 800147a:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->RCC_CFGR,1);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_AHP_PRESCALER   ==RCC_AHP_DIV_1
		CLR_BIT(RCC->RCC_CFGR,7);
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <RCC_voidInitSysClock+0x60>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <RCC_voidInitSysClock+0x60>)
 8001482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001486:	6053      	str	r3, [r2, #4]
	     SET_BIT(RCC->RCC_CFGR,7);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_APB1_PRESCALER   ==RCC_APB1_DIV_1
		CLR_BIT(RCC->RCC_CFGR,8);
 8001488:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <RCC_voidInitSysClock+0x60>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4a06      	ldr	r2, [pc, #24]	@ (80014a8 <RCC_voidInitSysClock+0x60>)
 800148e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001492:	6053      	str	r3, [r2, #4]
	    SET_BIT(RCC->RCC_CFGR,10);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_APB2_PRESCALER   ==RCC_APB2_DIV_1
		CLR_BIT(RCC->RCC_CFGR,11);
 8001494:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <RCC_voidInitSysClock+0x60>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a03      	ldr	r2, [pc, #12]	@ (80014a8 <RCC_voidInitSysClock+0x60>)
 800149a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800149e:	6053      	str	r3, [r2, #4]
	    SET_BIT(RCC->RCC_CFGR,12);
	    SET_BIT(RCC->RCC_CFGR,13);
	#else 
		#error("wrong choise")
	#endif
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	40021000 	.word	0x40021000

080014ac <RCC_voidEnablePeripheral>:
	#endif
}


void RCC_voidEnablePeripheral(u8 Copy_u8Bus, u8 Copy_u8Peripheral)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	460a      	mov	r2, r1
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	4613      	mov	r3, r2
 80014ba:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8Bus)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d01c      	beq.n	80014fc <RCC_voidEnablePeripheral+0x50>
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	dc25      	bgt.n	8001512 <RCC_voidEnablePeripheral+0x66>
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <RCC_voidEnablePeripheral+0x24>
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d00b      	beq.n	80014e6 <RCC_voidEnablePeripheral+0x3a>
			break;
		case RCC_APB2:
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
			break;
	}
}
 80014ce:	e020      	b.n	8001512 <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_AHBENR,Copy_u8Peripheral);
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <RCC_voidEnablePeripheral+0x70>)
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	79ba      	ldrb	r2, [r7, #6]
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f202 	lsl.w	r2, r1, r2
 80014dc:	4611      	mov	r1, r2
 80014de:	4a0f      	ldr	r2, [pc, #60]	@ (800151c <RCC_voidEnablePeripheral+0x70>)
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6153      	str	r3, [r2, #20]
			break;
 80014e4:	e015      	b.n	8001512 <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_APB1ENR,Copy_u8Peripheral);
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <RCC_voidEnablePeripheral+0x70>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	79ba      	ldrb	r2, [r7, #6]
 80014ec:	2101      	movs	r1, #1
 80014ee:	fa01 f202 	lsl.w	r2, r1, r2
 80014f2:	4611      	mov	r1, r2
 80014f4:	4a09      	ldr	r2, [pc, #36]	@ (800151c <RCC_voidEnablePeripheral+0x70>)
 80014f6:	430b      	orrs	r3, r1
 80014f8:	61d3      	str	r3, [r2, #28]
			break;
 80014fa:	e00a      	b.n	8001512 <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
 80014fc:	4b07      	ldr	r3, [pc, #28]	@ (800151c <RCC_voidEnablePeripheral+0x70>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	79ba      	ldrb	r2, [r7, #6]
 8001502:	2101      	movs	r1, #1
 8001504:	fa01 f202 	lsl.w	r2, r1, r2
 8001508:	4611      	mov	r1, r2
 800150a:	4a04      	ldr	r2, [pc, #16]	@ (800151c <RCC_voidEnablePeripheral+0x70>)
 800150c:	430b      	orrs	r3, r1
 800150e:	6193      	str	r3, [r2, #24]
			break;
 8001510:	bf00      	nop
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	40021000 	.word	0x40021000

08001520 <truncate_queue>:
}


// function to handle dequeue operation
static SPI_ERROR_STATUS_t truncate_queue(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
	
	//status code
    SPI_ERROR_STATUS_t loc_enu_StatusCode = SPI_OKAY;
 8001526:	2300      	movs	r3, #0
 8001528:	71fb      	strb	r3, [r7, #7]
	
	// check if all bytes has been sent OR queue is empty
	if((gl_SPI_data_queue.s16_front_queue > gl_SPI_data_queue.s16_rear_queue) || (gl_SPI_data_queue.s16_front_queue == EMPTY_POSITOIN))
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <truncate_queue+0x70>)
 800152c:	f993 20c8 	ldrsb.w	r2, [r3, #200]	@ 0xc8
 8001530:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <truncate_queue+0x70>)
 8001532:	f993 30c9 	ldrsb.w	r3, [r3, #201]	@ 0xc9
 8001536:	429a      	cmp	r2, r3
 8001538:	dc05      	bgt.n	8001546 <truncate_queue+0x26>
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <truncate_queue+0x70>)
 800153c:	f993 30c8 	ldrsb.w	r3, [r3, #200]	@ 0xc8
 8001540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001544:	d10a      	bne.n	800155c <truncate_queue+0x3c>
	{
		// set front and rear to defaults
		gl_SPI_data_queue.s16_front_queue = EMPTY_POSITOIN;
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <truncate_queue+0x70>)
 8001548:	22ff      	movs	r2, #255	@ 0xff
 800154a:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
		gl_SPI_data_queue.s16_rear_queue  = EMPTY_POSITOIN;
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <truncate_queue+0x70>)
 8001550:	22ff      	movs	r2, #255	@ 0xff
 8001552:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
		
		//status code queue is empty
		loc_enu_StatusCode = QUEUE_EMPTY;
 8001556:	2302      	movs	r3, #2
 8001558:	71fb      	strb	r3, [r7, #7]
 800155a:	e012      	b.n	8001582 <truncate_queue+0x62>
	}
	else
	{
		//send current byte and increment front
		SPI1->DR = gl_SPI_data_queue.u16_arr_data[gl_SPI_data_queue.s16_front_queue];
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <truncate_queue+0x70>)
 800155e:	f993 30c8 	ldrsb.w	r3, [r3, #200]	@ 0xc8
 8001562:	461a      	mov	r2, r3
 8001564:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <truncate_queue+0x70>)
 8001566:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <truncate_queue+0x74>)
 800156c:	60da      	str	r2, [r3, #12]
		gl_SPI_data_queue.s16_front_queue++;
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <truncate_queue+0x70>)
 8001570:	f993 30c8 	ldrsb.w	r3, [r3, #200]	@ 0xc8
 8001574:	b2db      	uxtb	r3, r3
 8001576:	3301      	adds	r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	b25a      	sxtb	r2, r3
 800157c:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <truncate_queue+0x70>)
 800157e:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
	}
	return loc_enu_StatusCode;
 8001582:	79fb      	ldrb	r3, [r7, #7]
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000000 	.word	0x20000000
 8001594:	40013000 	.word	0x40013000

08001598 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
    // TODO HANDLE ISR FOR RECEPTION
	#if   SPI1_MASTER_SLAVE == SPI_SLAVE
       sgl_Recieve_Index = (u8)SPI1->DR;
       gl_ptr_Function();
    #elif SPI1_MASTER_SLAVE == SPI_MASTER
      if (truncate_queue() == QUEUE_EMPTY)
 800159c:	f7ff ffc0 	bl	8001520 <truncate_queue>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d106      	bne.n	80015b4 <SPI1_IRQHandler+0x1c>
      {
        if (gl_ptr_Function != PTR_NULL)
 80015a6:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <SPI1_IRQHandler+0x20>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <SPI1_IRQHandler+0x1c>
        {
            gl_ptr_Function();
 80015ae:	4b02      	ldr	r3, [pc, #8]	@ (80015b8 <SPI1_IRQHandler+0x20>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4798      	blx	r3
        }
      }
    #endif

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200000fc 	.word	0x200000fc

080015bc <MSTK_voidInit>:

/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;

void MSTK_voidInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
#if MSTK_CLK_SRC == MSTK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	MSTK -> CTRL = 0x00000004;
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	MSTK -> CTRL = 0;
 80015c0:	4b03      	ldr	r3, [pc, #12]	@ (80015d0 <MSTK_voidInit+0x14>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]

#endif
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e010 	.word	0xe000e010

080015d4 <MSTK_voidSetBusyWait>:

void MSTK_voidSetBusyWait( u32 Copy_u32Ticks )
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks;
 80015dc:	4a10      	ldr	r2, [pc, #64]	@ (8001620 <MSTK_voidSetBusyWait+0x4c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6053      	str	r3, [r2, #4]

	/* Start Timer */
	SET_BIT(MSTK->CTRL, 0);
 80015e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MSTK_voidSetBusyWait+0x4c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001620 <MSTK_voidSetBusyWait+0x4c>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6013      	str	r3, [r2, #0]

	/* Wait till flag is raised */
	while( (GET_BIT(MSTK->CTRL,16)) == 0);
 80015ee:	bf00      	nop
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <MSTK_voidSetBusyWait+0x4c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f9      	beq.n	80015f0 <MSTK_voidSetBusyWait+0x1c>

	/* Stop Timer */
	SET_BIT(MSTK->CTRL, 0);
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <MSTK_voidSetBusyWait+0x4c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	@ (8001620 <MSTK_voidSetBusyWait+0x4c>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD = 0;
 8001608:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <MSTK_voidSetBusyWait+0x4c>)
 800160a:	2200      	movs	r2, #0
 800160c:	605a      	str	r2, [r3, #4]
	MSTK -> VAL  = 0;
 800160e:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <MSTK_voidSetBusyWait+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
	
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <SysTick_Handler>:

	return Local_u32RemainTime;
}

void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary ;

	if (MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <SysTick_Handler+0x50>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d111      	bne.n	8001656 <SysTick_Handler+0x32>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK->CTRL, 1);
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <SysTick_Handler+0x54>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a10      	ldr	r2, [pc, #64]	@ (8001678 <SysTick_Handler+0x54>)
 8001638:	f023 0302 	bic.w	r3, r3, #2
 800163c:	6013      	str	r3, [r2, #0]

		/* Stop Timer */
		SET_BIT(MSTK->CTRL, 0);
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <SysTick_Handler+0x54>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <SysTick_Handler+0x54>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD = 0;
 800164a:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <SysTick_Handler+0x54>)
 800164c:	2200      	movs	r2, #0
 800164e:	605a      	str	r2, [r3, #4]
		MSTK -> VAL  = 0;
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <SysTick_Handler+0x54>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
	}

	/* Callback notification */
	MSTK_CallBack();
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <SysTick_Handler+0x58>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4798      	blx	r3

	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(MSTK->CTRL,16);
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <SysTick_Handler+0x54>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	0c1b      	lsrs	r3, r3, #16
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	71fb      	strb	r3, [r7, #7]
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000104 	.word	0x20000104
 8001678:	e000e010 	.word	0xe000e010
 800167c:	20000100 	.word	0x20000100

08001680 <MTimer_voidInit>:
u8 channel31_set = 0;
u8 channel32_set = 0;


void MTimer_voidInit (u8 A_u8TimerSelected)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]

	/* Enable pinout of ADC (PortA , PORTB) from RCC */
	//MRCC_voidEnablePerephiralClock(RCC_AHB1 , RCC_EN_GPIOA) ;
	//MRCC_voidEnablePerephiralClock(RCC_AHB1 , RCC_EN_GPIOB) ;

	switch (A_u8TimerSelected)
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	3b01      	subs	r3, #1
 800168e:	2b03      	cmp	r3, #3
 8001690:	f200 80f5 	bhi.w	800187e <MTimer_voidInit+0x1fe>
 8001694:	a201      	add	r2, pc, #4	@ (adr r2, 800169c <MTimer_voidInit+0x1c>)
 8001696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169a:	bf00      	nop
 800169c:	080016ad 	.word	0x080016ad
 80016a0:	08001711 	.word	0x08001711
 80016a4:	080017a3 	.word	0x080017a3
 80016a8:	08001811 	.word	0x08001811
		/**                             Init TIM1                                    **/
		/******************************************************************************/

			/* Select the Direction */
            #if   TIM1_DIRECTION == UP_COUNTER
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_DIR_BIT) ;
 80016ac:	4b76      	ldr	r3, [pc, #472]	@ (8001888 <MTimer_voidInit+0x208>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a75      	ldr	r2, [pc, #468]	@ (8001888 <MTimer_voidInit+0x208>)
 80016b2:	f023 0310 	bic.w	r3, r3, #16
 80016b6:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM1_DIRECTION"
            #endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_1->CR1 , TIM1_CR1_CMS_BIT0) ;
 80016b8:	4b73      	ldr	r3, [pc, #460]	@ (8001888 <MTimer_voidInit+0x208>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a72      	ldr	r2, [pc, #456]	@ (8001888 <MTimer_voidInit+0x208>)
 80016be:	f023 0320 	bic.w	r3, r3, #32
 80016c2:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_1->CR1 , TIM1_CR1_CMS_BIT1) ;
 80016c4:	4b70      	ldr	r3, [pc, #448]	@ (8001888 <MTimer_voidInit+0x208>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a6f      	ldr	r2, [pc, #444]	@ (8001888 <MTimer_voidInit+0x208>)
 80016ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80016ce:	6013      	str	r3, [r2, #0]

			/* set the timer division */
            #if   TIM1_DIVISION == tCK_INT_x_1
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_CKD_BIT0) ;
 80016d0:	4b6d      	ldr	r3, [pc, #436]	@ (8001888 <MTimer_voidInit+0x208>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a6c      	ldr	r2, [pc, #432]	@ (8001888 <MTimer_voidInit+0x208>)
 80016d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016da:	6013      	str	r3, [r2, #0]
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_CKD_BIT1) ;
 80016dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001888 <MTimer_voidInit+0x208>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a69      	ldr	r2, [pc, #420]	@ (8001888 <MTimer_voidInit+0x208>)
 80016e2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80016e6:	6013      	str	r3, [r2, #0]
                  #error "Invalid Selection of TIM1_DIVISION"
            #endif

			/* set the timer prescaller */
            #if    TIM1_PRESCALLER <= MAX_TIM_PRESCALLER
            	   TIM_1 ->PSC = TIM1_PRESCALLER ;
 80016e8:	4b67      	ldr	r3, [pc, #412]	@ (8001888 <MTimer_voidInit+0x208>)
 80016ea:	2208      	movs	r2, #8
 80016ec:	629a      	str	r2, [r3, #40]	@ 0x28
            #else
                   #error "TIM1_PRESCALLER out of range"
            #endif

            /* Enable auto-reload preload */
            SET_BIT(TIM_1->CR1 , TIM1_CR1_ARPE_BIT) ;
 80016ee:	4b66      	ldr	r3, [pc, #408]	@ (8001888 <MTimer_voidInit+0x208>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a65      	ldr	r2, [pc, #404]	@ (8001888 <MTimer_voidInit+0x208>)
 80016f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f8:	6013      	str	r3, [r2, #0]

            /* Set the Auto-reload value */
            #if  TIM1_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
            	   TIM_1->ARR = TIM1_PRELOAD_VALUE ;
 80016fa:	4b63      	ldr	r3, [pc, #396]	@ (8001888 <MTimer_voidInit+0x208>)
 80016fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001700:	62da      	str	r2, [r3, #44]	@ 0x2c
           //       #error "REPETATION_COUNTER out of range"
           // #endif

            /* Generate an update event to reload the Prescaler
            and the repetition counter(only for TIM1 and TIM5) value immediately */
            SET_BIT(TIM_1->EGR , TIM1_EGR_UG_BIT );
 8001702:	4b61      	ldr	r3, [pc, #388]	@ (8001888 <MTimer_voidInit+0x208>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	4a60      	ldr	r2, [pc, #384]	@ (8001888 <MTimer_voidInit+0x208>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6153      	str	r3, [r2, #20]

		break ;
 800170e:	e0b6      	b.n	800187e <MTimer_voidInit+0x1fe>
		/******************************************************************************/
		/**                             Init TIM2                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_2 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8001710:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800171a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800171e:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
            #if   TIM2_DIRECTION == UP_COUNTER
			      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 8001720:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800172a:	f023 0310 	bic.w	r3, r3, #16
 800172e:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM2_DIRECTION"
            #endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8001730:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800173a:	f023 0320 	bic.w	r3, r3, #32
 800173e:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8001740:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800174a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800174e:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM2_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8001750:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800175a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800175e:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 8001760:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800176a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800176e:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM2_DIVISION"
			#endif

		    /* set the timer prescaller */
	        #if    TIM2_PRESCALLER <= MAX_TIM_PRESCALLER
	        	   TIM_2 ->PSC = TIM2_PRESCALLER ;
 8001770:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001774:	2208      	movs	r2, #8
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28
	        #else
	               #error "TIM2_PRESCALLER out of range"
	        #endif

	        /* Enable auto-reload preload */
	        SET_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 8001778:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001786:	6013      	str	r3, [r2, #0]

	        /* Set the Auto-reload value */
	        #if  TIM2_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
	        	   TIM_2->ARR = TIM2_PRELOAD_VALUE ;
 8001788:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800178c:	220f      	movs	r2, #15
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
	              #error "TIM2_PRELOAD_VALUE out of range"
	        #endif

	        /* Generate an update event to reload the Prescaler
	         and the repetition counter(only for TIM1 and TIM5) value immediately */
	        SET_BIT(TIM_2->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8001790:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6153      	str	r3, [r2, #20]

		break ;
 80017a0:	e06d      	b.n	800187e <MTimer_voidInit+0x1fe>
		/******************************************************************************/
		/**                             Init TIM3                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_3 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 80017a2:	4b3a      	ldr	r3, [pc, #232]	@ (800188c <MTimer_voidInit+0x20c>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	4a39      	ldr	r2, [pc, #228]	@ (800188c <MTimer_voidInit+0x20c>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ac:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
            #if   TIM3_DIRECTION == UP_COUNTER
	           CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 80017ae:	4b37      	ldr	r3, [pc, #220]	@ (800188c <MTimer_voidInit+0x20c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a36      	ldr	r2, [pc, #216]	@ (800188c <MTimer_voidInit+0x20c>)
 80017b4:	f023 0310 	bic.w	r3, r3, #16
 80017b8:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM3_DIRECTION"
            #endif

	        /* Edge-aligned mode */
	        CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 80017ba:	4b34      	ldr	r3, [pc, #208]	@ (800188c <MTimer_voidInit+0x20c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a33      	ldr	r2, [pc, #204]	@ (800188c <MTimer_voidInit+0x20c>)
 80017c0:	f023 0320 	bic.w	r3, r3, #32
 80017c4:	6013      	str	r3, [r2, #0]
	        CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 80017c6:	4b31      	ldr	r3, [pc, #196]	@ (800188c <MTimer_voidInit+0x20c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a30      	ldr	r2, [pc, #192]	@ (800188c <MTimer_voidInit+0x20c>)
 80017cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80017d0:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM3_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 80017d2:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <MTimer_voidInit+0x20c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a2d      	ldr	r2, [pc, #180]	@ (800188c <MTimer_voidInit+0x20c>)
 80017d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017dc:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 80017de:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <MTimer_voidInit+0x20c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a2a      	ldr	r2, [pc, #168]	@ (800188c <MTimer_voidInit+0x20c>)
 80017e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80017e8:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM3_DIVISION"
			#endif

			/* set the timer prescaller */
		    #if    TIM3_PRESCALLER <= MAX_TIM_PRESCALLER
		    	   TIM_3 ->PSC = TIM3_PRESCALLER ;
 80017ea:	4b28      	ldr	r3, [pc, #160]	@ (800188c <MTimer_voidInit+0x20c>)
 80017ec:	2208      	movs	r2, #8
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28
		    #else
		           #error "TIM3_PRESCALLER out of range"
		    #endif

		    /* Enable auto-reload preload */
			SET_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 80017f0:	4b26      	ldr	r3, [pc, #152]	@ (800188c <MTimer_voidInit+0x20c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a25      	ldr	r2, [pc, #148]	@ (800188c <MTimer_voidInit+0x20c>)
 80017f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017fa:	6013      	str	r3, [r2, #0]

			/* Set the Auto-reload value */
			#if  TIM3_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
				   TIM_3->ARR = TIM3_PRELOAD_VALUE ;
 80017fc:	4b23      	ldr	r3, [pc, #140]	@ (800188c <MTimer_voidInit+0x20c>)
 80017fe:	220f      	movs	r2, #15
 8001800:	62da      	str	r2, [r3, #44]	@ 0x2c
			      #error "TIM3_PRELOAD_VALUE out of range"
			#endif

			/* Generate an update event to reload the Prescaler
			 and the repetition counter(only for TIM1 and TIM5) value immediately */
			SET_BIT(TIM_3->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8001802:	4b22      	ldr	r3, [pc, #136]	@ (800188c <MTimer_voidInit+0x20c>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	4a21      	ldr	r2, [pc, #132]	@ (800188c <MTimer_voidInit+0x20c>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6153      	str	r3, [r2, #20]

		break ;
 800180e:	e036      	b.n	800187e <MTimer_voidInit+0x1fe>
		/******************************************************************************/
		/**                             Init TIM4                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_4 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8001810:	4b1f      	ldr	r3, [pc, #124]	@ (8001890 <MTimer_voidInit+0x210>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a1e      	ldr	r2, [pc, #120]	@ (8001890 <MTimer_voidInit+0x210>)
 8001816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800181a:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
			#if   TIM4_DIRECTION == UP_COUNTER
			     CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 800181c:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <MTimer_voidInit+0x210>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1b      	ldr	r2, [pc, #108]	@ (8001890 <MTimer_voidInit+0x210>)
 8001822:	f023 0310 	bic.w	r3, r3, #16
 8001826:	6013      	str	r3, [r2, #0]
			#else
			      #error "Invalid Selection of TIM4_DIRECTION"
			#endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <MTimer_voidInit+0x210>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a18      	ldr	r2, [pc, #96]	@ (8001890 <MTimer_voidInit+0x210>)
 800182e:	f023 0320 	bic.w	r3, r3, #32
 8001832:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8001834:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <MTimer_voidInit+0x210>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a15      	ldr	r2, [pc, #84]	@ (8001890 <MTimer_voidInit+0x210>)
 800183a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800183e:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM4_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <MTimer_voidInit+0x210>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a12      	ldr	r2, [pc, #72]	@ (8001890 <MTimer_voidInit+0x210>)
 8001846:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800184a:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 800184c:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <MTimer_voidInit+0x210>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0f      	ldr	r2, [pc, #60]	@ (8001890 <MTimer_voidInit+0x210>)
 8001852:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001856:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM4_DIVISION"
			#endif

		    /* set the timer prescaller */
			#if    TIM4_PRESCALLER <= MAX_TIM_PRESCALLER
				   TIM_4 ->PSC = TIM4_PRESCALLER ;
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <MTimer_voidInit+0x210>)
 800185a:	2208      	movs	r2, #8
 800185c:	629a      	str	r2, [r3, #40]	@ 0x28
			#else
			       #error "TIM4_PRESCALLER out of range"
			#endif

			/* Enable auto-reload preload */
			SET_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 800185e:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <MTimer_voidInit+0x210>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a0b      	ldr	r2, [pc, #44]	@ (8001890 <MTimer_voidInit+0x210>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001868:	6013      	str	r3, [r2, #0]

			/* Set the Auto-reload value */
			#if  TIM4_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
				   TIM_4->ARR = TIM4_PRELOAD_VALUE ;
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <MTimer_voidInit+0x210>)
 800186c:	220f      	movs	r2, #15
 800186e:	62da      	str	r2, [r3, #44]	@ 0x2c
			      #error "TIM4_PRELOAD_VALUE out of range"
			#endif

		    /* Generate an update event to reload the Prescaler
		    	  and the repetition counter(only for TIM1 and TIM5) value immediately */
		    SET_BIT(TIM_4->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8001870:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <MTimer_voidInit+0x210>)
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	4a06      	ldr	r2, [pc, #24]	@ (8001890 <MTimer_voidInit+0x210>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6153      	str	r3, [r2, #20]
		break ;
 800187c:	bf00      	nop
	}
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40012c00 	.word	0x40012c00
 800188c:	40000400 	.word	0x40000400
 8001890:	40000800 	.word	0x40000800

08001894 <MTimer_voidPWM>:

void MTimer_voidPWM (u8 A_u8TimerSelected , u8 A_u8Channel , u16 A_u16CompareValue)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b0b2      	sub	sp, #200	@ 0xc8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
 800189e:	460b      	mov	r3, r1
 80018a0:	71bb      	strb	r3, [r7, #6]
 80018a2:	4613      	mov	r3, r2
 80018a4:	80bb      	strh	r3, [r7, #4]
	if (A_u8TimerSelected == TIM1_TYPE)
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	f040 81ef 	bne.w	8001c8c <MTimer_voidPWM+0x3f8>
	{
		if (A_u8Channel == TIM_CHANNEL_1)
 80018ae:	79bb      	ldrb	r3, [r7, #6]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d178      	bne.n	80019a6 <MTimer_voidPWM+0x112>
		{
			if (channel1_set==0)
 80018b4:	4b7a      	ldr	r3, [pc, #488]	@ (8001aa0 <MTimer_voidPWM+0x20c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d107      	bne.n	80018cc <MTimer_voidPWM+0x38>
			{
				GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN8,GPIO_OUTPUT_10M_AF_PP);
 80018bc:	2209      	movs	r2, #9
 80018be:	2108      	movs	r1, #8
 80018c0:	2001      	movs	r0, #1
 80018c2:	f7ff f9e1 	bl	8000c88 <GPIO_voidSetPinMode>
				channel1_set=1;
 80018c6:	4b76      	ldr	r3, [pc, #472]	@ (8001aa0 <MTimer_voidPWM+0x20c>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
			}

			u32 L_u32TempCCMRX = 0 ;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
			u32 L_u32TempCCER  = 0 ;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
		    u32 L_u32TempCR2   = 0 ;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]

			/* Disable the Channel 1: Reset the CC1E Bit */
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC1E_BIT) ;
 80018d8:	4b72      	ldr	r3, [pc, #456]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4a71      	ldr	r2, [pc, #452]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	6213      	str	r3, [r2, #32]

			/* Get the TIM CCER register value */
			L_u32TempCCMRX = TIM_1->CCER;
 80018e4:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	613b      	str	r3, [r7, #16]
			/* Get the TIM CR2 register value */
			L_u32TempCR2 = TIM_1->CR2;
 80018ea:	4b6e      	ldr	r3, [pc, #440]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	60bb      	str	r3, [r7, #8]

			/* Get the TIM CCMR1 register value */
			L_u32TempCCMRX = TIM_1->CCMR1;
 80018f0:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	613b      	str	r3, [r7, #16]

			/* Reset the Output Compare Mode Bits */
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT0) ;
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f023 0310 	bic.w	r3, r3, #16
 80018fc:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT1) ;
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f023 0320 	bic.w	r3, r3, #32
 8001904:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT2) ;
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800190c:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC1S_BIT0) ;
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC1S_BIT1) ;
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f023 0302 	bic.w	r3, r3, #2
 800191c:	613b      	str	r3, [r7, #16]
			/* Select the Output Compare Mode1 */
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001924:	613b      	str	r3, [r7, #16]

			/* Set the Output Compare Polarity as active high */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1P_BIT);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f023 0302 	bic.w	r3, r3, #2
 800192c:	60fb      	str	r3, [r7, #12]

			/* Set the Output N Polarity as active high */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1NP_BIT) ;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f023 0308 	bic.w	r3, r3, #8
 8001934:	60fb      	str	r3, [r7, #12]
			/* Reset the Output N State */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1NE_BIT) ;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f023 0304 	bic.w	r3, r3, #4
 800193c:	60fb      	str	r3, [r7, #12]

			/* Reset the Output Compare and Output Compare N IDLE State */
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS1N_BIT) ;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001944:	60bb      	str	r3, [r7, #8]
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS1N_BIT) ;
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800194c:	60bb      	str	r3, [r7, #8]

			/* Write to TIM CR2 */
			TIM_1->CR2 = L_u32TempCR2;
 800194e:	4a55      	ldr	r2, [pc, #340]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	6053      	str	r3, [r2, #4]

			/* Write to TIM CCMR1 */
			TIM_1->CCMR1 = L_u32TempCCMRX;
 8001954:	4a53      	ldr	r2, [pc, #332]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6193      	str	r3, [r2, #24]

			/* Set the Capture Compare Register value */
			TIM_1->CCR1 = A_u16CompareValue ;
 800195a:	4a52      	ldr	r2, [pc, #328]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 800195c:	88bb      	ldrh	r3, [r7, #4]
 800195e:	6353      	str	r3, [r2, #52]	@ 0x34

			/* Write to TIM CCER */
			TIM_1->CCER = L_u32TempCCER;
 8001960:	4a50      	ldr	r2, [pc, #320]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6213      	str	r3, [r2, #32]

			/* Set the Preload enable bit for channel1 */
			SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC1PE_BIT);
 8001966:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	4a4e      	ldr	r2, [pc, #312]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	6193      	str	r3, [r2, #24]

			/* Configure the Output Fast mode */
			SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC1FE_BIT) ;
 8001972:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	4a4b      	ldr	r2, [pc, #300]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6193      	str	r3, [r2, #24]

			/* Enable the Capture compare channel */
			SET_BIT(TIM_1-> CCER , TIM1_CCER_CC1E_BIT) ;
 800197e:	4b49      	ldr	r3, [pc, #292]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4a48      	ldr	r2, [pc, #288]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6213      	str	r3, [r2, #32]

			/* Enable the main output */
			SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 800198a:	4b46      	ldr	r3, [pc, #280]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	4a45      	ldr	r2, [pc, #276]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001994:	6453      	str	r3, [r2, #68]	@ 0x44

			/* Enable the timer */
			SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8001996:	4b43      	ldr	r3, [pc, #268]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a42      	ldr	r2, [pc, #264]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6013      	str	r3, [r2, #0]
	}
	else
	{
		// error type of A_u8TimerSelected
	}
}
 80019a2:	f000 bec8 	b.w	8002736 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_2)
 80019a6:	79bb      	ldrb	r3, [r7, #6]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d17f      	bne.n	8001aac <MTimer_voidPWM+0x218>
			if (channel2_set==0)
 80019ac:	4b3e      	ldr	r3, [pc, #248]	@ (8001aa8 <MTimer_voidPWM+0x214>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <MTimer_voidPWM+0x130>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN9,GPIO_OUTPUT_10M_AF_PP);
 80019b4:	2209      	movs	r2, #9
 80019b6:	2109      	movs	r1, #9
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff f965 	bl	8000c88 <GPIO_voidSetPinMode>
					channel2_set=1;
 80019be:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa8 <MTimer_voidPWM+0x214>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
			u32 L_u32TempCCER  = 0 ;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
		    u32 L_u32TempCR2   = 0 ;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
		    CLR_BIT(TIM_1->CCER , TIM1_CCER_CC2E_BIT);
 80019d0:	4b34      	ldr	r3, [pc, #208]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4a33      	ldr	r2, [pc, #204]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 80019d6:	f023 0310 	bic.w	r3, r3, #16
 80019da:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_1->CCER;
 80019dc:	4b31      	ldr	r3, [pc, #196]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	61bb      	str	r3, [r7, #24]
		    L_u32TempCR2 = TIM_1->CR2;
 80019e2:	4b30      	ldr	r3, [pc, #192]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	617b      	str	r3, [r7, #20]
		    L_u32TempCCMRX = TIM_1->CCMR1;
 80019e8:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT0);
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019f4:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT1);
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80019fc:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT0);
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a04:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT1);
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001a0c:	61fb      	str	r3, [r7, #28]
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001a14:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2P_BIT);
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f023 0320 	bic.w	r3, r3, #32
 8001a1c:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NP_BIT) ;
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a24:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NP_BIT) ;
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a2c:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NE_BIT);
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001a34:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS2_BIT);
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001a3c:	617b      	str	r3, [r7, #20]
		    CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS2N_BIT);
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001a44:	617b      	str	r3, [r7, #20]
		    TIM_1->CR2 = L_u32TempCR2;
 8001a46:	4a17      	ldr	r2, [pc, #92]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	6053      	str	r3, [r2, #4]
		    TIM_1->CCMR1 = L_u32TempCCMRX;
 8001a4c:	4a15      	ldr	r2, [pc, #84]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	6193      	str	r3, [r2, #24]
		    TIM_1->CCR2 = A_u16CompareValue;
 8001a52:	4a14      	ldr	r2, [pc, #80]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001a54:	88bb      	ldrh	r3, [r7, #4]
 8001a56:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_1->CCER = L_u32TempCCER;
 8001a58:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC2PE_BIT);
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	4a10      	ldr	r2, [pc, #64]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001a64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a68:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC2FE_BIT) ;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001a70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a74:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_1-> CCER , TIM1_CCER_CC2E_BIT) ;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001a7c:	f043 0310 	orr.w	r3, r3, #16
 8001a80:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8001a82:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001a88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a8c:	6453      	str	r3, [r2, #68]	@ 0x44
		    SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a04      	ldr	r2, [pc, #16]	@ (8001aa4 <MTimer_voidPWM+0x210>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6013      	str	r3, [r2, #0]
}
 8001a9a:	f000 be4c 	b.w	8002736 <MTimer_voidPWM+0xea2>
 8001a9e:	bf00      	nop
 8001aa0:	20000105 	.word	0x20000105
 8001aa4:	40012c00 	.word	0x40012c00
 8001aa8:	20000106 	.word	0x20000106
		else if (A_u8Channel == TIM_CHANNEL_3)
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d178      	bne.n	8001ba4 <MTimer_voidPWM+0x310>
			if (channel3_set==0)
 8001ab2:	4b73      	ldr	r3, [pc, #460]	@ (8001c80 <MTimer_voidPWM+0x3ec>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d107      	bne.n	8001aca <MTimer_voidPWM+0x236>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN10,GPIO_OUTPUT_10M_AF_PP);
 8001aba:	2209      	movs	r2, #9
 8001abc:	210a      	movs	r1, #10
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f7ff f8e2 	bl	8000c88 <GPIO_voidSetPinMode>
					channel3_set=1;
 8001ac4:	4b6e      	ldr	r3, [pc, #440]	@ (8001c80 <MTimer_voidPWM+0x3ec>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62bb      	str	r3, [r7, #40]	@ 0x28
			u32 L_u32TempCCER  = 0 ;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24
			u32 L_u32TempCR2   = 0 ;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC3E_BIT);
 8001ad6:	4b6b      	ldr	r3, [pc, #428]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a6a      	ldr	r2, [pc, #424]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ae0:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_1->CCER;
 8001ae2:	4b68      	ldr	r3, [pc, #416]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
			L_u32TempCR2 = TIM_1->CR2;
 8001ae8:	4b66      	ldr	r3, [pc, #408]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	623b      	str	r3, [r7, #32]
			L_u32TempCCMRX = TIM_1->CCMR2;
 8001aee:	4b65      	ldr	r3, [pc, #404]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_OC3M_BIT0);
 8001af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af6:	f023 0310 	bic.w	r3, r3, #16
 8001afa:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_OC3M_BIT1);
 8001afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001afe:	f023 0320 	bic.w	r3, r3, #32
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_CC3S_BIT0);
 8001b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_CC3S_BIT1);
 8001b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b0e:	f023 0302 	bic.w	r3, r3, #2
 8001b12:	62bb      	str	r3, [r7, #40]	@ 0x28
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U);
 8001b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b16:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3P_BIT);
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NP_BIT) ;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NP_BIT) ;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NE_BIT);
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS3_BIT);
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b42:	623b      	str	r3, [r7, #32]
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS3N_BIT);
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001b4a:	623b      	str	r3, [r7, #32]
			TIM_1->CR2 = L_u32TempCR2;
 8001b4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	6053      	str	r3, [r2, #4]
			TIM_1->CCMR2 = L_u32TempCCMRX;
 8001b52:	4a4c      	ldr	r2, [pc, #304]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b56:	61d3      	str	r3, [r2, #28]
			TIM_1->CCR3 = A_u16CompareValue;
 8001b58:	4a4a      	ldr	r2, [pc, #296]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_1->CCER = L_u32TempCCER;
 8001b5e:	4a49      	ldr	r2, [pc, #292]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC3PE_BIT);
 8001b64:	4b47      	ldr	r3, [pc, #284]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	4a46      	ldr	r2, [pc, #280]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	61d3      	str	r3, [r2, #28]
		    SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC3FE_BIT) ;
 8001b70:	4b44      	ldr	r3, [pc, #272]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	4a43      	ldr	r2, [pc, #268]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	61d3      	str	r3, [r2, #28]
		    SET_BIT(TIM_1-> CCER , TIM1_CCER_CC3E_BIT) ;
 8001b7c:	4b41      	ldr	r3, [pc, #260]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a40      	ldr	r2, [pc, #256]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b86:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8001b88:	4b3e      	ldr	r3, [pc, #248]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8c:	4a3d      	ldr	r2, [pc, #244]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001b8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b92:	6453      	str	r3, [r2, #68]	@ 0x44
		    SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8001b94:	4b3b      	ldr	r3, [pc, #236]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a3a      	ldr	r2, [pc, #232]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6013      	str	r3, [r2, #0]
}
 8001ba0:	f000 bdc9 	b.w	8002736 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_4)
 8001ba4:	79bb      	ldrb	r3, [r7, #6]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	f040 85c5 	bne.w	8002736 <MTimer_voidPWM+0xea2>
			if (channel4_set==0)
 8001bac:	4b36      	ldr	r3, [pc, #216]	@ (8001c88 <MTimer_voidPWM+0x3f4>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d107      	bne.n	8001bc4 <MTimer_voidPWM+0x330>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN11,GPIO_OUTPUT_10M_AF_PP);
 8001bb4:	2209      	movs	r2, #9
 8001bb6:	210b      	movs	r1, #11
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f7ff f865 	bl	8000c88 <GPIO_voidSetPinMode>
					channel4_set=1;
 8001bbe:	4b32      	ldr	r3, [pc, #200]	@ (8001c88 <MTimer_voidPWM+0x3f4>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	637b      	str	r3, [r7, #52]	@ 0x34
			u32 L_u32TempCCER  = 0 ;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	633b      	str	r3, [r7, #48]	@ 0x30
			u32 L_u32TempCR2   = 0 ;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC4E_BIT);
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001bd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001bda:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_1->CCER;
 8001bdc:	4b29      	ldr	r3, [pc, #164]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	633b      	str	r3, [r7, #48]	@ 0x30
			L_u32TempCR2 = TIM_1->CR2;
 8001be2:	4b28      	ldr	r3, [pc, #160]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			L_u32TempCCMRX = TIM_1->CCMR2;
 8001be8:	4b26      	ldr	r3, [pc, #152]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT0);
 8001bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001bf4:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT1);
 8001bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bf8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001bfc:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT0);
 8001bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c04:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT1);
 8001c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001c0c:	637b      	str	r3, [r7, #52]	@ 0x34
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c10:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001c14:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC4P_BIT);
 8001c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001c1c:	633b      	str	r3, [r7, #48]	@ 0x30
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS4_BIT);
 8001c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
			TIM_1->CR2 = L_u32TempCR2;
 8001c26:	4a17      	ldr	r2, [pc, #92]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2a:	6053      	str	r3, [r2, #4]
			TIM_1->CCMR2 = L_u32TempCCMRX;
 8001c2c:	4a15      	ldr	r2, [pc, #84]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c30:	61d3      	str	r3, [r2, #28]
			TIM_1->CCR4 = A_u16CompareValue;
 8001c32:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001c34:	88bb      	ldrh	r3, [r7, #4]
 8001c36:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_1->CCER = L_u32TempCCER;
 8001c38:	4a12      	ldr	r2, [pc, #72]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c3c:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC4PE_BIT);
 8001c3e:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a10      	ldr	r2, [pc, #64]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001c44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c48:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC4FE_BIT) ;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001c50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c54:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_1-> CCER , TIM1_CCER_CC4E_BIT) ;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001c5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c60:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8001c62:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	4a07      	ldr	r2, [pc, #28]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001c68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c6c:	6453      	str	r3, [r2, #68]	@ 0x44
			SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8001c6e:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <MTimer_voidPWM+0x3f0>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6013      	str	r3, [r2, #0]
}
 8001c7a:	f000 bd5c 	b.w	8002736 <MTimer_voidPWM+0xea2>
 8001c7e:	bf00      	nop
 8001c80:	20000107 	.word	0x20000107
 8001c84:	40012c00 	.word	0x40012c00
 8001c88:	20000108 	.word	0x20000108
	else if (A_u8TimerSelected == TIM2_TYPE)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	f040 81dd 	bne.w	800204e <MTimer_voidPWM+0x7ba>
		if (A_u8Channel == TIM_CHANNEL_1)
 8001c94:	79bb      	ldrb	r3, [r7, #6]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d173      	bne.n	8001d82 <MTimer_voidPWM+0x4ee>
			if (channel21_set==0)
 8001c9a:	4bb0      	ldr	r3, [pc, #704]	@ (8001f5c <MTimer_voidPWM+0x6c8>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d107      	bne.n	8001cb2 <MTimer_voidPWM+0x41e>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN15,GPIO_OUTPUT_10M_AF_PP);
 8001ca2:	2209      	movs	r2, #9
 8001ca4:	210f      	movs	r1, #15
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f7fe ffee 	bl	8000c88 <GPIO_voidSetPinMode>
					channel21_set=1;
 8001cac:	4bab      	ldr	r3, [pc, #684]	@ (8001f5c <MTimer_voidPWM+0x6c8>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	643b      	str	r3, [r7, #64]	@ 0x40
			u32 L_u32TempCCER  = 0 ;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
			u32 L_u32TempCR2   = 0 ;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001cbe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_2->CCER;
 8001cce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	643b      	str	r3, [r7, #64]	@ 0x40
			L_u32TempCR2 = TIM_2->CR2;
 8001cd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
			L_u32TempCCMRX = TIM_2->CCMR1;
 8001cde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 8001ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ce8:	f023 0310 	bic.w	r3, r3, #16
 8001cec:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 8001cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf0:	f023 0320 	bic.w	r3, r3, #32
 8001cf4:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 8001cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001cfc:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 8001cfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 8001d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d08:	f023 0302 	bic.w	r3, r3, #2
 8001d0c:	643b      	str	r3, [r7, #64]	@ 0x40
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8001d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d10:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d14:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 8001d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d18:	f023 0302 	bic.w	r3, r3, #2
 8001d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			TIM_2->CR2 = L_u32TempCR2;
 8001d1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d24:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR1 = L_u32TempCCMRX;
 8001d26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d2c:	6193      	str	r3, [r2, #24]
			TIM_2->CCR1 = A_u16CompareValue;
 8001d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d32:	88bb      	ldrh	r3, [r7, #4]
 8001d34:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM_2->CCER = L_u32TempCCER;
 8001d36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d3c:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 8001d3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d48:	f043 0308 	orr.w	r3, r3, #8
 8001d4c:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 8001d4e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001d5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001d6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6013      	str	r3, [r2, #0]
}
 8001d7e:	f000 bcda 	b.w	8002736 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_2)
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d173      	bne.n	8001e70 <MTimer_voidPWM+0x5dc>
			if (channel22_set==0)
 8001d88:	4b75      	ldr	r3, [pc, #468]	@ (8001f60 <MTimer_voidPWM+0x6cc>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <MTimer_voidPWM+0x50c>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN1,GPIO_OUTPUT_10M_AF_PP);
 8001d90:	2209      	movs	r2, #9
 8001d92:	2101      	movs	r1, #1
 8001d94:	2001      	movs	r0, #1
 8001d96:	f7fe ff77 	bl	8000c88 <GPIO_voidSetPinMode>
					channel22_set=1;
 8001d9a:	4b71      	ldr	r3, [pc, #452]	@ (8001f60 <MTimer_voidPWM+0x6cc>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001da0:	2300      	movs	r3, #0
 8001da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
			u32 L_u32TempCCER  = 0 ;
 8001da4:	2300      	movs	r3, #0
 8001da6:	64bb      	str	r3, [r7, #72]	@ 0x48
		    u32 L_u32TempCR2   = 0 ;
 8001da8:	2300      	movs	r3, #0
 8001daa:	647b      	str	r3, [r7, #68]	@ 0x44
		    CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 8001dac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001db6:	f023 0310 	bic.w	r3, r3, #16
 8001dba:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_2->CCER;
 8001dbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
		    L_u32TempCR2 = TIM_2->CR2;
 8001dc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	647b      	str	r3, [r7, #68]	@ 0x44
		    L_u32TempCCMRX = TIM_2->CCMR1;
 8001dcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8001dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8001ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8001de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001de6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8001dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dee:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001df6:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 8001dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dfe:	f023 0320 	bic.w	r3, r3, #32
 8001e02:	64bb      	str	r3, [r7, #72]	@ 0x48
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 8001e04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
		    TIM_2->CR2 = L_u32TempCR2;
 8001e0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e12:	6053      	str	r3, [r2, #4]
		    TIM_2->CCMR1 = L_u32TempCCMRX;
 8001e14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e1a:	6193      	str	r3, [r2, #24]
		    TIM_2->CCR2 = A_u16CompareValue;
 8001e1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e20:	88bb      	ldrh	r3, [r7, #4]
 8001e22:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_2->CCER = L_u32TempCCER;
 8001e24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e2a:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 8001e2c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e36:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e3a:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 8001e3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e4a:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 8001e4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e56:	f043 0310 	orr.w	r3, r3, #16
 8001e5a:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001e5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	f000 bc63 	b.w	8002736 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_3)
 8001e70:	79bb      	ldrb	r3, [r7, #6]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d178      	bne.n	8001f68 <MTimer_voidPWM+0x6d4>
			if (channel23_set==0)
 8001e76:	4b3b      	ldr	r3, [pc, #236]	@ (8001f64 <MTimer_voidPWM+0x6d0>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d107      	bne.n	8001e8e <MTimer_voidPWM+0x5fa>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN2,GPIO_OUTPUT_10M_AF_PP);
 8001e7e:	2209      	movs	r2, #9
 8001e80:	2102      	movs	r1, #2
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7fe ff00 	bl	8000c88 <GPIO_voidSetPinMode>
					channel23_set=1;
 8001e88:	4b36      	ldr	r3, [pc, #216]	@ (8001f64 <MTimer_voidPWM+0x6d0>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	65bb      	str	r3, [r7, #88]	@ 0x58
			u32 L_u32TempCCER  = 0 ;
 8001e92:	2300      	movs	r3, #0
 8001e94:	657b      	str	r3, [r7, #84]	@ 0x54
			u32 L_u32TempCR2   = 0 ;
 8001e96:	2300      	movs	r3, #0
 8001e98:	653b      	str	r3, [r7, #80]	@ 0x50
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 8001e9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ea8:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_2->CCER;
 8001eaa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	657b      	str	r3, [r7, #84]	@ 0x54
			L_u32TempCR2 = TIM_2->CR2;
 8001eb2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	653b      	str	r3, [r7, #80]	@ 0x50
			L_u32TempCCMRX = TIM_2->CCMR2;
 8001eba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 8001ec2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ec4:	f023 0310 	bic.w	r3, r3, #16
 8001ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 8001eca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ecc:	f023 0320 	bic.w	r3, r3, #32
 8001ed0:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 8001ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 8001eda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001edc:	f023 0302 	bic.w	r3, r3, #2
 8001ee0:	65bb      	str	r3, [r7, #88]	@ 0x58
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8001ee2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ee4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ee8:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 8001eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001ef0:	657b      	str	r3, [r7, #84]	@ 0x54
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 8001ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001ef8:	657b      	str	r3, [r7, #84]	@ 0x54
			TIM_2->CR2 = L_u32TempCR2;
 8001efa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f00:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR2 = L_u32TempCCMRX;
 8001f02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f08:	61d3      	str	r3, [r2, #28]
			TIM_2->CCR3 = A_u16CompareValue;
 8001f0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f0e:	88bb      	ldrh	r3, [r7, #4]
 8001f10:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_2->CCER = L_u32TempCCER;
 8001f12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f18:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 8001f1a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f24:	f043 0308 	orr.w	r3, r3, #8
 8001f28:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 8001f2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 8001f3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f48:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001f4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6013      	str	r3, [r2, #0]
}
 8001f5a:	e3ec      	b.n	8002736 <MTimer_voidPWM+0xea2>
 8001f5c:	20000109 	.word	0x20000109
 8001f60:	2000010a 	.word	0x2000010a
 8001f64:	2000010b 	.word	0x2000010b
		else if (A_u8Channel == TIM_CHANNEL_4)
 8001f68:	79bb      	ldrb	r3, [r7, #6]
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	f040 83e3 	bne.w	8002736 <MTimer_voidPWM+0xea2>
			if (channel24_set==0)
 8001f70:	4b9e      	ldr	r3, [pc, #632]	@ (80021ec <MTimer_voidPWM+0x958>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d107      	bne.n	8001f88 <MTimer_voidPWM+0x6f4>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN3,GPIO_OUTPUT_10M_AF_PP);
 8001f78:	2209      	movs	r2, #9
 8001f7a:	2103      	movs	r1, #3
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7fe fe83 	bl	8000c88 <GPIO_voidSetPinMode>
					channel24_set=1;
 8001f82:	4b9a      	ldr	r3, [pc, #616]	@ (80021ec <MTimer_voidPWM+0x958>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	667b      	str	r3, [r7, #100]	@ 0x64
			u32 L_u32TempCCER  = 0 ;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	663b      	str	r3, [r7, #96]	@ 0x60
			u32 L_u32TempCR2   = 0 ;
 8001f90:	2300      	movs	r3, #0
 8001f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 8001f94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001fa2:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_2->CCER;
 8001fa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	663b      	str	r3, [r7, #96]	@ 0x60
			L_u32TempCR2 = TIM_2->CR2;
 8001fac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
			L_u32TempCCMRX = TIM_2->CCMR2;
 8001fb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC4M_BIT0);
 8001fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001fc2:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC4M_BIT1);
 8001fc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001fca:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC4S_BIT0);
 8001fcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fd2:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC4S_BIT1);
 8001fd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fd6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001fda:	667b      	str	r3, [r7, #100]	@ 0x64
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001fdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fde:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001fe2:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 8001fe4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fe6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001fea:	663b      	str	r3, [r7, #96]	@ 0x60
			TIM_2->CR2 = L_u32TempCR2;
 8001fec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ff0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ff2:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR2 = L_u32TempCCMRX;
 8001ff4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ffa:	61d3      	str	r3, [r2, #28]
			TIM_2->CCR4 = A_u16CompareValue;
 8001ffc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002000:	88bb      	ldrh	r3, [r7, #4]
 8002002:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_2->CCER = L_u32TempCCER;
 8002004:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002008:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800200a:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 800200c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002016:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800201a:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 800201c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002026:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800202a:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 800202c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002036:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800203a:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 800203c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	e373      	b.n	8002736 <MTimer_voidPWM+0xea2>
	else if (A_u8TimerSelected == TIM3_TYPE)
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	2b03      	cmp	r3, #3
 8002052:	f040 81ae 	bne.w	80023b2 <MTimer_voidPWM+0xb1e>
		if (A_u8Channel == TIM_CHANNEL_1)
 8002056:	79bb      	ldrb	r3, [r7, #6]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d161      	bne.n	8002120 <MTimer_voidPWM+0x88c>
			if (channel31_set==0)
 800205c:	4b64      	ldr	r3, [pc, #400]	@ (80021f0 <MTimer_voidPWM+0x95c>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <MTimer_voidPWM+0x7e0>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN6,GPIO_OUTPUT_10M_AF_PP);
 8002064:	2209      	movs	r2, #9
 8002066:	2106      	movs	r1, #6
 8002068:	2001      	movs	r0, #1
 800206a:	f7fe fe0d 	bl	8000c88 <GPIO_voidSetPinMode>
					channel31_set=1;
 800206e:	4b60      	ldr	r3, [pc, #384]	@ (80021f0 <MTimer_voidPWM+0x95c>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8002074:	2300      	movs	r3, #0
 8002076:	673b      	str	r3, [r7, #112]	@ 0x70
			u32 L_u32TempCCER  = 0 ;
 8002078:	2300      	movs	r3, #0
 800207a:	66fb      	str	r3, [r7, #108]	@ 0x6c
			u32 L_u32TempCR2   = 0 ;
 800207c:	2300      	movs	r3, #0
 800207e:	66bb      	str	r3, [r7, #104]	@ 0x68
			CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8002080:	4b5c      	ldr	r3, [pc, #368]	@ (80021f4 <MTimer_voidPWM+0x960>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a5b      	ldr	r2, [pc, #364]	@ (80021f4 <MTimer_voidPWM+0x960>)
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_3->CCER;
 800208c:	4b59      	ldr	r3, [pc, #356]	@ (80021f4 <MTimer_voidPWM+0x960>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	673b      	str	r3, [r7, #112]	@ 0x70
			L_u32TempCR2 = TIM_3->CR2;
 8002092:	4b58      	ldr	r3, [pc, #352]	@ (80021f4 <MTimer_voidPWM+0x960>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	66bb      	str	r3, [r7, #104]	@ 0x68
			L_u32TempCCMRX = TIM_3->CCMR1;
 8002098:	4b56      	ldr	r3, [pc, #344]	@ (80021f4 <MTimer_voidPWM+0x960>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 800209e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020a0:	f023 0310 	bic.w	r3, r3, #16
 80020a4:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 80020a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020a8:	f023 0320 	bic.w	r3, r3, #32
 80020ac:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 80020ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020b4:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 80020b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 80020be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020c0:	f023 0302 	bic.w	r3, r3, #2
 80020c4:	673b      	str	r3, [r7, #112]	@ 0x70
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 80020c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80020cc:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 80020ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020d0:	f023 0302 	bic.w	r3, r3, #2
 80020d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
			TIM_3->CR2 = L_u32TempCR2;
 80020d6:	4a47      	ldr	r2, [pc, #284]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80020d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020da:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR1 = L_u32TempCCMRX;
 80020dc:	4a45      	ldr	r2, [pc, #276]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80020de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020e0:	6193      	str	r3, [r2, #24]
			TIM_3->CCR1 = A_u16CompareValue;
 80020e2:	4a44      	ldr	r2, [pc, #272]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80020e4:	88bb      	ldrh	r3, [r7, #4]
 80020e6:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM_3->CCER = L_u32TempCCER;
 80020e8:	4a42      	ldr	r2, [pc, #264]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80020ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020ec:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 80020ee:	4b41      	ldr	r3, [pc, #260]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	4a40      	ldr	r2, [pc, #256]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80020f4:	f043 0308 	orr.w	r3, r3, #8
 80020f8:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 80020fa:	4b3e      	ldr	r3, [pc, #248]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	4a3d      	ldr	r2, [pc, #244]	@ (80021f4 <MTimer_voidPWM+0x960>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8002106:	4b3b      	ldr	r3, [pc, #236]	@ (80021f4 <MTimer_voidPWM+0x960>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a3a      	ldr	r2, [pc, #232]	@ (80021f4 <MTimer_voidPWM+0x960>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8002112:	4b38      	ldr	r3, [pc, #224]	@ (80021f4 <MTimer_voidPWM+0x960>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a37      	ldr	r2, [pc, #220]	@ (80021f4 <MTimer_voidPWM+0x960>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6013      	str	r3, [r2, #0]
}
 800211e:	e30a      	b.n	8002736 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_2)
 8002120:	79bb      	ldrb	r3, [r7, #6]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d16a      	bne.n	80021fc <MTimer_voidPWM+0x968>
			if (channel32_set==0)
 8002126:	4b34      	ldr	r3, [pc, #208]	@ (80021f8 <MTimer_voidPWM+0x964>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d107      	bne.n	800213e <MTimer_voidPWM+0x8aa>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN7,GPIO_OUTPUT_10M_AF_PP);
 800212e:	2209      	movs	r2, #9
 8002130:	2107      	movs	r1, #7
 8002132:	2001      	movs	r0, #1
 8002134:	f7fe fda8 	bl	8000c88 <GPIO_voidSetPinMode>
					channel32_set=1;
 8002138:	4b2f      	ldr	r3, [pc, #188]	@ (80021f8 <MTimer_voidPWM+0x964>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 800213e:	2300      	movs	r3, #0
 8002140:	67fb      	str	r3, [r7, #124]	@ 0x7c
			u32 L_u32TempCCER  = 0 ;
 8002142:	2300      	movs	r3, #0
 8002144:	67bb      	str	r3, [r7, #120]	@ 0x78
		    u32 L_u32TempCR2   = 0 ;
 8002146:	2300      	movs	r3, #0
 8002148:	677b      	str	r3, [r7, #116]	@ 0x74
		    CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 800214a:	4b2a      	ldr	r3, [pc, #168]	@ (80021f4 <MTimer_voidPWM+0x960>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4a29      	ldr	r2, [pc, #164]	@ (80021f4 <MTimer_voidPWM+0x960>)
 8002150:	f023 0310 	bic.w	r3, r3, #16
 8002154:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_3->CCER;
 8002156:	4b27      	ldr	r3, [pc, #156]	@ (80021f4 <MTimer_voidPWM+0x960>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	67bb      	str	r3, [r7, #120]	@ 0x78
		    L_u32TempCR2 = TIM_3->CR2;
 800215c:	4b25      	ldr	r3, [pc, #148]	@ (80021f4 <MTimer_voidPWM+0x960>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	677b      	str	r3, [r7, #116]	@ 0x74
		    L_u32TempCCMRX = TIM_3->CCMR1;
 8002162:	4b24      	ldr	r3, [pc, #144]	@ (80021f4 <MTimer_voidPWM+0x960>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8002168:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800216a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800216e:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8002170:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002172:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002176:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8002178:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800217a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800217e:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8002180:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002182:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002186:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8002188:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800218a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800218e:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 8002190:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002192:	f023 0320 	bic.w	r3, r3, #32
 8002196:	67bb      	str	r3, [r7, #120]	@ 0x78
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 8002198:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800219a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800219e:	67bb      	str	r3, [r7, #120]	@ 0x78
		    TIM_3->CR2 = L_u32TempCR2;
 80021a0:	4a14      	ldr	r2, [pc, #80]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80021a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021a4:	6053      	str	r3, [r2, #4]
		    TIM_3->CCMR1 = L_u32TempCCMRX;
 80021a6:	4a13      	ldr	r2, [pc, #76]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80021a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021aa:	6193      	str	r3, [r2, #24]
		    TIM_3->CCR2 = A_u16CompareValue;
 80021ac:	4a11      	ldr	r2, [pc, #68]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80021ae:	88bb      	ldrh	r3, [r7, #4]
 80021b0:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_3->CCER = L_u32TempCCER;
 80021b2:	4a10      	ldr	r2, [pc, #64]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80021b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021b6:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 80021b8:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a0d      	ldr	r2, [pc, #52]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80021be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021c2:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a0a      	ldr	r2, [pc, #40]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ce:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 80021d0:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a07      	ldr	r2, [pc, #28]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80021d6:	f043 0310 	orr.w	r3, r3, #16
 80021da:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <MTimer_voidPWM+0x960>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	e2a5      	b.n	8002736 <MTimer_voidPWM+0xea2>
 80021ea:	bf00      	nop
 80021ec:	2000010c 	.word	0x2000010c
 80021f0:	2000010d 	.word	0x2000010d
 80021f4:	40000400 	.word	0x40000400
 80021f8:	2000010e 	.word	0x2000010e
		else if (A_u8Channel == TIM_CHANNEL_3)
 80021fc:	79bb      	ldrb	r3, [r7, #6]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d16c      	bne.n	80022dc <MTimer_voidPWM+0xa48>
			u32 L_u32TempCCMRX = 0 ;
 8002202:	2300      	movs	r3, #0
 8002204:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			u32 L_u32TempCCER  = 0 ;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			u32 L_u32TempCR2   = 0 ;
 800220e:	2300      	movs	r3, #0
 8002210:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 8002214:	4ba1      	ldr	r3, [pc, #644]	@ (800249c <MTimer_voidPWM+0xc08>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4aa0      	ldr	r2, [pc, #640]	@ (800249c <MTimer_voidPWM+0xc08>)
 800221a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800221e:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_3->CCER;
 8002220:	4b9e      	ldr	r3, [pc, #632]	@ (800249c <MTimer_voidPWM+0xc08>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			L_u32TempCR2 = TIM_3->CR2;
 8002228:	4b9c      	ldr	r3, [pc, #624]	@ (800249c <MTimer_voidPWM+0xc08>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			L_u32TempCCMRX = TIM_3->CCMR2;
 8002230:	4b9a      	ldr	r3, [pc, #616]	@ (800249c <MTimer_voidPWM+0xc08>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 8002238:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800223c:	f023 0310 	bic.w	r3, r3, #16
 8002240:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 8002244:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002248:	f023 0320 	bic.w	r3, r3, #32
 800224c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 8002250:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 800225c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002260:	f023 0302 	bic.w	r3, r3, #2
 8002264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			L_u32TempCCMRX |= (TIM_PWM_MODE1 <<4U) ;
 8002268:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800226c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002270:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 8002274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002278:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800227c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 8002280:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002284:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			TIM_3->CR2 = L_u32TempCR2;
 800228c:	4a83      	ldr	r2, [pc, #524]	@ (800249c <MTimer_voidPWM+0xc08>)
 800228e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002292:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR2 = L_u32TempCCMRX;
 8002294:	4a81      	ldr	r2, [pc, #516]	@ (800249c <MTimer_voidPWM+0xc08>)
 8002296:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800229a:	61d3      	str	r3, [r2, #28]
			TIM_3->CCR3 = A_u16CompareValue;
 800229c:	4a7f      	ldr	r2, [pc, #508]	@ (800249c <MTimer_voidPWM+0xc08>)
 800229e:	88bb      	ldrh	r3, [r7, #4]
 80022a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_3->CCER = L_u32TempCCER;
 80022a2:	4a7e      	ldr	r2, [pc, #504]	@ (800249c <MTimer_voidPWM+0xc08>)
 80022a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022a8:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 80022aa:	4b7c      	ldr	r3, [pc, #496]	@ (800249c <MTimer_voidPWM+0xc08>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a7b      	ldr	r2, [pc, #492]	@ (800249c <MTimer_voidPWM+0xc08>)
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 80022b6:	4b79      	ldr	r3, [pc, #484]	@ (800249c <MTimer_voidPWM+0xc08>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	4a78      	ldr	r2, [pc, #480]	@ (800249c <MTimer_voidPWM+0xc08>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 80022c2:	4b76      	ldr	r3, [pc, #472]	@ (800249c <MTimer_voidPWM+0xc08>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a75      	ldr	r2, [pc, #468]	@ (800249c <MTimer_voidPWM+0xc08>)
 80022c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022cc:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80022ce:	4b73      	ldr	r3, [pc, #460]	@ (800249c <MTimer_voidPWM+0xc08>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a72      	ldr	r2, [pc, #456]	@ (800249c <MTimer_voidPWM+0xc08>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6013      	str	r3, [r2, #0]
}
 80022da:	e22c      	b.n	8002736 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_4)
 80022dc:	79bb      	ldrb	r3, [r7, #6]
 80022de:	2b04      	cmp	r3, #4
 80022e0:	f040 8229 	bne.w	8002736 <MTimer_voidPWM+0xea2>
			u32 L_u32TempCCMRX = 0 ;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			u32 L_u32TempCCER  = 0 ;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			u32 L_u32TempCR2   = 0 ;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 80022f6:	4b69      	ldr	r3, [pc, #420]	@ (800249c <MTimer_voidPWM+0xc08>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4a68      	ldr	r2, [pc, #416]	@ (800249c <MTimer_voidPWM+0xc08>)
 80022fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002300:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_3->CCER;
 8002302:	4b66      	ldr	r3, [pc, #408]	@ (800249c <MTimer_voidPWM+0xc08>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			L_u32TempCR2 = TIM_3->CR2;
 800230a:	4b64      	ldr	r3, [pc, #400]	@ (800249c <MTimer_voidPWM+0xc08>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			L_u32TempCCMRX = TIM_3->CCMR2;
 8002312:	4b62      	ldr	r3, [pc, #392]	@ (800249c <MTimer_voidPWM+0xc08>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 800231a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800231e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002322:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8002326:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800232a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800232e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8002332:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002336:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800233a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 800233e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002342:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002346:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 800234a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800234e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8002352:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 8002356:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800235a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800235e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			TIM_3->CR2 = L_u32TempCR2;
 8002362:	4a4e      	ldr	r2, [pc, #312]	@ (800249c <MTimer_voidPWM+0xc08>)
 8002364:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002368:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR2 = L_u32TempCCMRX;
 800236a:	4a4c      	ldr	r2, [pc, #304]	@ (800249c <MTimer_voidPWM+0xc08>)
 800236c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002370:	61d3      	str	r3, [r2, #28]
			TIM_3->CCR4 = A_u16CompareValue;
 8002372:	4a4a      	ldr	r2, [pc, #296]	@ (800249c <MTimer_voidPWM+0xc08>)
 8002374:	88bb      	ldrh	r3, [r7, #4]
 8002376:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_3->CCER = L_u32TempCCER;
 8002378:	4a48      	ldr	r2, [pc, #288]	@ (800249c <MTimer_voidPWM+0xc08>)
 800237a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800237e:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 8002380:	4b46      	ldr	r3, [pc, #280]	@ (800249c <MTimer_voidPWM+0xc08>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4a45      	ldr	r2, [pc, #276]	@ (800249c <MTimer_voidPWM+0xc08>)
 8002386:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800238a:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 800238c:	4b43      	ldr	r3, [pc, #268]	@ (800249c <MTimer_voidPWM+0xc08>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	4a42      	ldr	r2, [pc, #264]	@ (800249c <MTimer_voidPWM+0xc08>)
 8002392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002396:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 8002398:	4b40      	ldr	r3, [pc, #256]	@ (800249c <MTimer_voidPWM+0xc08>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a3f      	ldr	r2, [pc, #252]	@ (800249c <MTimer_voidPWM+0xc08>)
 800239e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023a2:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80023a4:	4b3d      	ldr	r3, [pc, #244]	@ (800249c <MTimer_voidPWM+0xc08>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a3c      	ldr	r2, [pc, #240]	@ (800249c <MTimer_voidPWM+0xc08>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	e1c1      	b.n	8002736 <MTimer_voidPWM+0xea2>
	else if (A_u8TimerSelected == TIM4_TYPE)
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	f040 81be 	bne.w	8002736 <MTimer_voidPWM+0xea2>
		if (A_u8Channel == TIM_CHANNEL_1)
 80023ba:	79bb      	ldrb	r3, [r7, #6]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d171      	bne.n	80024a4 <MTimer_voidPWM+0xc10>
			u32 L_u32TempCCMRX = 0 ;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			u32 L_u32TempCCER  = 0 ;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			u32 L_u32TempCR2   = 0 ;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 80023d2:	4b33      	ldr	r3, [pc, #204]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a32      	ldr	r2, [pc, #200]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_4->CCER;
 80023de:	4b30      	ldr	r3, [pc, #192]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			L_u32TempCR2 = TIM_4->CR2;
 80023e6:	4b2e      	ldr	r3, [pc, #184]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			L_u32TempCCMRX = TIM_4->CCMR1;
 80023ee:	4b2c      	ldr	r3, [pc, #176]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 80023f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023fa:	f023 0310 	bic.w	r3, r3, #16
 80023fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 8002402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002406:	f023 0320 	bic.w	r3, r3, #32
 800240a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 800240e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 800241a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 8002426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800242a:	f023 0302 	bic.w	r3, r3, #2
 800242e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8002432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002436:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800243a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 800243e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002442:	f023 0302 	bic.w	r3, r3, #2
 8002446:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			TIM_4->CR2 = L_u32TempCR2;
 800244a:	4a15      	ldr	r2, [pc, #84]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 800244c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002450:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR1 = L_u32TempCCMRX;
 8002452:	4a13      	ldr	r2, [pc, #76]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 8002454:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002458:	6193      	str	r3, [r2, #24]
			TIM_4->CCR1 = A_u16CompareValue;
 800245a:	4a11      	ldr	r2, [pc, #68]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 800245c:	88bb      	ldrh	r3, [r7, #4]
 800245e:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM_4->CCER = L_u32TempCCER;
 8002460:	4a0f      	ldr	r2, [pc, #60]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 8002462:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002466:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 8002468:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4a0c      	ldr	r2, [pc, #48]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 800246e:	f043 0308 	orr.w	r3, r3, #8
 8002472:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 8002474:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a09      	ldr	r2, [pc, #36]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8002480:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a06      	ldr	r2, [pc, #24]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 800248c:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a03      	ldr	r2, [pc, #12]	@ (80024a0 <MTimer_voidPWM+0xc0c>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6013      	str	r3, [r2, #0]
}
 8002498:	e14d      	b.n	8002736 <MTimer_voidPWM+0xea2>
 800249a:	bf00      	nop
 800249c:	40000400 	.word	0x40000400
 80024a0:	40000800 	.word	0x40000800
		else if (A_u8Channel == TIM_CHANNEL_2)
 80024a4:	79bb      	ldrb	r3, [r7, #6]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d16c      	bne.n	8002584 <MTimer_voidPWM+0xcf0>
			u32 L_u32TempCCMRX = 0 ;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			u32 L_u32TempCCER  = 0 ;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    u32 L_u32TempCR2   = 0 ;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		    CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 80024bc:	4ba0      	ldr	r3, [pc, #640]	@ (8002740 <MTimer_voidPWM+0xeac>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4a9f      	ldr	r2, [pc, #636]	@ (8002740 <MTimer_voidPWM+0xeac>)
 80024c2:	f023 0310 	bic.w	r3, r3, #16
 80024c6:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_4->CCER;
 80024c8:	4b9d      	ldr	r3, [pc, #628]	@ (8002740 <MTimer_voidPWM+0xeac>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    L_u32TempCR2 = TIM_4->CR2;
 80024d0:	4b9b      	ldr	r3, [pc, #620]	@ (8002740 <MTimer_voidPWM+0xeac>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		    L_u32TempCCMRX = TIM_4->CCMR1;
 80024d8:	4b99      	ldr	r3, [pc, #612]	@ (8002740 <MTimer_voidPWM+0xeac>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 80024e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 80024ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 80024f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002500:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8002504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800250c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8002510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002514:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8002518:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 800251c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002520:	f023 0320 	bic.w	r3, r3, #32
 8002524:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 8002528:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800252c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002530:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    TIM_4->CR2 = L_u32TempCR2;
 8002534:	4a82      	ldr	r2, [pc, #520]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002536:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800253a:	6053      	str	r3, [r2, #4]
		    TIM_4->CCMR1 = L_u32TempCCMRX;
 800253c:	4a80      	ldr	r2, [pc, #512]	@ (8002740 <MTimer_voidPWM+0xeac>)
 800253e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002542:	6193      	str	r3, [r2, #24]
		    TIM_4->CCR2 = A_u16CompareValue;
 8002544:	4a7e      	ldr	r2, [pc, #504]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002546:	88bb      	ldrh	r3, [r7, #4]
 8002548:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_4->CCER = L_u32TempCCER;
 800254a:	4a7d      	ldr	r2, [pc, #500]	@ (8002740 <MTimer_voidPWM+0xeac>)
 800254c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002550:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 8002552:	4b7b      	ldr	r3, [pc, #492]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	4a7a      	ldr	r2, [pc, #488]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002558:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800255c:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 800255e:	4b78      	ldr	r3, [pc, #480]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	4a77      	ldr	r2, [pc, #476]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002564:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002568:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 800256a:	4b75      	ldr	r3, [pc, #468]	@ (8002740 <MTimer_voidPWM+0xeac>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a74      	ldr	r2, [pc, #464]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002570:	f043 0310 	orr.w	r3, r3, #16
 8002574:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8002576:	4b72      	ldr	r3, [pc, #456]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a71      	ldr	r2, [pc, #452]	@ (8002740 <MTimer_voidPWM+0xeac>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6013      	str	r3, [r2, #0]
}
 8002582:	e0d8      	b.n	8002736 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_3)
 8002584:	79bb      	ldrb	r3, [r7, #6]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d16c      	bne.n	8002664 <MTimer_voidPWM+0xdd0>
			u32 L_u32TempCCMRX = 0 ;
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			u32 L_u32TempCCER  = 0 ;
 8002590:	2300      	movs	r3, #0
 8002592:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			u32 L_u32TempCR2   = 0 ;
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 800259c:	4b68      	ldr	r3, [pc, #416]	@ (8002740 <MTimer_voidPWM+0xeac>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	4a67      	ldr	r2, [pc, #412]	@ (8002740 <MTimer_voidPWM+0xeac>)
 80025a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025a6:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_4->CCER;
 80025a8:	4b65      	ldr	r3, [pc, #404]	@ (8002740 <MTimer_voidPWM+0xeac>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			L_u32TempCR2 = TIM_4->CR2;
 80025b0:	4b63      	ldr	r3, [pc, #396]	@ (8002740 <MTimer_voidPWM+0xeac>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			L_u32TempCCMRX = TIM_4->CCMR2;
 80025b8:	4b61      	ldr	r3, [pc, #388]	@ (8002740 <MTimer_voidPWM+0xeac>)
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 80025c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025c4:	f023 0310 	bic.w	r3, r3, #16
 80025c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 80025cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025d0:	f023 0320 	bic.w	r3, r3, #32
 80025d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 80025d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 80025e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025e8:	f023 0302 	bic.w	r3, r3, #2
 80025ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 80025f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025f4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80025f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 80025fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002600:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002604:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 8002608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800260c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			TIM_4->CR2 = L_u32TempCR2;
 8002614:	4a4a      	ldr	r2, [pc, #296]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002616:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800261a:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR2 = L_u32TempCCMRX;
 800261c:	4a48      	ldr	r2, [pc, #288]	@ (8002740 <MTimer_voidPWM+0xeac>)
 800261e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002622:	61d3      	str	r3, [r2, #28]
			TIM_4->CCR3 = A_u16CompareValue;
 8002624:	4a46      	ldr	r2, [pc, #280]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002626:	88bb      	ldrh	r3, [r7, #4]
 8002628:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_4->CCER = L_u32TempCCER;
 800262a:	4a45      	ldr	r2, [pc, #276]	@ (8002740 <MTimer_voidPWM+0xeac>)
 800262c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002630:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 8002632:	4b43      	ldr	r3, [pc, #268]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	4a42      	ldr	r2, [pc, #264]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002638:	f043 0308 	orr.w	r3, r3, #8
 800263c:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 800263e:	4b40      	ldr	r3, [pc, #256]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4a3f      	ldr	r2, [pc, #252]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002644:	f043 0304 	orr.w	r3, r3, #4
 8002648:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 800264a:	4b3d      	ldr	r3, [pc, #244]	@ (8002740 <MTimer_voidPWM+0xeac>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4a3c      	ldr	r2, [pc, #240]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002654:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8002656:	4b3a      	ldr	r3, [pc, #232]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a39      	ldr	r2, [pc, #228]	@ (8002740 <MTimer_voidPWM+0xeac>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6013      	str	r3, [r2, #0]
}
 8002662:	e068      	b.n	8002736 <MTimer_voidPWM+0xea2>
		else if (A_u8Channel == TIM_CHANNEL_4)
 8002664:	79bb      	ldrb	r3, [r7, #6]
 8002666:	2b04      	cmp	r3, #4
 8002668:	d165      	bne.n	8002736 <MTimer_voidPWM+0xea2>
			u32 L_u32TempCCMRX = 0 ;
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			u32 L_u32TempCCER  = 0 ;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			u32 L_u32TempCR2   = 0 ;
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 800267c:	4b30      	ldr	r3, [pc, #192]	@ (8002740 <MTimer_voidPWM+0xeac>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4a2f      	ldr	r2, [pc, #188]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002682:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002686:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_4->CCER;
 8002688:	4b2d      	ldr	r3, [pc, #180]	@ (8002740 <MTimer_voidPWM+0xeac>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			L_u32TempCR2 = TIM_4->CR2;
 8002690:	4b2b      	ldr	r3, [pc, #172]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			L_u32TempCCMRX = TIM_4->CCMR2;
 8002698:	4b29      	ldr	r3, [pc, #164]	@ (8002740 <MTimer_voidPWM+0xeac>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 80026a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 80026ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80026b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 80026b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 80026c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 80026d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026d4:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80026d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 80026dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80026e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			TIM_4->CR2 = L_u32TempCR2;
 80026e8:	4a15      	ldr	r2, [pc, #84]	@ (8002740 <MTimer_voidPWM+0xeac>)
 80026ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026ee:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR2 = L_u32TempCCMRX;
 80026f0:	4a13      	ldr	r2, [pc, #76]	@ (8002740 <MTimer_voidPWM+0xeac>)
 80026f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026f6:	61d3      	str	r3, [r2, #28]
			TIM_4->CCR4 = A_u16CompareValue;
 80026f8:	4a11      	ldr	r2, [pc, #68]	@ (8002740 <MTimer_voidPWM+0xeac>)
 80026fa:	88bb      	ldrh	r3, [r7, #4]
 80026fc:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_4->CCER = L_u32TempCCER;
 80026fe:	4a10      	ldr	r2, [pc, #64]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002704:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 8002706:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4a0d      	ldr	r2, [pc, #52]	@ (8002740 <MTimer_voidPWM+0xeac>)
 800270c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002710:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 8002712:	4b0b      	ldr	r3, [pc, #44]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a0a      	ldr	r2, [pc, #40]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002718:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800271c:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 800271e:	4b08      	ldr	r3, [pc, #32]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a07      	ldr	r2, [pc, #28]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002724:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002728:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 800272a:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <MTimer_voidPWM+0xeac>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a04      	ldr	r2, [pc, #16]	@ (8002740 <MTimer_voidPWM+0xeac>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6013      	str	r3, [r2, #0]
}
 8002736:	bf00      	nop
 8002738:	37c8      	adds	r7, #200	@ 0xc8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40000800 	.word	0x40000800
 8002744:	00000000 	.word	0x00000000

08002748 <MUART_voidInit>:
Buffer_state (*MUSART2_CallBack)(void);



void MUART_voidInit(USART_InitType *A_InitStruct,USART_ClockInitTypeDef *A_xUART_ClockInitStruct,USART_t *A_xUART_Type)
{
 8002748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]

	//MRCC_voidEnablePerephiralClock(RCC_AHB1, RCC_EN_GPIOA); /* Enable GPIOA from RCC */
	//MRCC_voidEnablePerephiralClock(RCC_AHB1, RCC_EN_GPIOB); /* Enable GPIOB from RCC */

	/* Enable selected UART from RCC */
	if (A_xUART_Type == UART1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a73      	ldr	r2, [pc, #460]	@ (8002928 <MUART_voidInit+0x1e0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10d      	bne.n	800277a <MUART_voidInit+0x32>
	{
		/*configer Tx1 as alt fun*/
		GPIO_voidSetPinMode(GPIO_PORTA , GPIO_PIN2 , GPIO_OUTPUT_10M_AF_PP) ;
 800275e:	2209      	movs	r2, #9
 8002760:	2102      	movs	r1, #2
 8002762:	2001      	movs	r0, #1
 8002764:	f7fe fa90 	bl	8000c88 <GPIO_voidSetPinMode>

		/*configer Rx1 as alt fun*/
		GPIO_voidSetPinMode(GPIO_PORTA , GPIO_PIN2 , GPIO_OUTPUT_10M_AF_PP) ;
 8002768:	2209      	movs	r2, #9
 800276a:	2102      	movs	r1, #2
 800276c:	2001      	movs	r0, #1
 800276e:	f7fe fa8b 	bl	8000c88 <GPIO_voidSetPinMode>

		/*Enable interrupt of UART1 from NVIC*/
		NVIC_voidEnableInterrupt(37);
 8002772:	2025      	movs	r0, #37	@ 0x25
 8002774:	f7fe fd74 	bl	8001260 <NVIC_voidEnableInterrupt>
 8002778:	e010      	b.n	800279c <MUART_voidInit+0x54>
	}
	else if (A_xUART_Type == UART2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a6b      	ldr	r2, [pc, #428]	@ (800292c <MUART_voidInit+0x1e4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d10c      	bne.n	800279c <MUART_voidInit+0x54>
	{
		/*configer Tx2 as alt fun*/
		GPIO_voidSetPinMode(GPIO_PORTA , GPIO_PIN2 , GPIO_OUTPUT_10M_AF_PP) ;
 8002782:	2209      	movs	r2, #9
 8002784:	2102      	movs	r1, #2
 8002786:	2001      	movs	r0, #1
 8002788:	f7fe fa7e 	bl	8000c88 <GPIO_voidSetPinMode>

		/*configer Rx2 as alt fun*/
		GPIO_voidSetPinMode(GPIO_PORTA , GPIO_PIN2 , GPIO_OUTPUT_10M_AF_PP) ;
 800278c:	2209      	movs	r2, #9
 800278e:	2102      	movs	r1, #2
 8002790:	2001      	movs	r0, #1
 8002792:	f7fe fa79 	bl	8000c88 <GPIO_voidSetPinMode>

		/*Enable interrupt of UART2 from NVIC*/
		NVIC_voidEnableInterrupt(38);
 8002796:	2026      	movs	r0, #38	@ 0x26
 8002798:	f7fe fd62 	bl	8001260 <NVIC_voidEnableInterrupt>
	}

		 A_xUART_Type->BRR = UART_BRR_SAMPLING16(__PCLK__,A_InitStruct->BaudRate);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2200      	movs	r2, #0
 80027a2:	469a      	mov	sl, r3
 80027a4:	4693      	mov	fp, r2
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80027b2:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 80027b6:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80027ba:	a159      	add	r1, pc, #356	@ (adr r1, 8002920 <MUART_voidInit+0x1d8>)
 80027bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027c0:	f7fe f8da 	bl	8000978 <__aeabi_uldivmod>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4b59      	ldr	r3, [pc, #356]	@ (8002930 <MUART_voidInit+0x1e8>)
 80027ca:	fba3 2302 	umull	r2, r3, r3, r2
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	011e      	lsls	r6, r3, #4
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	4698      	mov	r8, r3
 80027da:	4691      	mov	r9, r2
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80027e8:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 80027ec:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80027f0:	a14b      	add	r1, pc, #300	@ (adr r1, 8002920 <MUART_voidInit+0x1d8>)
 80027f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027f6:	f7fe f8bf 	bl	8000978 <__aeabi_uldivmod>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002930 <MUART_voidInit+0x1e8>)
 8002800:	fba3 1302 	umull	r1, r3, r3, r2
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	2164      	movs	r1, #100	@ 0x64
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	3332      	adds	r3, #50	@ 0x32
 8002812:	4a47      	ldr	r2, [pc, #284]	@ (8002930 <MUART_voidInit+0x1e8>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800281e:	441e      	add	r6, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2200      	movs	r2, #0
 8002826:	461c      	mov	r4, r3
 8002828:	4615      	mov	r5, r2
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	00ab      	lsls	r3, r5, #2
 8002834:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002838:	00a2      	lsls	r2, r4, #2
 800283a:	a139      	add	r1, pc, #228	@ (adr r1, 8002920 <MUART_voidInit+0x1d8>)
 800283c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002840:	f7fe f89a 	bl	8000978 <__aeabi_uldivmod>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4b39      	ldr	r3, [pc, #228]	@ (8002930 <MUART_voidInit+0x1e8>)
 800284a:	fba3 1302 	umull	r1, r3, r3, r2
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2164      	movs	r1, #100	@ 0x64
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	3332      	adds	r3, #50	@ 0x32
 800285c:	4a34      	ldr	r2, [pc, #208]	@ (8002930 <MUART_voidInit+0x1e8>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	18f2      	adds	r2, r6, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	609a      	str	r2, [r3, #8]

		 A_xUART_Type->CR1 =(A_InitStruct->HardwareFlowControl << MUSART_CR1_UE_BIT    ) |
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	7a5b      	ldrb	r3, [r3, #9]
 8002872:	035a      	lsls	r2, r3, #13
    			        (A_InitStruct->DataWidth           << MUSART_CR1_M_BIT     ) |
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	791b      	ldrb	r3, [r3, #4]
 8002878:	031b      	lsls	r3, r3, #12
		 A_xUART_Type->CR1 =(A_InitStruct->HardwareFlowControl << MUSART_CR1_UE_BIT    ) |
 800287a:	431a      	orrs	r2, r3
    			        (A_InitStruct->Parity_Enable       << MUSART_CR1_PCE_BIT   ) |
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	799b      	ldrb	r3, [r3, #6]
 8002880:	029b      	lsls	r3, r3, #10
    			        (A_InitStruct->DataWidth           << MUSART_CR1_M_BIT     ) |
 8002882:	431a      	orrs	r2, r3
    			        (A_InitStruct->Parity_Selection    << MUSART_CR1_PS_BIT    ) ;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	79db      	ldrb	r3, [r3, #7]
 8002888:	025b      	lsls	r3, r3, #9
    			        (A_InitStruct->Parity_Enable       << MUSART_CR1_PCE_BIT   ) |
 800288a:	4313      	orrs	r3, r2
 800288c:	461a      	mov	r2, r3
		 A_xUART_Type->CR1 =(A_InitStruct->HardwareFlowControl << MUSART_CR1_UE_BIT    ) |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	60da      	str	r2, [r3, #12]

    switch (A_InitStruct->TransferDirection)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	7a1b      	ldrb	r3, [r3, #8]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d014      	beq.n	80028c4 <MUART_voidInit+0x17c>
 800289a:	2b02      	cmp	r3, #2
 800289c:	dc1f      	bgt.n	80028de <MUART_voidInit+0x196>
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <MUART_voidInit+0x160>
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d007      	beq.n	80028b6 <MUART_voidInit+0x16e>
 80028a6:	e01a      	b.n	80028de <MUART_voidInit+0x196>
    {
    case TX_ONLY:
    	 SET_BIT(A_xUART_Type->CR1, MUSART_CR1_TE_BIT);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f043 0208 	orr.w	r2, r3, #8
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	60da      	str	r2, [r3, #12]
    	 break;
 80028b4:	e013      	b.n	80028de <MUART_voidInit+0x196>
    case RX_ONLY:
    	 SET_BIT(A_xUART_Type->CR1, MUSART_CR1_RE_BIT);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f043 0204 	orr.w	r2, r3, #4
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	60da      	str	r2, [r3, #12]
    	 break;
 80028c2:	e00c      	b.n	80028de <MUART_voidInit+0x196>
    case TX_RX:
    	 SET_BIT(A_xUART_Type->CR1, MUSART_CR1_TE_BIT);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f043 0208 	orr.w	r2, r3, #8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	60da      	str	r2, [r3, #12]
    	 SET_BIT(A_xUART_Type->CR1, MUSART_CR1_RE_BIT);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f043 0204 	orr.w	r2, r3, #4
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	60da      	str	r2, [r3, #12]
    	 break;
 80028dc:	bf00      	nop
    }
    A_xUART_Type->CR2 =   (A_InitStruct           ->StopBits          << MUSART_CR2_STOP_BIT  )  |
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	795b      	ldrb	r3, [r3, #5]
 80028e2:	031a      	lsls	r2, r3, #12
    				      (A_xUART_ClockInitStruct->ClockOutput       << MUSART_CR2_CLKEN_BIT )  |
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	02db      	lsls	r3, r3, #11
    A_xUART_Type->CR2 =   (A_InitStruct           ->StopBits          << MUSART_CR2_STOP_BIT  )  |
 80028ea:	431a      	orrs	r2, r3
    				      (A_xUART_ClockInitStruct->ClockPhase        << MUSART_CR2_CPHA_BIT  )  |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	789b      	ldrb	r3, [r3, #2]
 80028f0:	025b      	lsls	r3, r3, #9
    				      (A_xUART_ClockInitStruct->ClockOutput       << MUSART_CR2_CLKEN_BIT )  |
 80028f2:	431a      	orrs	r2, r3
    				      (A_xUART_ClockInitStruct->ClockPolarity     << MUSART_CR2_CPOL_BIT  )  |
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	785b      	ldrb	r3, [r3, #1]
 80028f8:	029b      	lsls	r3, r3, #10
    				      (A_xUART_ClockInitStruct->ClockPhase        << MUSART_CR2_CPHA_BIT  )  |
 80028fa:	431a      	orrs	r2, r3
    				      (A_xUART_ClockInitStruct->LastBitClockPulse << MUSART_CR2_LBCL_BIT  )  ;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	78db      	ldrb	r3, [r3, #3]
 8002900:	021b      	lsls	r3, r3, #8
    				      (A_xUART_ClockInitStruct->ClockPolarity     << MUSART_CR2_CPOL_BIT  )  |
 8002902:	4313      	orrs	r3, r2
 8002904:	461a      	mov	r2, r3
    A_xUART_Type->CR2 =   (A_InitStruct           ->StopBits          << MUSART_CR2_STOP_BIT  )  |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	611a      	str	r2, [r3, #16]

    A_xUART_Type->SR = 0;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
    local_u8_RX_Busyflag=0;
 8002910:	4b08      	ldr	r3, [pc, #32]	@ (8002934 <MUART_voidInit+0x1ec>)
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002920:	0bebc200 	.word	0x0bebc200
 8002924:	00000000 	.word	0x00000000
 8002928:	40013800 	.word	0x40013800
 800292c:	40004400 	.word	0x40004400
 8002930:	51eb851f 	.word	0x51eb851f
 8002934:	200001df 	.word	0x200001df

08002938 <MUART_voidEnable>:

void MUART_voidEnable( USART_t *A_xUART_Type)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	SET_BIT(A_xUART_Type->CR1,MUSART_CR1_UE_BIT);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	60da      	str	r2, [r3, #12]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <MUART_voidTransmitByte>:
{
	CLR_BIT(A_xUART_Type->CR1,MUSART_CR1_UE_BIT);
}

void MUART_voidTransmitByte ( USART_t *A_xUART_Type,u8 A_u8Byte)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	70fb      	strb	r3, [r7, #3]
	/*wait to TX be empty*/
	while (READ_BIT(A_xUART_Type->SR,MUSART_SR_TXE_BIT)==0);
 8002962:	bf00      	nop
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f9      	beq.n	8002964 <MUART_voidTransmitByte+0xe>

	/*write data transfered into data register*/
	A_xUART_Type->DR= A_u8Byte;
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	605a      	str	r2, [r3, #4]

	/*wait to complete transmition*/
	while (READ_BIT(A_xUART_Type->SR,MUSART_SR_TC_BIT)==0);
 8002976:	bf00      	nop
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f9      	beq.n	8002978 <MUART_voidTransmitByte+0x22>

	/*clear complete transmition flag to be ready to new transmition*/
	CLR_BIT(A_xUART_Type->SR,MUSART_SR_TC_BIT);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
	...

0800299c <MUART_u8ReceiveByteASynch>:
	}
	return L_u8Data;
}

void MUART_u8ReceiveByteASynch (USART_t *A_xUART_Type )
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
		local_u8_RX_Busyflag=1;
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <MUART_u8ReceiveByteASynch+0x24>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
		SET_BIT(A_xUART_Type->CR1 , MUSART_CR1_RXNEIE_BIT);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f043 0220 	orr.w	r2, r3, #32
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	60da      	str	r2, [r3, #12]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	200001df 	.word	0x200001df

080029c4 <MUART_Buffer_Write>:
	case DISABLE:  CLR_BIT(USARTx->CR1 , MUSART_CR1_RXNEIE_BIT); break;
	}
}

Buffer_state MUART_Buffer_Write()
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
	Buffer_state Local_BufferState = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	71fb      	strb	r3, [r7, #7]
	u8 L_u8temp;
	if (G_u8RxCounter == MAX_SIZE_DATA_BUFFER)
 80029ce:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <MUART_Buffer_Write+0x78>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2bc8      	cmp	r3, #200	@ 0xc8
 80029d4:	d102      	bne.n	80029dc <MUART_Buffer_Write+0x18>
	{
		Local_BufferState = Buffer_is_full;
 80029d6:	2301      	movs	r3, #1
 80029d8:	71fb      	strb	r3, [r7, #7]
 80029da:	e02a      	b.n	8002a32 <MUART_Buffer_Write+0x6e>
	}else{
		Local_BufferState = Buffer_is_success;
 80029dc:	2302      	movs	r3, #2
 80029de:	71fb      	strb	r3, [r7, #7]
		//TODO Different UART
		L_u8temp =  MUART_u8ReadDataRegister(UART1);
 80029e0:	4817      	ldr	r0, [pc, #92]	@ (8002a40 <MUART_Buffer_Write+0x7c>)
 80029e2:	f000 fc59 	bl	8003298 <MUART_u8ReadDataRegister>
 80029e6:	4603      	mov	r3, r0
 80029e8:	71bb      	strb	r3, [r7, #6]
		G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = L_u8temp;
 80029ea:	4b16      	ldr	r3, [pc, #88]	@ (8002a44 <MUART_Buffer_Write+0x80>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	4619      	mov	r1, r3
 80029f0:	4a15      	ldr	r2, [pc, #84]	@ (8002a48 <MUART_Buffer_Write+0x84>)
 80029f2:	79bb      	ldrb	r3, [r7, #6]
 80029f4:	5453      	strb	r3, [r2, r1]
		G_u8RxBufferTailIndex = (G_u8RxBufferTailIndex+1) % MAX_SIZE_DATA_BUFFER;
 80029f6:	4b13      	ldr	r3, [pc, #76]	@ (8002a44 <MUART_Buffer_Write+0x80>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	3301      	adds	r3, #1
 80029fc:	4a13      	ldr	r2, [pc, #76]	@ (8002a4c <MUART_Buffer_Write+0x88>)
 80029fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002a02:	1191      	asrs	r1, r2, #6
 8002a04:	17da      	asrs	r2, r3, #31
 8002a06:	1a8a      	subs	r2, r1, r2
 8002a08:	21c8      	movs	r1, #200	@ 0xc8
 8002a0a:	fb01 f202 	mul.w	r2, r1, r2
 8002a0e:	1a9a      	subs	r2, r3, r2
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <MUART_Buffer_Write+0x80>)
 8002a14:	701a      	strb	r2, [r3, #0]
		G_u8RxCounter++;
 8002a16:	4b09      	ldr	r3, [pc, #36]	@ (8002a3c <MUART_Buffer_Write+0x78>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b07      	ldr	r3, [pc, #28]	@ (8002a3c <MUART_Buffer_Write+0x78>)
 8002a20:	701a      	strb	r2, [r3, #0]

		MUART_voidSendAck(L_u8temp);
 8002a22:	79bb      	ldrb	r3, [r7, #6]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 f813 	bl	8002a50 <MUART_voidSendAck>
		MUART_voidCleanRxBuffer(L_u8temp);
 8002a2a:	79bb      	ldrb	r3, [r7, #6]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 f935 	bl	8002c9c <MUART_voidCleanRxBuffer>
	}
	return Local_BufferState;
 8002a32:	79fb      	ldrb	r3, [r7, #7]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	200001de 	.word	0x200001de
 8002a40:	40013800 	.word	0x40013800
 8002a44:	200001dd 	.word	0x200001dd
 8002a48:	20000114 	.word	0x20000114
 8002a4c:	51eb851f 	.word	0x51eb851f

08002a50 <MUART_voidSendAck>:

void MUART_voidSendAck(u8 A_u8Data){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]

	u8 ACK = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
	ACK = A_u8Data >> 2;
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	73fb      	strb	r3, [r7, #15]
	if(A_u8Data< 0x80){
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db05      	blt.n	8002a78 <MUART_voidSendAck+0x28>
		MUART_voidTransmitByte(UART1, ACK);
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4809      	ldr	r0, [pc, #36]	@ (8002a98 <MUART_voidSendAck+0x48>)
 8002a72:	f7ff ff70 	bl	8002956 <MUART_voidTransmitByte>
		ACK |= 0x40;
		MUART_voidTransmitByte(UART1, ACK);
	}else{
		//ACK data
	}
}
 8002a76:	e00b      	b.n	8002a90 <MUART_voidSendAck+0x40>
	}else if(A_u8Data <0xe0){
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	2bdf      	cmp	r3, #223	@ 0xdf
 8002a7c:	d808      	bhi.n	8002a90 <MUART_voidSendAck+0x40>
		ACK |= 0x40;
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a84:	73fb      	strb	r3, [r7, #15]
		MUART_voidTransmitByte(UART1, ACK);
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4803      	ldr	r0, [pc, #12]	@ (8002a98 <MUART_voidSendAck+0x48>)
 8002a8c:	f7ff ff63 	bl	8002956 <MUART_voidTransmitByte>
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40013800 	.word	0x40013800

08002a9c <MUART_ReadData>:

Buffer_state MUART_ReadData(u8* A_u8PtrData)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	Buffer_state L_BufferState=0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]
	if (G_u8RxCounter == 0)
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <MUART_ReadData+0x84>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <MUART_ReadData+0x1a>
	{
		L_BufferState = Buffer_is_empty;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
 8002ab4:	e02e      	b.n	8002b14 <MUART_ReadData+0x78>
	}
	else{
		*A_u8PtrData = G_Au8UART_RxBuffer[G_u8RxBufferHeadIndex];
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b24 <MUART_ReadData+0x88>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <MUART_ReadData+0x8c>)
 8002abe:	5c9a      	ldrb	r2, [r3, r2]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	701a      	strb	r2, [r3, #0]
		G_Au8UART_RxBuffer[G_u8RxBufferHeadIndex] = 0;
 8002ac4:	4b17      	ldr	r3, [pc, #92]	@ (8002b24 <MUART_ReadData+0x88>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <MUART_ReadData+0x8c>)
 8002acc:	2100      	movs	r1, #0
 8002ace:	5499      	strb	r1, [r3, r2]
		G_u8RxBufferHeadIndex = (G_u8RxBufferHeadIndex+1) % MAX_SIZE_DATA_BUFFER;
 8002ad0:	4b14      	ldr	r3, [pc, #80]	@ (8002b24 <MUART_ReadData+0x88>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a15      	ldr	r2, [pc, #84]	@ (8002b2c <MUART_ReadData+0x90>)
 8002ad8:	fb82 1203 	smull	r1, r2, r2, r3
 8002adc:	1191      	asrs	r1, r2, #6
 8002ade:	17da      	asrs	r2, r3, #31
 8002ae0:	1a8a      	subs	r2, r1, r2
 8002ae2:	21c8      	movs	r1, #200	@ 0xc8
 8002ae4:	fb01 f202 	mul.w	r2, r1, r2
 8002ae8:	1a9a      	subs	r2, r3, r2
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	4b0d      	ldr	r3, [pc, #52]	@ (8002b24 <MUART_ReadData+0x88>)
 8002aee:	701a      	strb	r2, [r3, #0]
		G_u8RxCounter--;
 8002af0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <MUART_ReadData+0x84>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <MUART_ReadData+0x84>)
 8002afa:	701a      	strb	r2, [r3, #0]
		L_BufferState = Buffer_is_success;
 8002afc:	2302      	movs	r3, #2
 8002afe:	73fb      	strb	r3, [r7, #15]
		if(!G_u8RxCounter){
 8002b00:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <MUART_ReadData+0x84>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <MUART_ReadData+0x78>
			G_u8RxBufferHeadIndex = 0;
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <MUART_ReadData+0x88>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
			G_u8RxBufferTailIndex = 0;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <MUART_ReadData+0x94>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
		}
	}
	return L_BufferState;
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	200001de 	.word	0x200001de
 8002b24:	200001dc 	.word	0x200001dc
 8002b28:	20000114 	.word	0x20000114
 8002b2c:	51eb851f 	.word	0x51eb851f
 8002b30:	200001dd 	.word	0x200001dd

08002b34 <APP_Sort_Buffer>:
	}
	return L_ErrorStatus;
}

void APP_Sort_Buffer()
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
	u8 L_u8Temp =0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	717b      	strb	r3, [r7, #5]
	u8 i = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	71fb      	strb	r3, [r7, #7]
	u8 L_u8Sorted = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	71bb      	strb	r3, [r7, #6]
	if(G_u8RxBufferHeadIndex < G_u8RxBufferTailIndex ){
 8002b46:	4b52      	ldr	r3, [pc, #328]	@ (8002c90 <APP_Sort_Buffer+0x15c>)
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	4b52      	ldr	r3, [pc, #328]	@ (8002c94 <APP_Sort_Buffer+0x160>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d22a      	bcs.n	8002ba8 <APP_Sort_Buffer+0x74>
		for (i = G_u8RxBufferTailIndex - 1; i > G_u8RxBufferHeadIndex ; i-- )
 8002b52:	4b50      	ldr	r3, [pc, #320]	@ (8002c94 <APP_Sort_Buffer+0x160>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	71fb      	strb	r3, [r7, #7]
 8002b5a:	e01f      	b.n	8002b9c <APP_Sort_Buffer+0x68>
		{
			if(G_Au8UART_RxBuffer[i] < G_Au8UART_RxBuffer[i-1])
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	4a4e      	ldr	r2, [pc, #312]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002b60:	5cd2      	ldrb	r2, [r2, r3]
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	494c      	ldr	r1, [pc, #304]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002b68:	5ccb      	ldrb	r3, [r1, r3]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d210      	bcs.n	8002b90 <APP_Sort_Buffer+0x5c>
			{
				L_u8Temp = G_Au8UART_RxBuffer[i];
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	4a49      	ldr	r2, [pc, #292]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002b72:	5cd3      	ldrb	r3, [r2, r3]
 8002b74:	717b      	strb	r3, [r7, #5]
				G_Au8UART_RxBuffer[i] = G_Au8UART_RxBuffer[i-1];
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	1e5a      	subs	r2, r3, #1
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	4946      	ldr	r1, [pc, #280]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002b7e:	5c89      	ldrb	r1, [r1, r2]
 8002b80:	4a45      	ldr	r2, [pc, #276]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002b82:	54d1      	strb	r1, [r2, r3]
				G_Au8UART_RxBuffer[i-1] = L_u8Temp;
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	4943      	ldr	r1, [pc, #268]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002b8a:	797a      	ldrb	r2, [r7, #5]
 8002b8c:	54ca      	strb	r2, [r1, r3]
 8002b8e:	e002      	b.n	8002b96 <APP_Sort_Buffer+0x62>
			}else{
				//Buffer is sorted
				L_u8Sorted = 1;
 8002b90:	2301      	movs	r3, #1
 8002b92:	71bb      	strb	r3, [r7, #6]
				break;
 8002b94:	e076      	b.n	8002c84 <APP_Sort_Buffer+0x150>
		for (i = G_u8RxBufferTailIndex - 1; i > G_u8RxBufferHeadIndex ; i-- )
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	71fb      	strb	r3, [r7, #7]
 8002b9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c90 <APP_Sort_Buffer+0x15c>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	79fa      	ldrb	r2, [r7, #7]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d8da      	bhi.n	8002b5c <APP_Sort_Buffer+0x28>
		else{
			//Buffer is sorted
		}
	}

}
 8002ba6:	e06d      	b.n	8002c84 <APP_Sort_Buffer+0x150>
		if(G_u8RxBufferTailIndex  != 0){
 8002ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8002c94 <APP_Sort_Buffer+0x160>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d069      	beq.n	8002c84 <APP_Sort_Buffer+0x150>
		for (i = G_u8RxBufferTailIndex - 1; i > 0; i-- )
 8002bb0:	4b38      	ldr	r3, [pc, #224]	@ (8002c94 <APP_Sort_Buffer+0x160>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	71fb      	strb	r3, [r7, #7]
 8002bb8:	e01f      	b.n	8002bfa <APP_Sort_Buffer+0xc6>
			if(G_Au8UART_RxBuffer[i] < G_Au8UART_RxBuffer[i-1])
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	4a36      	ldr	r2, [pc, #216]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002bbe:	5cd2      	ldrb	r2, [r2, r3]
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	4934      	ldr	r1, [pc, #208]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002bc6:	5ccb      	ldrb	r3, [r1, r3]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d210      	bcs.n	8002bee <APP_Sort_Buffer+0xba>
				L_u8Temp = G_Au8UART_RxBuffer[i];
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	4a32      	ldr	r2, [pc, #200]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002bd0:	5cd3      	ldrb	r3, [r2, r3]
 8002bd2:	717b      	strb	r3, [r7, #5]
				G_Au8UART_RxBuffer[i] = G_Au8UART_RxBuffer[i-1];
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	1e5a      	subs	r2, r3, #1
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	492f      	ldr	r1, [pc, #188]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002bdc:	5c89      	ldrb	r1, [r1, r2]
 8002bde:	4a2e      	ldr	r2, [pc, #184]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002be0:	54d1      	strb	r1, [r2, r3]
				G_Au8UART_RxBuffer[i-1] = L_u8Temp;
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	492c      	ldr	r1, [pc, #176]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002be8:	797a      	ldrb	r2, [r7, #5]
 8002bea:	54ca      	strb	r2, [r1, r3]
 8002bec:	e002      	b.n	8002bf4 <APP_Sort_Buffer+0xc0>
				L_u8Sorted = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	71bb      	strb	r3, [r7, #6]
				break;
 8002bf2:	e005      	b.n	8002c00 <APP_Sort_Buffer+0xcc>
		for (i = G_u8RxBufferTailIndex - 1; i > 0; i-- )
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	71fb      	strb	r3, [r7, #7]
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1dc      	bne.n	8002bba <APP_Sort_Buffer+0x86>
		if(!L_u8Sorted){
 8002c00:	79bb      	ldrb	r3, [r7, #6]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d13e      	bne.n	8002c84 <APP_Sort_Buffer+0x150>
			if(G_Au8UART_RxBuffer[0] < G_Au8UART_RxBuffer[MAX_SIZE_DATA_BUFFER - 1]){
 8002c06:	4b24      	ldr	r3, [pc, #144]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	4b23      	ldr	r3, [pc, #140]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002c0c:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d20e      	bcs.n	8002c32 <APP_Sort_Buffer+0xfe>
				i= MAX_SIZE_DATA_BUFFER - 1; //last element in buffer
 8002c14:	23c7      	movs	r3, #199	@ 0xc7
 8002c16:	71fb      	strb	r3, [r7, #7]
				L_u8Temp = G_Au8UART_RxBuffer[0];
 8002c18:	4b1f      	ldr	r3, [pc, #124]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	717b      	strb	r3, [r7, #5]
				G_Au8UART_RxBuffer[0] = G_Au8UART_RxBuffer[i];
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	4a1d      	ldr	r2, [pc, #116]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002c22:	5cd2      	ldrb	r2, [r2, r3]
 8002c24:	4b1c      	ldr	r3, [pc, #112]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002c26:	701a      	strb	r2, [r3, #0]
				G_Au8UART_RxBuffer[i] = L_u8Temp;
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	491b      	ldr	r1, [pc, #108]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002c2c:	797a      	ldrb	r2, [r7, #5]
 8002c2e:	54ca      	strb	r2, [r1, r3]
 8002c30:	e022      	b.n	8002c78 <APP_Sort_Buffer+0x144>
			i = MAX_SIZE_DATA_BUFFER - 1;
 8002c32:	23c7      	movs	r3, #199	@ 0xc7
 8002c34:	71fb      	strb	r3, [r7, #7]
				for(;i> G_u8RxBufferHeadIndex ; i-- ){
 8002c36:	e01f      	b.n	8002c78 <APP_Sort_Buffer+0x144>
					if(G_Au8UART_RxBuffer[i] < G_Au8UART_RxBuffer[i-1])
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	4a17      	ldr	r2, [pc, #92]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002c3c:	5cd2      	ldrb	r2, [r2, r3]
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	4915      	ldr	r1, [pc, #84]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002c44:	5ccb      	ldrb	r3, [r1, r3]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d210      	bcs.n	8002c6c <APP_Sort_Buffer+0x138>
						L_u8Temp = G_Au8UART_RxBuffer[i];
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	4a12      	ldr	r2, [pc, #72]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	717b      	strb	r3, [r7, #5]
						G_Au8UART_RxBuffer[i] = G_Au8UART_RxBuffer[i-1];
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	1e5a      	subs	r2, r3, #1
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	490f      	ldr	r1, [pc, #60]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002c5a:	5c89      	ldrb	r1, [r1, r2]
 8002c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002c5e:	54d1      	strb	r1, [r2, r3]
						G_Au8UART_RxBuffer[i-1] = L_u8Temp;
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	490c      	ldr	r1, [pc, #48]	@ (8002c98 <APP_Sort_Buffer+0x164>)
 8002c66:	797a      	ldrb	r2, [r7, #5]
 8002c68:	54ca      	strb	r2, [r1, r3]
 8002c6a:	e002      	b.n	8002c72 <APP_Sort_Buffer+0x13e>
						L_u8Sorted = 1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	71bb      	strb	r3, [r7, #6]
						break;
 8002c70:	e008      	b.n	8002c84 <APP_Sort_Buffer+0x150>
				for(;i> G_u8RxBufferHeadIndex ; i-- ){
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	71fb      	strb	r3, [r7, #7]
 8002c78:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <APP_Sort_Buffer+0x15c>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	79fa      	ldrb	r2, [r7, #7]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d8da      	bhi.n	8002c38 <APP_Sort_Buffer+0x104>
}
 8002c82:	e7ff      	b.n	8002c84 <APP_Sort_Buffer+0x150>
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	200001dc 	.word	0x200001dc
 8002c94:	200001dd 	.word	0x200001dd
 8002c98:	20000114 	.word	0x20000114

08002c9c <MUART_voidCleanRxBuffer>:

void MUART_voidCleanRxBuffer(u8 A_u8NewData)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
	u8 i=0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
	u8 counter = G_u8RxCounter-1;
 8002caa:	4b95      	ldr	r3, [pc, #596]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	73bb      	strb	r3, [r7, #14]
	if(!counter){
 8002cb2:	7bbb      	ldrb	r3, [r7, #14]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f040 82e4 	bne.w	8003282 <MUART_voidCleanRxBuffer+0x5e6>
		i = G_u8RxBufferHeadIndex;
 8002cba:	4b92      	ldr	r3, [pc, #584]	@ (8002f04 <MUART_voidCleanRxBuffer+0x268>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	73fb      	strb	r3, [r7, #15]
		if(A_u8NewData < 0x21){//stop command
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d852      	bhi.n	8002d6c <MUART_voidCleanRxBuffer+0xd0>
			if(G_u8RxBufferHeadIndex>G_u8RxBufferTailIndex){
 8002cc6:	4b8f      	ldr	r3, [pc, #572]	@ (8002f04 <MUART_voidCleanRxBuffer+0x268>)
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	4b8f      	ldr	r3, [pc, #572]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d946      	bls.n	8002d60 <MUART_voidCleanRxBuffer+0xc4>
				while(counter--){
 8002cd2:	e022      	b.n	8002d1a <MUART_voidCleanRxBuffer+0x7e>
					if(G_Au8UART_RxBuffer[i]<0x80){
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	4a8d      	ldr	r2, [pc, #564]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002cd8:	5cd3      	ldrb	r3, [r2, r3]
 8002cda:	b25b      	sxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db13      	blt.n	8002d08 <MUART_voidCleanRxBuffer+0x6c>
						//moving command
						//delete
						G_Au8UART_RxBuffer[i] = 0;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	4a8a      	ldr	r2, [pc, #552]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	54d1      	strb	r1, [r2, r3]
						G_u8RxBufferHeadIndex++;
 8002ce8:	4b86      	ldr	r3, [pc, #536]	@ (8002f04 <MUART_voidCleanRxBuffer+0x268>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	3301      	adds	r3, #1
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	4b84      	ldr	r3, [pc, #528]	@ (8002f04 <MUART_voidCleanRxBuffer+0x268>)
 8002cf2:	701a      	strb	r2, [r3, #0]
						G_u8RxCounter--;
 8002cf4:	4b82      	ldr	r3, [pc, #520]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	4b80      	ldr	r3, [pc, #512]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002cfe:	701a      	strb	r2, [r3, #0]
					else{
						//data commands
						APP_Sort_Buffer();
						break;
					}
					i = ((i<MAX_SIZE_DATA_BUFFER)?(i+1):(0));
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2bc7      	cmp	r3, #199	@ 0xc7
 8002d04:	d807      	bhi.n	8002d16 <MUART_voidCleanRxBuffer+0x7a>
 8002d06:	e002      	b.n	8002d0e <MUART_voidCleanRxBuffer+0x72>
						APP_Sort_Buffer();
 8002d08:	f7ff ff14 	bl	8002b34 <APP_Sort_Buffer>
						break;
 8002d0c:	e2b9      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					i = ((i<MAX_SIZE_DATA_BUFFER)?(i+1):(0));
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	3301      	adds	r3, #1
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	e000      	b.n	8002d18 <MUART_voidCleanRxBuffer+0x7c>
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 8002d1a:	7bbb      	ldrb	r3, [r7, #14]
 8002d1c:	1e5a      	subs	r2, r3, #1
 8002d1e:	73ba      	strb	r2, [r7, #14]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1d7      	bne.n	8002cd4 <MUART_voidCleanRxBuffer+0x38>
		else{//Error in ACK
			//permits duplicates
			APP_Sort_Buffer();
		}
	}
}
 8002d24:	e2ad      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					if(G_Au8UART_RxBuffer[i]<0x80){
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	4a78      	ldr	r2, [pc, #480]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002d2a:	5cd3      	ldrb	r3, [r2, r3]
 8002d2c:	b25b      	sxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db10      	blt.n	8002d54 <MUART_voidCleanRxBuffer+0xb8>
						G_Au8UART_RxBuffer[i] = 0;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	4a75      	ldr	r2, [pc, #468]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002d36:	2100      	movs	r1, #0
 8002d38:	54d1      	strb	r1, [r2, r3]
						G_u8RxBufferHeadIndex++;
 8002d3a:	4b72      	ldr	r3, [pc, #456]	@ (8002f04 <MUART_voidCleanRxBuffer+0x268>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	4b70      	ldr	r3, [pc, #448]	@ (8002f04 <MUART_voidCleanRxBuffer+0x268>)
 8002d44:	701a      	strb	r2, [r3, #0]
						G_u8RxCounter--;
 8002d46:	4b6e      	ldr	r3, [pc, #440]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e002      	b.n	8002d5a <MUART_voidCleanRxBuffer+0xbe>
						APP_Sort_Buffer();
 8002d54:	f7ff feee 	bl	8002b34 <APP_Sort_Buffer>
						break;
 8002d58:	e293      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					i++;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 8002d60:	7bbb      	ldrb	r3, [r7, #14]
 8002d62:	1e5a      	subs	r2, r3, #1
 8002d64:	73ba      	strb	r2, [r7, #14]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1dd      	bne.n	8002d26 <MUART_voidCleanRxBuffer+0x8a>
}
 8002d6a:	e28a      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0x60){//turn command
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	2b5f      	cmp	r3, #95	@ 0x5f
 8002d70:	f200 809b 	bhi.w	8002eaa <MUART_voidCleanRxBuffer+0x20e>
			if(G_u8RxBufferHeadIndex>G_u8RxBufferTailIndex){
 8002d74:	4b63      	ldr	r3, [pc, #396]	@ (8002f04 <MUART_voidCleanRxBuffer+0x268>)
 8002d76:	781a      	ldrb	r2, [r3, #0]
 8002d78:	4b63      	ldr	r3, [pc, #396]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	f240 808d 	bls.w	8002e9c <MUART_voidCleanRxBuffer+0x200>
				while(counter--){
 8002d82:	e042      	b.n	8002e0a <MUART_voidCleanRxBuffer+0x16e>
					if(G_Au8UART_RxBuffer[i]<0x21){
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	4a61      	ldr	r2, [pc, #388]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002d88:	5cd3      	ldrb	r3, [r2, r3]
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d818      	bhi.n	8002dc0 <MUART_voidCleanRxBuffer+0x124>
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 8002d8e:	4b5e      	ldr	r3, [pc, #376]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d004      	beq.n	8002da0 <MUART_voidCleanRxBuffer+0x104>
 8002d96:	4b5c      	ldr	r3, [pc, #368]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e000      	b.n	8002da2 <MUART_voidCleanRxBuffer+0x106>
 8002da0:	23c8      	movs	r3, #200	@ 0xc8
 8002da2:	4a59      	ldr	r2, [pc, #356]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002da4:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8002da6:	4b58      	ldr	r3, [pc, #352]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	4b57      	ldr	r3, [pc, #348]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002dae:	2100      	movs	r1, #0
 8002db0:	5499      	strb	r1, [r3, r2]
						G_u8RxCounter--;
 8002db2:	4b53      	ldr	r3, [pc, #332]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4b51      	ldr	r3, [pc, #324]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002dbc:	701a      	strb	r2, [r3, #0]
						break;
 8002dbe:	e260      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					else if(G_Au8UART_RxBuffer[i]<0x60){
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	4a52      	ldr	r2, [pc, #328]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002dc4:	5cd3      	ldrb	r3, [r2, r3]
 8002dc6:	2b5f      	cmp	r3, #95	@ 0x5f
 8002dc8:	d81c      	bhi.n	8002e04 <MUART_voidCleanRxBuffer+0x168>
						G_Au8UART_RxBuffer[i] = A_u8NewData;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	494f      	ldr	r1, [pc, #316]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002dce:	79fa      	ldrb	r2, [r7, #7]
 8002dd0:	54ca      	strb	r2, [r1, r3]
						G_u8RxCounter--;
 8002dd2:	4b4b      	ldr	r3, [pc, #300]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4b49      	ldr	r3, [pc, #292]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002ddc:	701a      	strb	r2, [r3, #0]
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 8002dde:	4b4a      	ldr	r3, [pc, #296]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d004      	beq.n	8002df0 <MUART_voidCleanRxBuffer+0x154>
 8002de6:	4b48      	ldr	r3, [pc, #288]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	e000      	b.n	8002df2 <MUART_voidCleanRxBuffer+0x156>
 8002df0:	23c8      	movs	r3, #200	@ 0xc8
 8002df2:	4a45      	ldr	r2, [pc, #276]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002df4:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8002df6:	4b44      	ldr	r3, [pc, #272]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b43      	ldr	r3, [pc, #268]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002dfe:	2100      	movs	r1, #0
 8002e00:	5499      	strb	r1, [r3, r2]
						break;
 8002e02:	e23e      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 8002e04:	f7ff fe96 	bl	8002b34 <APP_Sort_Buffer>
						break;
 8002e08:	e23b      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
				while(counter--){
 8002e0a:	7bbb      	ldrb	r3, [r7, #14]
 8002e0c:	1e5a      	subs	r2, r3, #1
 8002e0e:	73ba      	strb	r2, [r7, #14]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1b7      	bne.n	8002d84 <MUART_voidCleanRxBuffer+0xe8>
}
 8002e14:	e235      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					if(G_Au8UART_RxBuffer[i]<0x21){
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	4a3c      	ldr	r2, [pc, #240]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002e1a:	5cd3      	ldrb	r3, [r2, r3]
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d818      	bhi.n	8002e52 <MUART_voidCleanRxBuffer+0x1b6>
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 8002e20:	4b39      	ldr	r3, [pc, #228]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <MUART_voidCleanRxBuffer+0x196>
 8002e28:	4b37      	ldr	r3, [pc, #220]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	e000      	b.n	8002e34 <MUART_voidCleanRxBuffer+0x198>
 8002e32:	23c8      	movs	r3, #200	@ 0xc8
 8002e34:	4a34      	ldr	r2, [pc, #208]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002e36:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8002e38:	4b33      	ldr	r3, [pc, #204]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4b33      	ldr	r3, [pc, #204]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002e40:	2100      	movs	r1, #0
 8002e42:	5499      	strb	r1, [r3, r2]
						G_u8RxCounter--;
 8002e44:	4b2e      	ldr	r3, [pc, #184]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002e4e:	701a      	strb	r2, [r3, #0]
						break;
 8002e50:	e217      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					else if(G_Au8UART_RxBuffer[i]<0x60){
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	4a2d      	ldr	r2, [pc, #180]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	2b5f      	cmp	r3, #95	@ 0x5f
 8002e5a:	d81c      	bhi.n	8002e96 <MUART_voidCleanRxBuffer+0x1fa>
						G_Au8UART_RxBuffer[i] = A_u8NewData;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	492b      	ldr	r1, [pc, #172]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002e60:	79fa      	ldrb	r2, [r7, #7]
 8002e62:	54ca      	strb	r2, [r1, r3]
						G_u8RxCounter--;
 8002e64:	4b26      	ldr	r3, [pc, #152]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	4b24      	ldr	r3, [pc, #144]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002e6e:	701a      	strb	r2, [r3, #0]
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 8002e70:	4b25      	ldr	r3, [pc, #148]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <MUART_voidCleanRxBuffer+0x1e6>
 8002e78:	4b23      	ldr	r3, [pc, #140]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	e000      	b.n	8002e84 <MUART_voidCleanRxBuffer+0x1e8>
 8002e82:	23c8      	movs	r3, #200	@ 0xc8
 8002e84:	4a20      	ldr	r2, [pc, #128]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002e86:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8002e88:	4b1f      	ldr	r3, [pc, #124]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002e90:	2100      	movs	r1, #0
 8002e92:	5499      	strb	r1, [r3, r2]
						break;
 8002e94:	e1f5      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 8002e96:	f7ff fe4d 	bl	8002b34 <APP_Sort_Buffer>
						break;
 8002e9a:	e1f2      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
				while(counter--){
 8002e9c:	bf00      	nop
 8002e9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ea0:	1e5a      	subs	r2, r3, #1
 8002ea2:	73ba      	strb	r2, [r7, #14]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1b6      	bne.n	8002e16 <MUART_voidCleanRxBuffer+0x17a>
}
 8002ea8:	e1eb      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0x80){//speed command
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f2c0 80ba 	blt.w	8003028 <MUART_voidCleanRxBuffer+0x38c>
			if(G_u8RxBufferHeadIndex>G_u8RxBufferTailIndex){
 8002eb4:	4b13      	ldr	r3, [pc, #76]	@ (8002f04 <MUART_voidCleanRxBuffer+0x268>)
 8002eb6:	781a      	ldrb	r2, [r3, #0]
 8002eb8:	4b13      	ldr	r3, [pc, #76]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	f240 80ad 	bls.w	800301c <MUART_voidCleanRxBuffer+0x380>
				while(counter--){
 8002ec2:	e059      	b.n	8002f78 <MUART_voidCleanRxBuffer+0x2dc>
					if(G_Au8UART_RxBuffer[i]<0x21){
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	4a11      	ldr	r2, [pc, #68]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002ec8:	5cd3      	ldrb	r3, [r2, r3]
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d820      	bhi.n	8002f10 <MUART_voidCleanRxBuffer+0x274>
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 8002ece:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d004      	beq.n	8002ee0 <MUART_voidCleanRxBuffer+0x244>
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	e000      	b.n	8002ee2 <MUART_voidCleanRxBuffer+0x246>
 8002ee0:	23c8      	movs	r3, #200	@ 0xc8
 8002ee2:	4a09      	ldr	r2, [pc, #36]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002ee4:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8002ee6:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <MUART_voidCleanRxBuffer+0x26c>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b07      	ldr	r3, [pc, #28]	@ (8002f0c <MUART_voidCleanRxBuffer+0x270>)
 8002eee:	2100      	movs	r1, #0
 8002ef0:	5499      	strb	r1, [r3, r2]
						G_u8RxCounter--;
 8002ef2:	4b03      	ldr	r3, [pc, #12]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4b01      	ldr	r3, [pc, #4]	@ (8002f00 <MUART_voidCleanRxBuffer+0x264>)
 8002efc:	701a      	strb	r2, [r3, #0]
						break;
 8002efe:	e1c0      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
 8002f00:	200001de 	.word	0x200001de
 8002f04:	200001dc 	.word	0x200001dc
 8002f08:	200001dd 	.word	0x200001dd
 8002f0c:	20000114 	.word	0x20000114
					else if(G_Au8UART_RxBuffer[i]<0x60){
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	4a8a      	ldr	r2, [pc, #552]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 8002f14:	5cd3      	ldrb	r3, [r2, r3]
 8002f16:	2b5f      	cmp	r3, #95	@ 0x5f
 8002f18:	d925      	bls.n	8002f66 <MUART_voidCleanRxBuffer+0x2ca>
					else if(G_Au8UART_RxBuffer[i]<0x80){
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	4a87      	ldr	r2, [pc, #540]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 8002f1e:	5cd3      	ldrb	r3, [r2, r3]
 8002f20:	b25b      	sxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	db1c      	blt.n	8002f60 <MUART_voidCleanRxBuffer+0x2c4>
						G_Au8UART_RxBuffer[i] = A_u8NewData;
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	4984      	ldr	r1, [pc, #528]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 8002f2a:	79fa      	ldrb	r2, [r7, #7]
 8002f2c:	54ca      	strb	r2, [r1, r3]
						G_u8RxCounter--;
 8002f2e:	4b84      	ldr	r3, [pc, #528]	@ (8003140 <MUART_voidCleanRxBuffer+0x4a4>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	4b82      	ldr	r3, [pc, #520]	@ (8003140 <MUART_voidCleanRxBuffer+0x4a4>)
 8002f38:	701a      	strb	r2, [r3, #0]
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 8002f3a:	4b82      	ldr	r3, [pc, #520]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <MUART_voidCleanRxBuffer+0x2b0>
 8002f42:	4b80      	ldr	r3, [pc, #512]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	e000      	b.n	8002f4e <MUART_voidCleanRxBuffer+0x2b2>
 8002f4c:	23c8      	movs	r3, #200	@ 0xc8
 8002f4e:	4a7d      	ldr	r2, [pc, #500]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8002f50:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8002f52:	4b7c      	ldr	r3, [pc, #496]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	4b78      	ldr	r3, [pc, #480]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	5499      	strb	r1, [r3, r2]
						break;
 8002f5e:	e190      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 8002f60:	f7ff fde8 	bl	8002b34 <APP_Sort_Buffer>
						break;
 8002f64:	e18d      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					i = ((i<MAX_SIZE_DATA_BUFFER)?(i+1):(0));
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2bc7      	cmp	r3, #199	@ 0xc7
 8002f6a:	d803      	bhi.n	8002f74 <MUART_voidCleanRxBuffer+0x2d8>
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e000      	b.n	8002f76 <MUART_voidCleanRxBuffer+0x2da>
 8002f74:	2300      	movs	r3, #0
 8002f76:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 8002f78:	7bbb      	ldrb	r3, [r7, #14]
 8002f7a:	1e5a      	subs	r2, r3, #1
 8002f7c:	73ba      	strb	r2, [r7, #14]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1a0      	bne.n	8002ec4 <MUART_voidCleanRxBuffer+0x228>
}
 8002f82:	e17e      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					if(G_Au8UART_RxBuffer[i]<0x21){
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	4a6d      	ldr	r2, [pc, #436]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 8002f88:	5cd3      	ldrb	r3, [r2, r3]
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d818      	bhi.n	8002fc0 <MUART_voidCleanRxBuffer+0x324>
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 8002f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <MUART_voidCleanRxBuffer+0x304>
 8002f96:	4b6b      	ldr	r3, [pc, #428]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e000      	b.n	8002fa2 <MUART_voidCleanRxBuffer+0x306>
 8002fa0:	23c8      	movs	r3, #200	@ 0xc8
 8002fa2:	4a68      	ldr	r2, [pc, #416]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8002fa4:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8002fa6:	4b67      	ldr	r3, [pc, #412]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b63      	ldr	r3, [pc, #396]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 8002fae:	2100      	movs	r1, #0
 8002fb0:	5499      	strb	r1, [r3, r2]
						G_u8RxCounter--;
 8002fb2:	4b63      	ldr	r3, [pc, #396]	@ (8003140 <MUART_voidCleanRxBuffer+0x4a4>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4b61      	ldr	r3, [pc, #388]	@ (8003140 <MUART_voidCleanRxBuffer+0x4a4>)
 8002fbc:	701a      	strb	r2, [r3, #0]
						break;
 8002fbe:	e160      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					else if(G_Au8UART_RxBuffer[i]<0x60){
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	4a5e      	ldr	r2, [pc, #376]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 8002fc4:	5cd3      	ldrb	r3, [r2, r3]
 8002fc6:	2b5f      	cmp	r3, #95	@ 0x5f
 8002fc8:	d925      	bls.n	8003016 <MUART_voidCleanRxBuffer+0x37a>
					else if(G_Au8UART_RxBuffer[i]<0x80){
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	4a5b      	ldr	r2, [pc, #364]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 8002fce:	5cd3      	ldrb	r3, [r2, r3]
 8002fd0:	b25b      	sxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	db1c      	blt.n	8003010 <MUART_voidCleanRxBuffer+0x374>
						G_Au8UART_RxBuffer[i] = A_u8NewData;
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	4958      	ldr	r1, [pc, #352]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 8002fda:	79fa      	ldrb	r2, [r7, #7]
 8002fdc:	54ca      	strb	r2, [r1, r3]
						G_u8RxCounter--;
 8002fde:	4b58      	ldr	r3, [pc, #352]	@ (8003140 <MUART_voidCleanRxBuffer+0x4a4>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4b56      	ldr	r3, [pc, #344]	@ (8003140 <MUART_voidCleanRxBuffer+0x4a4>)
 8002fe8:	701a      	strb	r2, [r3, #0]
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 8002fea:	4b56      	ldr	r3, [pc, #344]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d004      	beq.n	8002ffc <MUART_voidCleanRxBuffer+0x360>
 8002ff2:	4b54      	ldr	r3, [pc, #336]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	e000      	b.n	8002ffe <MUART_voidCleanRxBuffer+0x362>
 8002ffc:	23c8      	movs	r3, #200	@ 0xc8
 8002ffe:	4a51      	ldr	r2, [pc, #324]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8003000:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8003002:	4b50      	ldr	r3, [pc, #320]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	4b4c      	ldr	r3, [pc, #304]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 800300a:	2100      	movs	r1, #0
 800300c:	5499      	strb	r1, [r3, r2]
						break;
 800300e:	e138      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 8003010:	f7ff fd90 	bl	8002b34 <APP_Sort_Buffer>
						break;
 8003014:	e135      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					i++;
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	3301      	adds	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 800301c:	7bbb      	ldrb	r3, [r7, #14]
 800301e:	1e5a      	subs	r2, r3, #1
 8003020:	73ba      	strb	r2, [r7, #14]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ae      	bne.n	8002f84 <MUART_voidCleanRxBuffer+0x2e8>
}
 8003026:	e12c      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0x90){//bump data
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	2b8f      	cmp	r3, #143	@ 0x8f
 800302c:	d874      	bhi.n	8003118 <MUART_voidCleanRxBuffer+0x47c>
			if(G_u8RxBufferHeadIndex>G_u8RxBufferTailIndex){
 800302e:	4b46      	ldr	r3, [pc, #280]	@ (8003148 <MUART_voidCleanRxBuffer+0x4ac>)
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	4b44      	ldr	r3, [pc, #272]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d968      	bls.n	800310c <MUART_voidCleanRxBuffer+0x470>
				while(counter--){
 800303a:	e033      	b.n	80030a4 <MUART_voidCleanRxBuffer+0x408>
					if(G_Au8UART_RxBuffer[i]<0x80){
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	4a3f      	ldr	r2, [pc, #252]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	b25b      	sxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	da24      	bge.n	8003092 <MUART_voidCleanRxBuffer+0x3f6>
					else if(G_Au8UART_RxBuffer[i]<0x90){
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	4a3c      	ldr	r2, [pc, #240]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 800304c:	5cd3      	ldrb	r3, [r2, r3]
 800304e:	2b8f      	cmp	r3, #143	@ 0x8f
 8003050:	d81c      	bhi.n	800308c <MUART_voidCleanRxBuffer+0x3f0>
						G_Au8UART_RxBuffer[i] = A_u8NewData;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	4939      	ldr	r1, [pc, #228]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 8003056:	79fa      	ldrb	r2, [r7, #7]
 8003058:	54ca      	strb	r2, [r1, r3]
						G_u8RxCounter--;
 800305a:	4b39      	ldr	r3, [pc, #228]	@ (8003140 <MUART_voidCleanRxBuffer+0x4a4>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	3b01      	subs	r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4b37      	ldr	r3, [pc, #220]	@ (8003140 <MUART_voidCleanRxBuffer+0x4a4>)
 8003064:	701a      	strb	r2, [r3, #0]
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 8003066:	4b37      	ldr	r3, [pc, #220]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d004      	beq.n	8003078 <MUART_voidCleanRxBuffer+0x3dc>
 800306e:	4b35      	ldr	r3, [pc, #212]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	3b01      	subs	r3, #1
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e000      	b.n	800307a <MUART_voidCleanRxBuffer+0x3de>
 8003078:	23c8      	movs	r3, #200	@ 0xc8
 800307a:	4a32      	ldr	r2, [pc, #200]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 800307c:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 800307e:	4b31      	ldr	r3, [pc, #196]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	4b2d      	ldr	r3, [pc, #180]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 8003086:	2100      	movs	r1, #0
 8003088:	5499      	strb	r1, [r3, r2]
						break;
 800308a:	e0fa      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 800308c:	f7ff fd52 	bl	8002b34 <APP_Sort_Buffer>
						break;
 8003090:	e0f7      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					i = ((i<MAX_SIZE_DATA_BUFFER)?(i+1):(0));
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2bc7      	cmp	r3, #199	@ 0xc7
 8003096:	d803      	bhi.n	80030a0 <MUART_voidCleanRxBuffer+0x404>
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	3301      	adds	r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e000      	b.n	80030a2 <MUART_voidCleanRxBuffer+0x406>
 80030a0:	2300      	movs	r3, #0
 80030a2:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 80030a4:	7bbb      	ldrb	r3, [r7, #14]
 80030a6:	1e5a      	subs	r2, r3, #1
 80030a8:	73ba      	strb	r2, [r7, #14]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1c6      	bne.n	800303c <MUART_voidCleanRxBuffer+0x3a0>
}
 80030ae:	e0e8      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					if(G_Au8UART_RxBuffer[i]<0x80){
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	4a22      	ldr	r2, [pc, #136]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 80030b4:	5cd3      	ldrb	r3, [r2, r3]
 80030b6:	b25b      	sxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	da24      	bge.n	8003106 <MUART_voidCleanRxBuffer+0x46a>
					else if(G_Au8UART_RxBuffer[i]<0x90){
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	4a1f      	ldr	r2, [pc, #124]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 80030c0:	5cd3      	ldrb	r3, [r2, r3]
 80030c2:	2b8f      	cmp	r3, #143	@ 0x8f
 80030c4:	d81c      	bhi.n	8003100 <MUART_voidCleanRxBuffer+0x464>
						G_Au8UART_RxBuffer[i] = A_u8NewData;
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	491c      	ldr	r1, [pc, #112]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 80030ca:	79fa      	ldrb	r2, [r7, #7]
 80030cc:	54ca      	strb	r2, [r1, r3]
						G_u8RxCounter--;
 80030ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003140 <MUART_voidCleanRxBuffer+0x4a4>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003140 <MUART_voidCleanRxBuffer+0x4a4>)
 80030d8:	701a      	strb	r2, [r3, #0]
						G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 80030da:	4b1a      	ldr	r3, [pc, #104]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <MUART_voidCleanRxBuffer+0x450>
 80030e2:	4b18      	ldr	r3, [pc, #96]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e000      	b.n	80030ee <MUART_voidCleanRxBuffer+0x452>
 80030ec:	23c8      	movs	r3, #200	@ 0xc8
 80030ee:	4a15      	ldr	r2, [pc, #84]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 80030f0:	7013      	strb	r3, [r2, #0]
						G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 80030f2:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b10      	ldr	r3, [pc, #64]	@ (800313c <MUART_voidCleanRxBuffer+0x4a0>)
 80030fa:	2100      	movs	r1, #0
 80030fc:	5499      	strb	r1, [r3, r2]
						break;
 80030fe:	e0c0      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 8003100:	f7ff fd18 	bl	8002b34 <APP_Sort_Buffer>
						break;
 8003104:	e0bd      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					i++;
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	3301      	adds	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 800310c:	7bbb      	ldrb	r3, [r7, #14]
 800310e:	1e5a      	subs	r2, r3, #1
 8003110:	73ba      	strb	r2, [r7, #14]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1cc      	bne.n	80030b0 <MUART_voidCleanRxBuffer+0x414>
}
 8003116:	e0b4      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0xa0){//sign data
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	2b9f      	cmp	r3, #159	@ 0x9f
 800311c:	d802      	bhi.n	8003124 <MUART_voidCleanRxBuffer+0x488>
			APP_Sort_Buffer();
 800311e:	f7ff fd09 	bl	8002b34 <APP_Sort_Buffer>
}
 8003122:	e0ae      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0xb0){//Lane data
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	2baf      	cmp	r3, #175	@ 0xaf
 8003128:	f200 8090 	bhi.w	800324c <MUART_voidCleanRxBuffer+0x5b0>
			if(G_u8RxBufferHeadIndex>G_u8RxBufferTailIndex){
 800312c:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <MUART_voidCleanRxBuffer+0x4ac>)
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	4b04      	ldr	r3, [pc, #16]	@ (8003144 <MUART_voidCleanRxBuffer+0x4a8>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	f240 8083 	bls.w	8003240 <MUART_voidCleanRxBuffer+0x5a4>
				while(counter--){
 800313a:	e044      	b.n	80031c6 <MUART_voidCleanRxBuffer+0x52a>
 800313c:	20000114 	.word	0x20000114
 8003140:	200001de 	.word	0x200001de
 8003144:	200001dd 	.word	0x200001dd
 8003148:	200001dc 	.word	0x200001dc
					if(G_Au8UART_RxBuffer[i]<0xa0){
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	4a4f      	ldr	r2, [pc, #316]	@ (800328c <MUART_voidCleanRxBuffer+0x5f0>)
 8003150:	5cd3      	ldrb	r3, [r2, r3]
 8003152:	2b9f      	cmp	r3, #159	@ 0x9f
 8003154:	d92e      	bls.n	80031b4 <MUART_voidCleanRxBuffer+0x518>
					else if(G_Au8UART_RxBuffer[i]<0xb0){
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	4a4c      	ldr	r2, [pc, #304]	@ (800328c <MUART_voidCleanRxBuffer+0x5f0>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	2baf      	cmp	r3, #175	@ 0xaf
 800315e:	d826      	bhi.n	80031ae <MUART_voidCleanRxBuffer+0x512>
						if((G_Au8UART_RxBuffer[i]+A_u8NewData)&1){
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	4a4a      	ldr	r2, [pc, #296]	@ (800328c <MUART_voidCleanRxBuffer+0x5f0>)
 8003164:	5cd2      	ldrb	r2, [r2, r3]
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	4413      	add	r3, r2
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d11f      	bne.n	80031b4 <MUART_voidCleanRxBuffer+0x518>
							G_Au8UART_RxBuffer[i] = A_u8NewData;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	4945      	ldr	r1, [pc, #276]	@ (800328c <MUART_voidCleanRxBuffer+0x5f0>)
 8003178:	79fa      	ldrb	r2, [r7, #7]
 800317a:	54ca      	strb	r2, [r1, r3]
							G_u8RxCounter--;
 800317c:	4b44      	ldr	r3, [pc, #272]	@ (8003290 <MUART_voidCleanRxBuffer+0x5f4>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	3b01      	subs	r3, #1
 8003182:	b2da      	uxtb	r2, r3
 8003184:	4b42      	ldr	r3, [pc, #264]	@ (8003290 <MUART_voidCleanRxBuffer+0x5f4>)
 8003186:	701a      	strb	r2, [r3, #0]
							G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 8003188:	4b42      	ldr	r3, [pc, #264]	@ (8003294 <MUART_voidCleanRxBuffer+0x5f8>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <MUART_voidCleanRxBuffer+0x4fe>
 8003190:	4b40      	ldr	r3, [pc, #256]	@ (8003294 <MUART_voidCleanRxBuffer+0x5f8>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	3b01      	subs	r3, #1
 8003196:	b2db      	uxtb	r3, r3
 8003198:	e000      	b.n	800319c <MUART_voidCleanRxBuffer+0x500>
 800319a:	23c8      	movs	r3, #200	@ 0xc8
 800319c:	4a3d      	ldr	r2, [pc, #244]	@ (8003294 <MUART_voidCleanRxBuffer+0x5f8>)
 800319e:	7013      	strb	r3, [r2, #0]
							G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 80031a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003294 <MUART_voidCleanRxBuffer+0x5f8>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b39      	ldr	r3, [pc, #228]	@ (800328c <MUART_voidCleanRxBuffer+0x5f0>)
 80031a8:	2100      	movs	r1, #0
 80031aa:	5499      	strb	r1, [r3, r2]
							break;
 80031ac:	e069      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 80031ae:	f7ff fcc1 	bl	8002b34 <APP_Sort_Buffer>
						break;
 80031b2:	e066      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					i = ((i<MAX_SIZE_DATA_BUFFER)?(i+1):(0));
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80031b8:	d803      	bhi.n	80031c2 <MUART_voidCleanRxBuffer+0x526>
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	3301      	adds	r3, #1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	e000      	b.n	80031c4 <MUART_voidCleanRxBuffer+0x528>
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 80031c6:	7bbb      	ldrb	r3, [r7, #14]
 80031c8:	1e5a      	subs	r2, r3, #1
 80031ca:	73ba      	strb	r2, [r7, #14]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1bd      	bne.n	800314c <MUART_voidCleanRxBuffer+0x4b0>
}
 80031d0:	e057      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					if(G_Au8UART_RxBuffer[i]<0xa0){
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
 80031d4:	4a2d      	ldr	r2, [pc, #180]	@ (800328c <MUART_voidCleanRxBuffer+0x5f0>)
 80031d6:	5cd3      	ldrb	r3, [r2, r3]
 80031d8:	2b9f      	cmp	r3, #159	@ 0x9f
 80031da:	d92e      	bls.n	800323a <MUART_voidCleanRxBuffer+0x59e>
					else if(G_Au8UART_RxBuffer[i]<0xb0){
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	4a2b      	ldr	r2, [pc, #172]	@ (800328c <MUART_voidCleanRxBuffer+0x5f0>)
 80031e0:	5cd3      	ldrb	r3, [r2, r3]
 80031e2:	2baf      	cmp	r3, #175	@ 0xaf
 80031e4:	d826      	bhi.n	8003234 <MUART_voidCleanRxBuffer+0x598>
						if((G_Au8UART_RxBuffer[i]+A_u8NewData)&1){
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	4a28      	ldr	r2, [pc, #160]	@ (800328c <MUART_voidCleanRxBuffer+0x5f0>)
 80031ea:	5cd2      	ldrb	r2, [r2, r3]
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	4413      	add	r3, r2
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11f      	bne.n	800323a <MUART_voidCleanRxBuffer+0x59e>
							G_Au8UART_RxBuffer[i] = A_u8NewData;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	4923      	ldr	r1, [pc, #140]	@ (800328c <MUART_voidCleanRxBuffer+0x5f0>)
 80031fe:	79fa      	ldrb	r2, [r7, #7]
 8003200:	54ca      	strb	r2, [r1, r3]
							G_u8RxCounter--;
 8003202:	4b23      	ldr	r3, [pc, #140]	@ (8003290 <MUART_voidCleanRxBuffer+0x5f4>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	3b01      	subs	r3, #1
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4b21      	ldr	r3, [pc, #132]	@ (8003290 <MUART_voidCleanRxBuffer+0x5f4>)
 800320c:	701a      	strb	r2, [r3, #0]
							G_u8RxBufferTailIndex= ((G_u8RxBufferTailIndex)?(G_u8RxBufferTailIndex-1):(MAX_SIZE_DATA_BUFFER));
 800320e:	4b21      	ldr	r3, [pc, #132]	@ (8003294 <MUART_voidCleanRxBuffer+0x5f8>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <MUART_voidCleanRxBuffer+0x584>
 8003216:	4b1f      	ldr	r3, [pc, #124]	@ (8003294 <MUART_voidCleanRxBuffer+0x5f8>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	3b01      	subs	r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e000      	b.n	8003222 <MUART_voidCleanRxBuffer+0x586>
 8003220:	23c8      	movs	r3, #200	@ 0xc8
 8003222:	4a1c      	ldr	r2, [pc, #112]	@ (8003294 <MUART_voidCleanRxBuffer+0x5f8>)
 8003224:	7013      	strb	r3, [r2, #0]
							G_Au8UART_RxBuffer[G_u8RxBufferTailIndex] = 0;
 8003226:	4b1b      	ldr	r3, [pc, #108]	@ (8003294 <MUART_voidCleanRxBuffer+0x5f8>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	4b17      	ldr	r3, [pc, #92]	@ (800328c <MUART_voidCleanRxBuffer+0x5f0>)
 800322e:	2100      	movs	r1, #0
 8003230:	5499      	strb	r1, [r3, r2]
							break;
 8003232:	e026      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
						APP_Sort_Buffer();
 8003234:	f7ff fc7e 	bl	8002b34 <APP_Sort_Buffer>
						break;
 8003238:	e023      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
					i++;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	3301      	adds	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
				while(counter--){
 8003240:	7bbb      	ldrb	r3, [r7, #14]
 8003242:	1e5a      	subs	r2, r3, #1
 8003244:	73ba      	strb	r2, [r7, #14]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1c3      	bne.n	80031d2 <MUART_voidCleanRxBuffer+0x536>
}
 800324a:	e01a      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0xc0){//Distance
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	2bbf      	cmp	r3, #191	@ 0xbf
 8003250:	d802      	bhi.n	8003258 <MUART_voidCleanRxBuffer+0x5bc>
			APP_Sort_Buffer();
 8003252:	f7ff fc6f 	bl	8002b34 <APP_Sort_Buffer>
}
 8003256:	e014      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0xd0){//V2V Connection
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	2bcf      	cmp	r3, #207	@ 0xcf
 800325c:	d802      	bhi.n	8003264 <MUART_voidCleanRxBuffer+0x5c8>
			APP_Sort_Buffer();
 800325e:	f7ff fc69 	bl	8002b34 <APP_Sort_Buffer>
}
 8003262:	e00e      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0xe0){//V2V message
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	2bdf      	cmp	r3, #223	@ 0xdf
 8003268:	d802      	bhi.n	8003270 <MUART_voidCleanRxBuffer+0x5d4>
			APP_Sort_Buffer();
 800326a:	f7ff fc63 	bl	8002b34 <APP_Sort_Buffer>
}
 800326e:	e008      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
		else if(A_u8NewData <0xf0){//Requests ACKs
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	2bef      	cmp	r3, #239	@ 0xef
 8003274:	d802      	bhi.n	800327c <MUART_voidCleanRxBuffer+0x5e0>
			APP_Sort_Buffer();
 8003276:	f7ff fc5d 	bl	8002b34 <APP_Sort_Buffer>
}
 800327a:	e002      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
			APP_Sort_Buffer();
 800327c:	f7ff fc5a 	bl	8002b34 <APP_Sort_Buffer>
}
 8003280:	e7ff      	b.n	8003282 <MUART_voidCleanRxBuffer+0x5e6>
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000114 	.word	0x20000114
 8003290:	200001de 	.word	0x200001de
 8003294:	200001dd 	.word	0x200001dd

08003298 <MUART_u8ReadDataRegister>:
{
	USARTx->SR = 0;
}

u8 MUART_u8ReadDataRegister(USART_t *USARTx)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	return USARTx -> DR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	b2db      	uxtb	r3, r3
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <MUART1_voidSetCallBack>:

void MUART1_voidSetCallBack( Buffer_state (*ptr) (void) )
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

	MUSART1_CallBack =ptr;
 80032b8:	4a03      	ldr	r2, [pc, #12]	@ (80032c8 <MUART1_voidSetCallBack+0x18>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6013      	str	r3, [r2, #0]
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	200001e0 	.word	0x200001e0

080032cc <USART1_IRQHandler>:
	MUSART2_CallBack = ptr;
}

/*IRQ of UART1*/
void USART1_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
    UART1->SR = 0;
 80032d0:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <USART1_IRQHandler+0x1c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
    //G_u8DataFromUART = MUART_u8ReadDataRegister(UART1);
	if(MUSART1_CallBack!=NULL)
 80032d6:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <USART1_IRQHandler+0x20>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <USART1_IRQHandler+0x18>
	{
		MUSART1_CallBack();
 80032de:	4b03      	ldr	r3, [pc, #12]	@ (80032ec <USART1_IRQHandler+0x20>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4798      	blx	r3
	}
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40013800 	.word	0x40013800
 80032ec:	200001e0 	.word	0x200001e0

080032f0 <USART2_IRQHandler>:

/*IRQ of UART2*/
void USART2_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
	UART2->SR = 0;
 80032f4:	4b07      	ldr	r3, [pc, #28]	@ (8003314 <USART2_IRQHandler+0x24>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
	//G_u8DataFromUART = MUART_u8ReadDataRegister(UART2);
	local_u8_RX_Busyflag=0;
 80032fa:	4b07      	ldr	r3, [pc, #28]	@ (8003318 <USART2_IRQHandler+0x28>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
	if(MUSART2_CallBack!=NULL)
 8003300:	4b06      	ldr	r3, [pc, #24]	@ (800331c <USART2_IRQHandler+0x2c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <USART2_IRQHandler+0x1e>
	{
		MUSART2_CallBack();
 8003308:	4b04      	ldr	r3, [pc, #16]	@ (800331c <USART2_IRQHandler+0x2c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4798      	blx	r3
	}
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40004400 	.word	0x40004400
 8003318:	200001df 	.word	0x200001df
 800331c:	200001e4 	.word	0x200001e4

08003320 <HUltrasonic_f32CalcDistance>:
#include "Ultrasonic_config.h"
#include "Ultrasonic_private.h"


u8 HUltrasonic_f32CalcDistance (u8 Ultra_Num)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]
	u32 L_u32TicksNumber = 0   ;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
	u8 L_f32Distance    = 0.0 ;
 800332e:	2300      	movs	r3, #0
 8003330:	727b      	strb	r3, [r7, #9]
	u16 u16_Time_out = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	817b      	strh	r3, [r7, #10]
	switch(Ultra_Num)
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	2b03      	cmp	r3, #3
 800333a:	f000 80b6 	beq.w	80034aa <HUltrasonic_f32CalcDistance+0x18a>
 800333e:	2b03      	cmp	r3, #3
 8003340:	f300 8109 	bgt.w	8003556 <HUltrasonic_f32CalcDistance+0x236>
 8003344:	2b01      	cmp	r3, #1
 8003346:	d002      	beq.n	800334e <HUltrasonic_f32CalcDistance+0x2e>
 8003348:	2b02      	cmp	r3, #2
 800334a:	d058      	beq.n	80033fe <HUltrasonic_f32CalcDistance+0xde>
 800334c:	e103      	b.n	8003556 <HUltrasonic_f32CalcDistance+0x236>
		/*trig pulse to trigger pin
		 * 3us low
		 * 10us high
		 * then low
		 */
		GPIO_voidSetPinValue (Ultrasonic1_TrigPort,Ultrasonic1_TrigPin, GPIO_LOW ) ;
 800334e:	2200      	movs	r2, #0
 8003350:	210a      	movs	r1, #10
 8003352:	2002      	movs	r0, #2
 8003354:	f7fd fe38 	bl	8000fc8 <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_LOW_PULSE) ;
 8003358:	2006      	movs	r0, #6
 800335a:	f7fe f93b 	bl	80015d4 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic1_TrigPort,Ultrasonic1_TrigPin, GPIO_HIGH) ;
 800335e:	2201      	movs	r2, #1
 8003360:	210a      	movs	r1, #10
 8003362:	2002      	movs	r0, #2
 8003364:	f7fd fe30 	bl	8000fc8 <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_HIGH_PULSE) ;
 8003368:	201e      	movs	r0, #30
 800336a:	f7fe f933 	bl	80015d4 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic1_TrigPort,Ultrasonic1_TrigPin, GPIO_LOW ) ;
 800336e:	2200      	movs	r2, #0
 8003370:	210a      	movs	r1, #10
 8003372:	2002      	movs	r0, #2
 8003374:	f7fd fe28 	bl	8000fc8 <GPIO_voidSetPinValue>

		/*wait for generate 8 pulses (40KHZ)*/
		MSTK_voidSetBusyWait(TIME_FOR_EIGHT_PULSES) ;
 8003378:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800337c:	f7fe f92a 	bl	80015d4 <MSTK_voidSetBusyWait>

		/*wait until generating rising edge for echo pin*/
      	while ((GPIO_GetPinValue( Ultrasonic1_EchoPort, Ultrasonic1_EchoPin) == GPIO_LOW) && u16_Time_out < 1000000)
 8003380:	e002      	b.n	8003388 <HUltrasonic_f32CalcDistance+0x68>
      	{
      		u16_Time_out ++;
 8003382:	897b      	ldrh	r3, [r7, #10]
 8003384:	3301      	adds	r3, #1
 8003386:	817b      	strh	r3, [r7, #10]
      	while ((GPIO_GetPinValue( Ultrasonic1_EchoPort, Ultrasonic1_EchoPin) == GPIO_LOW) && u16_Time_out < 1000000)
 8003388:	210b      	movs	r1, #11
 800338a:	2002      	movs	r0, #2
 800338c:	f7fd fee8 	bl	8001160 <GPIO_GetPinValue>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f5      	beq.n	8003382 <HUltrasonic_f32CalcDistance+0x62>
      	if(u16_Time_out >= 1000000)
      	{
      		return 255;
      	}

		while (GPIO_GetPinValue( Ultrasonic1_EchoPort, Ultrasonic1_EchoPin) == GPIO_HIGH)
 8003396:	e005      	b.n	80033a4 <HUltrasonic_f32CalcDistance+0x84>
		{
			/*each iteration take 4.9 us*/
			L_u32TicksNumber ++ ;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3301      	adds	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
			MSTK_voidSetBusyWait(2) ;
 800339e:	2002      	movs	r0, #2
 80033a0:	f7fe f918 	bl	80015d4 <MSTK_voidSetBusyWait>
		while (GPIO_GetPinValue( Ultrasonic1_EchoPort, Ultrasonic1_EchoPin) == GPIO_HIGH)
 80033a4:	210b      	movs	r1, #11
 80033a6:	2002      	movs	r0, #2
 80033a8:	f7fd feda 	bl	8001160 <GPIO_GetPinValue>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d0f2      	beq.n	8003398 <HUltrasonic_f32CalcDistance+0x78>
		}
		L_f32Distance = (L_u32TicksNumber + 0.0f)*TIME_OF_EACH_ITERATION_IN_MICRO*SPEED_OF_SIGNAL_CM_PER_U ;
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7fd fa88 	bl	80008c8 <__aeabi_ui2f>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd f956 	bl	800066c <__aeabi_f2d>
 80033c0:	a367      	add	r3, pc, #412	@ (adr r3, 8003560 <HUltrasonic_f32CalcDistance+0x240>)
 80033c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c6:	f7fc fec3 	bl	8000150 <__aeabi_dmul>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	a365      	add	r3, pc, #404	@ (adr r3, 8003568 <HUltrasonic_f32CalcDistance+0x248>)
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f7fc feba 	bl	8000150 <__aeabi_dmul>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	f7fd f99a 	bl	800071c <__aeabi_d2uiz>
 80033e8:	4603      	mov	r3, r0
 80033ea:	727b      	strb	r3, [r7, #9]
		L_f32Distance = L_f32Distance / 2 ;
 80033ec:	7a7b      	ldrb	r3, [r7, #9]
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	727b      	strb	r3, [r7, #9]

		/*initialize L_u32TicksNumber for next read*/
		L_u32TicksNumber = 0 ;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
		u16_Time_out = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	817b      	strh	r3, [r7, #10]
		return L_f32Distance ;
 80033fa:	7a7b      	ldrb	r3, [r7, #9]
 80033fc:	e0ac      	b.n	8003558 <HUltrasonic_f32CalcDistance+0x238>
		/*trig pulse to trigger pin
		 * 3us low
		 * 10us high
		 * then low
		 */
		GPIO_voidSetPinValue (Ultrasonic2_TrigPort,Ultrasonic2_TrigPin, GPIO_LOW ) ;
 80033fe:	2200      	movs	r2, #0
 8003400:	210c      	movs	r1, #12
 8003402:	2002      	movs	r0, #2
 8003404:	f7fd fde0 	bl	8000fc8 <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_LOW_PULSE) ;
 8003408:	2006      	movs	r0, #6
 800340a:	f7fe f8e3 	bl	80015d4 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic2_TrigPort,Ultrasonic2_TrigPin, GPIO_HIGH) ;
 800340e:	2201      	movs	r2, #1
 8003410:	210c      	movs	r1, #12
 8003412:	2002      	movs	r0, #2
 8003414:	f7fd fdd8 	bl	8000fc8 <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_HIGH_PULSE) ;
 8003418:	201e      	movs	r0, #30
 800341a:	f7fe f8db 	bl	80015d4 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic2_TrigPort,Ultrasonic2_TrigPin, GPIO_LOW ) ;
 800341e:	2200      	movs	r2, #0
 8003420:	210c      	movs	r1, #12
 8003422:	2002      	movs	r0, #2
 8003424:	f7fd fdd0 	bl	8000fc8 <GPIO_voidSetPinValue>

		/*wait for generate 8 pulses (40KHZ)*/
		MSTK_voidSetBusyWait(TIME_FOR_EIGHT_PULSES) ;
 8003428:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800342c:	f7fe f8d2 	bl	80015d4 <MSTK_voidSetBusyWait>

		/*wait until generating rising edge for echo pin*/
		while ((GPIO_GetPinValue( Ultrasonic2_EchoPort, Ultrasonic2_EchoPin) == GPIO_LOW) && u16_Time_out < 1000000)
 8003430:	e002      	b.n	8003438 <HUltrasonic_f32CalcDistance+0x118>
	      	{
	      		u16_Time_out ++;
 8003432:	897b      	ldrh	r3, [r7, #10]
 8003434:	3301      	adds	r3, #1
 8003436:	817b      	strh	r3, [r7, #10]
		while ((GPIO_GetPinValue( Ultrasonic2_EchoPort, Ultrasonic2_EchoPin) == GPIO_LOW) && u16_Time_out < 1000000)
 8003438:	210d      	movs	r1, #13
 800343a:	2002      	movs	r0, #2
 800343c:	f7fd fe90 	bl	8001160 <GPIO_GetPinValue>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f5      	beq.n	8003432 <HUltrasonic_f32CalcDistance+0x112>
	      	if(u16_Time_out >= 1000000)
	      	{
	      		return 255;
	      	}

		while (GPIO_GetPinValue( Ultrasonic2_EchoPort, Ultrasonic2_EchoPin) == GPIO_HIGH)
 8003446:	e005      	b.n	8003454 <HUltrasonic_f32CalcDistance+0x134>
		{
			/*each iteration take 4.9 us*/
			L_u32TicksNumber ++ ;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	3301      	adds	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
			MSTK_voidSetBusyWait(2) ;
 800344e:	2002      	movs	r0, #2
 8003450:	f7fe f8c0 	bl	80015d4 <MSTK_voidSetBusyWait>
		while (GPIO_GetPinValue( Ultrasonic2_EchoPort, Ultrasonic2_EchoPin) == GPIO_HIGH)
 8003454:	210d      	movs	r1, #13
 8003456:	2002      	movs	r0, #2
 8003458:	f7fd fe82 	bl	8001160 <GPIO_GetPinValue>
 800345c:	4603      	mov	r3, r0
 800345e:	2b01      	cmp	r3, #1
 8003460:	d0f2      	beq.n	8003448 <HUltrasonic_f32CalcDistance+0x128>
		}
		L_f32Distance = (L_u32TicksNumber + 0.0f)*TIME_OF_EACH_ITERATION_IN_MICRO*SPEED_OF_SIGNAL_CM_PER_U ;
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7fd fa30 	bl	80008c8 <__aeabi_ui2f>
 8003468:	4603      	mov	r3, r0
 800346a:	4618      	mov	r0, r3
 800346c:	f7fd f8fe 	bl	800066c <__aeabi_f2d>
 8003470:	a33b      	add	r3, pc, #236	@ (adr r3, 8003560 <HUltrasonic_f32CalcDistance+0x240>)
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	f7fc fe6b 	bl	8000150 <__aeabi_dmul>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4610      	mov	r0, r2
 8003480:	4619      	mov	r1, r3
 8003482:	a339      	add	r3, pc, #228	@ (adr r3, 8003568 <HUltrasonic_f32CalcDistance+0x248>)
 8003484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003488:	f7fc fe62 	bl	8000150 <__aeabi_dmul>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4610      	mov	r0, r2
 8003492:	4619      	mov	r1, r3
 8003494:	f7fd f942 	bl	800071c <__aeabi_d2uiz>
 8003498:	4603      	mov	r3, r0
 800349a:	727b      	strb	r3, [r7, #9]
		L_f32Distance = L_f32Distance / 2 ;
 800349c:	7a7b      	ldrb	r3, [r7, #9]
 800349e:	085b      	lsrs	r3, r3, #1
 80034a0:	727b      	strb	r3, [r7, #9]

		/*initialize L_u32TicksNumber for next read*/
		L_u32TicksNumber = 0 ;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
		return L_f32Distance ;
 80034a6:	7a7b      	ldrb	r3, [r7, #9]
 80034a8:	e056      	b.n	8003558 <HUltrasonic_f32CalcDistance+0x238>
		/*trig pulse to trigger pin
		 * 3us low
		 * 10us high
		 * then low
		 */
		GPIO_voidSetPinValue (Ultrasonic3_TrigPort,Ultrasonic3_TrigPin, GPIO_LOW ) ;
 80034aa:	2200      	movs	r2, #0
 80034ac:	210e      	movs	r1, #14
 80034ae:	2002      	movs	r0, #2
 80034b0:	f7fd fd8a 	bl	8000fc8 <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_LOW_PULSE) ;
 80034b4:	2006      	movs	r0, #6
 80034b6:	f7fe f88d 	bl	80015d4 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic3_TrigPort,Ultrasonic3_TrigPin, GPIO_HIGH) ;
 80034ba:	2201      	movs	r2, #1
 80034bc:	210e      	movs	r1, #14
 80034be:	2002      	movs	r0, #2
 80034c0:	f7fd fd82 	bl	8000fc8 <GPIO_voidSetPinValue>
		MSTK_voidSetBusyWait(TIME_FOR_HIGH_PULSE) ;
 80034c4:	201e      	movs	r0, #30
 80034c6:	f7fe f885 	bl	80015d4 <MSTK_voidSetBusyWait>
		GPIO_voidSetPinValue (Ultrasonic3_TrigPort,Ultrasonic3_TrigPin, GPIO_LOW ) ;
 80034ca:	2200      	movs	r2, #0
 80034cc:	210e      	movs	r1, #14
 80034ce:	2002      	movs	r0, #2
 80034d0:	f7fd fd7a 	bl	8000fc8 <GPIO_voidSetPinValue>

		/*wait for generate 8 pulses (40KHZ)*/
		MSTK_voidSetBusyWait(TIME_FOR_EIGHT_PULSES) ;
 80034d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80034d8:	f7fe f87c 	bl	80015d4 <MSTK_voidSetBusyWait>

		/*wait until generating rising edge for echo pin*/
		while ((GPIO_GetPinValue( Ultrasonic3_EchoPort, Ultrasonic3_EchoPin) == GPIO_LOW) && u16_Time_out < 1000000)
 80034dc:	e002      	b.n	80034e4 <HUltrasonic_f32CalcDistance+0x1c4>
	      	{
	      		u16_Time_out ++;
 80034de:	897b      	ldrh	r3, [r7, #10]
 80034e0:	3301      	adds	r3, #1
 80034e2:	817b      	strh	r3, [r7, #10]
		while ((GPIO_GetPinValue( Ultrasonic3_EchoPort, Ultrasonic3_EchoPin) == GPIO_LOW) && u16_Time_out < 1000000)
 80034e4:	210f      	movs	r1, #15
 80034e6:	2002      	movs	r0, #2
 80034e8:	f7fd fe3a 	bl	8001160 <GPIO_GetPinValue>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f5      	beq.n	80034de <HUltrasonic_f32CalcDistance+0x1be>
	      	if(u16_Time_out >= 1000000)
	      	{
	      		return 255;
	      	} ;

		while (GPIO_GetPinValue( Ultrasonic3_EchoPort, Ultrasonic3_EchoPin) == GPIO_HIGH)
 80034f2:	e005      	b.n	8003500 <HUltrasonic_f32CalcDistance+0x1e0>
		{
			/*each iteration take 4.9 us*/
			L_u32TicksNumber ++ ;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3301      	adds	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
			MSTK_voidSetBusyWait(2) ;
 80034fa:	2002      	movs	r0, #2
 80034fc:	f7fe f86a 	bl	80015d4 <MSTK_voidSetBusyWait>
		while (GPIO_GetPinValue( Ultrasonic3_EchoPort, Ultrasonic3_EchoPin) == GPIO_HIGH)
 8003500:	210f      	movs	r1, #15
 8003502:	2002      	movs	r0, #2
 8003504:	f7fd fe2c 	bl	8001160 <GPIO_GetPinValue>
 8003508:	4603      	mov	r3, r0
 800350a:	2b01      	cmp	r3, #1
 800350c:	d0f2      	beq.n	80034f4 <HUltrasonic_f32CalcDistance+0x1d4>
		}
		L_f32Distance = (L_u32TicksNumber + 0.0f)*TIME_OF_EACH_ITERATION_IN_MICRO*SPEED_OF_SIGNAL_CM_PER_U ;
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f7fd f9da 	bl	80008c8 <__aeabi_ui2f>
 8003514:	4603      	mov	r3, r0
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd f8a8 	bl	800066c <__aeabi_f2d>
 800351c:	a310      	add	r3, pc, #64	@ (adr r3, 8003560 <HUltrasonic_f32CalcDistance+0x240>)
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f7fc fe15 	bl	8000150 <__aeabi_dmul>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	a30e      	add	r3, pc, #56	@ (adr r3, 8003568 <HUltrasonic_f32CalcDistance+0x248>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f7fc fe0c 	bl	8000150 <__aeabi_dmul>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4610      	mov	r0, r2
 800353e:	4619      	mov	r1, r3
 8003540:	f7fd f8ec 	bl	800071c <__aeabi_d2uiz>
 8003544:	4603      	mov	r3, r0
 8003546:	727b      	strb	r3, [r7, #9]
		L_f32Distance = L_f32Distance / 2 ;
 8003548:	7a7b      	ldrb	r3, [r7, #9]
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	727b      	strb	r3, [r7, #9]

		/*initialize L_u32TicksNumber for next read*/
		L_u32TicksNumber = 0 ;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
		return L_f32Distance ;
 8003552:	7a7b      	ldrb	r3, [r7, #9]
 8003554:	e000      	b.n	8003558 <HUltrasonic_f32CalcDistance+0x238>
		break;
	}
	return 0;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	9999999a 	.word	0x9999999a
 8003564:	40139999 	.word	0x40139999
 8003568:	04816f00 	.word	0x04816f00
 800356c:	3fa18fc5 	.word	0x3fa18fc5

08003570 <HUltrasonic_voidInit>:


void HUltrasonic_voidInit (u8 Ultra_Num)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
	switch(Ultra_Num)
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	3b01      	subs	r3, #1
 800357e:	2b03      	cmp	r3, #3
 8003580:	d84a      	bhi.n	8003618 <HUltrasonic_voidInit+0xa8>
 8003582:	a201      	add	r2, pc, #4	@ (adr r2, 8003588 <HUltrasonic_voidInit+0x18>)
 8003584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003588:	08003599 	.word	0x08003599
 800358c:	080035b9 	.word	0x080035b9
 8003590:	080035d9 	.word	0x080035d9
 8003594:	080035f9 	.word	0x080035f9
	{
	case 1:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic1_TrigPort,Ultrasonic1_TrigPin,GPIO_OUTPUT_2M_PP);
 8003598:	2202      	movs	r2, #2
 800359a:	210a      	movs	r1, #10
 800359c:	2002      	movs	r0, #2
 800359e:	f7fd fb73 	bl	8000c88 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic1_TrigPort, Ultrasonic1_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic1_EchoPort,Ultrasonic1_EchoPin,GPIO_INPUT_PU_PD);
 80035a2:	2208      	movs	r2, #8
 80035a4:	210b      	movs	r1, #11
 80035a6:	2002      	movs	r0, #2
 80035a8:	f7fd fb6e 	bl	8000c88 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic1_EchoPort, Ultrasonic1_EchoPin, GPIO_INPUT_PD);
 80035ac:	2200      	movs	r2, #0
 80035ae:	210b      	movs	r1, #11
 80035b0:	2002      	movs	r0, #2
 80035b2:	f7fd fd09 	bl	8000fc8 <GPIO_voidSetPinValue>
		break;
 80035b6:	e02f      	b.n	8003618 <HUltrasonic_voidInit+0xa8>
	case 2:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic2_TrigPort,Ultrasonic2_TrigPin,GPIO_OUTPUT_2M_PP);
 80035b8:	2202      	movs	r2, #2
 80035ba:	210c      	movs	r1, #12
 80035bc:	2002      	movs	r0, #2
 80035be:	f7fd fb63 	bl	8000c88 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic2_TrigPort, Ultrasonic2_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic2_EchoPort,Ultrasonic2_EchoPin,GPIO_INPUT_PU_PD);
 80035c2:	2208      	movs	r2, #8
 80035c4:	210d      	movs	r1, #13
 80035c6:	2002      	movs	r0, #2
 80035c8:	f7fd fb5e 	bl	8000c88 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic2_EchoPort, Ultrasonic2_EchoPin, GPIO_INPUT_PD);
 80035cc:	2200      	movs	r2, #0
 80035ce:	210d      	movs	r1, #13
 80035d0:	2002      	movs	r0, #2
 80035d2:	f7fd fcf9 	bl	8000fc8 <GPIO_voidSetPinValue>
		break;
 80035d6:	e01f      	b.n	8003618 <HUltrasonic_voidInit+0xa8>
	case 3:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic3_TrigPort,Ultrasonic3_TrigPin,GPIO_OUTPUT_2M_PP);
 80035d8:	2202      	movs	r2, #2
 80035da:	210e      	movs	r1, #14
 80035dc:	2002      	movs	r0, #2
 80035de:	f7fd fb53 	bl	8000c88 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic3_TrigPort, Ultrasonic3_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic3_EchoPort,Ultrasonic3_EchoPin,GPIO_INPUT_PU_PD);
 80035e2:	2208      	movs	r2, #8
 80035e4:	210f      	movs	r1, #15
 80035e6:	2002      	movs	r0, #2
 80035e8:	f7fd fb4e 	bl	8000c88 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic3_EchoPort, Ultrasonic3_EchoPin, GPIO_INPUT_PD);
 80035ec:	2200      	movs	r2, #0
 80035ee:	210f      	movs	r1, #15
 80035f0:	2002      	movs	r0, #2
 80035f2:	f7fd fce9 	bl	8000fc8 <GPIO_voidSetPinValue>
		break;
 80035f6:	e00f      	b.n	8003618 <HUltrasonic_voidInit+0xa8>
	case 4:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic4_TrigPort,Ultrasonic4_TrigPin,GPIO_OUTPUT_2M_PP);
 80035f8:	2202      	movs	r2, #2
 80035fa:	2107      	movs	r1, #7
 80035fc:	2001      	movs	r0, #1
 80035fe:	f7fd fb43 	bl	8000c88 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic3_TrigPort, Ultrasonic3_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic4_EchoPort,Ultrasonic4_EchoPin,GPIO_INPUT_PU_PD);
 8003602:	2208      	movs	r2, #8
 8003604:	2108      	movs	r1, #8
 8003606:	2001      	movs	r0, #1
 8003608:	f7fd fb3e 	bl	8000c88 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic4_EchoPort, Ultrasonic4_EchoPin, GPIO_INPUT_PD);
 800360c:	2200      	movs	r2, #0
 800360e:	2108      	movs	r1, #8
 8003610:	2001      	movs	r0, #1
 8003612:	f7fd fcd9 	bl	8000fc8 <GPIO_voidSetPinValue>
		break;
 8003616:	bf00      	nop
	}
	/*initialize systick timer*/
	MSTK_voidInit() ;
 8003618:	f7fd ffd0 	bl	80015bc <MSTK_voidInit>
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <init_conf>:




void init_conf()
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 8003628:	f7fd ff0e 	bl	8001448 <RCC_voidInitSysClock>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOA);
 800362c:	2102      	movs	r1, #2
 800362e:	2002      	movs	r0, #2
 8003630:	f7fd ff3c 	bl	80014ac <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOB);
 8003634:	2103      	movs	r1, #3
 8003636:	2002      	movs	r0, #2
 8003638:	f7fd ff38 	bl	80014ac <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOC);
 800363c:	2104      	movs	r1, #4
 800363e:	2002      	movs	r0, #2
 8003640:	f7fd ff34 	bl	80014ac <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,TIM1);
 8003644:	210b      	movs	r1, #11
 8003646:	2002      	movs	r0, #2
 8003648:	f7fd ff30 	bl	80014ac <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB1,TIM2);
 800364c:	2100      	movs	r1, #0
 800364e:	2001      	movs	r0, #1
 8003650:	f7fd ff2c 	bl	80014ac <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,USART1);
 8003654:	210e      	movs	r1, #14
 8003656:	2002      	movs	r0, #2
 8003658:	f7fd ff28 	bl	80014ac <RCC_voidEnablePeripheral>
	MSTK_voidInit();
 800365c:	f7fd ffae 	bl	80015bc <MSTK_voidInit>
	MOTOR_init(MOTOR_1);
 8003660:	2001      	movs	r0, #1
 8003662:	f7fd fe2d 	bl	80012c0 <MOTOR_init>
	MOTOR_init(MOTOR_2);
 8003666:	2002      	movs	r0, #2
 8003668:	f7fd fe2a 	bl	80012c0 <MOTOR_init>
	GPIO_voidSetPinMode(2,5,GPIO_OUTPUT_10M_PP);
 800366c:	2201      	movs	r2, #1
 800366e:	2105      	movs	r1, #5
 8003670:	2002      	movs	r0, #2
 8003672:	f7fd fb09 	bl	8000c88 <GPIO_voidSetPinMode>
	HUltrasonic_voidInit(ULTR_1);
 8003676:	2001      	movs	r0, #1
 8003678:	f7ff ff7a 	bl	8003570 <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_2);
 800367c:	2002      	movs	r0, #2
 800367e:	f7ff ff77 	bl	8003570 <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_3);
 8003682:	2003      	movs	r0, #3
 8003684:	f7ff ff74 	bl	8003570 <HUltrasonic_voidInit>
    //HUltrasonic_voidInit(ULTR_4);
	MUART_voidInit(&MUART_Init,&MUART_clock,UART1);
 8003688:	4a07      	ldr	r2, [pc, #28]	@ (80036a8 <init_conf+0x84>)
 800368a:	4908      	ldr	r1, [pc, #32]	@ (80036ac <init_conf+0x88>)
 800368c:	4808      	ldr	r0, [pc, #32]	@ (80036b0 <init_conf+0x8c>)
 800368e:	f7ff f85b 	bl	8002748 <MUART_voidInit>
	MUART1_voidSetCallBack(&MUART_Buffer_Write);
 8003692:	4808      	ldr	r0, [pc, #32]	@ (80036b4 <init_conf+0x90>)
 8003694:	f7ff fe0c 	bl	80032b0 <MUART1_voidSetCallBack>
	MUART_voidEnable(UART1);
 8003698:	4803      	ldr	r0, [pc, #12]	@ (80036a8 <init_conf+0x84>)
 800369a:	f7ff f94d 	bl	8002938 <MUART_voidEnable>
	MUART_u8ReceiveByteASynch(UART1);
 800369e:	4802      	ldr	r0, [pc, #8]	@ (80036a8 <init_conf+0x84>)
 80036a0:	f7ff f97c 	bl	800299c <MUART_u8ReceiveByteASynch>

}
 80036a4:	bf00      	nop
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40013800 	.word	0x40013800
 80036ac:	20000110 	.word	0x20000110
 80036b0:	200000cc 	.word	0x200000cc
 80036b4:	080029c5 	.word	0x080029c5

080036b8 <main>:


int main()
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
		//MOTOR_Stop(MOTOR_1) ;
		//MOTOR_Stop(MOTOR_2) ;
		//MSTK_voidSetBusyWait(1000000);
		//MSTK_voidSetBusyWait(1000000);
	//}
	init_conf();
 80036bc:	f7ff ffb2 	bl	8003624 <init_conf>
	MSTK_voidSetBusyWait(1000000);
 80036c0:	4806      	ldr	r0, [pc, #24]	@ (80036dc <main+0x24>)
 80036c2:	f7fd ff87 	bl	80015d4 <MSTK_voidSetBusyWait>
	GPIO_voidSetPinValue(2,5,1);
 80036c6:	2201      	movs	r2, #1
 80036c8:	2105      	movs	r1, #5
 80036ca:	2002      	movs	r0, #2
 80036cc:	f7fd fc7c 	bl	8000fc8 <GPIO_voidSetPinValue>

	while(1)
	{
		UART_Task();
 80036d0:	f000 fb28 	bl	8003d24 <UART_Task>

		/*Encoding received data and take Direction (second 3bits)*/
		APP_Direction_Control();
 80036d4:	f000 fd40 	bl	8004158 <APP_Direction_Control>
		UART_Task();
 80036d8:	bf00      	nop
 80036da:	e7f9      	b.n	80036d0 <main+0x18>
 80036dc:	000f4240 	.word	0x000f4240

080036e0 <APP_Update_Distance>:
    return 0;
}


void APP_Update_Distance()
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
	G_xNear_Distance.Distance_Forword = HUltrasonic_f32CalcDistance(ULTR_1);
 80036e4:	2001      	movs	r0, #1
 80036e6:	f7ff fe1b 	bl	8003320 <HUltrasonic_f32CalcDistance>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <APP_Update_Distance+0x34>)
 80036f0:	701a      	strb	r2, [r3, #0]
	G_xNear_Distance.Distance_Right   = HUltrasonic_f32CalcDistance(ULTR_2);
 80036f2:	2002      	movs	r0, #2
 80036f4:	f7ff fe14 	bl	8003320 <HUltrasonic_f32CalcDistance>
 80036f8:	4603      	mov	r3, r0
 80036fa:	461a      	mov	r2, r3
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <APP_Update_Distance+0x34>)
 80036fe:	70da      	strb	r2, [r3, #3]
	G_xNear_Distance.Distance_Left    = HUltrasonic_f32CalcDistance(ULTR_3);
 8003700:	2003      	movs	r0, #3
 8003702:	f7ff fe0d 	bl	8003320 <HUltrasonic_f32CalcDistance>
 8003706:	4603      	mov	r3, r0
 8003708:	461a      	mov	r2, r3
 800370a:	4b02      	ldr	r3, [pc, #8]	@ (8003714 <APP_Update_Distance+0x34>)
 800370c:	709a      	strb	r2, [r3, #2]
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	200001f0 	.word	0x200001f0

08003718 <APP_VoidStop>:



void APP_VoidStop()
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
	//direction = stop
	G_u16DataAfterProccing.Direction = Stop;
 800371c:	4a08      	ldr	r2, [pc, #32]	@ (8003740 <APP_VoidStop+0x28>)
 800371e:	7813      	ldrb	r3, [r2, #0]
 8003720:	f36f 0303 	bfc	r3, #0, #4
 8003724:	7013      	strb	r3, [r2, #0]
	/*flag = 3*/
	G_u16DataAfterProccing.Flag = 3;
 8003726:	4a06      	ldr	r2, [pc, #24]	@ (8003740 <APP_VoidStop+0x28>)
 8003728:	7853      	ldrb	r3, [r2, #1]
 800372a:	f043 0303 	orr.w	r3, r3, #3
 800372e:	7053      	strb	r3, [r2, #1]
	GPIO_voidSetPinValue(2,5,0);
 8003730:	2200      	movs	r2, #0
 8003732:	2105      	movs	r1, #5
 8003734:	2002      	movs	r0, #2
 8003736:	f7fd fc47 	bl	8000fc8 <GPIO_voidSetPinValue>
	/*stop car + alarm*/
//	G_u16DataAfterProccing = G_u16DataAfterProccing & 0xFF8F ;
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	200001f8 	.word	0x200001f8

08003744 <APP_voidGoTasks>:

void APP_voidGoTasks ()
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Go)
 8003748:	4a39      	ldr	r2, [pc, #228]	@ (8003830 <APP_voidGoTasks+0xec>)
 800374a:	7813      	ldrb	r3, [r2, #0]
 800374c:	2108      	movs	r1, #8
 800374e:	f361 0303 	bfi	r3, r1, #0, #4
 8003752:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Forword  <= SO_SHORT_DISTANCE) // stop car
 8003754:	4b37      	ldr	r3, [pc, #220]	@ (8003834 <APP_voidGoTasks+0xf0>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b0a      	cmp	r3, #10
 800375a:	d80a      	bhi.n	8003772 <APP_voidGoTasks+0x2e>
			{
				//direction = stop
				G_u16DataAfterProccing.Direction = Stop;
 800375c:	4a34      	ldr	r2, [pc, #208]	@ (8003830 <APP_voidGoTasks+0xec>)
 800375e:	7813      	ldrb	r3, [r2, #0]
 8003760:	f36f 0303 	bfc	r3, #0, #4
 8003764:	7013      	strb	r3, [r2, #0]
				/*flag = 3*/
				G_u16DataAfterProccing.Flag = 3;
 8003766:	4a32      	ldr	r2, [pc, #200]	@ (8003830 <APP_voidGoTasks+0xec>)
 8003768:	7853      	ldrb	r3, [r2, #1]
 800376a:	f043 0303 	orr.w	r3, r3, #3
 800376e:	7053      	strb	r3, [r2, #1]
					G_u16DataAfterProccing.Speed = max_speed;
				else
					G_u16DataAfterProccing.Speed = G_xMy_Data.Speed;
			}
	}
}
 8003770:	e05c      	b.n	800382c <APP_voidGoTasks+0xe8>
		else if (G_xNear_Distance.Distance_Forword <= UN_SAFE_DISTANCE) //Un Safed Distance
 8003772:	4b30      	ldr	r3, [pc, #192]	@ (8003834 <APP_voidGoTasks+0xf0>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b14      	cmp	r3, #20
 8003778:	d83f      	bhi.n	80037fa <APP_voidGoTasks+0xb6>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 800377a:	4b2f      	ldr	r3, [pc, #188]	@ (8003838 <APP_voidGoTasks+0xf4>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	4b2d      	ldr	r3, [pc, #180]	@ (800383c <APP_voidGoTasks+0xf8>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	dc1a      	bgt.n	80037c4 <APP_voidGoTasks+0x80>
					G_u16DataAfterProccing.Flag = 1;
 800378e:	4a28      	ldr	r2, [pc, #160]	@ (8003830 <APP_voidGoTasks+0xec>)
 8003790:	7853      	ldrb	r3, [r2, #1]
 8003792:	2101      	movs	r1, #1
 8003794:	f361 0301 	bfi	r3, r1, #0, #2
 8003798:	7053      	strb	r3, [r2, #1]
					G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 800379a:	4b27      	ldr	r3, [pc, #156]	@ (8003838 <APP_voidGoTasks+0xf4>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80037a2:	b2d9      	uxtb	r1, r3
 80037a4:	4a22      	ldr	r2, [pc, #136]	@ (8003830 <APP_voidGoTasks+0xec>)
 80037a6:	7813      	ldrb	r3, [r2, #0]
 80037a8:	f361 0303 	bfi	r3, r1, #0, #4
 80037ac:	7013      	strb	r3, [r2, #0]
					G_u16DataAfterProccing.Speed = G_xMy_Data.Speed;
 80037ae:	4b22      	ldr	r3, [pc, #136]	@ (8003838 <APP_voidGoTasks+0xf4>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80037b6:	b2d9      	uxtb	r1, r3
 80037b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003830 <APP_voidGoTasks+0xec>)
 80037ba:	7813      	ldrb	r3, [r2, #0]
 80037bc:	f361 1306 	bfi	r3, r1, #4, #3
 80037c0:	7013      	strb	r3, [r2, #0]
}
 80037c2:	e033      	b.n	800382c <APP_voidGoTasks+0xe8>
					G_u16DataAfterProccing.Flag = 2;
 80037c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003830 <APP_voidGoTasks+0xec>)
 80037c6:	7853      	ldrb	r3, [r2, #1]
 80037c8:	2102      	movs	r1, #2
 80037ca:	f361 0301 	bfi	r3, r1, #0, #2
 80037ce:	7053      	strb	r3, [r2, #1]
					G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 80037d0:	4b19      	ldr	r3, [pc, #100]	@ (8003838 <APP_voidGoTasks+0xf4>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80037d8:	b2d9      	uxtb	r1, r3
 80037da:	4a15      	ldr	r2, [pc, #84]	@ (8003830 <APP_voidGoTasks+0xec>)
 80037dc:	7813      	ldrb	r3, [r2, #0]
 80037de:	f361 0303 	bfi	r3, r1, #0, #4
 80037e2:	7013      	strb	r3, [r2, #0]
					G_u16DataAfterProccing.Speed = G_xMy_Data.Speed;
 80037e4:	4b14      	ldr	r3, [pc, #80]	@ (8003838 <APP_voidGoTasks+0xf4>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80037ec:	b2d9      	uxtb	r1, r3
 80037ee:	4a10      	ldr	r2, [pc, #64]	@ (8003830 <APP_voidGoTasks+0xec>)
 80037f0:	7813      	ldrb	r3, [r2, #0]
 80037f2:	f361 1306 	bfi	r3, r1, #4, #3
 80037f6:	7013      	strb	r3, [r2, #0]
}
 80037f8:	e018      	b.n	800382c <APP_voidGoTasks+0xe8>
				G_u16DataAfterProccing.Flag = 0;
 80037fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003830 <APP_voidGoTasks+0xec>)
 80037fc:	7853      	ldrb	r3, [r2, #1]
 80037fe:	f36f 0301 	bfc	r3, #0, #2
 8003802:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 8003804:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <APP_voidGoTasks+0xf4>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800380c:	b2d9      	uxtb	r1, r3
 800380e:	4a08      	ldr	r2, [pc, #32]	@ (8003830 <APP_voidGoTasks+0xec>)
 8003810:	7813      	ldrb	r3, [r2, #0]
 8003812:	f361 0303 	bfi	r3, r1, #0, #4
 8003816:	7013      	strb	r3, [r2, #0]
				GPIO_voidSetPinValue(2,5,1);
 8003818:	2201      	movs	r2, #1
 800381a:	2105      	movs	r1, #5
 800381c:	2002      	movs	r0, #2
 800381e:	f7fd fbd3 	bl	8000fc8 <GPIO_voidSetPinValue>
					G_u16DataAfterProccing.Speed = max_speed;
 8003822:	4a03      	ldr	r2, [pc, #12]	@ (8003830 <APP_voidGoTasks+0xec>)
 8003824:	7813      	ldrb	r3, [r2, #0]
 8003826:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800382a:	7013      	strb	r3, [r2, #0]
}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}
 8003830:	200001f8 	.word	0x200001f8
 8003834:	200001f0 	.word	0x200001f0
 8003838:	200001ec 	.word	0x200001ec
 800383c:	200000d8 	.word	0x200000d8

08003840 <APP_voidBackTasks>:
void APP_voidBackTasks ()
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Back)
 8003844:	4a38      	ldr	r2, [pc, #224]	@ (8003928 <APP_voidBackTasks+0xe8>)
 8003846:	7813      	ldrb	r3, [r2, #0]
 8003848:	2101      	movs	r1, #1
 800384a:	f361 0303 	bfi	r3, r1, #0, #4
 800384e:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Back  <= SO_SHORT_DISTANCE) // stop car
 8003850:	4b36      	ldr	r3, [pc, #216]	@ (800392c <APP_voidBackTasks+0xec>)
 8003852:	785b      	ldrb	r3, [r3, #1]
 8003854:	2b0a      	cmp	r3, #10
 8003856:	d80a      	bhi.n	800386e <APP_voidBackTasks+0x2e>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8003858:	4a33      	ldr	r2, [pc, #204]	@ (8003928 <APP_voidBackTasks+0xe8>)
 800385a:	7813      	ldrb	r3, [r2, #0]
 800385c:	f36f 0303 	bfc	r3, #0, #4
 8003860:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 8003862:	4a31      	ldr	r2, [pc, #196]	@ (8003928 <APP_voidBackTasks+0xe8>)
 8003864:	7853      	ldrb	r3, [r2, #1]
 8003866:	f043 0303 	orr.w	r3, r3, #3
 800386a:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 800386c:	e057      	b.n	800391e <APP_voidBackTasks+0xde>
		else if (G_xNear_Distance.Distance_Back <= UN_SAFE_DISTANCE) //Un Safed Distance
 800386e:	4b2f      	ldr	r3, [pc, #188]	@ (800392c <APP_voidBackTasks+0xec>)
 8003870:	785b      	ldrb	r3, [r3, #1]
 8003872:	2b14      	cmp	r3, #20
 8003874:	d83f      	bhi.n	80038f6 <APP_voidBackTasks+0xb6>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8003876:	4b2e      	ldr	r3, [pc, #184]	@ (8003930 <APP_voidBackTasks+0xf0>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	4b2c      	ldr	r3, [pc, #176]	@ (8003934 <APP_voidBackTasks+0xf4>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	dc1a      	bgt.n	80038c0 <APP_voidBackTasks+0x80>
				G_u16DataAfterProccing.Flag = 1; ;
 800388a:	4a27      	ldr	r2, [pc, #156]	@ (8003928 <APP_voidBackTasks+0xe8>)
 800388c:	7853      	ldrb	r3, [r2, #1]
 800388e:	2101      	movs	r1, #1
 8003890:	f361 0301 	bfi	r3, r1, #0, #2
 8003894:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003896:	4b26      	ldr	r3, [pc, #152]	@ (8003930 <APP_voidBackTasks+0xf0>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800389e:	b2d9      	uxtb	r1, r3
 80038a0:	4a21      	ldr	r2, [pc, #132]	@ (8003928 <APP_voidBackTasks+0xe8>)
 80038a2:	7813      	ldrb	r3, [r2, #0]
 80038a4:	f361 0303 	bfi	r3, r1, #0, #4
 80038a8:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 80038aa:	4b21      	ldr	r3, [pc, #132]	@ (8003930 <APP_voidBackTasks+0xf0>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80038b2:	b2d9      	uxtb	r1, r3
 80038b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003928 <APP_voidBackTasks+0xe8>)
 80038b6:	7813      	ldrb	r3, [r2, #0]
 80038b8:	f361 1306 	bfi	r3, r1, #4, #3
 80038bc:	7013      	strb	r3, [r2, #0]
}
 80038be:	e02e      	b.n	800391e <APP_voidBackTasks+0xde>
				G_u16DataAfterProccing.Flag = 2;
 80038c0:	4a19      	ldr	r2, [pc, #100]	@ (8003928 <APP_voidBackTasks+0xe8>)
 80038c2:	7853      	ldrb	r3, [r2, #1]
 80038c4:	2102      	movs	r1, #2
 80038c6:	f361 0301 	bfi	r3, r1, #0, #2
 80038ca:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 80038cc:	4b18      	ldr	r3, [pc, #96]	@ (8003930 <APP_voidBackTasks+0xf0>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80038d4:	b2d9      	uxtb	r1, r3
 80038d6:	4a14      	ldr	r2, [pc, #80]	@ (8003928 <APP_voidBackTasks+0xe8>)
 80038d8:	7813      	ldrb	r3, [r2, #0]
 80038da:	f361 0303 	bfi	r3, r1, #0, #4
 80038de:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 80038e0:	4b14      	ldr	r3, [pc, #80]	@ (8003934 <APP_voidBackTasks+0xf4>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	b2d9      	uxtb	r1, r3
 80038ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003928 <APP_voidBackTasks+0xe8>)
 80038ec:	7813      	ldrb	r3, [r2, #0]
 80038ee:	f361 1306 	bfi	r3, r1, #4, #3
 80038f2:	7013      	strb	r3, [r2, #0]
}
 80038f4:	e013      	b.n	800391e <APP_voidBackTasks+0xde>
			G_u16DataAfterProccing.Flag = 0;
 80038f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003928 <APP_voidBackTasks+0xe8>)
 80038f8:	7853      	ldrb	r3, [r2, #1]
 80038fa:	f36f 0301 	bfc	r3, #0, #2
 80038fe:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003900:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <APP_voidBackTasks+0xf0>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003908:	b2d9      	uxtb	r1, r3
 800390a:	4a07      	ldr	r2, [pc, #28]	@ (8003928 <APP_voidBackTasks+0xe8>)
 800390c:	7813      	ldrb	r3, [r2, #0]
 800390e:	f361 0303 	bfi	r3, r1, #0, #4
 8003912:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 8003914:	4a04      	ldr	r2, [pc, #16]	@ (8003928 <APP_voidBackTasks+0xe8>)
 8003916:	7813      	ldrb	r3, [r2, #0]
 8003918:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800391c:	7013      	strb	r3, [r2, #0]
}
 800391e:	bf00      	nop
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	200001f8 	.word	0x200001f8
 800392c:	200001f0 	.word	0x200001f0
 8003930:	200001ec 	.word	0x200001ec
 8003934:	200000d8 	.word	0x200000d8

08003938 <APP_voidBackward_RightTasks>:
void APP_voidBackward_RightTasks ()
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Backward_Right)
 800393c:	4a38      	ldr	r2, [pc, #224]	@ (8003a20 <APP_voidBackward_RightTasks+0xe8>)
 800393e:	7813      	ldrb	r3, [r2, #0]
 8003940:	2106      	movs	r1, #6
 8003942:	f361 0303 	bfi	r3, r1, #0, #4
 8003946:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Left  <= SO_SHORT_DISTANCE) // stop car
 8003948:	4b36      	ldr	r3, [pc, #216]	@ (8003a24 <APP_voidBackward_RightTasks+0xec>)
 800394a:	789b      	ldrb	r3, [r3, #2]
 800394c:	2b0a      	cmp	r3, #10
 800394e:	d80a      	bhi.n	8003966 <APP_voidBackward_RightTasks+0x2e>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8003950:	4a33      	ldr	r2, [pc, #204]	@ (8003a20 <APP_voidBackward_RightTasks+0xe8>)
 8003952:	7813      	ldrb	r3, [r2, #0]
 8003954:	f36f 0303 	bfc	r3, #0, #4
 8003958:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 800395a:	4a31      	ldr	r2, [pc, #196]	@ (8003a20 <APP_voidBackward_RightTasks+0xe8>)
 800395c:	7853      	ldrb	r3, [r2, #1]
 800395e:	f043 0303 	orr.w	r3, r3, #3
 8003962:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 8003964:	e057      	b.n	8003a16 <APP_voidBackward_RightTasks+0xde>
		else if (G_xNear_Distance.Distance_Left <= UN_SAFE_DISTANCE) //Un Safed Distance
 8003966:	4b2f      	ldr	r3, [pc, #188]	@ (8003a24 <APP_voidBackward_RightTasks+0xec>)
 8003968:	789b      	ldrb	r3, [r3, #2]
 800396a:	2b14      	cmp	r3, #20
 800396c:	d83f      	bhi.n	80039ee <APP_voidBackward_RightTasks+0xb6>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 800396e:	4b2e      	ldr	r3, [pc, #184]	@ (8003a28 <APP_voidBackward_RightTasks+0xf0>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	4b2c      	ldr	r3, [pc, #176]	@ (8003a2c <APP_voidBackward_RightTasks+0xf4>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	dc1a      	bgt.n	80039b8 <APP_voidBackward_RightTasks+0x80>
				G_u16DataAfterProccing.Flag = 1; ;
 8003982:	4a27      	ldr	r2, [pc, #156]	@ (8003a20 <APP_voidBackward_RightTasks+0xe8>)
 8003984:	7853      	ldrb	r3, [r2, #1]
 8003986:	2101      	movs	r1, #1
 8003988:	f361 0301 	bfi	r3, r1, #0, #2
 800398c:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 800398e:	4b26      	ldr	r3, [pc, #152]	@ (8003a28 <APP_voidBackward_RightTasks+0xf0>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003996:	b2d9      	uxtb	r1, r3
 8003998:	4a21      	ldr	r2, [pc, #132]	@ (8003a20 <APP_voidBackward_RightTasks+0xe8>)
 800399a:	7813      	ldrb	r3, [r2, #0]
 800399c:	f361 0303 	bfi	r3, r1, #0, #4
 80039a0:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 80039a2:	4b21      	ldr	r3, [pc, #132]	@ (8003a28 <APP_voidBackward_RightTasks+0xf0>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80039aa:	b2d9      	uxtb	r1, r3
 80039ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003a20 <APP_voidBackward_RightTasks+0xe8>)
 80039ae:	7813      	ldrb	r3, [r2, #0]
 80039b0:	f361 1306 	bfi	r3, r1, #4, #3
 80039b4:	7013      	strb	r3, [r2, #0]
}
 80039b6:	e02e      	b.n	8003a16 <APP_voidBackward_RightTasks+0xde>
				G_u16DataAfterProccing.Flag = 2;
 80039b8:	4a19      	ldr	r2, [pc, #100]	@ (8003a20 <APP_voidBackward_RightTasks+0xe8>)
 80039ba:	7853      	ldrb	r3, [r2, #1]
 80039bc:	2102      	movs	r1, #2
 80039be:	f361 0301 	bfi	r3, r1, #0, #2
 80039c2:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 80039c4:	4b18      	ldr	r3, [pc, #96]	@ (8003a28 <APP_voidBackward_RightTasks+0xf0>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80039cc:	b2d9      	uxtb	r1, r3
 80039ce:	4a14      	ldr	r2, [pc, #80]	@ (8003a20 <APP_voidBackward_RightTasks+0xe8>)
 80039d0:	7813      	ldrb	r3, [r2, #0]
 80039d2:	f361 0303 	bfi	r3, r1, #0, #4
 80039d6:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 80039d8:	4b14      	ldr	r3, [pc, #80]	@ (8003a2c <APP_voidBackward_RightTasks+0xf4>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	b2d9      	uxtb	r1, r3
 80039e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003a20 <APP_voidBackward_RightTasks+0xe8>)
 80039e4:	7813      	ldrb	r3, [r2, #0]
 80039e6:	f361 1306 	bfi	r3, r1, #4, #3
 80039ea:	7013      	strb	r3, [r2, #0]
}
 80039ec:	e013      	b.n	8003a16 <APP_voidBackward_RightTasks+0xde>
			G_u16DataAfterProccing.Flag = 0;
 80039ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003a20 <APP_voidBackward_RightTasks+0xe8>)
 80039f0:	7853      	ldrb	r3, [r2, #1]
 80039f2:	f36f 0301 	bfc	r3, #0, #2
 80039f6:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 80039f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a28 <APP_voidBackward_RightTasks+0xf0>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003a00:	b2d9      	uxtb	r1, r3
 8003a02:	4a07      	ldr	r2, [pc, #28]	@ (8003a20 <APP_voidBackward_RightTasks+0xe8>)
 8003a04:	7813      	ldrb	r3, [r2, #0]
 8003a06:	f361 0303 	bfi	r3, r1, #0, #4
 8003a0a:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 8003a0c:	4a04      	ldr	r2, [pc, #16]	@ (8003a20 <APP_voidBackward_RightTasks+0xe8>)
 8003a0e:	7813      	ldrb	r3, [r2, #0]
 8003a10:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003a14:	7013      	strb	r3, [r2, #0]
}
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	200001f8 	.word	0x200001f8
 8003a24:	200001f0 	.word	0x200001f0
 8003a28:	200001ec 	.word	0x200001ec
 8003a2c:	200000d8 	.word	0x200000d8

08003a30 <APP_voidBackward_LEFTTasks>:
void APP_voidBackward_LEFTTasks ()
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Backward_Left)
 8003a34:	4a38      	ldr	r2, [pc, #224]	@ (8003b18 <APP_voidBackward_LEFTTasks+0xe8>)
 8003a36:	7813      	ldrb	r3, [r2, #0]
 8003a38:	2107      	movs	r1, #7
 8003a3a:	f361 0303 	bfi	r3, r1, #0, #4
 8003a3e:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Right  <= SO_SHORT_DISTANCE) // stop car
 8003a40:	4b36      	ldr	r3, [pc, #216]	@ (8003b1c <APP_voidBackward_LEFTTasks+0xec>)
 8003a42:	78db      	ldrb	r3, [r3, #3]
 8003a44:	2b0a      	cmp	r3, #10
 8003a46:	d80a      	bhi.n	8003a5e <APP_voidBackward_LEFTTasks+0x2e>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8003a48:	4a33      	ldr	r2, [pc, #204]	@ (8003b18 <APP_voidBackward_LEFTTasks+0xe8>)
 8003a4a:	7813      	ldrb	r3, [r2, #0]
 8003a4c:	f36f 0303 	bfc	r3, #0, #4
 8003a50:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 8003a52:	4a31      	ldr	r2, [pc, #196]	@ (8003b18 <APP_voidBackward_LEFTTasks+0xe8>)
 8003a54:	7853      	ldrb	r3, [r2, #1]
 8003a56:	f043 0303 	orr.w	r3, r3, #3
 8003a5a:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 8003a5c:	e057      	b.n	8003b0e <APP_voidBackward_LEFTTasks+0xde>
		else if (G_xNear_Distance.Distance_Right <= UN_SAFE_DISTANCE) //Un Safed Distance
 8003a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b1c <APP_voidBackward_LEFTTasks+0xec>)
 8003a60:	78db      	ldrb	r3, [r3, #3]
 8003a62:	2b14      	cmp	r3, #20
 8003a64:	d83f      	bhi.n	8003ae6 <APP_voidBackward_LEFTTasks+0xb6>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8003a66:	4b2e      	ldr	r3, [pc, #184]	@ (8003b20 <APP_voidBackward_LEFTTasks+0xf0>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	4b2c      	ldr	r3, [pc, #176]	@ (8003b24 <APP_voidBackward_LEFTTasks+0xf4>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	dc1a      	bgt.n	8003ab0 <APP_voidBackward_LEFTTasks+0x80>
				G_u16DataAfterProccing.Flag = 1;
 8003a7a:	4a27      	ldr	r2, [pc, #156]	@ (8003b18 <APP_voidBackward_LEFTTasks+0xe8>)
 8003a7c:	7853      	ldrb	r3, [r2, #1]
 8003a7e:	2101      	movs	r1, #1
 8003a80:	f361 0301 	bfi	r3, r1, #0, #2
 8003a84:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003a86:	4b26      	ldr	r3, [pc, #152]	@ (8003b20 <APP_voidBackward_LEFTTasks+0xf0>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003a8e:	b2d9      	uxtb	r1, r3
 8003a90:	4a21      	ldr	r2, [pc, #132]	@ (8003b18 <APP_voidBackward_LEFTTasks+0xe8>)
 8003a92:	7813      	ldrb	r3, [r2, #0]
 8003a94:	f361 0303 	bfi	r3, r1, #0, #4
 8003a98:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8003a9a:	4b21      	ldr	r3, [pc, #132]	@ (8003b20 <APP_voidBackward_LEFTTasks+0xf0>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003aa2:	b2d9      	uxtb	r1, r3
 8003aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b18 <APP_voidBackward_LEFTTasks+0xe8>)
 8003aa6:	7813      	ldrb	r3, [r2, #0]
 8003aa8:	f361 1306 	bfi	r3, r1, #4, #3
 8003aac:	7013      	strb	r3, [r2, #0]
}
 8003aae:	e02e      	b.n	8003b0e <APP_voidBackward_LEFTTasks+0xde>
				G_u16DataAfterProccing.Flag = 2;
 8003ab0:	4a19      	ldr	r2, [pc, #100]	@ (8003b18 <APP_voidBackward_LEFTTasks+0xe8>)
 8003ab2:	7853      	ldrb	r3, [r2, #1]
 8003ab4:	2102      	movs	r1, #2
 8003ab6:	f361 0301 	bfi	r3, r1, #0, #2
 8003aba:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003abc:	4b18      	ldr	r3, [pc, #96]	@ (8003b20 <APP_voidBackward_LEFTTasks+0xf0>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003ac4:	b2d9      	uxtb	r1, r3
 8003ac6:	4a14      	ldr	r2, [pc, #80]	@ (8003b18 <APP_voidBackward_LEFTTasks+0xe8>)
 8003ac8:	7813      	ldrb	r3, [r2, #0]
 8003aca:	f361 0303 	bfi	r3, r1, #0, #4
 8003ace:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 8003ad0:	4b14      	ldr	r3, [pc, #80]	@ (8003b24 <APP_voidBackward_LEFTTasks+0xf4>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	b2d9      	uxtb	r1, r3
 8003ada:	4a0f      	ldr	r2, [pc, #60]	@ (8003b18 <APP_voidBackward_LEFTTasks+0xe8>)
 8003adc:	7813      	ldrb	r3, [r2, #0]
 8003ade:	f361 1306 	bfi	r3, r1, #4, #3
 8003ae2:	7013      	strb	r3, [r2, #0]
}
 8003ae4:	e013      	b.n	8003b0e <APP_voidBackward_LEFTTasks+0xde>
			G_u16DataAfterProccing.Flag = 0;
 8003ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8003b18 <APP_voidBackward_LEFTTasks+0xe8>)
 8003ae8:	7853      	ldrb	r3, [r2, #1]
 8003aea:	f36f 0301 	bfc	r3, #0, #2
 8003aee:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003af0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <APP_voidBackward_LEFTTasks+0xf0>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003af8:	b2d9      	uxtb	r1, r3
 8003afa:	4a07      	ldr	r2, [pc, #28]	@ (8003b18 <APP_voidBackward_LEFTTasks+0xe8>)
 8003afc:	7813      	ldrb	r3, [r2, #0]
 8003afe:	f361 0303 	bfi	r3, r1, #0, #4
 8003b02:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 8003b04:	4a04      	ldr	r2, [pc, #16]	@ (8003b18 <APP_voidBackward_LEFTTasks+0xe8>)
 8003b06:	7813      	ldrb	r3, [r2, #0]
 8003b08:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003b0c:	7013      	strb	r3, [r2, #0]
}
 8003b0e:	bf00      	nop
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	200001f8 	.word	0x200001f8
 8003b1c:	200001f0 	.word	0x200001f0
 8003b20:	200001ec 	.word	0x200001ec
 8003b24:	200000d8 	.word	0x200000d8

08003b28 <APP_voidRight_LeftTasks>:
void APP_voidRight_LeftTasks ()
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
	APP_Update_Distance();
 8003b2c:	f7ff fdd8 	bl	80036e0 <APP_Update_Distance>

}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <APP_voidForward_RightTasks>:
void APP_voidForward_RightTasks ()
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Forward_Right)
 8003b38:	4a38      	ldr	r2, [pc, #224]	@ (8003c1c <APP_voidForward_RightTasks+0xe8>)
 8003b3a:	7813      	ldrb	r3, [r2, #0]
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	f361 0303 	bfi	r3, r1, #0, #4
 8003b42:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Right  <= SO_SHORT_DISTANCE) // stop car
 8003b44:	4b36      	ldr	r3, [pc, #216]	@ (8003c20 <APP_voidForward_RightTasks+0xec>)
 8003b46:	78db      	ldrb	r3, [r3, #3]
 8003b48:	2b0a      	cmp	r3, #10
 8003b4a:	d80a      	bhi.n	8003b62 <APP_voidForward_RightTasks+0x2e>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8003b4c:	4a33      	ldr	r2, [pc, #204]	@ (8003c1c <APP_voidForward_RightTasks+0xe8>)
 8003b4e:	7813      	ldrb	r3, [r2, #0]
 8003b50:	f36f 0303 	bfc	r3, #0, #4
 8003b54:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 8003b56:	4a31      	ldr	r2, [pc, #196]	@ (8003c1c <APP_voidForward_RightTasks+0xe8>)
 8003b58:	7853      	ldrb	r3, [r2, #1]
 8003b5a:	f043 0303 	orr.w	r3, r3, #3
 8003b5e:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 8003b60:	e057      	b.n	8003c12 <APP_voidForward_RightTasks+0xde>
		else if (G_xNear_Distance.Distance_Right <= UN_SAFE_DISTANCE) //Un Safed Distance
 8003b62:	4b2f      	ldr	r3, [pc, #188]	@ (8003c20 <APP_voidForward_RightTasks+0xec>)
 8003b64:	78db      	ldrb	r3, [r3, #3]
 8003b66:	2b14      	cmp	r3, #20
 8003b68:	d83f      	bhi.n	8003bea <APP_voidForward_RightTasks+0xb6>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8003b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003c24 <APP_voidForward_RightTasks+0xf0>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b2c      	ldr	r3, [pc, #176]	@ (8003c28 <APP_voidForward_RightTasks+0xf4>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	dc1a      	bgt.n	8003bb4 <APP_voidForward_RightTasks+0x80>
				G_u16DataAfterProccing.Flag = 1;
 8003b7e:	4a27      	ldr	r2, [pc, #156]	@ (8003c1c <APP_voidForward_RightTasks+0xe8>)
 8003b80:	7853      	ldrb	r3, [r2, #1]
 8003b82:	2101      	movs	r1, #1
 8003b84:	f361 0301 	bfi	r3, r1, #0, #2
 8003b88:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003b8a:	4b26      	ldr	r3, [pc, #152]	@ (8003c24 <APP_voidForward_RightTasks+0xf0>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003b92:	b2d9      	uxtb	r1, r3
 8003b94:	4a21      	ldr	r2, [pc, #132]	@ (8003c1c <APP_voidForward_RightTasks+0xe8>)
 8003b96:	7813      	ldrb	r3, [r2, #0]
 8003b98:	f361 0303 	bfi	r3, r1, #0, #4
 8003b9c:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8003b9e:	4b21      	ldr	r3, [pc, #132]	@ (8003c24 <APP_voidForward_RightTasks+0xf0>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003ba6:	b2d9      	uxtb	r1, r3
 8003ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c1c <APP_voidForward_RightTasks+0xe8>)
 8003baa:	7813      	ldrb	r3, [r2, #0]
 8003bac:	f361 1306 	bfi	r3, r1, #4, #3
 8003bb0:	7013      	strb	r3, [r2, #0]
}
 8003bb2:	e02e      	b.n	8003c12 <APP_voidForward_RightTasks+0xde>
				G_u16DataAfterProccing.Flag = 2;
 8003bb4:	4a19      	ldr	r2, [pc, #100]	@ (8003c1c <APP_voidForward_RightTasks+0xe8>)
 8003bb6:	7853      	ldrb	r3, [r2, #1]
 8003bb8:	2102      	movs	r1, #2
 8003bba:	f361 0301 	bfi	r3, r1, #0, #2
 8003bbe:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003bc0:	4b18      	ldr	r3, [pc, #96]	@ (8003c24 <APP_voidForward_RightTasks+0xf0>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003bc8:	b2d9      	uxtb	r1, r3
 8003bca:	4a14      	ldr	r2, [pc, #80]	@ (8003c1c <APP_voidForward_RightTasks+0xe8>)
 8003bcc:	7813      	ldrb	r3, [r2, #0]
 8003bce:	f361 0303 	bfi	r3, r1, #0, #4
 8003bd2:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed ;
 8003bd4:	4b14      	ldr	r3, [pc, #80]	@ (8003c28 <APP_voidForward_RightTasks+0xf4>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	b2d9      	uxtb	r1, r3
 8003bde:	4a0f      	ldr	r2, [pc, #60]	@ (8003c1c <APP_voidForward_RightTasks+0xe8>)
 8003be0:	7813      	ldrb	r3, [r2, #0]
 8003be2:	f361 1306 	bfi	r3, r1, #4, #3
 8003be6:	7013      	strb	r3, [r2, #0]
}
 8003be8:	e013      	b.n	8003c12 <APP_voidForward_RightTasks+0xde>
			G_u16DataAfterProccing.Flag = 0;
 8003bea:	4a0c      	ldr	r2, [pc, #48]	@ (8003c1c <APP_voidForward_RightTasks+0xe8>)
 8003bec:	7853      	ldrb	r3, [r2, #1]
 8003bee:	f36f 0301 	bfc	r3, #0, #2
 8003bf2:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <APP_voidForward_RightTasks+0xf0>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003bfc:	b2d9      	uxtb	r1, r3
 8003bfe:	4a07      	ldr	r2, [pc, #28]	@ (8003c1c <APP_voidForward_RightTasks+0xe8>)
 8003c00:	7813      	ldrb	r3, [r2, #0]
 8003c02:	f361 0303 	bfi	r3, r1, #0, #4
 8003c06:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 8003c08:	4a04      	ldr	r2, [pc, #16]	@ (8003c1c <APP_voidForward_RightTasks+0xe8>)
 8003c0a:	7813      	ldrb	r3, [r2, #0]
 8003c0c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003c10:	7013      	strb	r3, [r2, #0]
}
 8003c12:	bf00      	nop
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	200001f8 	.word	0x200001f8
 8003c20:	200001f0 	.word	0x200001f0
 8003c24:	200001ec 	.word	0x200001ec
 8003c28:	200000d8 	.word	0x200000d8

08003c2c <APP_voidForward_LeftTasks>:
void APP_voidForward_LeftTasks ()
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
	if(G_u16DataAfterProccing.Direction = Forward_Left)
 8003c30:	4a38      	ldr	r2, [pc, #224]	@ (8003d14 <APP_voidForward_LeftTasks+0xe8>)
 8003c32:	7813      	ldrb	r3, [r2, #0]
 8003c34:	2105      	movs	r1, #5
 8003c36:	f361 0303 	bfi	r3, r1, #0, #4
 8003c3a:	7013      	strb	r3, [r2, #0]
	{
		if (G_xNear_Distance.Distance_Left  <= SO_SHORT_DISTANCE) // stop car
 8003c3c:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <APP_voidForward_LeftTasks+0xec>)
 8003c3e:	789b      	ldrb	r3, [r3, #2]
 8003c40:	2b0a      	cmp	r3, #10
 8003c42:	d80a      	bhi.n	8003c5a <APP_voidForward_LeftTasks+0x2e>
		{
			//direction = stop
			G_u16DataAfterProccing.Direction = Stop;
 8003c44:	4a33      	ldr	r2, [pc, #204]	@ (8003d14 <APP_voidForward_LeftTasks+0xe8>)
 8003c46:	7813      	ldrb	r3, [r2, #0]
 8003c48:	f36f 0303 	bfc	r3, #0, #4
 8003c4c:	7013      	strb	r3, [r2, #0]
			/*flag = 3*/
			G_u16DataAfterProccing.Flag = 3;
 8003c4e:	4a31      	ldr	r2, [pc, #196]	@ (8003d14 <APP_voidForward_LeftTasks+0xe8>)
 8003c50:	7853      	ldrb	r3, [r2, #1]
 8003c52:	f043 0303 	orr.w	r3, r3, #3
 8003c56:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Speed = max_speed;
			else
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
		}
	}
}
 8003c58:	e057      	b.n	8003d0a <APP_voidForward_LeftTasks+0xde>
		else if (G_xNear_Distance.Distance_Left <= UN_SAFE_DISTANCE) //Un Safed Distance
 8003c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d18 <APP_voidForward_LeftTasks+0xec>)
 8003c5c:	789b      	ldrb	r3, [r3, #2]
 8003c5e:	2b14      	cmp	r3, #20
 8003c60:	d83f      	bhi.n	8003ce2 <APP_voidForward_LeftTasks+0xb6>
			if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8003c62:	4b2e      	ldr	r3, [pc, #184]	@ (8003d1c <APP_voidForward_LeftTasks+0xf0>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d20 <APP_voidForward_LeftTasks+0xf4>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	dc1a      	bgt.n	8003cac <APP_voidForward_LeftTasks+0x80>
				G_u16DataAfterProccing.Flag = 1;
 8003c76:	4a27      	ldr	r2, [pc, #156]	@ (8003d14 <APP_voidForward_LeftTasks+0xe8>)
 8003c78:	7853      	ldrb	r3, [r2, #1]
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	f361 0301 	bfi	r3, r1, #0, #2
 8003c80:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003c82:	4b26      	ldr	r3, [pc, #152]	@ (8003d1c <APP_voidForward_LeftTasks+0xf0>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003c8a:	b2d9      	uxtb	r1, r3
 8003c8c:	4a21      	ldr	r2, [pc, #132]	@ (8003d14 <APP_voidForward_LeftTasks+0xe8>)
 8003c8e:	7813      	ldrb	r3, [r2, #0]
 8003c90:	f361 0303 	bfi	r3, r1, #0, #4
 8003c94:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_xMy_Data.Speed ;
 8003c96:	4b21      	ldr	r3, [pc, #132]	@ (8003d1c <APP_voidForward_LeftTasks+0xf0>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003c9e:	b2d9      	uxtb	r1, r3
 8003ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d14 <APP_voidForward_LeftTasks+0xe8>)
 8003ca2:	7813      	ldrb	r3, [r2, #0]
 8003ca4:	f361 1306 	bfi	r3, r1, #4, #3
 8003ca8:	7013      	strb	r3, [r2, #0]
}
 8003caa:	e02e      	b.n	8003d0a <APP_voidForward_LeftTasks+0xde>
				G_u16DataAfterProccing.Flag = 2;
 8003cac:	4a19      	ldr	r2, [pc, #100]	@ (8003d14 <APP_voidForward_LeftTasks+0xe8>)
 8003cae:	7853      	ldrb	r3, [r2, #1]
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	f361 0301 	bfi	r3, r1, #0, #2
 8003cb6:	7053      	strb	r3, [r2, #1]
				G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003cb8:	4b18      	ldr	r3, [pc, #96]	@ (8003d1c <APP_voidForward_LeftTasks+0xf0>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003cc0:	b2d9      	uxtb	r1, r3
 8003cc2:	4a14      	ldr	r2, [pc, #80]	@ (8003d14 <APP_voidForward_LeftTasks+0xe8>)
 8003cc4:	7813      	ldrb	r3, [r2, #0]
 8003cc6:	f361 0303 	bfi	r3, r1, #0, #4
 8003cca:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = G_u8_LimetedSpeed;
 8003ccc:	4b14      	ldr	r3, [pc, #80]	@ (8003d20 <APP_voidForward_LeftTasks+0xf4>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	b2d9      	uxtb	r1, r3
 8003cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8003d14 <APP_voidForward_LeftTasks+0xe8>)
 8003cd8:	7813      	ldrb	r3, [r2, #0]
 8003cda:	f361 1306 	bfi	r3, r1, #4, #3
 8003cde:	7013      	strb	r3, [r2, #0]
}
 8003ce0:	e013      	b.n	8003d0a <APP_voidForward_LeftTasks+0xde>
			G_u16DataAfterProccing.Flag = 0;
 8003ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8003d14 <APP_voidForward_LeftTasks+0xe8>)
 8003ce4:	7853      	ldrb	r3, [r2, #1]
 8003ce6:	f36f 0301 	bfc	r3, #0, #2
 8003cea:	7053      	strb	r3, [r2, #1]
			G_u16DataAfterProccing.Direction = G_xMy_Data.Direction ;
 8003cec:	4b0b      	ldr	r3, [pc, #44]	@ (8003d1c <APP_voidForward_LeftTasks+0xf0>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003cf4:	b2d9      	uxtb	r1, r3
 8003cf6:	4a07      	ldr	r2, [pc, #28]	@ (8003d14 <APP_voidForward_LeftTasks+0xe8>)
 8003cf8:	7813      	ldrb	r3, [r2, #0]
 8003cfa:	f361 0303 	bfi	r3, r1, #0, #4
 8003cfe:	7013      	strb	r3, [r2, #0]
				G_u16DataAfterProccing.Speed = max_speed;
 8003d00:	4a04      	ldr	r2, [pc, #16]	@ (8003d14 <APP_voidForward_LeftTasks+0xe8>)
 8003d02:	7813      	ldrb	r3, [r2, #0]
 8003d04:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003d08:	7013      	strb	r3, [r2, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	200001f8 	.word	0x200001f8
 8003d18:	200001f0 	.word	0x200001f0
 8003d1c:	200001ec 	.word	0x200001ec
 8003d20:	200000d8 	.word	0x200000d8

08003d24 <UART_Task>:
		APP_G_u8V2VTxData = 0;
	}

}

void UART_Task(){
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0

		//process received massages
		//TODO send ACKs

	MUART_ReadData(&APP_G_u8DataFromUART);
 8003d28:	4804      	ldr	r0, [pc, #16]	@ (8003d3c <UART_Task+0x18>)
 8003d2a:	f7fe feb7 	bl	8002a9c <MUART_ReadData>
	APP_Update_Distance();
 8003d2e:	f7ff fcd7 	bl	80036e0 <APP_Update_Distance>
	ProcessingFun();
 8003d32:	f000 f805 	bl	8003d40 <ProcessingFun>
		//send massages to Rasp
	//MUART_ErrorStatusTransmitData(UART1);

}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	200001f4 	.word	0x200001f4

08003d40 <ProcessingFun>:


void ProcessingFun (void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
	u8 L_u8Data = APP_G_u8DataFromUART>>4;
 8003d46:	4bd8      	ldr	r3, [pc, #864]	@ (80040a8 <ProcessingFun+0x368>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	71fb      	strb	r3, [r7, #7]
	/*Mapping data from UART*/

	switch (APP_G_u8DataFromUART)
 8003d4e:	4bd6      	ldr	r3, [pc, #856]	@ (80040a8 <ProcessingFun+0x368>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2bf0      	cmp	r3, #240	@ 0xf0
 8003d54:	f000 81a4 	beq.w	80040a0 <ProcessingFun+0x360>
 8003d58:	2bf0      	cmp	r3, #240	@ 0xf0
 8003d5a:	f300 818a 	bgt.w	8004072 <ProcessingFun+0x332>
 8003d5e:	2b67      	cmp	r3, #103	@ 0x67
 8003d60:	f300 80da 	bgt.w	8003f18 <ProcessingFun+0x1d8>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f2c0 8184 	blt.w	8004072 <ProcessingFun+0x332>
 8003d6a:	2b67      	cmp	r3, #103	@ 0x67
 8003d6c:	f200 8181 	bhi.w	8004072 <ProcessingFun+0x332>
 8003d70:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <ProcessingFun+0x38>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003f21 	.word	0x08003f21
 8003d7c:	08004073 	.word	0x08004073
 8003d80:	08004073 	.word	0x08004073
 8003d84:	08004073 	.word	0x08004073
 8003d88:	08004073 	.word	0x08004073
 8003d8c:	08004073 	.word	0x08004073
 8003d90:	08004073 	.word	0x08004073
 8003d94:	08004073 	.word	0x08004073
 8003d98:	08004073 	.word	0x08004073
 8003d9c:	08004073 	.word	0x08004073
 8003da0:	08004073 	.word	0x08004073
 8003da4:	08004073 	.word	0x08004073
 8003da8:	08004073 	.word	0x08004073
 8003dac:	08004073 	.word	0x08004073
 8003db0:	08004073 	.word	0x08004073
 8003db4:	08004073 	.word	0x08004073
 8003db8:	08003f2f 	.word	0x08003f2f
 8003dbc:	08004073 	.word	0x08004073
 8003dc0:	08004073 	.word	0x08004073
 8003dc4:	08004073 	.word	0x08004073
 8003dc8:	08004073 	.word	0x08004073
 8003dcc:	08004073 	.word	0x08004073
 8003dd0:	08004073 	.word	0x08004073
 8003dd4:	08004073 	.word	0x08004073
 8003dd8:	08004073 	.word	0x08004073
 8003ddc:	08004073 	.word	0x08004073
 8003de0:	08004073 	.word	0x08004073
 8003de4:	08004073 	.word	0x08004073
 8003de8:	08004073 	.word	0x08004073
 8003dec:	08004073 	.word	0x08004073
 8003df0:	08004073 	.word	0x08004073
 8003df4:	08004073 	.word	0x08004073
 8003df8:	08003f4b 	.word	0x08003f4b
 8003dfc:	08004073 	.word	0x08004073
 8003e00:	08004073 	.word	0x08004073
 8003e04:	08004073 	.word	0x08004073
 8003e08:	08004073 	.word	0x08004073
 8003e0c:	08004073 	.word	0x08004073
 8003e10:	08004073 	.word	0x08004073
 8003e14:	08004073 	.word	0x08004073
 8003e18:	08004073 	.word	0x08004073
 8003e1c:	08004073 	.word	0x08004073
 8003e20:	08004073 	.word	0x08004073
 8003e24:	08004073 	.word	0x08004073
 8003e28:	08004073 	.word	0x08004073
 8003e2c:	08004073 	.word	0x08004073
 8003e30:	08004073 	.word	0x08004073
 8003e34:	08004073 	.word	0x08004073
 8003e38:	08003f57 	.word	0x08003f57
 8003e3c:	08004073 	.word	0x08004073
 8003e40:	08004073 	.word	0x08004073
 8003e44:	08004073 	.word	0x08004073
 8003e48:	08004073 	.word	0x08004073
 8003e4c:	08004073 	.word	0x08004073
 8003e50:	08004073 	.word	0x08004073
 8003e54:	08004073 	.word	0x08004073
 8003e58:	08004073 	.word	0x08004073
 8003e5c:	08004073 	.word	0x08004073
 8003e60:	08004073 	.word	0x08004073
 8003e64:	08004073 	.word	0x08004073
 8003e68:	08004073 	.word	0x08004073
 8003e6c:	08004073 	.word	0x08004073
 8003e70:	08004073 	.word	0x08004073
 8003e74:	08004073 	.word	0x08004073
 8003e78:	08003f6f 	.word	0x08003f6f
 8003e7c:	08004073 	.word	0x08004073
 8003e80:	08004073 	.word	0x08004073
 8003e84:	08004073 	.word	0x08004073
 8003e88:	08004073 	.word	0x08004073
 8003e8c:	08004073 	.word	0x08004073
 8003e90:	08004073 	.word	0x08004073
 8003e94:	08004073 	.word	0x08004073
 8003e98:	08003f87 	.word	0x08003f87
 8003e9c:	08004073 	.word	0x08004073
 8003ea0:	08004073 	.word	0x08004073
 8003ea4:	08004073 	.word	0x08004073
 8003ea8:	08003fa1 	.word	0x08003fa1
 8003eac:	08004073 	.word	0x08004073
 8003eb0:	08004073 	.word	0x08004073
 8003eb4:	08004073 	.word	0x08004073
 8003eb8:	08003fbb 	.word	0x08003fbb
 8003ebc:	08004073 	.word	0x08004073
 8003ec0:	08004073 	.word	0x08004073
 8003ec4:	08004073 	.word	0x08004073
 8003ec8:	08004073 	.word	0x08004073
 8003ecc:	08004073 	.word	0x08004073
 8003ed0:	08004073 	.word	0x08004073
 8003ed4:	08004073 	.word	0x08004073
 8003ed8:	08003fd3 	.word	0x08003fd3
 8003edc:	08004073 	.word	0x08004073
 8003ee0:	08004073 	.word	0x08004073
 8003ee4:	08004073 	.word	0x08004073
 8003ee8:	08003fed 	.word	0x08003fed
 8003eec:	08004073 	.word	0x08004073
 8003ef0:	08004073 	.word	0x08004073
 8003ef4:	08004073 	.word	0x08004073
 8003ef8:	08004007 	.word	0x08004007
 8003efc:	08004013 	.word	0x08004013
 8003f00:	08004021 	.word	0x08004021
 8003f04:	0800402f 	.word	0x0800402f
 8003f08:	0800403d 	.word	0x0800403d
 8003f0c:	0800404b 	.word	0x0800404b
 8003f10:	08004059 	.word	0x08004059
 8003f14:	08004067 	.word	0x08004067
 8003f18:	2be8      	cmp	r3, #232	@ 0xe8
 8003f1a:	f000 80c3 	beq.w	80040a4 <ProcessingFun+0x364>
 8003f1e:	e0a8      	b.n	8004072 <ProcessingFun+0x332>
	{
	case 0x0:
		G_xMy_Data.Direction = Go;
 8003f20:	4a62      	ldr	r2, [pc, #392]	@ (80040ac <ProcessingFun+0x36c>)
 8003f22:	7813      	ldrb	r3, [r2, #0]
 8003f24:	2108      	movs	r1, #8
 8003f26:	f361 0303 	bfi	r3, r1, #0, #4
 8003f2a:	7013      	strb	r3, [r2, #0]
		break;
 8003f2c:	e0c1      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x10: //forced stop
		G_xMy_Data.Direction = Stop;
 8003f2e:	4a5f      	ldr	r2, [pc, #380]	@ (80040ac <ProcessingFun+0x36c>)
 8003f30:	7813      	ldrb	r3, [r2, #0]
 8003f32:	f36f 0303 	bfc	r3, #0, #4
 8003f36:	7013      	strb	r3, [r2, #0]
		//TODO make it forced
		MOTOR_CounterClockWise(MOTOR_1, 0xff);
 8003f38:	21ff      	movs	r1, #255	@ 0xff
 8003f3a:	2001      	movs	r0, #1
 8003f3c:	f7fd f9ee 	bl	800131c <MOTOR_CounterClockWise>
		MSTK_voidSetBusyWait(1000);
 8003f40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003f44:	f7fd fb46 	bl	80015d4 <MSTK_voidSetBusyWait>
		break;
 8003f48:	e0b3      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x20: //normal stop
		G_xMy_Data.Direction = Stop ;
 8003f4a:	4a58      	ldr	r2, [pc, #352]	@ (80040ac <ProcessingFun+0x36c>)
 8003f4c:	7813      	ldrb	r3, [r2, #0]
 8003f4e:	f36f 0303 	bfc	r3, #0, #4
 8003f52:	7013      	strb	r3, [r2, #0]
		break;
 8003f54:	e0ad      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x30:
		//GPIO_voidSetPinValue(2,5,1);
		G_xMy_Data.Direction = Go;
 8003f56:	4a55      	ldr	r2, [pc, #340]	@ (80040ac <ProcessingFun+0x36c>)
 8003f58:	7813      	ldrb	r3, [r2, #0]
 8003f5a:	2108      	movs	r1, #8
 8003f5c:	f361 0303 	bfi	r3, r1, #0, #4
 8003f60:	7013      	strb	r3, [r2, #0]
		G_xMy_Data.Speed = Speed7;
 8003f62:	4a52      	ldr	r2, [pc, #328]	@ (80040ac <ProcessingFun+0x36c>)
 8003f64:	7813      	ldrb	r3, [r2, #0]
 8003f66:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003f6a:	7013      	strb	r3, [r2, #0]
		break;
 8003f6c:	e0a1      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x40: //turn left extremely
		G_xMy_Data.Direction = Left;
 8003f6e:	4a4f      	ldr	r2, [pc, #316]	@ (80040ac <ProcessingFun+0x36c>)
 8003f70:	7813      	ldrb	r3, [r2, #0]
 8003f72:	2103      	movs	r1, #3
 8003f74:	f361 0303 	bfi	r3, r1, #0, #4
 8003f78:	7013      	strb	r3, [r2, #0]
		G_xMy_Data.Speed = Speed7;
 8003f7a:	4a4c      	ldr	r2, [pc, #304]	@ (80040ac <ProcessingFun+0x36c>)
 8003f7c:	7813      	ldrb	r3, [r2, #0]
 8003f7e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003f82:	7013      	strb	r3, [r2, #0]
		break;
 8003f84:	e095      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x48: //turn left normal (forward left)
		G_xMy_Data.Direction = Left;
 8003f86:	4a49      	ldr	r2, [pc, #292]	@ (80040ac <ProcessingFun+0x36c>)
 8003f88:	7813      	ldrb	r3, [r2, #0]
 8003f8a:	2103      	movs	r1, #3
 8003f8c:	f361 0303 	bfi	r3, r1, #0, #4
 8003f90:	7013      	strb	r3, [r2, #0]
		G_xMy_Data.Speed = Speed4;
 8003f92:	4a46      	ldr	r2, [pc, #280]	@ (80040ac <ProcessingFun+0x36c>)
 8003f94:	7813      	ldrb	r3, [r2, #0]
 8003f96:	2104      	movs	r1, #4
 8003f98:	f361 1306 	bfi	r3, r1, #4, #3
 8003f9c:	7013      	strb	r3, [r2, #0]
		break;
 8003f9e:	e088      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x4c: //turn left slightly
		G_xMy_Data.Direction = Left;
 8003fa0:	4a42      	ldr	r2, [pc, #264]	@ (80040ac <ProcessingFun+0x36c>)
 8003fa2:	7813      	ldrb	r3, [r2, #0]
 8003fa4:	2103      	movs	r1, #3
 8003fa6:	f361 0303 	bfi	r3, r1, #0, #4
 8003faa:	7013      	strb	r3, [r2, #0]
		//TODO make it slight
		G_xMy_Data.Speed = Speed1;
 8003fac:	4a3f      	ldr	r2, [pc, #252]	@ (80040ac <ProcessingFun+0x36c>)
 8003fae:	7813      	ldrb	r3, [r2, #0]
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	f361 1306 	bfi	r3, r1, #4, #3
 8003fb6:	7013      	strb	r3, [r2, #0]
		break;
 8003fb8:	e07b      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x50: //turn Right extremely
		G_xMy_Data.Direction = Right;
 8003fba:	4a3c      	ldr	r2, [pc, #240]	@ (80040ac <ProcessingFun+0x36c>)
 8003fbc:	7813      	ldrb	r3, [r2, #0]
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	f361 0303 	bfi	r3, r1, #0, #4
 8003fc4:	7013      	strb	r3, [r2, #0]
		G_xMy_Data.Speed = Speed7;
 8003fc6:	4a39      	ldr	r2, [pc, #228]	@ (80040ac <ProcessingFun+0x36c>)
 8003fc8:	7813      	ldrb	r3, [r2, #0]
 8003fca:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003fce:	7013      	strb	r3, [r2, #0]
		break;
 8003fd0:	e06f      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x58: //turn Right normal (forward Right)
		G_xMy_Data.Direction = Right;
 8003fd2:	4a36      	ldr	r2, [pc, #216]	@ (80040ac <ProcessingFun+0x36c>)
 8003fd4:	7813      	ldrb	r3, [r2, #0]
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	f361 0303 	bfi	r3, r1, #0, #4
 8003fdc:	7013      	strb	r3, [r2, #0]
		G_xMy_Data.Speed = Speed4;
 8003fde:	4a33      	ldr	r2, [pc, #204]	@ (80040ac <ProcessingFun+0x36c>)
 8003fe0:	7813      	ldrb	r3, [r2, #0]
 8003fe2:	2104      	movs	r1, #4
 8003fe4:	f361 1306 	bfi	r3, r1, #4, #3
 8003fe8:	7013      	strb	r3, [r2, #0]
		break;
 8003fea:	e062      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x5c: //turn Right slightly
		G_xMy_Data.Direction = Forward_Right;
 8003fec:	4a2f      	ldr	r2, [pc, #188]	@ (80040ac <ProcessingFun+0x36c>)
 8003fee:	7813      	ldrb	r3, [r2, #0]
 8003ff0:	2104      	movs	r1, #4
 8003ff2:	f361 0303 	bfi	r3, r1, #0, #4
 8003ff6:	7013      	strb	r3, [r2, #0]
		//TODO make it slight
		G_xMy_Data.Speed = Speed1;
 8003ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80040ac <ProcessingFun+0x36c>)
 8003ffa:	7813      	ldrb	r3, [r2, #0]
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	f361 1306 	bfi	r3, r1, #4, #3
 8004002:	7013      	strb	r3, [r2, #0]
		break;
 8004004:	e055      	b.n	80040b2 <ProcessingFun+0x372>
	//speed change 0x60 + speed (speed is 0(stop) to 7(max speed))
	case 0x60:
		G_xMy_Data.Direction = Stop;
 8004006:	4a29      	ldr	r2, [pc, #164]	@ (80040ac <ProcessingFun+0x36c>)
 8004008:	7813      	ldrb	r3, [r2, #0]
 800400a:	f36f 0303 	bfc	r3, #0, #4
 800400e:	7013      	strb	r3, [r2, #0]
		break;
 8004010:	e04f      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x61:
		G_xMy_Data.Speed = 1;
 8004012:	4a26      	ldr	r2, [pc, #152]	@ (80040ac <ProcessingFun+0x36c>)
 8004014:	7813      	ldrb	r3, [r2, #0]
 8004016:	2101      	movs	r1, #1
 8004018:	f361 1306 	bfi	r3, r1, #4, #3
 800401c:	7013      	strb	r3, [r2, #0]
		break;
 800401e:	e048      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x62:
		G_xMy_Data.Speed = 2;
 8004020:	4a22      	ldr	r2, [pc, #136]	@ (80040ac <ProcessingFun+0x36c>)
 8004022:	7813      	ldrb	r3, [r2, #0]
 8004024:	2102      	movs	r1, #2
 8004026:	f361 1306 	bfi	r3, r1, #4, #3
 800402a:	7013      	strb	r3, [r2, #0]
		break;
 800402c:	e041      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x63:
		G_xMy_Data.Speed = 3;
 800402e:	4a1f      	ldr	r2, [pc, #124]	@ (80040ac <ProcessingFun+0x36c>)
 8004030:	7813      	ldrb	r3, [r2, #0]
 8004032:	2103      	movs	r1, #3
 8004034:	f361 1306 	bfi	r3, r1, #4, #3
 8004038:	7013      	strb	r3, [r2, #0]
		break;
 800403a:	e03a      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x64:
		G_xMy_Data.Speed = 4;
 800403c:	4a1b      	ldr	r2, [pc, #108]	@ (80040ac <ProcessingFun+0x36c>)
 800403e:	7813      	ldrb	r3, [r2, #0]
 8004040:	2104      	movs	r1, #4
 8004042:	f361 1306 	bfi	r3, r1, #4, #3
 8004046:	7013      	strb	r3, [r2, #0]
		break;
 8004048:	e033      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x65:
		G_xMy_Data.Speed = 5;
 800404a:	4a18      	ldr	r2, [pc, #96]	@ (80040ac <ProcessingFun+0x36c>)
 800404c:	7813      	ldrb	r3, [r2, #0]
 800404e:	2105      	movs	r1, #5
 8004050:	f361 1306 	bfi	r3, r1, #4, #3
 8004054:	7013      	strb	r3, [r2, #0]
		break;
 8004056:	e02c      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x66:
		G_xMy_Data.Speed = 6;
 8004058:	4a14      	ldr	r2, [pc, #80]	@ (80040ac <ProcessingFun+0x36c>)
 800405a:	7813      	ldrb	r3, [r2, #0]
 800405c:	2106      	movs	r1, #6
 800405e:	f361 1306 	bfi	r3, r1, #4, #3
 8004062:	7013      	strb	r3, [r2, #0]
		break;
 8004064:	e025      	b.n	80040b2 <ProcessingFun+0x372>
	case 0x67:
		G_xMy_Data.Speed = 7;
 8004066:	4a11      	ldr	r2, [pc, #68]	@ (80040ac <ProcessingFun+0x36c>)
 8004068:	7813      	ldrb	r3, [r2, #0]
 800406a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800406e:	7013      	strb	r3, [r2, #0]
		break;
 8004070:	e01f      	b.n	80040b2 <ProcessingFun+0x372>
		//TODO
		//error in ACK(ACK sent is invalid)
		//retransmition (receive data)
		break;
	default:
		switch(L_u8Data){
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	3b08      	subs	r3, #8
 8004076:	2b06      	cmp	r3, #6
 8004078:	d81a      	bhi.n	80040b0 <ProcessingFun+0x370>
 800407a:	a201      	add	r2, pc, #4	@ (adr r2, 8004080 <ProcessingFun+0x340>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	0800409d 	.word	0x0800409d
 8004084:	0800409d 	.word	0x0800409d
 8004088:	0800409d 	.word	0x0800409d
 800408c:	0800409d 	.word	0x0800409d
 8004090:	080040b1 	.word	0x080040b1
 8004094:	080040b1 	.word	0x080040b1
 8004098:	0800409d 	.word	0x0800409d
		case 0x8:
			//TODO
			//There is a bump with distance
			//distance = APP_G_u8DataFromUART & 0xF

			break;
 800409c:	bf00      	nop
			//request code x is valid
			//x = APP_G_u8DataFromUART & 0x7
			break;
		}

		break;
 800409e:	e007      	b.n	80040b0 <ProcessingFun+0x370>
		break;
 80040a0:	bf00      	nop
 80040a2:	e006      	b.n	80040b2 <ProcessingFun+0x372>
		break;
 80040a4:	bf00      	nop
 80040a6:	e004      	b.n	80040b2 <ProcessingFun+0x372>
 80040a8:	200001f4 	.word	0x200001f4
 80040ac:	200001ec 	.word	0x200001ec
		break;
 80040b0:	bf00      	nop
	}

	G_u16DataAfterProccing.Direction = G_xMy_Data.Direction;
 80040b2:	4b27      	ldr	r3, [pc, #156]	@ (8004150 <ProcessingFun+0x410>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80040ba:	b2d9      	uxtb	r1, r3
 80040bc:	4a25      	ldr	r2, [pc, #148]	@ (8004154 <ProcessingFun+0x414>)
 80040be:	7813      	ldrb	r3, [r2, #0]
 80040c0:	f361 0303 	bfi	r3, r1, #0, #4
 80040c4:	7013      	strb	r3, [r2, #0]
	G_u16DataAfterProccing.Speed = G_xMy_Data.Speed;
 80040c6:	4b22      	ldr	r3, [pc, #136]	@ (8004150 <ProcessingFun+0x410>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80040ce:	b2d9      	uxtb	r1, r3
 80040d0:	4a20      	ldr	r2, [pc, #128]	@ (8004154 <ProcessingFun+0x414>)
 80040d2:	7813      	ldrb	r3, [r2, #0]
 80040d4:	f361 1306 	bfi	r3, r1, #4, #3
 80040d8:	7013      	strb	r3, [r2, #0]
	switch(G_xMy_Data.Direction){
 80040da:	4b1d      	ldr	r3, [pc, #116]	@ (8004150 <ProcessingFun+0x410>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d82d      	bhi.n	8004144 <ProcessingFun+0x404>
 80040e8:	a201      	add	r2, pc, #4	@ (adr r2, 80040f0 <ProcessingFun+0x3b0>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	0800411b 	.word	0x0800411b
 80040f4:	08004121 	.word	0x08004121
 80040f8:	0800413f 	.word	0x0800413f
 80040fc:	0800413f 	.word	0x0800413f
 8004100:	08004133 	.word	0x08004133
 8004104:	08004139 	.word	0x08004139
 8004108:	08004127 	.word	0x08004127
 800410c:	0800412d 	.word	0x0800412d
 8004110:	08004115 	.word	0x08004115
	case Go:
		APP_voidGoTasks();
 8004114:	f7ff fb16 	bl	8003744 <APP_voidGoTasks>
		break;
 8004118:	e015      	b.n	8004146 <ProcessingFun+0x406>
	case Stop:
		APP_VoidStop();
 800411a:	f7ff fafd 	bl	8003718 <APP_VoidStop>
		break;
 800411e:	e012      	b.n	8004146 <ProcessingFun+0x406>
	case Back:
		APP_voidBackTasks();
 8004120:	f7ff fb8e 	bl	8003840 <APP_voidBackTasks>
		break;
 8004124:	e00f      	b.n	8004146 <ProcessingFun+0x406>
	case Backward_Right:
		APP_voidBackward_RightTasks();
 8004126:	f7ff fc07 	bl	8003938 <APP_voidBackward_RightTasks>
		break;
 800412a:	e00c      	b.n	8004146 <ProcessingFun+0x406>
	case Backward_Left:
		APP_voidBackward_LEFTTasks();
 800412c:	f7ff fc80 	bl	8003a30 <APP_voidBackward_LEFTTasks>
		break;
 8004130:	e009      	b.n	8004146 <ProcessingFun+0x406>
	case Forward_Right:
		APP_voidForward_RightTasks();
 8004132:	f7ff fcff 	bl	8003b34 <APP_voidForward_RightTasks>
		break;
 8004136:	e006      	b.n	8004146 <ProcessingFun+0x406>
	case Forward_Left:
		APP_voidForward_LeftTasks();
 8004138:	f7ff fd78 	bl	8003c2c <APP_voidForward_LeftTasks>
		break;
 800413c:	e003      	b.n	8004146 <ProcessingFun+0x406>
	case Right:
	case Left:
		APP_voidRight_LeftTasks();
 800413e:	f7ff fcf3 	bl	8003b28 <APP_voidRight_LeftTasks>
		break;
 8004142:	e000      	b.n	8004146 <ProcessingFun+0x406>
	default:
		//do nothing
		break;
 8004144:	bf00      	nop
	}
	return;
 8004146:	bf00      	nop
}
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	200001ec 	.word	0x200001ec
 8004154:	200001f8 	.word	0x200001f8

08004158 <APP_Direction_Control>:

void APP_Direction_Control()
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
	u8  L_u16Speed = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	71fb      	strb	r3, [r7, #7]
	u8  L_u8Direction = 0 ;
 8004162:	2300      	movs	r3, #0
 8004164:	71bb      	strb	r3, [r7, #6]
	u8  L_u8Flag = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	717b      	strb	r3, [r7, #5]

	L_u8Direction = G_u16DataAfterProccing.Direction;
 800416a:	4b61      	ldr	r3, [pc, #388]	@ (80042f0 <APP_Direction_Control+0x198>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004172:	b2db      	uxtb	r3, r3
 8004174:	71bb      	strb	r3, [r7, #6]
			/*Encoding received data and take Speed (first 4bits)*/
	L_u16Speed = G_u16DataAfterProccing.Speed;
 8004176:	4b5e      	ldr	r3, [pc, #376]	@ (80042f0 <APP_Direction_Control+0x198>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800417e:	b2db      	uxtb	r3, r3
 8004180:	71fb      	strb	r3, [r7, #7]
			/*Encoding received data and take Flag (last bit)*/
	L_u8Flag = G_u16DataAfterProccing.Flag;
 8004182:	4b5b      	ldr	r3, [pc, #364]	@ (80042f0 <APP_Direction_Control+0x198>)
 8004184:	785b      	ldrb	r3, [r3, #1]
 8004186:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800418a:	b2db      	uxtb	r3, r3
 800418c:	717b      	strb	r3, [r7, #5]

	if(L_Previous_speed != L_u16Speed || L_Previous_Direction != L_u8Direction)
 800418e:	4b59      	ldr	r3, [pc, #356]	@ (80042f4 <APP_Direction_Control+0x19c>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	79fa      	ldrb	r2, [r7, #7]
 8004194:	429a      	cmp	r2, r3
 8004196:	d105      	bne.n	80041a4 <APP_Direction_Control+0x4c>
 8004198:	4b57      	ldr	r3, [pc, #348]	@ (80042f8 <APP_Direction_Control+0x1a0>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	79ba      	ldrb	r2, [r7, #6]
 800419e:	429a      	cmp	r2, r3
 80041a0:	f000 80a1 	beq.w	80042e6 <APP_Direction_Control+0x18e>
	{
		L_Previous_speed = L_u16Speed;
 80041a4:	4a53      	ldr	r2, [pc, #332]	@ (80042f4 <APP_Direction_Control+0x19c>)
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	7013      	strb	r3, [r2, #0]
		L_Previous_Direction = L_u8Direction;
 80041aa:	4a53      	ldr	r2, [pc, #332]	@ (80042f8 <APP_Direction_Control+0x1a0>)
 80041ac:	79bb      	ldrb	r3, [r7, #6]
 80041ae:	7013      	strb	r3, [r2, #0]


		if (L_u8Direction == Stop){
 80041b0:	79bb      	ldrb	r3, [r7, #6]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10e      	bne.n	80041d4 <APP_Direction_Control+0x7c>
			GPIO_voidSetPinValue(2,5,0);
 80041b6:	2200      	movs	r2, #0
 80041b8:	2105      	movs	r1, #5
 80041ba:	2002      	movs	r0, #2
 80041bc:	f7fc ff04 	bl	8000fc8 <GPIO_voidSetPinValue>
			MOTOR_Stop(MOTOR_1) ;
 80041c0:	2001      	movs	r0, #1
 80041c2:	f7fd f91f 	bl	8001404 <MOTOR_Stop>
			MOTOR_Stop(MOTOR_2) ;
 80041c6:	2002      	movs	r0, #2
 80041c8:	f7fd f91c 	bl	8001404 <MOTOR_Stop>
			MSTK_voidSetBusyWait(1000000);
 80041cc:	484b      	ldr	r0, [pc, #300]	@ (80042fc <APP_Direction_Control+0x1a4>)
 80041ce:	f7fd fa01 	bl	80015d4 <MSTK_voidSetBusyWait>
				MSTK_voidSetBusyWait(1000000);
			}
		}
	}

}
 80041d2:	e088      	b.n	80042e6 <APP_Direction_Control+0x18e>
			L_u16Speed = (0Xff<<G_xMy_Data.Speed) + 0xf0;
 80041d4:	4b4a      	ldr	r3, [pc, #296]	@ (8004300 <APP_Direction_Control+0x1a8>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	23ff      	movs	r3, #255	@ 0xff
 80041e2:	4093      	lsls	r3, r2
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	3b10      	subs	r3, #16
 80041e8:	71fb      	strb	r3, [r7, #7]
			if (L_u8Direction == Go)  //Forward direction
 80041ea:	79bb      	ldrb	r3, [r7, #6]
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d10f      	bne.n	8004210 <APP_Direction_Control+0xb8>
				MOTOR_CounterClockWise(MOTOR_1 , L_u16Speed) ;
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	4619      	mov	r1, r3
 80041f6:	2001      	movs	r0, #1
 80041f8:	f7fd f890 	bl	800131c <MOTOR_CounterClockWise>
				MOTOR_CounterClockWise(MOTOR_2 , L_u16Speed) ;
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	4619      	mov	r1, r3
 8004202:	2002      	movs	r0, #2
 8004204:	f7fd f88a 	bl	800131c <MOTOR_CounterClockWise>
				MSTK_voidSetBusyWait(1000000);
 8004208:	483c      	ldr	r0, [pc, #240]	@ (80042fc <APP_Direction_Control+0x1a4>)
 800420a:	f7fd f9e3 	bl	80015d4 <MSTK_voidSetBusyWait>
}
 800420e:	e06a      	b.n	80042e6 <APP_Direction_Control+0x18e>
			else if (L_u8Direction == Back)  //Backward direction
 8004210:	79bb      	ldrb	r3, [r7, #6]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d10f      	bne.n	8004236 <APP_Direction_Control+0xde>
				MOTOR_ClockWise(MOTOR_1 , L_u16Speed) ;
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	b29b      	uxth	r3, r3
 800421a:	4619      	mov	r1, r3
 800421c:	2001      	movs	r0, #1
 800421e:	f7fd f8b7 	bl	8001390 <MOTOR_ClockWise>
				MOTOR_ClockWise(MOTOR_2 , L_u16Speed) ;
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	b29b      	uxth	r3, r3
 8004226:	4619      	mov	r1, r3
 8004228:	2002      	movs	r0, #2
 800422a:	f7fd f8b1 	bl	8001390 <MOTOR_ClockWise>
				MSTK_voidSetBusyWait(1000000);
 800422e:	4833      	ldr	r0, [pc, #204]	@ (80042fc <APP_Direction_Control+0x1a4>)
 8004230:	f7fd f9d0 	bl	80015d4 <MSTK_voidSetBusyWait>
}
 8004234:	e057      	b.n	80042e6 <APP_Direction_Control+0x18e>
			else if (L_u8Direction == Right)  //Right direction
 8004236:	79bb      	ldrb	r3, [r7, #6]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d10c      	bne.n	8004256 <APP_Direction_Control+0xfe>
				MOTOR_Stop(MOTOR_1) ;
 800423c:	2001      	movs	r0, #1
 800423e:	f7fd f8e1 	bl	8001404 <MOTOR_Stop>
				MOTOR_ClockWise(MOTOR_2 , L_u16Speed) ;
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	b29b      	uxth	r3, r3
 8004246:	4619      	mov	r1, r3
 8004248:	2002      	movs	r0, #2
 800424a:	f7fd f8a1 	bl	8001390 <MOTOR_ClockWise>
				MSTK_voidSetBusyWait(1000000);
 800424e:	482b      	ldr	r0, [pc, #172]	@ (80042fc <APP_Direction_Control+0x1a4>)
 8004250:	f7fd f9c0 	bl	80015d4 <MSTK_voidSetBusyWait>
}
 8004254:	e047      	b.n	80042e6 <APP_Direction_Control+0x18e>
			else if (L_u8Direction == Left)  //Left direction
 8004256:	79bb      	ldrb	r3, [r7, #6]
 8004258:	2b03      	cmp	r3, #3
 800425a:	d109      	bne.n	8004270 <APP_Direction_Control+0x118>
				MOTOR_ClockWise(MOTOR_1 , L_u16Speed) ;
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	b29b      	uxth	r3, r3
 8004260:	4619      	mov	r1, r3
 8004262:	2001      	movs	r0, #1
 8004264:	f7fd f894 	bl	8001390 <MOTOR_ClockWise>
				MOTOR_Stop(MOTOR_2) ;
 8004268:	2002      	movs	r0, #2
 800426a:	f7fd f8cb 	bl	8001404 <MOTOR_Stop>
}
 800426e:	e03a      	b.n	80042e6 <APP_Direction_Control+0x18e>
			else if (L_u8Direction == Forward_Right)  //forward right
 8004270:	79bb      	ldrb	r3, [r7, #6]
 8004272:	2b04      	cmp	r3, #4
 8004274:	d10b      	bne.n	800428e <APP_Direction_Control+0x136>
				MOTOR_ClockWise(MOTOR_1 , 0xa) ;
 8004276:	210a      	movs	r1, #10
 8004278:	2001      	movs	r0, #1
 800427a:	f7fd f889 	bl	8001390 <MOTOR_ClockWise>
				MOTOR_ClockWise(MOTOR_2 , 0xc) ;
 800427e:	210c      	movs	r1, #12
 8004280:	2002      	movs	r0, #2
 8004282:	f7fd f885 	bl	8001390 <MOTOR_ClockWise>
				MSTK_voidSetBusyWait(1000000);
 8004286:	481d      	ldr	r0, [pc, #116]	@ (80042fc <APP_Direction_Control+0x1a4>)
 8004288:	f7fd f9a4 	bl	80015d4 <MSTK_voidSetBusyWait>
}
 800428c:	e02b      	b.n	80042e6 <APP_Direction_Control+0x18e>
			else if (L_u8Direction == Forward_Left)  //forward left
 800428e:	79bb      	ldrb	r3, [r7, #6]
 8004290:	2b05      	cmp	r3, #5
 8004292:	d10b      	bne.n	80042ac <APP_Direction_Control+0x154>
				MOTOR_ClockWise(MOTOR_1 , 0xa) ;
 8004294:	210a      	movs	r1, #10
 8004296:	2001      	movs	r0, #1
 8004298:	f7fd f87a 	bl	8001390 <MOTOR_ClockWise>
				MOTOR_ClockWise(MOTOR_2 , 0xc) ;
 800429c:	210c      	movs	r1, #12
 800429e:	2002      	movs	r0, #2
 80042a0:	f7fd f876 	bl	8001390 <MOTOR_ClockWise>
				MSTK_voidSetBusyWait(1000000);
 80042a4:	4815      	ldr	r0, [pc, #84]	@ (80042fc <APP_Direction_Control+0x1a4>)
 80042a6:	f7fd f995 	bl	80015d4 <MSTK_voidSetBusyWait>
}
 80042aa:	e01c      	b.n	80042e6 <APP_Direction_Control+0x18e>
			else if (L_u8Direction == Backward_Right)  //backward right
 80042ac:	79bb      	ldrb	r3, [r7, #6]
 80042ae:	2b06      	cmp	r3, #6
 80042b0:	d10b      	bne.n	80042ca <APP_Direction_Control+0x172>
				MOTOR_CounterClockWise(MOTOR_1 , 0xa) ;
 80042b2:	210a      	movs	r1, #10
 80042b4:	2001      	movs	r0, #1
 80042b6:	f7fd f831 	bl	800131c <MOTOR_CounterClockWise>
				MOTOR_CounterClockWise(MOTOR_2 , 0xc) ;
 80042ba:	210c      	movs	r1, #12
 80042bc:	2002      	movs	r0, #2
 80042be:	f7fd f82d 	bl	800131c <MOTOR_CounterClockWise>
				MSTK_voidSetBusyWait(1000000);
 80042c2:	480e      	ldr	r0, [pc, #56]	@ (80042fc <APP_Direction_Control+0x1a4>)
 80042c4:	f7fd f986 	bl	80015d4 <MSTK_voidSetBusyWait>
}
 80042c8:	e00d      	b.n	80042e6 <APP_Direction_Control+0x18e>
			else if (L_u8Direction == Backward_Left)  //backward left
 80042ca:	79bb      	ldrb	r3, [r7, #6]
 80042cc:	2b07      	cmp	r3, #7
 80042ce:	d10a      	bne.n	80042e6 <APP_Direction_Control+0x18e>
				MOTOR_CounterClockWise(MOTOR_1 , 0xa) ;
 80042d0:	210a      	movs	r1, #10
 80042d2:	2001      	movs	r0, #1
 80042d4:	f7fd f822 	bl	800131c <MOTOR_CounterClockWise>
				MOTOR_CounterClockWise(MOTOR_2 , 0xc) ;
 80042d8:	210c      	movs	r1, #12
 80042da:	2002      	movs	r0, #2
 80042dc:	f7fd f81e 	bl	800131c <MOTOR_CounterClockWise>
				MSTK_voidSetBusyWait(1000000);
 80042e0:	4806      	ldr	r0, [pc, #24]	@ (80042fc <APP_Direction_Control+0x1a4>)
 80042e2:	f7fd f977 	bl	80015d4 <MSTK_voidSetBusyWait>
}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	200001f8 	.word	0x200001f8
 80042f4:	200001e8 	.word	0x200001e8
 80042f8:	200001e9 	.word	0x200001e9
 80042fc:	000f4240 	.word	0x000f4240
 8004300:	200001ec 	.word	0x200001ec

08004304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004308:	bf00      	nop
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004314:	bf00      	nop
 8004316:	e7fd      	b.n	8004314 <HardFault_Handler+0x4>

08004318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800431c:	bf00      	nop
 800431e:	e7fd      	b.n	800431c <MemManage_Handler+0x4>

08004320 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <BusFault_Handler+0x4>

08004328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800432c:	bf00      	nop
 800432e:	e7fd      	b.n	800432c <UsageFault_Handler+0x4>

08004330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr

08004348 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800434c:	bf00      	nop
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004360:	480c      	ldr	r0, [pc, #48]	@ (8004394 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004362:	490d      	ldr	r1, [pc, #52]	@ (8004398 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004364:	4a0d      	ldr	r2, [pc, #52]	@ (800439c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004368:	e002      	b.n	8004370 <LoopCopyDataInit>

0800436a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800436a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800436c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800436e:	3304      	adds	r3, #4

08004370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004374:	d3f9      	bcc.n	800436a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004376:	4a0a      	ldr	r2, [pc, #40]	@ (80043a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004378:	4c0a      	ldr	r4, [pc, #40]	@ (80043a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800437a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800437c:	e001      	b.n	8004382 <LoopFillZerobss>

0800437e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800437e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004380:	3204      	adds	r2, #4

08004382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004384:	d3fb      	bcc.n	800437e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004386:	f7ff ffe5 	bl	8004354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800438a:	f000 f80f 	bl	80043ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800438e:	f7ff f993 	bl	80036b8 <main>
  bx lr
 8004392:	4770      	bx	lr
  ldr r0, =_sdata
 8004394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004398:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 800439c:	0800441c 	.word	0x0800441c
  ldr r2, =_sbss
 80043a0:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80043a4:	200001fc 	.word	0x200001fc

080043a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043a8:	e7fe      	b.n	80043a8 <ADC1_2_IRQHandler>
	...

080043ac <__libc_init_array>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	2600      	movs	r6, #0
 80043b0:	4d0c      	ldr	r5, [pc, #48]	@ (80043e4 <__libc_init_array+0x38>)
 80043b2:	4c0d      	ldr	r4, [pc, #52]	@ (80043e8 <__libc_init_array+0x3c>)
 80043b4:	1b64      	subs	r4, r4, r5
 80043b6:	10a4      	asrs	r4, r4, #2
 80043b8:	42a6      	cmp	r6, r4
 80043ba:	d109      	bne.n	80043d0 <__libc_init_array+0x24>
 80043bc:	f000 f81a 	bl	80043f4 <_init>
 80043c0:	2600      	movs	r6, #0
 80043c2:	4d0a      	ldr	r5, [pc, #40]	@ (80043ec <__libc_init_array+0x40>)
 80043c4:	4c0a      	ldr	r4, [pc, #40]	@ (80043f0 <__libc_init_array+0x44>)
 80043c6:	1b64      	subs	r4, r4, r5
 80043c8:	10a4      	asrs	r4, r4, #2
 80043ca:	42a6      	cmp	r6, r4
 80043cc:	d105      	bne.n	80043da <__libc_init_array+0x2e>
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d4:	4798      	blx	r3
 80043d6:	3601      	adds	r6, #1
 80043d8:	e7ee      	b.n	80043b8 <__libc_init_array+0xc>
 80043da:	f855 3b04 	ldr.w	r3, [r5], #4
 80043de:	4798      	blx	r3
 80043e0:	3601      	adds	r6, #1
 80043e2:	e7f2      	b.n	80043ca <__libc_init_array+0x1e>
 80043e4:	08004414 	.word	0x08004414
 80043e8:	08004414 	.word	0x08004414
 80043ec:	08004414 	.word	0x08004414
 80043f0:	08004418 	.word	0x08004418

080043f4 <_init>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	bf00      	nop
 80043f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fa:	bc08      	pop	{r3}
 80043fc:	469e      	mov	lr, r3
 80043fe:	4770      	bx	lr

08004400 <_fini>:
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	bf00      	nop
 8004404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004406:	bc08      	pop	{r3}
 8004408:	469e      	mov	lr, r3
 800440a:	4770      	bx	lr
