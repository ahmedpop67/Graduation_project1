
bluebil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00003130  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800323c  0800323c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800323c  0800323c  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800323c  0800323c  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800323c  0800323c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003240  08003240  00013240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08003244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200000cc  08003310  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08003310  000201dc  2**0
=======
  1 .text         00002b9c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002ca8  08002ca8  000040cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002ca8  08002ca8  000040cc  2**0
                  CONTENTS
  4 .ARM          00000000  08002ca8  08002ca8  000040cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ca8  08002ca8  000040cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ca8  08002ca8  00003ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cac  08002cac  00003cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08002cb0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  200000cc  08002d7c  000040cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002d7c  0000410c  2**0
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000040cc  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 12 .debug_info   00002210  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bf1  00000000  00000000  00022305  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000408  00000000  00000000  00022ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000340  00000000  00000000  00023300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000216b  00000000  00000000  00023640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000020c3  00000000  00000000  000257ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083713  00000000  00000000  0002786e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aaf81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e64  00000000  00000000  000aaffc  2**2
                  CONTENTS, READONLY, DEBUGGING
=======
 12 .debug_info   00002200  00000000  00000000  000040f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000de2  00000000  00000000  000062f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000400  00000000  00000000  000070d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002d5  00000000  00000000  000074d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000216b  00000000  00000000  000077ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002f9f  00000000  00000000  00009918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008374d  00000000  00000000  0000c8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00090004  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cf4  00000000  00000000  00090048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00090d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
<<<<<<< HEAD
 800012c:	08003224 	.word	0x08003224
=======
 800012c:	08002c90 	.word	0x08002c90
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
<<<<<<< HEAD
 8000148:	08003224 	.word	0x08003224
=======
 8000148:	08002c90 	.word	0x08002c90
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

0800014c <EXTI0_IRQHandler>:
	EXTI0_CallBack = ptr ;
	
}	

void EXTI0_IRQHandler(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 8000150:	4b05      	ldr	r3, [pc, #20]	@ (8000168 <EXTI0_IRQHandler+0x1c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4798      	blx	r3
	/*	Clear pending Bit For EXTI0		*/
	SET_BIT(EXTI -> PR , 0);	
 8000156:	4b05      	ldr	r3, [pc, #20]	@ (800016c <EXTI0_IRQHandler+0x20>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a04      	ldr	r2, [pc, #16]	@ (800016c <EXTI0_IRQHandler+0x20>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
}	
 8000162:	bf00      	nop
 8000164:	bd80      	pop	{r7, pc}
 8000166:	bf00      	nop
 8000168:	200000e8 	.word	0x200000e8
 800016c:	40010400 	.word	0x40010400

08000170 <GPIO_voidSetPinMode>:
					
}
void  GPIO_VoidDeInit();

u8 GPIO_voidSetPinMode(u8 copy_u8portID,u8 copy_u8PinID,u8 copy_u8Mode)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
	u8 lacal_u8ErrorState = STD_TYPE_OK;
 8000182:	2301      	movs	r3, #1
 8000184:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15 && copy_u8Mode <= GPIO_OUTPUT_50M_AF_OD)
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b07      	cmp	r3, #7
 800018a:	f200 817a 	bhi.w	8000482 <GPIO_voidSetPinMode+0x312>
 800018e:	79bb      	ldrb	r3, [r7, #6]
 8000190:	2b0f      	cmp	r3, #15
 8000192:	f200 8176 	bhi.w	8000482 <GPIO_voidSetPinMode+0x312>
 8000196:	797b      	ldrb	r3, [r7, #5]
 8000198:	2b0f      	cmp	r3, #15
 800019a:	f200 8172 	bhi.w	8000482 <GPIO_voidSetPinMode+0x312>
	{
		switch(copy_u8portID)
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	3b01      	subs	r3, #1
 80001a2:	2b06      	cmp	r3, #6
 80001a4:	f200 816f 	bhi.w	8000486 <GPIO_voidSetPinMode+0x316>
 80001a8:	a201      	add	r2, pc, #4	@ (adr r2, 80001b0 <GPIO_voidSetPinMode+0x40>)
 80001aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ae:	bf00      	nop
 80001b0:	080001cd 	.word	0x080001cd
 80001b4:	0800022d 	.word	0x0800022d
 80001b8:	0800028d 	.word	0x0800028d
 80001bc:	080002ed 	.word	0x080002ed
 80001c0:	0800034d 	.word	0x0800034d
 80001c4:	080003ab 	.word	0x080003ab
 80001c8:	08000409 	.word	0x08000409
		{
			case GPIO_PORTA: 
				if(copy_u8PinID<=7)
 80001cc:	79bb      	ldrb	r3, [r7, #6]
 80001ce:	2b07      	cmp	r3, #7
 80001d0:	d812      	bhi.n	80001f8 <GPIO_voidSetPinMode+0x88>
				{
					SET_4BIT_Val(GPIOA->CRL,copy_u8PinID*4,copy_u8Mode);
 80001d2:	4bb0      	ldr	r3, [pc, #704]	@ (8000494 <GPIO_voidSetPinMode+0x324>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	79ba      	ldrb	r2, [r7, #6]
 80001d8:	0092      	lsls	r2, r2, #2
 80001da:	210f      	movs	r1, #15
 80001dc:	fa01 f202 	lsl.w	r2, r1, r2
 80001e0:	43d2      	mvns	r2, r2
 80001e2:	4013      	ands	r3, r2
 80001e4:	7979      	ldrb	r1, [r7, #5]
 80001e6:	79ba      	ldrb	r2, [r7, #6]
 80001e8:	0092      	lsls	r2, r2, #2
 80001ea:	fa01 f202 	lsl.w	r2, r1, r2
 80001ee:	4611      	mov	r1, r2
 80001f0:	4aa8      	ldr	r2, [pc, #672]	@ (8000494 <GPIO_voidSetPinMode+0x324>)
 80001f2:	430b      	orrs	r3, r1
 80001f4:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOA->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 80001f6:	e136      	b.n	8000466 <GPIO_voidSetPinMode+0x2f6>
				else if(copy_u8PinID <=15)
 80001f8:	79bb      	ldrb	r3, [r7, #6]
 80001fa:	2b0f      	cmp	r3, #15
 80001fc:	f200 8133 	bhi.w	8000466 <GPIO_voidSetPinMode+0x2f6>
					copy_u8PinID-=8;
 8000200:	79bb      	ldrb	r3, [r7, #6]
 8000202:	3b08      	subs	r3, #8
 8000204:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOA->CRH,copy_u8PinID*4,copy_u8Mode);
 8000206:	4ba3      	ldr	r3, [pc, #652]	@ (8000494 <GPIO_voidSetPinMode+0x324>)
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	79ba      	ldrb	r2, [r7, #6]
 800020c:	0092      	lsls	r2, r2, #2
 800020e:	210f      	movs	r1, #15
 8000210:	fa01 f202 	lsl.w	r2, r1, r2
 8000214:	43d2      	mvns	r2, r2
 8000216:	4013      	ands	r3, r2
 8000218:	7979      	ldrb	r1, [r7, #5]
 800021a:	79ba      	ldrb	r2, [r7, #6]
 800021c:	0092      	lsls	r2, r2, #2
 800021e:	fa01 f202 	lsl.w	r2, r1, r2
 8000222:	4611      	mov	r1, r2
 8000224:	4a9b      	ldr	r2, [pc, #620]	@ (8000494 <GPIO_voidSetPinMode+0x324>)
 8000226:	430b      	orrs	r3, r1
 8000228:	6053      	str	r3, [r2, #4]
				break;
 800022a:	e11c      	b.n	8000466 <GPIO_voidSetPinMode+0x2f6>
			case GPIO_PORTB: 
				if(copy_u8PinID<=7)
 800022c:	79bb      	ldrb	r3, [r7, #6]
 800022e:	2b07      	cmp	r3, #7
 8000230:	d812      	bhi.n	8000258 <GPIO_voidSetPinMode+0xe8>
				{
					SET_4BIT_Val(GPIOB->CRL,copy_u8PinID*4,copy_u8Mode);
 8000232:	4b99      	ldr	r3, [pc, #612]	@ (8000498 <GPIO_voidSetPinMode+0x328>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	79ba      	ldrb	r2, [r7, #6]
 8000238:	0092      	lsls	r2, r2, #2
 800023a:	210f      	movs	r1, #15
 800023c:	fa01 f202 	lsl.w	r2, r1, r2
 8000240:	43d2      	mvns	r2, r2
 8000242:	4013      	ands	r3, r2
 8000244:	7979      	ldrb	r1, [r7, #5]
 8000246:	79ba      	ldrb	r2, [r7, #6]
 8000248:	0092      	lsls	r2, r2, #2
 800024a:	fa01 f202 	lsl.w	r2, r1, r2
 800024e:	4611      	mov	r1, r2
 8000250:	4a91      	ldr	r2, [pc, #580]	@ (8000498 <GPIO_voidSetPinMode+0x328>)
 8000252:	430b      	orrs	r3, r1
 8000254:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOB->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000256:	e108      	b.n	800046a <GPIO_voidSetPinMode+0x2fa>
				else if(copy_u8PinID <=15)
 8000258:	79bb      	ldrb	r3, [r7, #6]
 800025a:	2b0f      	cmp	r3, #15
 800025c:	f200 8105 	bhi.w	800046a <GPIO_voidSetPinMode+0x2fa>
					copy_u8PinID-=8;
 8000260:	79bb      	ldrb	r3, [r7, #6]
 8000262:	3b08      	subs	r3, #8
 8000264:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOB->CRH,copy_u8PinID*4,copy_u8Mode);
 8000266:	4b8c      	ldr	r3, [pc, #560]	@ (8000498 <GPIO_voidSetPinMode+0x328>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	79ba      	ldrb	r2, [r7, #6]
 800026c:	0092      	lsls	r2, r2, #2
 800026e:	210f      	movs	r1, #15
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	43d2      	mvns	r2, r2
 8000276:	4013      	ands	r3, r2
 8000278:	7979      	ldrb	r1, [r7, #5]
 800027a:	79ba      	ldrb	r2, [r7, #6]
 800027c:	0092      	lsls	r2, r2, #2
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	4611      	mov	r1, r2
 8000284:	4a84      	ldr	r2, [pc, #528]	@ (8000498 <GPIO_voidSetPinMode+0x328>)
 8000286:	430b      	orrs	r3, r1
 8000288:	6053      	str	r3, [r2, #4]
				break;
 800028a:	e0ee      	b.n	800046a <GPIO_voidSetPinMode+0x2fa>
			case GPIO_PORTC: 
				if(copy_u8PinID<=7)
 800028c:	79bb      	ldrb	r3, [r7, #6]
 800028e:	2b07      	cmp	r3, #7
 8000290:	d812      	bhi.n	80002b8 <GPIO_voidSetPinMode+0x148>
				{
					SET_4BIT_Val(GPIOC->CRL,copy_u8PinID*4,copy_u8Mode);
 8000292:	4b82      	ldr	r3, [pc, #520]	@ (800049c <GPIO_voidSetPinMode+0x32c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79ba      	ldrb	r2, [r7, #6]
 8000298:	0092      	lsls	r2, r2, #2
 800029a:	210f      	movs	r1, #15
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	43d2      	mvns	r2, r2
 80002a2:	4013      	ands	r3, r2
 80002a4:	7979      	ldrb	r1, [r7, #5]
 80002a6:	79ba      	ldrb	r2, [r7, #6]
 80002a8:	0092      	lsls	r2, r2, #2
 80002aa:	fa01 f202 	lsl.w	r2, r1, r2
 80002ae:	4611      	mov	r1, r2
 80002b0:	4a7a      	ldr	r2, [pc, #488]	@ (800049c <GPIO_voidSetPinMode+0x32c>)
 80002b2:	430b      	orrs	r3, r1
 80002b4:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOC->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 80002b6:	e0da      	b.n	800046e <GPIO_voidSetPinMode+0x2fe>
				else if(copy_u8PinID <=15)
 80002b8:	79bb      	ldrb	r3, [r7, #6]
 80002ba:	2b0f      	cmp	r3, #15
 80002bc:	f200 80d7 	bhi.w	800046e <GPIO_voidSetPinMode+0x2fe>
					copy_u8PinID-=8;
 80002c0:	79bb      	ldrb	r3, [r7, #6]
 80002c2:	3b08      	subs	r3, #8
 80002c4:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOC->CRH,copy_u8PinID*4,copy_u8Mode);
 80002c6:	4b75      	ldr	r3, [pc, #468]	@ (800049c <GPIO_voidSetPinMode+0x32c>)
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	79ba      	ldrb	r2, [r7, #6]
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	210f      	movs	r1, #15
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	43d2      	mvns	r2, r2
 80002d6:	4013      	ands	r3, r2
 80002d8:	7979      	ldrb	r1, [r7, #5]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	0092      	lsls	r2, r2, #2
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	4611      	mov	r1, r2
 80002e4:	4a6d      	ldr	r2, [pc, #436]	@ (800049c <GPIO_voidSetPinMode+0x32c>)
 80002e6:	430b      	orrs	r3, r1
 80002e8:	6053      	str	r3, [r2, #4]
				break;
 80002ea:	e0c0      	b.n	800046e <GPIO_voidSetPinMode+0x2fe>
			case GPIO_PORTD: 
				if(copy_u8PinID<=7)
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	2b07      	cmp	r3, #7
 80002f0:	d812      	bhi.n	8000318 <GPIO_voidSetPinMode+0x1a8>
				{
					SET_4BIT_Val(GPIOD->CRL,copy_u8PinID*4,copy_u8Mode);
 80002f2:	4b6b      	ldr	r3, [pc, #428]	@ (80004a0 <GPIO_voidSetPinMode+0x330>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	210f      	movs	r1, #15
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	43d2      	mvns	r2, r2
 8000302:	4013      	ands	r3, r2
 8000304:	7979      	ldrb	r1, [r7, #5]
 8000306:	79ba      	ldrb	r2, [r7, #6]
 8000308:	0092      	lsls	r2, r2, #2
 800030a:	fa01 f202 	lsl.w	r2, r1, r2
 800030e:	4611      	mov	r1, r2
 8000310:	4a63      	ldr	r2, [pc, #396]	@ (80004a0 <GPIO_voidSetPinMode+0x330>)
 8000312:	430b      	orrs	r3, r1
 8000314:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOD->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000316:	e0ac      	b.n	8000472 <GPIO_voidSetPinMode+0x302>
				else if(copy_u8PinID <=15)
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	2b0f      	cmp	r3, #15
 800031c:	f200 80a9 	bhi.w	8000472 <GPIO_voidSetPinMode+0x302>
					copy_u8PinID-=8;
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	3b08      	subs	r3, #8
 8000324:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOD->CRH,copy_u8PinID*4,copy_u8Mode);
 8000326:	4b5e      	ldr	r3, [pc, #376]	@ (80004a0 <GPIO_voidSetPinMode+0x330>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	79ba      	ldrb	r2, [r7, #6]
 800032c:	0092      	lsls	r2, r2, #2
 800032e:	210f      	movs	r1, #15
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	43d2      	mvns	r2, r2
 8000336:	4013      	ands	r3, r2
 8000338:	7979      	ldrb	r1, [r7, #5]
 800033a:	79ba      	ldrb	r2, [r7, #6]
 800033c:	0092      	lsls	r2, r2, #2
 800033e:	fa01 f202 	lsl.w	r2, r1, r2
 8000342:	4611      	mov	r1, r2
 8000344:	4a56      	ldr	r2, [pc, #344]	@ (80004a0 <GPIO_voidSetPinMode+0x330>)
 8000346:	430b      	orrs	r3, r1
 8000348:	6053      	str	r3, [r2, #4]
				break;
 800034a:	e092      	b.n	8000472 <GPIO_voidSetPinMode+0x302>
			case GPIO_PORTE: 
				if(copy_u8PinID<=7)
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	2b07      	cmp	r3, #7
 8000350:	d812      	bhi.n	8000378 <GPIO_voidSetPinMode+0x208>
				{
					SET_4BIT_Val(GPIOE->CRL,copy_u8PinID*4,copy_u8Mode);
 8000352:	4b54      	ldr	r3, [pc, #336]	@ (80004a4 <GPIO_voidSetPinMode+0x334>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	79ba      	ldrb	r2, [r7, #6]
 8000358:	0092      	lsls	r2, r2, #2
 800035a:	210f      	movs	r1, #15
 800035c:	fa01 f202 	lsl.w	r2, r1, r2
 8000360:	43d2      	mvns	r2, r2
 8000362:	4013      	ands	r3, r2
 8000364:	7979      	ldrb	r1, [r7, #5]
 8000366:	79ba      	ldrb	r2, [r7, #6]
 8000368:	0092      	lsls	r2, r2, #2
 800036a:	fa01 f202 	lsl.w	r2, r1, r2
 800036e:	4611      	mov	r1, r2
 8000370:	4a4c      	ldr	r2, [pc, #304]	@ (80004a4 <GPIO_voidSetPinMode+0x334>)
 8000372:	430b      	orrs	r3, r1
 8000374:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOE->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000376:	e07e      	b.n	8000476 <GPIO_voidSetPinMode+0x306>
				else if(copy_u8PinID <=15)
 8000378:	79bb      	ldrb	r3, [r7, #6]
 800037a:	2b0f      	cmp	r3, #15
 800037c:	d87b      	bhi.n	8000476 <GPIO_voidSetPinMode+0x306>
					copy_u8PinID-=8;
 800037e:	79bb      	ldrb	r3, [r7, #6]
 8000380:	3b08      	subs	r3, #8
 8000382:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOE->CRH,copy_u8PinID*4,copy_u8Mode);
 8000384:	4b47      	ldr	r3, [pc, #284]	@ (80004a4 <GPIO_voidSetPinMode+0x334>)
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	79ba      	ldrb	r2, [r7, #6]
 800038a:	0092      	lsls	r2, r2, #2
 800038c:	210f      	movs	r1, #15
 800038e:	fa01 f202 	lsl.w	r2, r1, r2
 8000392:	43d2      	mvns	r2, r2
 8000394:	4013      	ands	r3, r2
 8000396:	7979      	ldrb	r1, [r7, #5]
 8000398:	79ba      	ldrb	r2, [r7, #6]
 800039a:	0092      	lsls	r2, r2, #2
 800039c:	fa01 f202 	lsl.w	r2, r1, r2
 80003a0:	4611      	mov	r1, r2
 80003a2:	4a40      	ldr	r2, [pc, #256]	@ (80004a4 <GPIO_voidSetPinMode+0x334>)
 80003a4:	430b      	orrs	r3, r1
 80003a6:	6053      	str	r3, [r2, #4]
				break;
 80003a8:	e065      	b.n	8000476 <GPIO_voidSetPinMode+0x306>
		    case GPIO_PORTF: 
				if(copy_u8PinID<=7)
 80003aa:	79bb      	ldrb	r3, [r7, #6]
 80003ac:	2b07      	cmp	r3, #7
 80003ae:	d812      	bhi.n	80003d6 <GPIO_voidSetPinMode+0x266>
				{
					SET_4BIT_Val(GPIOF->CRL,copy_u8PinID*4,copy_u8Mode);
 80003b0:	4b3d      	ldr	r3, [pc, #244]	@ (80004a8 <GPIO_voidSetPinMode+0x338>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	79ba      	ldrb	r2, [r7, #6]
 80003b6:	0092      	lsls	r2, r2, #2
 80003b8:	210f      	movs	r1, #15
 80003ba:	fa01 f202 	lsl.w	r2, r1, r2
 80003be:	43d2      	mvns	r2, r2
 80003c0:	4013      	ands	r3, r2
 80003c2:	7979      	ldrb	r1, [r7, #5]
 80003c4:	79ba      	ldrb	r2, [r7, #6]
 80003c6:	0092      	lsls	r2, r2, #2
 80003c8:	fa01 f202 	lsl.w	r2, r1, r2
 80003cc:	4611      	mov	r1, r2
 80003ce:	4a36      	ldr	r2, [pc, #216]	@ (80004a8 <GPIO_voidSetPinMode+0x338>)
 80003d0:	430b      	orrs	r3, r1
 80003d2:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOF->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 80003d4:	e051      	b.n	800047a <GPIO_voidSetPinMode+0x30a>
				else if(copy_u8PinID <=15)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	2b0f      	cmp	r3, #15
 80003da:	d84e      	bhi.n	800047a <GPIO_voidSetPinMode+0x30a>
					copy_u8PinID-=8;
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	3b08      	subs	r3, #8
 80003e0:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOF->CRH,copy_u8PinID*4,copy_u8Mode);
 80003e2:	4b31      	ldr	r3, [pc, #196]	@ (80004a8 <GPIO_voidSetPinMode+0x338>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	0092      	lsls	r2, r2, #2
 80003ea:	210f      	movs	r1, #15
 80003ec:	fa01 f202 	lsl.w	r2, r1, r2
 80003f0:	43d2      	mvns	r2, r2
 80003f2:	4013      	ands	r3, r2
 80003f4:	7979      	ldrb	r1, [r7, #5]
 80003f6:	79ba      	ldrb	r2, [r7, #6]
 80003f8:	0092      	lsls	r2, r2, #2
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	4611      	mov	r1, r2
 8000400:	4a29      	ldr	r2, [pc, #164]	@ (80004a8 <GPIO_voidSetPinMode+0x338>)
 8000402:	430b      	orrs	r3, r1
 8000404:	6053      	str	r3, [r2, #4]
				break;
 8000406:	e038      	b.n	800047a <GPIO_voidSetPinMode+0x30a>
			case GPIO_PORTG: 
				if(copy_u8PinID<=7)
 8000408:	79bb      	ldrb	r3, [r7, #6]
 800040a:	2b07      	cmp	r3, #7
 800040c:	d812      	bhi.n	8000434 <GPIO_voidSetPinMode+0x2c4>
				{
					SET_4BIT_Val(GPIOG->CRL,copy_u8PinID*4,copy_u8Mode);
 800040e:	4b27      	ldr	r3, [pc, #156]	@ (80004ac <GPIO_voidSetPinMode+0x33c>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	79ba      	ldrb	r2, [r7, #6]
 8000414:	0092      	lsls	r2, r2, #2
 8000416:	210f      	movs	r1, #15
 8000418:	fa01 f202 	lsl.w	r2, r1, r2
 800041c:	43d2      	mvns	r2, r2
 800041e:	4013      	ands	r3, r2
 8000420:	7979      	ldrb	r1, [r7, #5]
 8000422:	79ba      	ldrb	r2, [r7, #6]
 8000424:	0092      	lsls	r2, r2, #2
 8000426:	fa01 f202 	lsl.w	r2, r1, r2
 800042a:	4611      	mov	r1, r2
 800042c:	4a1f      	ldr	r2, [pc, #124]	@ (80004ac <GPIO_voidSetPinMode+0x33c>)
 800042e:	430b      	orrs	r3, r1
 8000430:	6013      	str	r3, [r2, #0]
				else if(copy_u8PinID <=15)
				{
					copy_u8PinID-=8;
					SET_4BIT_Val(GPIOG->CRH,copy_u8PinID*4,copy_u8Mode);
				}
				break;
 8000432:	e024      	b.n	800047e <GPIO_voidSetPinMode+0x30e>
				else if(copy_u8PinID <=15)
 8000434:	79bb      	ldrb	r3, [r7, #6]
 8000436:	2b0f      	cmp	r3, #15
 8000438:	d821      	bhi.n	800047e <GPIO_voidSetPinMode+0x30e>
					copy_u8PinID-=8;
 800043a:	79bb      	ldrb	r3, [r7, #6]
 800043c:	3b08      	subs	r3, #8
 800043e:	71bb      	strb	r3, [r7, #6]
					SET_4BIT_Val(GPIOG->CRH,copy_u8PinID*4,copy_u8Mode);
 8000440:	4b1a      	ldr	r3, [pc, #104]	@ (80004ac <GPIO_voidSetPinMode+0x33c>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	79ba      	ldrb	r2, [r7, #6]
 8000446:	0092      	lsls	r2, r2, #2
 8000448:	210f      	movs	r1, #15
 800044a:	fa01 f202 	lsl.w	r2, r1, r2
 800044e:	43d2      	mvns	r2, r2
 8000450:	4013      	ands	r3, r2
 8000452:	7979      	ldrb	r1, [r7, #5]
 8000454:	79ba      	ldrb	r2, [r7, #6]
 8000456:	0092      	lsls	r2, r2, #2
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	4611      	mov	r1, r2
 800045e:	4a13      	ldr	r2, [pc, #76]	@ (80004ac <GPIO_voidSetPinMode+0x33c>)
 8000460:	430b      	orrs	r3, r1
 8000462:	6053      	str	r3, [r2, #4]
				break;
 8000464:	e00b      	b.n	800047e <GPIO_voidSetPinMode+0x30e>
				break;
 8000466:	bf00      	nop
 8000468:	e00d      	b.n	8000486 <GPIO_voidSetPinMode+0x316>
				break;
 800046a:	bf00      	nop
 800046c:	e00b      	b.n	8000486 <GPIO_voidSetPinMode+0x316>
				break;
 800046e:	bf00      	nop
 8000470:	e009      	b.n	8000486 <GPIO_voidSetPinMode+0x316>
				break;
 8000472:	bf00      	nop
 8000474:	e007      	b.n	8000486 <GPIO_voidSetPinMode+0x316>
				break;
 8000476:	bf00      	nop
 8000478:	e005      	b.n	8000486 <GPIO_voidSetPinMode+0x316>
				break;
 800047a:	bf00      	nop
 800047c:	e003      	b.n	8000486 <GPIO_voidSetPinMode+0x316>
				break;
 800047e:	bf00      	nop
		switch(copy_u8portID)
 8000480:	e001      	b.n	8000486 <GPIO_voidSetPinMode+0x316>
		}
	}
	else 
		lacal_u8ErrorState = STD_TYPE_NOK;
 8000482:	2300      	movs	r3, #0
 8000484:	73fb      	strb	r3, [r7, #15]
	return lacal_u8ErrorState;
 8000486:	7bfb      	ldrb	r3, [r7, #15]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40010800 	.word	0x40010800
 8000498:	40010c00 	.word	0x40010c00
 800049c:	40011000 	.word	0x40011000
 80004a0:	40011400 	.word	0x40011400
 80004a4:	40011800 	.word	0x40011800
 80004a8:	40011c00 	.word	0x40011c00
 80004ac:	40012000 	.word	0x40012000

080004b0 <GPIO_voidSetPinValue>:


u8 GPIO_voidSetPinValue(u8 copy_u8portID,u8 copy_u8PinID,u8 copy_u8PinValue)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
 80004ba:	460b      	mov	r3, r1
 80004bc:	71bb      	strb	r3, [r7, #6]
 80004be:	4613      	mov	r3, r2
 80004c0:	717b      	strb	r3, [r7, #5]
	u8 lacal_u8ErrorState = STD_TYPE_OK;
 80004c2:	2301      	movs	r3, #1
 80004c4:	73fb      	strb	r3, [r7, #15]
	if(copy_u8portID <= GPIO_PORTG && copy_u8PinID <= GPIO_PIN15 && (copy_u8PinValue == 1 || copy_u8PinValue ==0 ))
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b07      	cmp	r3, #7
 80004ca:	f200 80a7 	bhi.w	800061c <GPIO_voidSetPinValue+0x16c>
 80004ce:	79bb      	ldrb	r3, [r7, #6]
 80004d0:	2b0f      	cmp	r3, #15
 80004d2:	f200 80a3 	bhi.w	800061c <GPIO_voidSetPinValue+0x16c>
 80004d6:	797b      	ldrb	r3, [r7, #5]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d003      	beq.n	80004e4 <GPIO_voidSetPinValue+0x34>
 80004dc:	797b      	ldrb	r3, [r7, #5]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	f040 809c 	bne.w	800061c <GPIO_voidSetPinValue+0x16c>
	{
		switch(copy_u8portID)
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	2b06      	cmp	r3, #6
 80004ea:	f200 8099 	bhi.w	8000620 <GPIO_voidSetPinValue+0x170>
 80004ee:	a201      	add	r2, pc, #4	@ (adr r2, 80004f4 <GPIO_voidSetPinValue+0x44>)
 80004f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f4:	08000511 	.word	0x08000511
 80004f8:	08000537 	.word	0x08000537
 80004fc:	0800055d 	.word	0x0800055d
 8000500:	08000583 	.word	0x08000583
 8000504:	080005a9 	.word	0x080005a9
 8000508:	080005cf 	.word	0x080005cf
 800050c:	080005f5 	.word	0x080005f5
		{
			case GPIO_PORTA:
				switch(copy_u8PinValue){
 8000510:	797b      	ldrb	r3, [r7, #5]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <GPIO_voidSetPinValue+0x6c>
 8000516:	2b01      	cmp	r3, #1
 8000518:	d006      	beq.n	8000528 <GPIO_voidSetPinValue+0x78>
				case 0:WRITE_BIT(GPIOA->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOA->BSRR,copy_u8PinID);break;}
				break;
 800051a:	e07e      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOA->BRR,copy_u8PinID);break;
 800051c:	79bb      	ldrb	r3, [r7, #6]
 800051e:	2201      	movs	r2, #1
 8000520:	409a      	lsls	r2, r3
 8000522:	4b42      	ldr	r3, [pc, #264]	@ (800062c <GPIO_voidSetPinValue+0x17c>)
 8000524:	615a      	str	r2, [r3, #20]
 8000526:	e005      	b.n	8000534 <GPIO_voidSetPinValue+0x84>
				case 1:WRITE_BIT(GPIOA->BSRR,copy_u8PinID);break;}
 8000528:	79bb      	ldrb	r3, [r7, #6]
 800052a:	2201      	movs	r2, #1
 800052c:	409a      	lsls	r2, r3
 800052e:	4b3f      	ldr	r3, [pc, #252]	@ (800062c <GPIO_voidSetPinValue+0x17c>)
 8000530:	611a      	str	r2, [r3, #16]
 8000532:	bf00      	nop
				break;
 8000534:	e071      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTB:
				switch(copy_u8PinValue){
 8000536:	797b      	ldrb	r3, [r7, #5]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <GPIO_voidSetPinValue+0x92>
 800053c:	2b01      	cmp	r3, #1
 800053e:	d006      	beq.n	800054e <GPIO_voidSetPinValue+0x9e>
				case 0:WRITE_BIT(GPIOB->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOB->BSRR,copy_u8PinID);break;}
				break;
 8000540:	e06b      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOB->BRR,copy_u8PinID);break;
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	2201      	movs	r2, #1
 8000546:	409a      	lsls	r2, r3
 8000548:	4b39      	ldr	r3, [pc, #228]	@ (8000630 <GPIO_voidSetPinValue+0x180>)
 800054a:	615a      	str	r2, [r3, #20]
 800054c:	e005      	b.n	800055a <GPIO_voidSetPinValue+0xaa>
				case 1:WRITE_BIT(GPIOB->BSRR,copy_u8PinID);break;}
 800054e:	79bb      	ldrb	r3, [r7, #6]
 8000550:	2201      	movs	r2, #1
 8000552:	409a      	lsls	r2, r3
 8000554:	4b36      	ldr	r3, [pc, #216]	@ (8000630 <GPIO_voidSetPinValue+0x180>)
 8000556:	611a      	str	r2, [r3, #16]
 8000558:	bf00      	nop
				break;
 800055a:	e05e      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTC:
				switch(copy_u8PinValue){
 800055c:	797b      	ldrb	r3, [r7, #5]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d002      	beq.n	8000568 <GPIO_voidSetPinValue+0xb8>
 8000562:	2b01      	cmp	r3, #1
 8000564:	d006      	beq.n	8000574 <GPIO_voidSetPinValue+0xc4>
				case 0:WRITE_BIT(GPIOC->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOC->BSRR,copy_u8PinID);break;}
				break;
 8000566:	e058      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOC->BRR,copy_u8PinID);break;
 8000568:	79bb      	ldrb	r3, [r7, #6]
 800056a:	2201      	movs	r2, #1
 800056c:	409a      	lsls	r2, r3
 800056e:	4b31      	ldr	r3, [pc, #196]	@ (8000634 <GPIO_voidSetPinValue+0x184>)
 8000570:	615a      	str	r2, [r3, #20]
 8000572:	e005      	b.n	8000580 <GPIO_voidSetPinValue+0xd0>
				case 1:WRITE_BIT(GPIOC->BSRR,copy_u8PinID);break;}
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	2201      	movs	r2, #1
 8000578:	409a      	lsls	r2, r3
 800057a:	4b2e      	ldr	r3, [pc, #184]	@ (8000634 <GPIO_voidSetPinValue+0x184>)
 800057c:	611a      	str	r2, [r3, #16]
 800057e:	bf00      	nop
				break;
 8000580:	e04b      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTD:
				switch(copy_u8PinValue){
 8000582:	797b      	ldrb	r3, [r7, #5]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d002      	beq.n	800058e <GPIO_voidSetPinValue+0xde>
 8000588:	2b01      	cmp	r3, #1
 800058a:	d006      	beq.n	800059a <GPIO_voidSetPinValue+0xea>
				case 0:WRITE_BIT(GPIOD->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOD->BSRR,copy_u8PinID);break;}
				break;
 800058c:	e045      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOD->BRR,copy_u8PinID);break;
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	2201      	movs	r2, #1
 8000592:	409a      	lsls	r2, r3
 8000594:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <GPIO_voidSetPinValue+0x188>)
 8000596:	615a      	str	r2, [r3, #20]
 8000598:	e005      	b.n	80005a6 <GPIO_voidSetPinValue+0xf6>
				case 1:WRITE_BIT(GPIOD->BSRR,copy_u8PinID);break;}
 800059a:	79bb      	ldrb	r3, [r7, #6]
 800059c:	2201      	movs	r2, #1
 800059e:	409a      	lsls	r2, r3
 80005a0:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <GPIO_voidSetPinValue+0x188>)
 80005a2:	611a      	str	r2, [r3, #16]
 80005a4:	bf00      	nop
				break;
 80005a6:	e038      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTE:
				switch(copy_u8PinValue){
 80005a8:	797b      	ldrb	r3, [r7, #5]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d002      	beq.n	80005b4 <GPIO_voidSetPinValue+0x104>
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d006      	beq.n	80005c0 <GPIO_voidSetPinValue+0x110>
				case 0:WRITE_BIT(GPIOE->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOE->BSRR,copy_u8PinID);break;}
				break;
 80005b2:	e032      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOE->BRR,copy_u8PinID);break;
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	2201      	movs	r2, #1
 80005b8:	409a      	lsls	r2, r3
 80005ba:	4b20      	ldr	r3, [pc, #128]	@ (800063c <GPIO_voidSetPinValue+0x18c>)
 80005bc:	615a      	str	r2, [r3, #20]
 80005be:	e005      	b.n	80005cc <GPIO_voidSetPinValue+0x11c>
				case 1:WRITE_BIT(GPIOE->BSRR,copy_u8PinID);break;}
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	2201      	movs	r2, #1
 80005c4:	409a      	lsls	r2, r3
 80005c6:	4b1d      	ldr	r3, [pc, #116]	@ (800063c <GPIO_voidSetPinValue+0x18c>)
 80005c8:	611a      	str	r2, [r3, #16]
 80005ca:	bf00      	nop
				break;
 80005cc:	e025      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTF:
				switch(copy_u8PinValue){
 80005ce:	797b      	ldrb	r3, [r7, #5]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <GPIO_voidSetPinValue+0x12a>
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d006      	beq.n	80005e6 <GPIO_voidSetPinValue+0x136>
				case 0:WRITE_BIT(GPIOF->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOF->BSRR,copy_u8PinID);break;}
				break;
 80005d8:	e01f      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
				case 0:WRITE_BIT(GPIOF->BRR,copy_u8PinID);break;
 80005da:	79bb      	ldrb	r3, [r7, #6]
 80005dc:	2201      	movs	r2, #1
 80005de:	409a      	lsls	r2, r3
 80005e0:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <GPIO_voidSetPinValue+0x190>)
 80005e2:	615a      	str	r2, [r3, #20]
 80005e4:	e005      	b.n	80005f2 <GPIO_voidSetPinValue+0x142>
				case 1:WRITE_BIT(GPIOF->BSRR,copy_u8PinID);break;}
 80005e6:	79bb      	ldrb	r3, [r7, #6]
 80005e8:	2201      	movs	r2, #1
 80005ea:	409a      	lsls	r2, r3
 80005ec:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <GPIO_voidSetPinValue+0x190>)
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	bf00      	nop
				break;
 80005f2:	e012      	b.n	800061a <GPIO_voidSetPinValue+0x16a>
			case GPIO_PORTG:
				switch(copy_u8PinValue){
 80005f4:	797b      	ldrb	r3, [r7, #5]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d002      	beq.n	8000600 <GPIO_voidSetPinValue+0x150>
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d006      	beq.n	800060c <GPIO_voidSetPinValue+0x15c>
				case 0:WRITE_BIT(GPIOG->BRR,copy_u8PinID);break;
				case 1:WRITE_BIT(GPIOG->BSRR,copy_u8PinID);break;}
				break;
 80005fe:	e00b      	b.n	8000618 <GPIO_voidSetPinValue+0x168>
				case 0:WRITE_BIT(GPIOG->BRR,copy_u8PinID);break;
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	2201      	movs	r2, #1
 8000604:	409a      	lsls	r2, r3
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <GPIO_voidSetPinValue+0x194>)
 8000608:	615a      	str	r2, [r3, #20]
 800060a:	e005      	b.n	8000618 <GPIO_voidSetPinValue+0x168>
				case 1:WRITE_BIT(GPIOG->BSRR,copy_u8PinID);break;}
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	2201      	movs	r2, #1
 8000610:	409a      	lsls	r2, r3
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <GPIO_voidSetPinValue+0x194>)
 8000614:	611a      	str	r2, [r3, #16]
 8000616:	bf00      	nop
				break;
 8000618:	bf00      	nop
		switch(copy_u8portID)
 800061a:	e001      	b.n	8000620 <GPIO_voidSetPinValue+0x170>
		}
	}
    else 
		lacal_u8ErrorState = STD_TYPE_NOK;
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]
	return lacal_u8ErrorState;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40010800 	.word	0x40010800
 8000630:	40010c00 	.word	0x40010c00
 8000634:	40011000 	.word	0x40011000
 8000638:	40011400 	.word	0x40011400
 800063c:	40011800 	.word	0x40011800
 8000640:	40011c00 	.word	0x40011c00
 8000644:	40012000 	.word	0x40012000

08000648 <MOTOR_init>:
#include "PWM_DCmotor_init.h"
#include "GPIO_interface.h"


void MOTOR_init (u8 A_u8MotorNum)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	if (A_u8MotorNum>0)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d021      	beq.n	800069c <MOTOR_init+0x54>
	{
		switch(A_u8MotorNum)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d002      	beq.n	8000664 <MOTOR_init+0x1c>
 800065e:	2b02      	cmp	r3, #2
 8000660:	d00e      	beq.n	8000680 <MOTOR_init+0x38>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINL,GPIO_OUTPUT_10M_PP);
//			MTimer_voidInit(MOTOR2_SecondTimerType);
			break;
		}
	}
}
 8000662:	e01b      	b.n	800069c <MOTOR_init+0x54>
			MTimer_voidInit(MOTOR1_FirstTimerType);
 8000664:	2001      	movs	r0, #1
 8000666:	f000 f9cd 	bl	8000a04 <MTimer_voidInit>
			GPIO_voidSetPinMode(MOTOR1_PORT,MOTOR1_PINR,GPIO_OUTPUT_10M_PP);
 800066a:	2201      	movs	r2, #1
 800066c:	2103      	movs	r1, #3
 800066e:	2002      	movs	r0, #2
 8000670:	f7ff fd7e 	bl	8000170 <GPIO_voidSetPinMode>
		    GPIO_voidSetPinMode(MOTOR1_PORT,MOTOR1_PINL,GPIO_OUTPUT_10M_PP);
 8000674:	2201      	movs	r2, #1
 8000676:	2104      	movs	r1, #4
 8000678:	2002      	movs	r0, #2
 800067a:	f7ff fd79 	bl	8000170 <GPIO_voidSetPinMode>
			break;
 800067e:	e00d      	b.n	800069c <MOTOR_init+0x54>
			MTimer_voidInit(MOTOR2_FirstTimerType);
 8000680:	2001      	movs	r0, #1
 8000682:	f000 f9bf 	bl	8000a04 <MTimer_voidInit>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINR,GPIO_OUTPUT_10M_PP);
 8000686:	2201      	movs	r2, #1
 8000688:	2105      	movs	r1, #5
 800068a:	2002      	movs	r0, #2
 800068c:	f7ff fd70 	bl	8000170 <GPIO_voidSetPinMode>
			GPIO_voidSetPinMode(MOTOR2_PORT,MOTOR2_PINL,GPIO_OUTPUT_10M_PP);
 8000690:	2201      	movs	r2, #1
 8000692:	2106      	movs	r1, #6
 8000694:	2002      	movs	r0, #2
 8000696:	f7ff fd6b 	bl	8000170 <GPIO_voidSetPinMode>
			break;
 800069a:	bf00      	nop
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <MOTOR_CounterClockWise>:

void MOTOR_CounterClockWise  (u8 A_u8MotorNum , u16 A_u16CaptureValue )
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	80bb      	strh	r3, [r7, #4]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d02a      	beq.n	8000710 <MOTOR_CounterClockWise+0x6c>
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d827      	bhi.n	8000710 <MOTOR_CounterClockWise+0x6c>
	{
		switch(A_u8MotorNum)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d002      	beq.n	80006cc <MOTOR_CounterClockWise+0x28>
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d011      	beq.n	80006ee <MOTOR_CounterClockWise+0x4a>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_LOW);
//			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_SecondChannelNumber,0);
			break;
		}
	}
}
 80006ca:	e021      	b.n	8000710 <MOTOR_CounterClockWise+0x6c>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,A_u16CaptureValue);
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	461a      	mov	r2, r3
 80006d0:	2101      	movs	r1, #1
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 fab0 	bl	8000c38 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINR, GPIO_HIGH);
 80006d8:	2201      	movs	r2, #1
 80006da:	2103      	movs	r1, #3
 80006dc:	2002      	movs	r0, #2
 80006de:	f7ff fee7 	bl	80004b0 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINL, GPIO_LOW);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2104      	movs	r1, #4
 80006e6:	2002      	movs	r0, #2
 80006e8:	f7ff fee2 	bl	80004b0 <GPIO_voidSetPinValue>
			break;
 80006ec:	e010      	b.n	8000710 <MOTOR_CounterClockWise+0x6c>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,A_u16CaptureValue);
 80006ee:	88bb      	ldrh	r3, [r7, #4]
 80006f0:	461a      	mov	r2, r3
 80006f2:	2102      	movs	r1, #2
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 fa9f 	bl	8000c38 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINR, GPIO_HIGH);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2105      	movs	r1, #5
 80006fe:	2002      	movs	r0, #2
 8000700:	f7ff fed6 	bl	80004b0 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_LOW);
 8000704:	2200      	movs	r2, #0
 8000706:	2106      	movs	r1, #6
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff fed1 	bl	80004b0 <GPIO_voidSetPinValue>
			break;
 800070e:	bf00      	nop
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <MOTOR_ClockWise>:

void MOTOR_ClockWise  (u8 A_u8MotorNum , u16 A_u16CaptureValue)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	80bb      	strh	r3, [r7, #4]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d028      	beq.n	8000780 <MOTOR_ClockWise+0x68>
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d825      	bhi.n	8000780 <MOTOR_ClockWise+0x68>
	{
		switch(A_u8MotorNum)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d002      	beq.n	8000740 <MOTOR_ClockWise+0x28>
 800073a:	2b02      	cmp	r3, #2
 800073c:	d010      	beq.n	8000760 <MOTOR_ClockWise+0x48>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_HIGH);
//			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR2_SecondChannelNumber,A_u16CaptureValue);
			break;
		}
	}
}
 800073e:	e01f      	b.n	8000780 <MOTOR_ClockWise+0x68>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,0);
 8000740:	2200      	movs	r2, #0
 8000742:	2101      	movs	r1, #1
 8000744:	2001      	movs	r0, #1
 8000746:	f000 fa77 	bl	8000c38 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINR, GPIO_LOW);
 800074a:	2200      	movs	r2, #0
 800074c:	2103      	movs	r1, #3
 800074e:	2002      	movs	r0, #2
 8000750:	f7ff feae 	bl	80004b0 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PINL, GPIO_HIGH);
 8000754:	2201      	movs	r2, #1
 8000756:	2104      	movs	r1, #4
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fea9 	bl	80004b0 <GPIO_voidSetPinValue>
			break;
 800075e:	e00f      	b.n	8000780 <MOTOR_ClockWise+0x68>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR2_FirstChannelNumber,0);
 8000760:	2200      	movs	r2, #0
 8000762:	2102      	movs	r1, #2
 8000764:	2001      	movs	r0, #1
 8000766:	f000 fa67 	bl	8000c38 <MTimer_voidPWM>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINR, GPIO_LOW);
 800076a:	2200      	movs	r2, #0
 800076c:	2105      	movs	r1, #5
 800076e:	2002      	movs	r0, #2
 8000770:	f7ff fe9e 	bl	80004b0 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(MOTOR1_PORT, MOTOR2_PINL, GPIO_HIGH);
 8000774:	2201      	movs	r2, #1
 8000776:	2106      	movs	r1, #6
 8000778:	2002      	movs	r0, #2
 800077a:	f7ff fe99 	bl	80004b0 <GPIO_voidSetPinValue>
			break;
 800077e:	bf00      	nop
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <MOTOR_Stop>:

void MOTOR_Stop  (u8 A_u8MotorNum)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	if (A_u8MotorNum >0 &&A_u8MotorNum < 3)
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d014      	beq.n	80007c2 <MOTOR_Stop+0x3a>
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d811      	bhi.n	80007c2 <MOTOR_Stop+0x3a>
	{
		switch(A_u8MotorNum)
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d002      	beq.n	80007aa <MOTOR_Stop+0x22>
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d006      	beq.n	80007b6 <MOTOR_Stop+0x2e>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,0);
//			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_SecondChannelNumber,0);
			break;
		}
	}
}
 80007a8:	e00b      	b.n	80007c2 <MOTOR_Stop+0x3a>
			MTimer_voidPWM(MOTOR1_FirstTimerType,MOTOR1_FirstChannelNumber,0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2101      	movs	r1, #1
 80007ae:	2001      	movs	r0, #1
 80007b0:	f000 fa42 	bl	8000c38 <MTimer_voidPWM>
			break;
 80007b4:	e005      	b.n	80007c2 <MOTOR_Stop+0x3a>
			MTimer_voidPWM(MOTOR2_FirstTimerType,MOTOR2_FirstChannelNumber,0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2102      	movs	r1, #2
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 fa3c 	bl	8000c38 <MTimer_voidPWM>
			break;
 80007c0:	bf00      	nop
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <RCC_voidInitSysClock>:
#include "RCC_interface.h"
#include "RCC_config.h"


void RCC_voidInitSysClock(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	#if RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		SET_BIT(RCC->RCC_CR,16);
 80007d0:	4b16      	ldr	r3, [pc, #88]	@ (800082c <RCC_voidInitSysClock+0x60>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a15      	ldr	r2, [pc, #84]	@ (800082c <RCC_voidInitSysClock+0x60>)
 80007d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007da:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CR,18);
 80007dc:	4b13      	ldr	r3, [pc, #76]	@ (800082c <RCC_voidInitSysClock+0x60>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a12      	ldr	r2, [pc, #72]	@ (800082c <RCC_voidInitSysClock+0x60>)
 80007e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007e6:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->RCC_CFGR,0);
 80007e8:	4b10      	ldr	r3, [pc, #64]	@ (800082c <RCC_voidInitSysClock+0x60>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	4a0f      	ldr	r2, [pc, #60]	@ (800082c <RCC_voidInitSysClock+0x60>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	6053      	str	r3, [r2, #4]
		CLR_BIT(RCC->RCC_CFGR,1);
 80007f4:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <RCC_voidInitSysClock+0x60>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	4a0c      	ldr	r2, [pc, #48]	@ (800082c <RCC_voidInitSysClock+0x60>)
 80007fa:	f023 0302 	bic.w	r3, r3, #2
 80007fe:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->RCC_CFGR,1);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_AHP_PRESCALER   ==RCC_AHP_DIV_1
		CLR_BIT(RCC->RCC_CFGR,7);
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <RCC_voidInitSysClock+0x60>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	4a09      	ldr	r2, [pc, #36]	@ (800082c <RCC_voidInitSysClock+0x60>)
 8000806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800080a:	6053      	str	r3, [r2, #4]
	     SET_BIT(RCC->RCC_CFGR,7);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_APB1_PRESCALER   ==RCC_APB1_DIV_1
		CLR_BIT(RCC->RCC_CFGR,8);
 800080c:	4b07      	ldr	r3, [pc, #28]	@ (800082c <RCC_voidInitSysClock+0x60>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	4a06      	ldr	r2, [pc, #24]	@ (800082c <RCC_voidInitSysClock+0x60>)
 8000812:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000816:	6053      	str	r3, [r2, #4]
	    SET_BIT(RCC->RCC_CFGR,10);
	#else 
		#error("wrong choise")
	#endif
	#if RCC_APB2_PRESCALER   ==RCC_APB2_DIV_1
		CLR_BIT(RCC->RCC_CFGR,11);
 8000818:	4b04      	ldr	r3, [pc, #16]	@ (800082c <RCC_voidInitSysClock+0x60>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	4a03      	ldr	r2, [pc, #12]	@ (800082c <RCC_voidInitSysClock+0x60>)
 800081e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000822:	6053      	str	r3, [r2, #4]
	    SET_BIT(RCC->RCC_CFGR,12);
	    SET_BIT(RCC->RCC_CFGR,13);
	#else 
		#error("wrong choise")
	#endif
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	40021000 	.word	0x40021000

08000830 <RCC_voidEnablePeripheral>:
	#endif
}


void RCC_voidEnablePeripheral(u8 Copy_u8Bus, u8 Copy_u8Peripheral)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	460a      	mov	r2, r1
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	4613      	mov	r3, r2
 800083e:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8Bus)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d01c      	beq.n	8000880 <RCC_voidEnablePeripheral+0x50>
 8000846:	2b02      	cmp	r3, #2
 8000848:	dc25      	bgt.n	8000896 <RCC_voidEnablePeripheral+0x66>
 800084a:	2b00      	cmp	r3, #0
 800084c:	d002      	beq.n	8000854 <RCC_voidEnablePeripheral+0x24>
 800084e:	2b01      	cmp	r3, #1
 8000850:	d00b      	beq.n	800086a <RCC_voidEnablePeripheral+0x3a>
			break;
		case RCC_APB2:
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
			break;
	}
}
 8000852:	e020      	b.n	8000896 <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_AHBENR,Copy_u8Peripheral);
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <RCC_voidEnablePeripheral+0x70>)
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	79ba      	ldrb	r2, [r7, #6]
 800085a:	2101      	movs	r1, #1
 800085c:	fa01 f202 	lsl.w	r2, r1, r2
 8000860:	4611      	mov	r1, r2
 8000862:	4a0f      	ldr	r2, [pc, #60]	@ (80008a0 <RCC_voidEnablePeripheral+0x70>)
 8000864:	430b      	orrs	r3, r1
 8000866:	6153      	str	r3, [r2, #20]
			break;
 8000868:	e015      	b.n	8000896 <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_APB1ENR,Copy_u8Peripheral);
 800086a:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <RCC_voidEnablePeripheral+0x70>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	79ba      	ldrb	r2, [r7, #6]
 8000870:	2101      	movs	r1, #1
 8000872:	fa01 f202 	lsl.w	r2, r1, r2
 8000876:	4611      	mov	r1, r2
 8000878:	4a09      	ldr	r2, [pc, #36]	@ (80008a0 <RCC_voidEnablePeripheral+0x70>)
 800087a:	430b      	orrs	r3, r1
 800087c:	61d3      	str	r3, [r2, #28]
			break;
 800087e:	e00a      	b.n	8000896 <RCC_voidEnablePeripheral+0x66>
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral);
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <RCC_voidEnablePeripheral+0x70>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	79ba      	ldrb	r2, [r7, #6]
 8000886:	2101      	movs	r1, #1
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	4611      	mov	r1, r2
 800088e:	4a04      	ldr	r2, [pc, #16]	@ (80008a0 <RCC_voidEnablePeripheral+0x70>)
 8000890:	430b      	orrs	r3, r1
 8000892:	6193      	str	r3, [r2, #24]
			break;
 8000894:	bf00      	nop
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40021000 	.word	0x40021000

080008a4 <truncate_queue>:
}


// function to handle dequeue operation
static SPI_ERROR_STATUS_t truncate_queue(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	
	//status code
    SPI_ERROR_STATUS_t loc_enu_StatusCode = SPI_OKAY;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]
	
	// check if all bytes has been sent OR queue is empty
	if((gl_SPI_data_queue.s16_front_queue > gl_SPI_data_queue.s16_rear_queue) || (gl_SPI_data_queue.s16_front_queue == EMPTY_POSITOIN))
 80008ae:	4b19      	ldr	r3, [pc, #100]	@ (8000914 <truncate_queue+0x70>)
 80008b0:	f993 20c8 	ldrsb.w	r2, [r3, #200]	@ 0xc8
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <truncate_queue+0x70>)
 80008b6:	f993 30c9 	ldrsb.w	r3, [r3, #201]	@ 0xc9
 80008ba:	429a      	cmp	r2, r3
 80008bc:	dc05      	bgt.n	80008ca <truncate_queue+0x26>
 80008be:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <truncate_queue+0x70>)
 80008c0:	f993 30c8 	ldrsb.w	r3, [r3, #200]	@ 0xc8
 80008c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c8:	d10a      	bne.n	80008e0 <truncate_queue+0x3c>
	{
		// set front and rear to defaults
		gl_SPI_data_queue.s16_front_queue = EMPTY_POSITOIN;
 80008ca:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <truncate_queue+0x70>)
 80008cc:	22ff      	movs	r2, #255	@ 0xff
 80008ce:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
		gl_SPI_data_queue.s16_rear_queue  = EMPTY_POSITOIN;
 80008d2:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <truncate_queue+0x70>)
 80008d4:	22ff      	movs	r2, #255	@ 0xff
 80008d6:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
		
		//status code queue is empty
		loc_enu_StatusCode = QUEUE_EMPTY;
 80008da:	2302      	movs	r3, #2
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	e012      	b.n	8000906 <truncate_queue+0x62>
	}
	else
	{
		//send current byte and increment front
		SPI1->DR = gl_SPI_data_queue.u16_arr_data[gl_SPI_data_queue.s16_front_queue];
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <truncate_queue+0x70>)
 80008e2:	f993 30c8 	ldrsb.w	r3, [r3, #200]	@ 0xc8
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <truncate_queue+0x70>)
 80008ea:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80008ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <truncate_queue+0x74>)
 80008f0:	60da      	str	r2, [r3, #12]
		gl_SPI_data_queue.s16_front_queue++;
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <truncate_queue+0x70>)
 80008f4:	f993 30c8 	ldrsb.w	r3, [r3, #200]	@ 0xc8
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	3301      	adds	r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	b25a      	sxtb	r2, r3
 8000900:	4b04      	ldr	r3, [pc, #16]	@ (8000914 <truncate_queue+0x70>)
 8000902:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
	}
	return loc_enu_StatusCode;
 8000906:	79fb      	ldrb	r3, [r7, #7]
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000000 	.word	0x20000000
 8000918:	40013000 	.word	0x40013000

0800091c <SPI1_IRQHandler>:


void SPI1_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
    // TODO HANDLE ISR FOR RECEPTION
	#if   SPI1_MASTER_SLAVE == SPI_SLAVE
       sgl_Recieve_Index = (u8)SPI1->DR;
       gl_ptr_Function();
    #elif SPI1_MASTER_SLAVE == SPI_MASTER
      if (truncate_queue() == QUEUE_EMPTY)
 8000920:	f7ff ffc0 	bl	80008a4 <truncate_queue>
 8000924:	4603      	mov	r3, r0
 8000926:	2b02      	cmp	r3, #2
 8000928:	d106      	bne.n	8000938 <SPI1_IRQHandler+0x1c>
      {
        if (gl_ptr_Function != PTR_NULL)
 800092a:	4b04      	ldr	r3, [pc, #16]	@ (800093c <SPI1_IRQHandler+0x20>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d002      	beq.n	8000938 <SPI1_IRQHandler+0x1c>
        {
            gl_ptr_Function();
 8000932:	4b02      	ldr	r3, [pc, #8]	@ (800093c <SPI1_IRQHandler+0x20>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4798      	blx	r3
        }
      }
    #endif

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200000ec 	.word	0x200000ec

08000940 <MSTK_voidInit>:

/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;

void MSTK_voidInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
#if MSTK_CLK_SRC == MSTK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	MSTK -> CTRL = 0x00000004;
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	MSTK -> CTRL = 0;
 8000944:	4b03      	ldr	r3, [pc, #12]	@ (8000954 <MSTK_voidInit+0x14>)
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]

#endif
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000e010 	.word	0xe000e010

08000958 <MSTK_voidSetBusyWait>:

void MSTK_voidSetBusyWait( u32 Copy_u32Ticks )
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks;
 8000960:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <MSTK_voidSetBusyWait+0x4c>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6053      	str	r3, [r2, #4]

	/* Start Timer */
	SET_BIT(MSTK->CTRL, 0);
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MSTK_voidSetBusyWait+0x4c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a0e      	ldr	r2, [pc, #56]	@ (80009a4 <MSTK_voidSetBusyWait+0x4c>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6013      	str	r3, [r2, #0]

	/* Wait till flag is raised */
	while( (GET_BIT(MSTK->CTRL,16)) == 0);
 8000972:	bf00      	nop
 8000974:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <MSTK_voidSetBusyWait+0x4c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800097c:	2b00      	cmp	r3, #0
 800097e:	d0f9      	beq.n	8000974 <MSTK_voidSetBusyWait+0x1c>

	/* Stop Timer */
	SET_BIT(MSTK->CTRL, 0);
 8000980:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <MSTK_voidSetBusyWait+0x4c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	@ (80009a4 <MSTK_voidSetBusyWait+0x4c>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD = 0;
 800098c:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <MSTK_voidSetBusyWait+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
	MSTK -> VAL  = 0;
 8000992:	4b04      	ldr	r3, [pc, #16]	@ (80009a4 <MSTK_voidSetBusyWait+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
	
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <SysTick_Handler>:

	return Local_u32RemainTime;
}

void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary ;

	if (MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 80009ae:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <SysTick_Handler+0x50>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d111      	bne.n	80009da <SysTick_Handler+0x32>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK->CTRL, 1);
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <SysTick_Handler+0x54>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a10      	ldr	r2, [pc, #64]	@ (80009fc <SysTick_Handler+0x54>)
 80009bc:	f023 0302 	bic.w	r3, r3, #2
 80009c0:	6013      	str	r3, [r2, #0]

		/* Stop Timer */
		SET_BIT(MSTK->CTRL, 0);
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <SysTick_Handler+0x54>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a0d      	ldr	r2, [pc, #52]	@ (80009fc <SysTick_Handler+0x54>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD = 0;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <SysTick_Handler+0x54>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
		MSTK -> VAL  = 0;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <SysTick_Handler+0x54>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
	}

	/* Callback notification */
	MSTK_CallBack();
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <SysTick_Handler+0x58>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4798      	blx	r3

	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(MSTK->CTRL,16);
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <SysTick_Handler+0x54>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	0c1b      	lsrs	r3, r3, #16
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	71fb      	strb	r3, [r7, #7]
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000f4 	.word	0x200000f4
 80009fc:	e000e010 	.word	0xe000e010
 8000a00:	200000f0 	.word	0x200000f0

08000a04 <MTimer_voidInit>:

u8 channel1_set=0;
u8 channel2_set=0;

void MTimer_voidInit (u8 A_u8TimerSelected)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]

	/* Enable pinout of ADC (PortA , PORTB) from RCC */
	//MRCC_voidEnablePerephiralClock(RCC_AHB1 , RCC_EN_GPIOA) ;
	//MRCC_voidEnablePerephiralClock(RCC_AHB1 , RCC_EN_GPIOB) ;

	switch (A_u8TimerSelected)
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	f200 8107 	bhi.w	8000c26 <MTimer_voidInit+0x222>
 8000a18:	a201      	add	r2, pc, #4	@ (adr r2, 8000a20 <MTimer_voidInit+0x1c>)
 8000a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1e:	bf00      	nop
 8000a20:	08000a31 	.word	0x08000a31
 8000a24:	08000a95 	.word	0x08000a95
 8000a28:	08000b27 	.word	0x08000b27
 8000a2c:	08000bb9 	.word	0x08000bb9
		/**                             Init TIM1                                    **/
		/******************************************************************************/

			/* Select the Direction */
            #if   TIM1_DIRECTION == UP_COUNTER
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_DIR_BIT) ;
 8000a30:	4b7f      	ldr	r3, [pc, #508]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a7e      	ldr	r2, [pc, #504]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a36:	f023 0310 	bic.w	r3, r3, #16
 8000a3a:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM1_DIRECTION"
            #endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_1->CR1 , TIM1_CR1_CMS_BIT0) ;
 8000a3c:	4b7c      	ldr	r3, [pc, #496]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a7b      	ldr	r2, [pc, #492]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a42:	f023 0320 	bic.w	r3, r3, #32
 8000a46:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_1->CR1 , TIM1_CR1_CMS_BIT1) ;
 8000a48:	4b79      	ldr	r3, [pc, #484]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a78      	ldr	r2, [pc, #480]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000a52:	6013      	str	r3, [r2, #0]

			/* set the timer division */
            #if   TIM1_DIVISION == tCK_INT_x_1
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_CKD_BIT0) ;
 8000a54:	4b76      	ldr	r3, [pc, #472]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a75      	ldr	r2, [pc, #468]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000a5e:	6013      	str	r3, [r2, #0]
			      CLR_BIT(TIM_1->CR1 , TIM1_CR1_CKD_BIT1) ;
 8000a60:	4b73      	ldr	r3, [pc, #460]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a72      	ldr	r2, [pc, #456]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a66:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000a6a:	6013      	str	r3, [r2, #0]
                  #error "Invalid Selection of TIM1_DIVISION"
            #endif

			/* set the timer prescaller */
            #if    TIM1_PRESCALLER <= MAX_TIM_PRESCALLER
            	   TIM_1 ->PSC = TIM1_PRESCALLER ;
 8000a6c:	4b70      	ldr	r3, [pc, #448]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a6e:	2208      	movs	r2, #8
 8000a70:	629a      	str	r2, [r3, #40]	@ 0x28
            #else
                   #error "TIM1_PRESCALLER out of range"
            #endif

            /* Enable auto-reload preload */
            SET_BIT(TIM_1->CR1 , TIM1_CR1_ARPE_BIT) ;
 8000a72:	4b6f      	ldr	r3, [pc, #444]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a6e      	ldr	r2, [pc, #440]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a7c:	6013      	str	r3, [r2, #0]

            /* Set the Auto-reload value */
            #if  TIM1_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
            	   TIM_1->ARR = TIM1_PRELOAD_VALUE ;
 8000a7e:	4b6c      	ldr	r3, [pc, #432]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a84:	62da      	str	r2, [r3, #44]	@ 0x2c
           //       #error "REPETATION_COUNTER out of range"
           // #endif

            /* Generate an update event to reload the Prescaler
            and the repetition counter(only for TIM1 and TIM5) value immediately */
            SET_BIT(TIM_1->EGR , TIM1_EGR_UG_BIT );
 8000a86:	4b6a      	ldr	r3, [pc, #424]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	4a69      	ldr	r2, [pc, #420]	@ (8000c30 <MTimer_voidInit+0x22c>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6153      	str	r3, [r2, #20]

		break ;
 8000a92:	e0c8      	b.n	8000c26 <MTimer_voidInit+0x222>
		/******************************************************************************/
		/**                             Init TIM2                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_2 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8000a94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa2:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
            #if   TIM2_DIRECTION == UP_COUNTER
			      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 8000aa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aae:	f023 0310 	bic.w	r3, r3, #16
 8000ab2:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM2_DIRECTION"
            #endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8000ab4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000abe:	f023 0320 	bic.w	r3, r3, #32
 8000ac2:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8000ac4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000ad2:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM2_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8000ad4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ade:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ae2:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 8000ae4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aee:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000af2:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM2_DIVISION"
			#endif

		    /* set the timer prescaller */
	        #if    TIM2_PRESCALLER <= MAX_TIM_PRESCALLER
	        	   TIM_2 ->PSC = TIM2_PRESCALLER ;
 8000af4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000af8:	2208      	movs	r2, #8
 8000afa:	629a      	str	r2, [r3, #40]	@ 0x28
	        #else
	               #error "TIM2_PRESCALLER out of range"
	        #endif

	        /* Enable auto-reload preload */
	        SET_BIT(TIM_2->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 8000afc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b0a:	6013      	str	r3, [r2, #0]

	        /* Set the Auto-reload value */
	        #if  TIM2_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
	        	   TIM_2->ARR = TIM2_PRELOAD_VALUE ;
 8000b0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b10:	220f      	movs	r2, #15
 8000b12:	62da      	str	r2, [r3, #44]	@ 0x2c
	              #error "TIM2_PRELOAD_VALUE out of range"
	        #endif

	        /* Generate an update event to reload the Prescaler
	         and the repetition counter(only for TIM1 and TIM5) value immediately */
	        SET_BIT(TIM_2->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8000b14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6153      	str	r3, [r2, #20]

		break ;
 8000b24:	e07f      	b.n	8000c26 <MTimer_voidInit+0x222>
		/******************************************************************************/
		/**                             Init TIM3                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_3 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8000b26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b34:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
            #if   TIM3_DIRECTION == UP_COUNTER
	           CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 8000b36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000b40:	f023 0310 	bic.w	r3, r3, #16
 8000b44:	6013      	str	r3, [r2, #0]
            #else
                  #error "Invalid Selection of TIM3_DIRECTION"
            #endif

	        /* Edge-aligned mode */
	        CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8000b46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000b50:	f023 0320 	bic.w	r3, r3, #32
 8000b54:	6013      	str	r3, [r2, #0]
	        CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8000b56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000b64:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM3_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8000b66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b74:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 8000b76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000b80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000b84:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM3_DIVISION"
			#endif

			/* set the timer prescaller */
		    #if    TIM3_PRESCALLER <= MAX_TIM_PRESCALLER
		    	   TIM_3 ->PSC = TIM3_PRESCALLER ;
 8000b86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	629a      	str	r2, [r3, #40]	@ 0x28
		    #else
		           #error "TIM3_PRESCALLER out of range"
		    #endif

		    /* Enable auto-reload preload */
			SET_BIT(TIM_3->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 8000b8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b9c:	6013      	str	r3, [r2, #0]

			/* Set the Auto-reload value */
			#if  TIM3_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
				   TIM_3->ARR = TIM3_PRELOAD_VALUE ;
 8000b9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000ba2:	220f      	movs	r2, #15
 8000ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
			      #error "TIM3_PRELOAD_VALUE out of range"
			#endif

			/* Generate an update event to reload the Prescaler
			 and the repetition counter(only for TIM1 and TIM5) value immediately */
			SET_BIT(TIM_3->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8000ba6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6153      	str	r3, [r2, #20]

		break ;
 8000bb6:	e036      	b.n	8000c26 <MTimer_voidInit+0x222>
		/******************************************************************************/
		/**                             Init TIM4                                    **/
		/******************************************************************************/

			/* Disable slave mode to clock the prescaler directly with the internal clock */
			SET_BIT(TIM_4 -> SMCR , TIM2_TO_TIM5_SMCR_MSM_BIT );
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc2:	6093      	str	r3, [r2, #8]

			/* Select the Direction */
			#if   TIM4_DIRECTION == UP_COUNTER
			     CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_DIR_BIT) ;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000bca:	f023 0310 	bic.w	r3, r3, #16
 8000bce:	6013      	str	r3, [r2, #0]
			#else
			      #error "Invalid Selection of TIM4_DIRECTION"
			#endif

			/* Edge-aligned mode */
			CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT0) ;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a17      	ldr	r2, [pc, #92]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000bd6:	f023 0320 	bic.w	r3, r3, #32
 8000bda:	6013      	str	r3, [r2, #0]
			CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CMS_BIT1) ;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000be6:	6013      	str	r3, [r2, #0]

			/* set the timer division */
			#if   TIM4_DIVISION == tCK_INT_x_1
		      CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT0) ;
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a11      	ldr	r2, [pc, #68]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000bee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
		      CLR_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_CKD_BIT1) ;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000bfa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000bfe:	6013      	str	r3, [r2, #0]
			      #error "Invalid Selection of TIM4_DIVISION"
			#endif

		    /* set the timer prescaller */
			#if    TIM4_PRESCALLER <= MAX_TIM_PRESCALLER
				   TIM_4 ->PSC = TIM4_PRESCALLER ;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000c02:	2208      	movs	r2, #8
 8000c04:	629a      	str	r2, [r3, #40]	@ 0x28
			#else
			       #error "TIM4_PRESCALLER out of range"
			#endif

			/* Enable auto-reload preload */
			SET_BIT(TIM_4->CR1 , TIM2_TO_TIM5_CR1_ARPE_BIT) ;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c10:	6013      	str	r3, [r2, #0]

			/* Set the Auto-reload value */
			#if  TIM4_PRELOAD_VALUE <= MAX_TIM_PRELOAD_VALUE
				   TIM_4->ARR = TIM4_PRELOAD_VALUE ;
 8000c12:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000c14:	220f      	movs	r2, #15
 8000c16:	62da      	str	r2, [r3, #44]	@ 0x2c
			      #error "TIM4_PRELOAD_VALUE out of range"
			#endif

		    /* Generate an update event to reload the Prescaler
		    	  and the repetition counter(only for TIM1 and TIM5) value immediately */
		    SET_BIT(TIM_4->EGR , TIM2_TO_TIM5_EGR_UG_BIT );
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <MTimer_voidInit+0x230>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6153      	str	r3, [r2, #20]
		break ;
 8000c24:	bf00      	nop
	}
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	40012c00 	.word	0x40012c00
 8000c34:	40008000 	.word	0x40008000

08000c38 <MTimer_voidPWM>:

void MTimer_voidPWM (u8 A_u8TimerSelected , u8 A_u8Channel , u16 A_u16CompareValue)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0b2      	sub	sp, #200	@ 0xc8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	460b      	mov	r3, r1
 8000c44:	71bb      	strb	r3, [r7, #6]
 8000c46:	4613      	mov	r3, r2
 8000c48:	80bb      	strh	r3, [r7, #4]
	if (A_u8TimerSelected == TIM1_TYPE)
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	f040 81d0 	bne.w	8000ff2 <MTimer_voidPWM+0x3ba>
	{
		if (A_u8Channel == TIM_CHANNEL_1)
 8000c52:	79bb      	ldrb	r3, [r7, #6]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d178      	bne.n	8000d4a <MTimer_voidPWM+0x112>
		{
			if (channel1_set==0)
 8000c58:	4b7a      	ldr	r3, [pc, #488]	@ (8000e44 <MTimer_voidPWM+0x20c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d107      	bne.n	8000c70 <MTimer_voidPWM+0x38>
			{
				GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN8,GPIO_OUTPUT_10M_AF_PP);
 8000c60:	2209      	movs	r2, #9
 8000c62:	2108      	movs	r1, #8
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff fa83 	bl	8000170 <GPIO_voidSetPinMode>
				channel1_set=1;
 8000c6a:	4b76      	ldr	r3, [pc, #472]	@ (8000e44 <MTimer_voidPWM+0x20c>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
			}

			u32 L_u32TempCCMRX = 0 ;
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
			u32 L_u32TempCCER  = 0 ;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
		    u32 L_u32TempCR2   = 0 ;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]

			/* Disable the Channel 1: Reset the CC1E Bit */
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC1E_BIT) ;
 8000c7c:	4b72      	ldr	r3, [pc, #456]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	4a71      	ldr	r2, [pc, #452]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000c82:	f023 0301 	bic.w	r3, r3, #1
 8000c86:	6213      	str	r3, [r2, #32]

			/* Get the TIM CCER register value */
			L_u32TempCCMRX = TIM_1->CCER;
 8000c88:	4b6f      	ldr	r3, [pc, #444]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000c8a:	6a1b      	ldr	r3, [r3, #32]
 8000c8c:	613b      	str	r3, [r7, #16]
			/* Get the TIM CR2 register value */
			L_u32TempCR2 = TIM_1->CR2;
 8000c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	60bb      	str	r3, [r7, #8]

			/* Get the TIM CCMR1 register value */
			L_u32TempCCMRX = TIM_1->CCMR1;
 8000c94:	4b6c      	ldr	r3, [pc, #432]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	613b      	str	r3, [r7, #16]

			/* Reset the Output Compare Mode Bits */
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT0) ;
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	f023 0310 	bic.w	r3, r3, #16
 8000ca0:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT1) ;
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	f023 0320 	bic.w	r3, r3, #32
 8000ca8:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC1M_BIT2) ;
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000cb0:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC1S_BIT0) ;
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	f023 0301 	bic.w	r3, r3, #1
 8000cb8:	613b      	str	r3, [r7, #16]
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC1S_BIT1) ;
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	f023 0302 	bic.w	r3, r3, #2
 8000cc0:	613b      	str	r3, [r7, #16]
			/* Select the Output Compare Mode1 */
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000cc8:	613b      	str	r3, [r7, #16]

			/* Set the Output Compare Polarity as active high */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1P_BIT);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f023 0302 	bic.w	r3, r3, #2
 8000cd0:	60fb      	str	r3, [r7, #12]

			/* Set the Output N Polarity as active high */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1NP_BIT) ;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f023 0308 	bic.w	r3, r3, #8
 8000cd8:	60fb      	str	r3, [r7, #12]
			/* Reset the Output N State */
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC1NE_BIT) ;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f023 0304 	bic.w	r3, r3, #4
 8000ce0:	60fb      	str	r3, [r7, #12]

			/* Reset the Output Compare and Output Compare N IDLE State */
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS1N_BIT) ;
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000ce8:	60bb      	str	r3, [r7, #8]
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS1N_BIT) ;
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000cf0:	60bb      	str	r3, [r7, #8]

			/* Write to TIM CR2 */
			TIM_1->CR2 = L_u32TempCR2;
 8000cf2:	4a55      	ldr	r2, [pc, #340]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	6053      	str	r3, [r2, #4]

			/* Write to TIM CCMR1 */
			TIM_1->CCMR1 = L_u32TempCCMRX;
 8000cf8:	4a53      	ldr	r2, [pc, #332]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	6193      	str	r3, [r2, #24]

			/* Set the Capture Compare Register value */
			TIM_1->CCR1 = A_u16CompareValue ;
 8000cfe:	4a52      	ldr	r2, [pc, #328]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d00:	88bb      	ldrh	r3, [r7, #4]
 8000d02:	6353      	str	r3, [r2, #52]	@ 0x34

			/* Write to TIM CCER */
			TIM_1->CCER = L_u32TempCCER;
 8000d04:	4a50      	ldr	r2, [pc, #320]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6213      	str	r3, [r2, #32]

			/* Set the Preload enable bit for channel1 */
			SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC1PE_BIT);
 8000d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a4e      	ldr	r2, [pc, #312]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	6193      	str	r3, [r2, #24]

			/* Configure the Output Fast mode */
			SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC1FE_BIT) ;
 8000d16:	4b4c      	ldr	r3, [pc, #304]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a4b      	ldr	r2, [pc, #300]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6193      	str	r3, [r2, #24]

			/* Enable the Capture compare channel */
			SET_BIT(TIM_1-> CCER , TIM1_CCER_CC1E_BIT) ;
 8000d22:	4b49      	ldr	r3, [pc, #292]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	4a48      	ldr	r2, [pc, #288]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6213      	str	r3, [r2, #32]

			/* Enable the main output */
			SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8000d2e:	4b46      	ldr	r3, [pc, #280]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	4a45      	ldr	r2, [pc, #276]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d38:	6453      	str	r3, [r2, #68]	@ 0x44

			/* Enable the timer */
			SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8000d3a:	4b43      	ldr	r3, [pc, #268]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a42      	ldr	r2, [pc, #264]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6013      	str	r3, [r2, #0]
	}
	else
	{
		// error type of A_u8TimerSelected
	}
}
 8000d46:	f000 be96 	b.w	8001a76 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_2)
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d17f      	bne.n	8000e50 <MTimer_voidPWM+0x218>
			if (channel2_set==0)
 8000d50:	4b3e      	ldr	r3, [pc, #248]	@ (8000e4c <MTimer_voidPWM+0x214>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d107      	bne.n	8000d68 <MTimer_voidPWM+0x130>
					GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN9,GPIO_OUTPUT_10M_AF_PP);
 8000d58:	2209      	movs	r2, #9
 8000d5a:	2109      	movs	r1, #9
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff fa07 	bl	8000170 <GPIO_voidSetPinMode>
					channel2_set=1;
 8000d62:	4b3a      	ldr	r3, [pc, #232]	@ (8000e4c <MTimer_voidPWM+0x214>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
			u32 L_u32TempCCMRX = 0 ;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
			u32 L_u32TempCCER  = 0 ;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
		    u32 L_u32TempCR2   = 0 ;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
		    CLR_BIT(TIM_1->CCER , TIM1_CCER_CC2E_BIT);
 8000d74:	4b34      	ldr	r3, [pc, #208]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	4a33      	ldr	r2, [pc, #204]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d7a:	f023 0310 	bic.w	r3, r3, #16
 8000d7e:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_1->CCER;
 8000d80:	4b31      	ldr	r3, [pc, #196]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d82:	6a1b      	ldr	r3, [r3, #32]
 8000d84:	61bb      	str	r3, [r7, #24]
		    L_u32TempCR2 = TIM_1->CR2;
 8000d86:	4b30      	ldr	r3, [pc, #192]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	617b      	str	r3, [r7, #20]
		    L_u32TempCCMRX = TIM_1->CCMR1;
 8000d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT0);
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d98:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT1);
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000da0:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT0);
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000da8:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT1);
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000db0:	61fb      	str	r3, [r7, #28]
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000db8:	61fb      	str	r3, [r7, #28]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2P_BIT);
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	f023 0320 	bic.w	r3, r3, #32
 8000dc0:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NP_BIT) ;
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000dc8:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NP_BIT) ;
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000dd0:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCCER , TIM1_CCER_CC2NE_BIT);
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000dd8:	61bb      	str	r3, [r7, #24]
		    CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS2_BIT);
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000de0:	617b      	str	r3, [r7, #20]
		    CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS2N_BIT);
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000de8:	617b      	str	r3, [r7, #20]
		    TIM_1->CR2 = L_u32TempCR2;
 8000dea:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	6053      	str	r3, [r2, #4]
		    TIM_1->CCMR1 = L_u32TempCCMRX;
 8000df0:	4a15      	ldr	r2, [pc, #84]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	6193      	str	r3, [r2, #24]
		    TIM_1->CCR2 = A_u16CompareValue;
 8000df6:	4a14      	ldr	r2, [pc, #80]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000df8:	88bb      	ldrh	r3, [r7, #4]
 8000dfa:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_1->CCER = L_u32TempCCER;
 8000dfc:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC2PE_BIT);
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a10      	ldr	r2, [pc, #64]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000e08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e0c:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_1->CCMR1 , TIM1_CCMR1_OC2FE_BIT) ;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000e14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e18:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_1-> CCER , TIM1_CCER_CC2E_BIT) ;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000e1c:	6a1b      	ldr	r3, [r3, #32]
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000e20:	f043 0310 	orr.w	r3, r3, #16
 8000e24:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	4a07      	ldr	r2, [pc, #28]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000e2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e30:	6453      	str	r3, [r2, #68]	@ 0x44
		    SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8000e32:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <MTimer_voidPWM+0x210>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6013      	str	r3, [r2, #0]
}
 8000e3e:	f000 be1a 	b.w	8001a76 <MTimer_voidPWM+0xe3e>
 8000e42:	bf00      	nop
 8000e44:	200000f5 	.word	0x200000f5
 8000e48:	40012c00 	.word	0x40012c00
 8000e4c:	200000f6 	.word	0x200000f6
		else if (A_u8Channel == TIM_CHANNEL_3)
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d16c      	bne.n	8000f30 <MTimer_voidPWM+0x2f8>
			u32 L_u32TempCCMRX = 0 ;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	@ 0x28
			u32 L_u32TempCCER  = 0 ;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
			u32 L_u32TempCR2   = 0 ;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC3E_BIT);
 8000e62:	4b9b      	ldr	r3, [pc, #620]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	4a9a      	ldr	r2, [pc, #616]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000e68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e6c:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_1->CCER;
 8000e6e:	4b98      	ldr	r3, [pc, #608]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
			L_u32TempCR2 = TIM_1->CR2;
 8000e74:	4b96      	ldr	r3, [pc, #600]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	623b      	str	r3, [r7, #32]
			L_u32TempCCMRX = TIM_1->CCMR2;
 8000e7a:	4b95      	ldr	r3, [pc, #596]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_OC3M_BIT0);
 8000e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e82:	f023 0310 	bic.w	r3, r3, #16
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_OC3M_BIT1);
 8000e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e8a:	f023 0320 	bic.w	r3, r3, #32
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_CC3S_BIT0);
 8000e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e92:	f023 0301 	bic.w	r3, r3, #1
 8000e96:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR2_CC3S_BIT1);
 8000e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e9a:	f023 0302 	bic.w	r3, r3, #2
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U);
 8000ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ea2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3P_BIT);
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eaa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NP_BIT) ;
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NP_BIT) ;
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC3NE_BIT);
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS3_BIT);
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
 8000eca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ece:	623b      	str	r3, [r7, #32]
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS3N_BIT);
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000ed6:	623b      	str	r3, [r7, #32]
			TIM_1->CR2 = L_u32TempCR2;
 8000ed8:	4a7d      	ldr	r2, [pc, #500]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000eda:	6a3b      	ldr	r3, [r7, #32]
 8000edc:	6053      	str	r3, [r2, #4]
			TIM_1->CCMR2 = L_u32TempCCMRX;
 8000ede:	4a7c      	ldr	r2, [pc, #496]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ee2:	61d3      	str	r3, [r2, #28]
			TIM_1->CCR3 = A_u16CompareValue;
 8000ee4:	4a7a      	ldr	r2, [pc, #488]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_1->CCER = L_u32TempCCER;
 8000eea:	4a79      	ldr	r2, [pc, #484]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eee:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC3PE_BIT);
 8000ef0:	4b77      	ldr	r3, [pc, #476]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	4a76      	ldr	r2, [pc, #472]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	61d3      	str	r3, [r2, #28]
		    SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC3FE_BIT) ;
 8000efc:	4b74      	ldr	r3, [pc, #464]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	4a73      	ldr	r2, [pc, #460]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	61d3      	str	r3, [r2, #28]
		    SET_BIT(TIM_1-> CCER , TIM1_CCER_CC3E_BIT) ;
 8000f08:	4b71      	ldr	r3, [pc, #452]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	4a70      	ldr	r2, [pc, #448]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000f0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f12:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8000f14:	4b6e      	ldr	r3, [pc, #440]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f18:	4a6d      	ldr	r2, [pc, #436]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f1e:	6453      	str	r3, [r2, #68]	@ 0x44
		    SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8000f20:	4b6b      	ldr	r3, [pc, #428]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a6a      	ldr	r2, [pc, #424]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	f000 bda3 	b.w	8001a76 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_4)
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	f040 859f 	bne.w	8001a76 <MTimer_voidPWM+0xe3e>
			u32 L_u32TempCCMRX = 0 ;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	637b      	str	r3, [r7, #52]	@ 0x34
			u32 L_u32TempCCER  = 0 ;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	@ 0x30
			u32 L_u32TempCR2   = 0 ;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
			CLR_BIT(TIM_1->CCER , TIM1_CCER_CC4E_BIT);
 8000f44:	4b62      	ldr	r3, [pc, #392]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4a61      	ldr	r2, [pc, #388]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000f4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f4e:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_1->CCER;
 8000f50:	4b5f      	ldr	r3, [pc, #380]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	633b      	str	r3, [r7, #48]	@ 0x30
			L_u32TempCR2 = TIM_1->CR2;
 8000f56:	4b5e      	ldr	r3, [pc, #376]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			L_u32TempCCMRX = TIM_1->CCMR2;
 8000f5c:	4b5c      	ldr	r3, [pc, #368]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT0);
 8000f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f68:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_OC2M_BIT1);
 8000f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000f70:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT0);
 8000f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCMRX , TIM1_CCMR1_CC2S_BIT1);
 8000f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000f80:	637b      	str	r3, [r7, #52]	@ 0x34
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8000f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f84:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000f88:	637b      	str	r3, [r7, #52]	@ 0x34
			CLR_BIT(L_u32TempCCER , TIM1_CCER_CC4P_BIT);
 8000f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000f90:	633b      	str	r3, [r7, #48]	@ 0x30
			CLR_BIT(L_u32TempCR2 , TIM1_CR2_OIS4_BIT);
 8000f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			TIM_1->CR2 = L_u32TempCR2;
 8000f9a:	4a4d      	ldr	r2, [pc, #308]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f9e:	6053      	str	r3, [r2, #4]
			TIM_1->CCMR2 = L_u32TempCCMRX;
 8000fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fa4:	61d3      	str	r3, [r2, #28]
			TIM_1->CCR4 = A_u16CompareValue;
 8000fa6:	4a4a      	ldr	r2, [pc, #296]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000fa8:	88bb      	ldrh	r3, [r7, #4]
 8000faa:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_1->CCER = L_u32TempCCER;
 8000fac:	4a48      	ldr	r2, [pc, #288]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fb0:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC4PE_BIT);
 8000fb2:	4b47      	ldr	r3, [pc, #284]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a46      	ldr	r2, [pc, #280]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000fb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fbc:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_1->CCMR2 , TIM1_CCMR2_OC4FE_BIT) ;
 8000fbe:	4b44      	ldr	r3, [pc, #272]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a43      	ldr	r2, [pc, #268]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000fc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fc8:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_1-> CCER , TIM1_CCER_CC4E_BIT) ;
 8000fca:	4b41      	ldr	r3, [pc, #260]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	4a40      	ldr	r2, [pc, #256]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000fd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fd4:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_1 ->BDTR , TIM1_BDTR_MOE_BIT ) ;
 8000fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	4a3d      	ldr	r2, [pc, #244]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000fdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fe0:	6453      	str	r3, [r2, #68]	@ 0x44
			SET_BIT(TIM_1 -> CR1 , TIM1_CR1_CEN_BIT) ;
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a3a      	ldr	r2, [pc, #232]	@ (80010d0 <MTimer_voidPWM+0x498>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6013      	str	r3, [r2, #0]
}
 8000fee:	f000 bd42 	b.w	8001a76 <MTimer_voidPWM+0xe3e>
	else if (A_u8TimerSelected == TIM2_TYPE)
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	f040 81a9 	bne.w	800134c <MTimer_voidPWM+0x714>
		if (A_u8Channel == TIM_CHANNEL_1)
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d169      	bne.n	80010d4 <MTimer_voidPWM+0x49c>
			u32 L_u32TempCCMRX = 0 ;
 8001000:	2300      	movs	r3, #0
 8001002:	643b      	str	r3, [r7, #64]	@ 0x40
			u32 L_u32TempCCER  = 0 ;
 8001004:	2300      	movs	r3, #0
 8001006:	63fb      	str	r3, [r7, #60]	@ 0x3c
			u32 L_u32TempCR2   = 0 ;
 8001008:	2300      	movs	r3, #0
 800100a:	63bb      	str	r3, [r7, #56]	@ 0x38
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 800100c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_2->CCER;
 800101c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	643b      	str	r3, [r7, #64]	@ 0x40
			L_u32TempCR2 = TIM_2->CR2;
 8001024:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	63bb      	str	r3, [r7, #56]	@ 0x38
			L_u32TempCCMRX = TIM_2->CCMR1;
 800102c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 8001034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001036:	f023 0310 	bic.w	r3, r3, #16
 800103a:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 800103c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800103e:	f023 0320 	bic.w	r3, r3, #32
 8001042:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 8001044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800104a:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 800104c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800104e:	f023 0301 	bic.w	r3, r3, #1
 8001052:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 8001054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001056:	f023 0302 	bic.w	r3, r3, #2
 800105a:	643b      	str	r3, [r7, #64]	@ 0x40
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 800105c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800105e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001062:	643b      	str	r3, [r7, #64]	@ 0x40
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 8001064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001066:	f023 0302 	bic.w	r3, r3, #2
 800106a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			TIM_2->CR2 = L_u32TempCR2;
 800106c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001072:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR1 = L_u32TempCCMRX;
 8001074:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800107a:	6193      	str	r3, [r2, #24]
			TIM_2->CCR1 = A_u16CompareValue;
 800107c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001080:	88bb      	ldrh	r3, [r7, #4]
 8001082:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM_2->CCER = L_u32TempCCER;
 8001084:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800108a:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 800108c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 800109c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 80010ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80010bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	f000 bcd3 	b.w	8001a76 <MTimer_voidPWM+0xe3e>
 80010d0:	40012c00 	.word	0x40012c00
		else if (A_u8Channel == TIM_CHANNEL_2)
 80010d4:	79bb      	ldrb	r3, [r7, #6]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d167      	bne.n	80011aa <MTimer_voidPWM+0x572>
			u32 L_u32TempCCMRX = 0 ;
 80010da:	2300      	movs	r3, #0
 80010dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
			u32 L_u32TempCCER  = 0 ;
 80010de:	2300      	movs	r3, #0
 80010e0:	64bb      	str	r3, [r7, #72]	@ 0x48
		    u32 L_u32TempCR2   = 0 ;
 80010e2:	2300      	movs	r3, #0
 80010e4:	647b      	str	r3, [r7, #68]	@ 0x44
		    CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 80010e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010f0:	f023 0310 	bic.w	r3, r3, #16
 80010f4:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_2->CCER;
 80010f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	64bb      	str	r3, [r7, #72]	@ 0x48
		    L_u32TempCR2 = TIM_2->CR2;
 80010fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	647b      	str	r3, [r7, #68]	@ 0x44
		    L_u32TempCCMRX = TIM_2->CCMR1;
 8001106:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 800110e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001110:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001114:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8001116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001118:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800111c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 800111e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001124:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8001126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001128:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800112c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 800112e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001130:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001134:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 8001136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001138:	f023 0320 	bic.w	r3, r3, #32
 800113c:	64bb      	str	r3, [r7, #72]	@ 0x48
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 800113e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001140:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001144:	64bb      	str	r3, [r7, #72]	@ 0x48
		    TIM_2->CR2 = L_u32TempCR2;
 8001146:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800114a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800114c:	6053      	str	r3, [r2, #4]
		    TIM_2->CCMR1 = L_u32TempCCMRX;
 800114e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001154:	6193      	str	r3, [r2, #24]
		    TIM_2->CCR2 = A_u16CompareValue;
 8001156:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800115a:	88bb      	ldrh	r3, [r7, #4]
 800115c:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_2->CCER = L_u32TempCCER;
 800115e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001164:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 8001166:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001170:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001174:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_2->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 8001176:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001180:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001184:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 8001186:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001190:	f043 0310 	orr.w	r3, r3, #16
 8001194:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001196:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6013      	str	r3, [r2, #0]
}
 80011a6:	f000 bc66 	b.w	8001a76 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_3)
 80011aa:	79bb      	ldrb	r3, [r7, #6]
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d166      	bne.n	800127e <MTimer_voidPWM+0x646>
			u32 L_u32TempCCMRX = 0 ;
 80011b0:	2300      	movs	r3, #0
 80011b2:	65bb      	str	r3, [r7, #88]	@ 0x58
			u32 L_u32TempCCER  = 0 ;
 80011b4:	2300      	movs	r3, #0
 80011b6:	657b      	str	r3, [r7, #84]	@ 0x54
			u32 L_u32TempCR2   = 0 ;
 80011b8:	2300      	movs	r3, #0
 80011ba:	653b      	str	r3, [r7, #80]	@ 0x50
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 80011bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011ca:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_2->CCER;
 80011cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	657b      	str	r3, [r7, #84]	@ 0x54
			L_u32TempCR2 = TIM_2->CR2;
 80011d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	653b      	str	r3, [r7, #80]	@ 0x50
			L_u32TempCCMRX = TIM_2->CCMR2;
 80011dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 80011e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011e6:	f023 0310 	bic.w	r3, r3, #16
 80011ea:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 80011ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011ee:	f023 0320 	bic.w	r3, r3, #32
 80011f2:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 80011f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 80011fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011fe:	f023 0302 	bic.w	r3, r3, #2
 8001202:	65bb      	str	r3, [r7, #88]	@ 0x58
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8001204:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001206:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800120a:	65bb      	str	r3, [r7, #88]	@ 0x58
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 800120c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800120e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001212:	657b      	str	r3, [r7, #84]	@ 0x54
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 8001214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001216:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800121a:	657b      	str	r3, [r7, #84]	@ 0x54
			TIM_2->CR2 = L_u32TempCR2;
 800121c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001222:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR2 = L_u32TempCCMRX;
 8001224:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001228:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800122a:	61d3      	str	r3, [r2, #28]
			TIM_2->CCR3 = A_u16CompareValue;
 800122c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_2->CCER = L_u32TempCCER;
 8001234:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800123a:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 800123c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001246:	f043 0308 	orr.w	r3, r3, #8
 800124a:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 800124c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 800125c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800126a:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 800126c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	e3fb      	b.n	8001a76 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_4)
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2b04      	cmp	r3, #4
 8001282:	f040 83f8 	bne.w	8001a76 <MTimer_voidPWM+0xe3e>
			u32 L_u32TempCCMRX = 0 ;
 8001286:	2300      	movs	r3, #0
 8001288:	667b      	str	r3, [r7, #100]	@ 0x64
			u32 L_u32TempCCER  = 0 ;
 800128a:	2300      	movs	r3, #0
 800128c:	663b      	str	r3, [r7, #96]	@ 0x60
			u32 L_u32TempCR2   = 0 ;
 800128e:	2300      	movs	r3, #0
 8001290:	65fb      	str	r3, [r7, #92]	@ 0x5c
			CLR_BIT(TIM_2->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 8001292:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800129c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012a0:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_2->CCER;
 80012a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	663b      	str	r3, [r7, #96]	@ 0x60
			L_u32TempCR2 = TIM_2->CR2;
 80012aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
			L_u32TempCCMRX = TIM_2->CCMR2;
 80012b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC4M_BIT0);
 80012ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012c0:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC4M_BIT1);
 80012c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80012c8:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC4S_BIT0);
 80012ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012d0:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC4S_BIT1);
 80012d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80012d8:	667b      	str	r3, [r7, #100]	@ 0x64
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 80012da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012dc:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80012e0:	667b      	str	r3, [r7, #100]	@ 0x64
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 80012e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80012e8:	663b      	str	r3, [r7, #96]	@ 0x60
			TIM_2->CR2 = L_u32TempCR2;
 80012ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012f0:	6053      	str	r3, [r2, #4]
			TIM_2->CCMR2 = L_u32TempCCMRX;
 80012f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012f8:	61d3      	str	r3, [r2, #28]
			TIM_2->CCR4 = A_u16CompareValue;
 80012fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_2->CCER = L_u32TempCCER;
 8001302:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001306:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001308:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 800130a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001314:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001318:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_2->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 800131a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001324:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001328:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_2-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 800132a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001334:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001338:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_2 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 800133a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6013      	str	r3, [r2, #0]
}
 800134a:	e394      	b.n	8001a76 <MTimer_voidPWM+0xe3e>
	else if (A_u8TimerSelected == TIM3_TYPE)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	2b03      	cmp	r3, #3
 8001350:	f040 81d1 	bne.w	80016f6 <MTimer_voidPWM+0xabe>
		if (A_u8Channel == TIM_CHANNEL_1)
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d166      	bne.n	8001428 <MTimer_voidPWM+0x7f0>
			u32 L_u32TempCCMRX = 0 ;
 800135a:	2300      	movs	r3, #0
 800135c:	673b      	str	r3, [r7, #112]	@ 0x70
			u32 L_u32TempCCER  = 0 ;
 800135e:	2300      	movs	r3, #0
 8001360:	66fb      	str	r3, [r7, #108]	@ 0x6c
			u32 L_u32TempCR2   = 0 ;
 8001362:	2300      	movs	r3, #0
 8001364:	66bb      	str	r3, [r7, #104]	@ 0x68
			CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001366:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_3->CCER;
 8001376:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	673b      	str	r3, [r7, #112]	@ 0x70
			L_u32TempCR2 = TIM_3->CR2;
 800137e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	66bb      	str	r3, [r7, #104]	@ 0x68
			L_u32TempCCMRX = TIM_3->CCMR1;
 8001386:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 800138e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001390:	f023 0310 	bic.w	r3, r3, #16
 8001394:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 8001396:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001398:	f023 0320 	bic.w	r3, r3, #32
 800139c:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 800139e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80013a4:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 80013a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 80013ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013b0:	f023 0302 	bic.w	r3, r3, #2
 80013b4:	673b      	str	r3, [r7, #112]	@ 0x70
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 80013b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013b8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80013bc:	673b      	str	r3, [r7, #112]	@ 0x70
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 80013be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013c0:	f023 0302 	bic.w	r3, r3, #2
 80013c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
			TIM_3->CR2 = L_u32TempCR2;
 80013c6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80013ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80013cc:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR1 = L_u32TempCCMRX;
 80013ce:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80013d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013d4:	6193      	str	r3, [r2, #24]
			TIM_3->CCR1 = A_u16CompareValue;
 80013d6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80013da:	88bb      	ldrh	r3, [r7, #4]
 80013dc:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM_3->CCER = L_u32TempCCER;
 80013de:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80013e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013e4:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 80013e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 80013f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001406:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001416:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6013      	str	r3, [r2, #0]
}
 8001426:	e326      	b.n	8001a76 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_2)
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d166      	bne.n	80014fc <MTimer_voidPWM+0x8c4>
			u32 L_u32TempCCMRX = 0 ;
 800142e:	2300      	movs	r3, #0
 8001430:	67fb      	str	r3, [r7, #124]	@ 0x7c
			u32 L_u32TempCCER  = 0 ;
 8001432:	2300      	movs	r3, #0
 8001434:	67bb      	str	r3, [r7, #120]	@ 0x78
		    u32 L_u32TempCR2   = 0 ;
 8001436:	2300      	movs	r3, #0
 8001438:	677b      	str	r3, [r7, #116]	@ 0x74
		    CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 800143a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001444:	f023 0310 	bic.w	r3, r3, #16
 8001448:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_3->CCER;
 800144a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	67bb      	str	r3, [r7, #120]	@ 0x78
		    L_u32TempCR2 = TIM_3->CR2;
 8001452:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	677b      	str	r3, [r7, #116]	@ 0x74
		    L_u32TempCCMRX = TIM_3->CCMR1;
 800145a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8001462:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001464:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001468:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 800146a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800146c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001470:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8001472:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001478:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 800147a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800147c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001480:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001482:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001484:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001488:	67fb      	str	r3, [r7, #124]	@ 0x7c
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 800148a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800148c:	f023 0320 	bic.w	r3, r3, #32
 8001490:	67bb      	str	r3, [r7, #120]	@ 0x78
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 8001492:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001494:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001498:	67bb      	str	r3, [r7, #120]	@ 0x78
		    TIM_3->CR2 = L_u32TempCR2;
 800149a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800149e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014a0:	6053      	str	r3, [r2, #4]
		    TIM_3->CCMR1 = L_u32TempCCMRX;
 80014a2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80014a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80014a8:	6193      	str	r3, [r2, #24]
		    TIM_3->CCR2 = A_u16CompareValue;
 80014aa:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80014ae:	88bb      	ldrh	r3, [r7, #4]
 80014b0:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_3->CCER = L_u32TempCCER;
 80014b2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80014b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014b8:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 80014ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80014c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014c8:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_3->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 80014ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80014d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014d8:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 80014da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80014e4:	f043 0310 	orr.w	r3, r3, #16
 80014e8:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80014ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6013      	str	r3, [r2, #0]
}
 80014fa:	e2bc      	b.n	8001a76 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_3)
 80014fc:	79bb      	ldrb	r3, [r7, #6]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d17d      	bne.n	80015fe <MTimer_voidPWM+0x9c6>
			u32 L_u32TempCCMRX = 0 ;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			u32 L_u32TempCCER  = 0 ;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			u32 L_u32TempCR2   = 0 ;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 8001514:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800151e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001522:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_3->CCER;
 8001524:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			L_u32TempCR2 = TIM_3->CR2;
 800152e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			L_u32TempCCMRX = TIM_3->CCMR2;
 8001538:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 8001542:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001546:	f023 0310 	bic.w	r3, r3, #16
 800154a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 800154e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001552:	f023 0320 	bic.w	r3, r3, #32
 8001556:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 800155a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800155e:	f023 0301 	bic.w	r3, r3, #1
 8001562:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 8001566:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800156a:	f023 0302 	bic.w	r3, r3, #2
 800156e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			L_u32TempCCMRX |= (TIM_PWM_MODE1 <<4U) ;
 8001572:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001576:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800157a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 800157e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001582:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001586:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 800158a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800158e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001592:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			TIM_3->CR2 = L_u32TempCR2;
 8001596:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800159a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800159e:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR2 = L_u32TempCCMRX;
 80015a0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015a8:	61d3      	str	r3, [r2, #28]
			TIM_3->CCR3 = A_u16CompareValue;
 80015aa:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015ae:	88bb      	ldrh	r3, [r7, #4]
 80015b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_3->CCER = L_u32TempCCER;
 80015b2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015ba:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 80015bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015c6:	f043 0308 	orr.w	r3, r3, #8
 80015ca:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 80015cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 80015dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ea:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80015ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	e23b      	b.n	8001a76 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_4)
 80015fe:	79bb      	ldrb	r3, [r7, #6]
 8001600:	2b04      	cmp	r3, #4
 8001602:	f040 8238 	bne.w	8001a76 <MTimer_voidPWM+0xe3e>
			u32 L_u32TempCCMRX = 0 ;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			u32 L_u32TempCCER  = 0 ;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			u32 L_u32TempCR2   = 0 ;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			CLR_BIT(TIM_3->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 8001618:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001626:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_3->CCER;
 8001628:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			L_u32TempCR2 = TIM_3->CR2;
 8001632:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			L_u32TempCCMRX = TIM_3->CCMR2;
 800163c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 8001646:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800164a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800164e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8001652:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001656:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800165a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 800165e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001662:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001666:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 800166a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800166e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001672:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001676:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800167a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800167e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 8001682:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001686:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800168a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			TIM_3->CR2 = L_u32TempCR2;
 800168e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001692:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001696:	6053      	str	r3, [r2, #4]
			TIM_3->CCMR2 = L_u32TempCCMRX;
 8001698:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800169c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016a0:	61d3      	str	r3, [r2, #28]
			TIM_3->CCR4 = A_u16CompareValue;
 80016a2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016a6:	88bb      	ldrh	r3, [r7, #4]
 80016a8:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_3->CCER = L_u32TempCCER;
 80016aa:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016b2:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 80016b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016c2:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_3->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 80016c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016d2:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_3-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 80016d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016e2:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_3 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80016e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	e1bf      	b.n	8001a76 <MTimer_voidPWM+0xe3e>
	else if (A_u8TimerSelected == TIM4_TYPE)
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	f040 81bc 	bne.w	8001a76 <MTimer_voidPWM+0xe3e>
		if (A_u8Channel == TIM_CHANNEL_1)
 80016fe:	79bb      	ldrb	r3, [r7, #6]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d16c      	bne.n	80017de <MTimer_voidPWM+0xba6>
			u32 L_u32TempCCMRX = 0 ;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			u32 L_u32TempCCER  = 0 ;
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			u32 L_u32TempCR2   = 0 ;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 8001716:	4ba2      	ldr	r3, [pc, #648]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4aa1      	ldr	r2, [pc, #644]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6213      	str	r3, [r2, #32]
			L_u32TempCCMRX = TIM_4->CCER;
 8001722:	4b9f      	ldr	r3, [pc, #636]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			L_u32TempCR2 = TIM_4->CR2;
 800172a:	4b9d      	ldr	r3, [pc, #628]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			L_u32TempCCMRX = TIM_4->CCMR1;
 8001732:	4b9b      	ldr	r3, [pc, #620]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT0) ;
 800173a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800173e:	f023 0310 	bic.w	r3, r3, #16
 8001742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT1) ;
 8001746:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800174a:	f023 0320 	bic.w	r3, r3, #32
 800174e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC1M_BIT2) ;
 8001752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800175a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT0) ;
 800175e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC1S_BIT1) ;
 800176a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800176e:	f023 0302 	bic.w	r3, r3, #2
 8001772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 8001776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800177a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800177e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC1P_BIT);
 8001782:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001786:	f023 0302 	bic.w	r3, r3, #2
 800178a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			TIM_4->CR2 = L_u32TempCR2;
 800178e:	4a84      	ldr	r2, [pc, #528]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001790:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001794:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR1 = L_u32TempCCMRX;
 8001796:	4a82      	ldr	r2, [pc, #520]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001798:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800179c:	6193      	str	r3, [r2, #24]
			TIM_4->CCR1 = A_u16CompareValue;
 800179e:	4a80      	ldr	r2, [pc, #512]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80017a0:	88bb      	ldrh	r3, [r7, #4]
 80017a2:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM_4->CCER = L_u32TempCCER;
 80017a4:	4a7e      	ldr	r2, [pc, #504]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80017a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80017aa:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1PE_BIT);
 80017ac:	4b7c      	ldr	r3, [pc, #496]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a7b      	ldr	r2, [pc, #492]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	6193      	str	r3, [r2, #24]
			SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC1FE_BIT) ;
 80017b8:	4b79      	ldr	r3, [pc, #484]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a78      	ldr	r2, [pc, #480]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC1E_BIT) ;
 80017c4:	4b76      	ldr	r3, [pc, #472]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4a75      	ldr	r2, [pc, #468]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80017d0:	4b73      	ldr	r3, [pc, #460]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a72      	ldr	r2, [pc, #456]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	e14b      	b.n	8001a76 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_2)
 80017de:	79bb      	ldrb	r3, [r7, #6]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d16c      	bne.n	80018be <MTimer_voidPWM+0xc86>
			u32 L_u32TempCCMRX = 0 ;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			u32 L_u32TempCCER  = 0 ;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    u32 L_u32TempCR2   = 0 ;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		    CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC2E_BIT);
 80017f6:	4b6a      	ldr	r3, [pc, #424]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a69      	ldr	r2, [pc, #420]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80017fc:	f023 0310 	bic.w	r3, r3, #16
 8001800:	6213      	str	r3, [r2, #32]
		    L_u32TempCCER = TIM_4->CCER;
 8001802:	4b67      	ldr	r3, [pc, #412]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    L_u32TempCR2 = TIM_4->CR2;
 800180a:	4b65      	ldr	r3, [pc, #404]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		    L_u32TempCCMRX = TIM_4->CCMR1;
 8001812:	4b63      	ldr	r3, [pc, #396]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 800181a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800181e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001822:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 8001826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800182a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800182e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 8001832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001836:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800183a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 800183e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001842:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001846:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 800184a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800184e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001852:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2P_BIT);
 8001856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800185a:	f023 0320 	bic.w	r3, r3, #32
 800185e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC2NP_BIT) ;
 8001862:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800186a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		    TIM_4->CR2 = L_u32TempCR2;
 800186e:	4a4c      	ldr	r2, [pc, #304]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001870:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001874:	6053      	str	r3, [r2, #4]
		    TIM_4->CCMR1 = L_u32TempCCMRX;
 8001876:	4a4a      	ldr	r2, [pc, #296]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800187c:	6193      	str	r3, [r2, #24]
		    TIM_4->CCR2 = A_u16CompareValue;
 800187e:	4a48      	ldr	r2, [pc, #288]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	6393      	str	r3, [r2, #56]	@ 0x38
		    TIM_4->CCER = L_u32TempCCER;
 8001884:	4a46      	ldr	r2, [pc, #280]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001886:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800188a:	6213      	str	r3, [r2, #32]
		    SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2PE_BIT);
 800188c:	4b44      	ldr	r3, [pc, #272]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a43      	ldr	r2, [pc, #268]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001892:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001896:	6193      	str	r3, [r2, #24]
		    SET_BIT (TIM_4->CCMR1 , TIM2_TO_TIM5_CCMR1_OC2FE_BIT) ;
 8001898:	4b41      	ldr	r3, [pc, #260]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a40      	ldr	r2, [pc, #256]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 800189e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a2:	6193      	str	r3, [r2, #24]
		    SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC2E_BIT) ;
 80018a4:	4b3e      	ldr	r3, [pc, #248]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4a3d      	ldr	r2, [pc, #244]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	6213      	str	r3, [r2, #32]
		    SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 80018b0:	4b3b      	ldr	r3, [pc, #236]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a3a      	ldr	r2, [pc, #232]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	e0db      	b.n	8001a76 <MTimer_voidPWM+0xe3e>
		else if (A_u8Channel == TIM_CHANNEL_3)
 80018be:	79bb      	ldrb	r3, [r7, #6]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d16f      	bne.n	80019a4 <MTimer_voidPWM+0xd6c>
			u32 L_u32TempCCMRX = 0 ;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			u32 L_u32TempCCER  = 0 ;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			u32 L_u32TempCR2   = 0 ;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC3E_BIT);
 80018d6:	4b32      	ldr	r3, [pc, #200]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4a31      	ldr	r2, [pc, #196]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80018dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018e0:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_4->CCER;
 80018e2:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			L_u32TempCR2 = TIM_4->CR2;
 80018ea:	4b2d      	ldr	r3, [pc, #180]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			L_u32TempCCMRX = TIM_4->CCMR2;
 80018f2:	4b2b      	ldr	r3, [pc, #172]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT0);
 80018fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018fe:	f023 0310 	bic.w	r3, r3, #16
 8001902:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_OC3M_BIT1);
 8001906:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800190a:	f023 0320 	bic.w	r3, r3, #32
 800190e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT0);
 8001912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001916:	f023 0301 	bic.w	r3, r3, #1
 800191a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR2_CC3S_BIT1);
 800191e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001922:	f023 0302 	bic.w	r3, r3, #2
 8001926:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 4U) ;
 800192a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800192e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001932:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3P_BIT);
 8001936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800193a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800193e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC3NP_BIT) ;
 8001942:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001946:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800194a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			TIM_4->CR2 = L_u32TempCR2;
 800194e:	4a14      	ldr	r2, [pc, #80]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001954:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR2 = L_u32TempCCMRX;
 8001956:	4a12      	ldr	r2, [pc, #72]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001958:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800195c:	61d3      	str	r3, [r2, #28]
			TIM_4->CCR3 = A_u16CompareValue;
 800195e:	4a10      	ldr	r2, [pc, #64]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	63d3      	str	r3, [r2, #60]	@ 0x3c
			TIM_4->CCER = L_u32TempCCER;
 8001964:	4a0e      	ldr	r2, [pc, #56]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001966:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800196a:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3PE_BIT);
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	4a0b      	ldr	r2, [pc, #44]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001972:	f043 0308 	orr.w	r3, r3, #8
 8001976:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC3FE_BIT) ;
 8001978:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	4a08      	ldr	r2, [pc, #32]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC3E_BIT) ;
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800198e:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001990:	4b03      	ldr	r3, [pc, #12]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a02      	ldr	r2, [pc, #8]	@ (80019a0 <MTimer_voidPWM+0xd68>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	e06b      	b.n	8001a76 <MTimer_voidPWM+0xe3e>
 800199e:	bf00      	nop
 80019a0:	40008000 	.word	0x40008000
		else if (A_u8Channel == TIM_CHANNEL_4)
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d165      	bne.n	8001a76 <MTimer_voidPWM+0xe3e>
			u32 L_u32TempCCMRX = 0 ;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			u32 L_u32TempCCER  = 0 ;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			u32 L_u32TempCR2   = 0 ;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			CLR_BIT(TIM_4->CCER , TIM2_TO_TIM5_CCER_CC4E_BIT);
 80019bc:	4b30      	ldr	r3, [pc, #192]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 80019c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019c6:	6213      	str	r3, [r2, #32]
			L_u32TempCCER = TIM_4->CCER;
 80019c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			L_u32TempCR2 = TIM_4->CR2;
 80019d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			L_u32TempCCMRX = TIM_4->CCMR2;
 80019d8:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT0);
 80019e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_OC2M_BIT1);
 80019ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80019f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT0);
 80019f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCMRX , TIM2_TO_TIM5_CCMR1_CC2S_BIT1);
 8001a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			L_u32TempCCMRX |= (TIM_PWM_MODE1 << 12U) ;
 8001a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a14:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001a18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
			CLR_BIT(L_u32TempCCER , TIM2_TO_TIM5_CCER_CC4P_BIT);
 8001a1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001a24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
			TIM_4->CR2 = L_u32TempCR2;
 8001a28:	4a15      	ldr	r2, [pc, #84]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 8001a2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a2e:	6053      	str	r3, [r2, #4]
			TIM_4->CCMR2 = L_u32TempCCMRX;
 8001a30:	4a13      	ldr	r2, [pc, #76]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 8001a32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a36:	61d3      	str	r3, [r2, #28]
			TIM_4->CCR4 = A_u16CompareValue;
 8001a38:	4a11      	ldr	r2, [pc, #68]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 8001a3a:	88bb      	ldrh	r3, [r7, #4]
 8001a3c:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM_4->CCER = L_u32TempCCER;
 8001a3e:	4a10      	ldr	r2, [pc, #64]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 8001a40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a44:	6213      	str	r3, [r2, #32]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4PE_BIT);
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 8001a4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a50:	61d3      	str	r3, [r2, #28]
			SET_BIT (TIM_4->CCMR2 , TIM2_TO_TIM5_CCMR2_OC4FE_BIT) ;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 8001a58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a5c:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM_4-> CCER , TIM2_TO_TIM5_CCER_CC4E_BIT) ;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a07      	ldr	r2, [pc, #28]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 8001a64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a68:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM_4 -> CR1 , TIM2_TO_TIM5_CR1_CEN_BIT) ;
 8001a6a:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <MTimer_voidPWM+0xe48>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6013      	str	r3, [r2, #0]
}
 8001a76:	bf00      	nop
 8001a78:	37c8      	adds	r7, #200	@ 0xc8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40008000 	.word	0x40008000

<<<<<<< HEAD
08001f10 <MUART_voidEnable>:
=======
08001a84 <MUART_voidEnable>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

    A_xUART_Type->SR = 0;				    	          							             ;
}

void MUART_voidEnable( USART_t *A_xUART_Type)
{
<<<<<<< HEAD
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	SET_BIT(A_xUART_Type->CR1,MUSART_CR1_UE_BIT);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	60da      	str	r2, [r3, #12]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
	...

08001f30 <MUART_u8ReceiveByteASynch>:
	}
	return L_u8Data;
}

void MUART_u8ReceiveByteASynch (  USART_t *A_xUART_Type )
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	if(local_u8_RX_Busyflag == 0)
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <MUART_u8ReceiveByteASynch+0x2c>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d108      	bne.n	8001f52 <MUART_u8ReceiveByteASynch+0x22>
	{
		local_u8_RX_Busyflag=1;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MUART_u8ReceiveByteASynch+0x2c>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]
		SET_BIT(A_xUART_Type->CR1 , MUSART_CR1_RXNEIE_BIT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f043 0220 	orr.w	r2, r3, #32
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60da      	str	r2, [r3, #12]
	}
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	200000f7 	.word	0x200000f7

08001f60 <MUART_u8ReadDataRegister>:
{
	USARTx->SR = 0;
}

u8 MUART_u8ReadDataRegister(USART_t *USARTx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	return USARTx -> DR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	b2db      	uxtb	r3, r3
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <MUART1_voidSetCallBack>:

void MUART1_voidSetCallBack( void (*ptr) (void) )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

	MUSART1_CallBack =ptr;
 8001f80:	4a03      	ldr	r2, [pc, #12]	; (8001f90 <MUART1_voidSetCallBack+0x18>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6013      	str	r3, [r2, #0]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	200001d0 	.word	0x200001d0

08001f94 <USART1_IRQHandler>:
=======
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	SET_BIT(A_xUART_Type->CR1,MUSART_CR1_UE_BIT);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	60da      	str	r2, [r3, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
	...

08001aa4 <MUART_u8ReceiveByteSynchNonBlocking>:
		L_u8Iterator++;
	}
}

u8 MUART_u8ReceiveByteSynchNonBlocking (  USART_t *A_xUART_Type )
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	u8  L_u8Data    = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]
	u32 L_u8TimeOut = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
	while ((READ_BIT(A_xUART_Type->SR,MUSART_SR_RXNE_BIT)==0) && (L_u8TimeOut < THRESHOLD_VALUE) )
 8001ab4:	e002      	b.n	8001abc <MUART_u8ReceiveByteSynchNonBlocking+0x18>
	{
		L_u8TimeOut++;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
	while ((READ_BIT(A_xUART_Type->SR,MUSART_SR_RXNE_BIT)==0) && (L_u8TimeOut < THRESHOLD_VALUE) )
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d103      	bne.n	8001ad0 <MUART_u8ReceiveByteSynchNonBlocking+0x2c>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4a09      	ldr	r2, [pc, #36]	@ (8001af0 <MUART_u8ReceiveByteSynchNonBlocking+0x4c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d9f2      	bls.n	8001ab6 <MUART_u8ReceiveByteSynchNonBlocking+0x12>
	}
	if (L_u8TimeOut==THRESHOLD_VALUE)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4a08      	ldr	r2, [pc, #32]	@ (8001af4 <MUART_u8ReceiveByteSynchNonBlocking+0x50>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d102      	bne.n	8001ade <MUART_u8ReceiveByteSynchNonBlocking+0x3a>
	{
		L_u8Data = 255;
 8001ad8:	23ff      	movs	r3, #255	@ 0xff
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	e002      	b.n	8001ae4 <MUART_u8ReceiveByteSynchNonBlocking+0x40>
	}
	else
	{
		L_u8Data = A_xUART_Type->DR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	73fb      	strb	r3, [r7, #15]
	}
	return L_u8Data;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	0007a11f 	.word	0x0007a11f
 8001af4:	0007a120 	.word	0x0007a120

08001af8 <MUART1_voidSetCallBack>:
{
	return USARTx -> DR;
}

void MUART1_voidSetCallBack( void (*ptr) (void) )
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	MUSART1_CallBack =ptr;
 8001b00:	4a03      	ldr	r2, [pc, #12]	@ (8001b10 <MUART1_voidSetCallBack+0x18>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	200000f8 	.word	0x200000f8

08001b14 <USART1_IRQHandler>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
	MUSART3_CallBack = ptr;
}

/*IRQ of UART1*/
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
    UART1->SR = 0;
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <USART1_IRQHandler+0x24>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
    //G_u8DataFromUART = MUART_u8ReadDataRegister(UART1);
    local_u8_RX_Busyflag=0;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <USART1_IRQHandler+0x28>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
	if(MUSART1_CallBack!=NULL)
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <USART1_IRQHandler+0x2c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <USART1_IRQHandler+0x1e>
	{
		MUSART1_CallBack();
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <USART1_IRQHandler+0x2c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4798      	blx	r3
	}
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40013800 	.word	0x40013800
 8001fbc:	200000f7 	.word	0x200000f7
 8001fc0:	200001d0 	.word	0x200001d0

08001fc4 <USART2_IRQHandler>:
=======
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
    UART1->SR = 0;
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <USART1_IRQHandler+0x1c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
	if(MUSART1_CallBack!=NULL)
 8001b1e:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <USART1_IRQHandler+0x20>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <USART1_IRQHandler+0x18>
	{
		MUSART1_CallBack();
 8001b26:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <USART1_IRQHandler+0x20>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4798      	blx	r3
	}
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40013800 	.word	0x40013800
 8001b34:	200000f8 	.word	0x200000f8

08001b38 <USART2_IRQHandler>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

/*IRQ of UART2*/
void USART2_IRQHandler(void)
{
<<<<<<< HEAD
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	UART2->SR = 0;
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <USART2_IRQHandler+0x24>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
	//G_u8DataFromUART = MUART_u8ReadDataRegister(UART2);
	local_u8_RX_Busyflag=0;
 8001fce:	4b07      	ldr	r3, [pc, #28]	; (8001fec <USART2_IRQHandler+0x28>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
	if(MUSART2_CallBack!=NULL)
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <USART2_IRQHandler+0x2c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <USART2_IRQHandler+0x1e>
	{
		MUSART2_CallBack();
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <USART2_IRQHandler+0x2c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4798      	blx	r3
	}
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40004400 	.word	0x40004400
 8001fec:	200000f7 	.word	0x200000f7
 8001ff0:	200001cc 	.word	0x200001cc

08001ff4 <HUltrasonic_voidInit>:
=======
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	UART2->SR = 0;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <USART2_IRQHandler+0x1c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
	if(MUSART2_CallBack!=NULL)
 8001b42:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <USART2_IRQHandler+0x20>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <USART2_IRQHandler+0x18>
	{
		MUSART2_CallBack();
 8001b4a:	4b03      	ldr	r3, [pc, #12]	@ (8001b58 <USART2_IRQHandler+0x20>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4798      	blx	r3
	}
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40004400 	.word	0x40004400
 8001b58:	200000fc 	.word	0x200000fc

08001b5c <HUltrasonic_voidInit>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
	return 0;
}


void HUltrasonic_voidInit (u8 Ultra_Num)
{
<<<<<<< HEAD
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
	switch(Ultra_Num)
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	3b01      	subs	r3, #1
 8002002:	2b03      	cmp	r3, #3
 8002004:	d84a      	bhi.n	800209c <HUltrasonic_voidInit+0xa8>
 8002006:	a201      	add	r2, pc, #4	; (adr r2, 800200c <HUltrasonic_voidInit+0x18>)
 8002008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200c:	0800201d 	.word	0x0800201d
 8002010:	0800203d 	.word	0x0800203d
 8002014:	0800205d 	.word	0x0800205d
 8002018:	0800207d 	.word	0x0800207d
=======
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
	switch(Ultra_Num)
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d84a      	bhi.n	8001c04 <HUltrasonic_voidInit+0xa8>
 8001b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b74 <HUltrasonic_voidInit+0x18>)
 8001b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b74:	08001b85 	.word	0x08001b85
 8001b78:	08001ba5 	.word	0x08001ba5
 8001b7c:	08001bc5 	.word	0x08001bc5
 8001b80:	08001be5 	.word	0x08001be5
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
	{
	case 1:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic1_TrigPort,Ultrasonic1_TrigPin,GPIO_OUTPUT_2M_PP);
<<<<<<< HEAD
 800201c:	2202      	movs	r2, #2
 800201e:	2109      	movs	r1, #9
 8002020:	2001      	movs	r0, #1
 8002022:	f7fe fae9 	bl	80005f8 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic1_TrigPort, Ultrasonic1_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic1_EchoPort,Ultrasonic1_EchoPin,GPIO_INPUT_PU_PD);
 8002026:	2208      	movs	r2, #8
 8002028:	210a      	movs	r1, #10
 800202a:	2001      	movs	r0, #1
 800202c:	f7fe fae4 	bl	80005f8 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic1_EchoPort, Ultrasonic1_EchoPin, GPIO_INPUT_PD);
 8002030:	2200      	movs	r2, #0
 8002032:	210a      	movs	r1, #10
 8002034:	2001      	movs	r0, #1
 8002036:	f7fe fc81 	bl	800093c <GPIO_voidSetPinValue>
		break;
 800203a:	e02f      	b.n	800209c <HUltrasonic_voidInit+0xa8>
	case 2:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic2_TrigPort,Ultrasonic2_TrigPin,GPIO_OUTPUT_2M_PP);
 800203c:	2202      	movs	r2, #2
 800203e:	2102      	movs	r1, #2
 8002040:	2001      	movs	r0, #1
 8002042:	f7fe fad9 	bl	80005f8 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic2_TrigPort, Ultrasonic2_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic2_EchoPort,Ultrasonic2_EchoPin,GPIO_INPUT_PU_PD);
 8002046:	2208      	movs	r2, #8
 8002048:	2103      	movs	r1, #3
 800204a:	2001      	movs	r0, #1
 800204c:	f7fe fad4 	bl	80005f8 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic2_EchoPort, Ultrasonic2_EchoPin, GPIO_INPUT_PD);
 8002050:	2200      	movs	r2, #0
 8002052:	2103      	movs	r1, #3
 8002054:	2001      	movs	r0, #1
 8002056:	f7fe fc71 	bl	800093c <GPIO_voidSetPinValue>
		break;
 800205a:	e01f      	b.n	800209c <HUltrasonic_voidInit+0xa8>
	case 3:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic3_TrigPort,Ultrasonic3_TrigPin,GPIO_OUTPUT_2M_PP);
 800205c:	2202      	movs	r2, #2
 800205e:	2104      	movs	r1, #4
 8002060:	2001      	movs	r0, #1
 8002062:	f7fe fac9 	bl	80005f8 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic3_TrigPort, Ultrasonic3_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic3_EchoPort,Ultrasonic3_EchoPin,GPIO_INPUT_PU_PD);
 8002066:	2208      	movs	r2, #8
 8002068:	2105      	movs	r1, #5
 800206a:	2001      	movs	r0, #1
 800206c:	f7fe fac4 	bl	80005f8 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic3_EchoPort, Ultrasonic3_EchoPin, GPIO_INPUT_PD);
 8002070:	2200      	movs	r2, #0
 8002072:	2105      	movs	r1, #5
 8002074:	2001      	movs	r0, #1
 8002076:	f7fe fc61 	bl	800093c <GPIO_voidSetPinValue>
		break;
 800207a:	e00f      	b.n	800209c <HUltrasonic_voidInit+0xa8>
	case 4:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic4_TrigPort,Ultrasonic4_TrigPin,GPIO_OUTPUT_2M_PP);
 800207c:	2202      	movs	r2, #2
 800207e:	2107      	movs	r1, #7
 8002080:	2001      	movs	r0, #1
 8002082:	f7fe fab9 	bl	80005f8 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic3_TrigPort, Ultrasonic3_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic4_EchoPort,Ultrasonic4_EchoPin,GPIO_INPUT_PU_PD);
 8002086:	2208      	movs	r2, #8
 8002088:	2108      	movs	r1, #8
 800208a:	2001      	movs	r0, #1
 800208c:	f7fe fab4 	bl	80005f8 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic4_EchoPort, Ultrasonic4_EchoPin, GPIO_INPUT_PD);
 8002090:	2200      	movs	r2, #0
 8002092:	2108      	movs	r1, #8
 8002094:	2001      	movs	r0, #1
 8002096:	f7fe fc51 	bl	800093c <GPIO_voidSetPinValue>
		break;
 800209a:	bf00      	nop
	}
	/*initialize systick timer*/
	MSTK_voidInit() ;
 800209c:	f7fe fe96 	bl	8000dcc <MSTK_voidInit>
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <ProcessingFun>:
=======
 8001b84:	2202      	movs	r2, #2
 8001b86:	2109      	movs	r1, #9
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f7fe faf1 	bl	8000170 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic1_TrigPort, Ultrasonic1_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic1_EchoPort,Ultrasonic1_EchoPin,GPIO_INPUT_PU_PD);
 8001b8e:	2208      	movs	r2, #8
 8001b90:	210a      	movs	r1, #10
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7fe faec 	bl	8000170 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic1_EchoPort, Ultrasonic1_EchoPin, GPIO_INPUT_PD);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	210a      	movs	r1, #10
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7fe fc87 	bl	80004b0 <GPIO_voidSetPinValue>
		break;
 8001ba2:	e02f      	b.n	8001c04 <HUltrasonic_voidInit+0xa8>
	case 2:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic2_TrigPort,Ultrasonic2_TrigPin,GPIO_OUTPUT_2M_PP);
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7fe fae1 	bl	8000170 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic2_TrigPort, Ultrasonic2_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic2_EchoPort,Ultrasonic2_EchoPin,GPIO_INPUT_PU_PD);
 8001bae:	2208      	movs	r2, #8
 8001bb0:	2103      	movs	r1, #3
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f7fe fadc 	bl	8000170 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic2_EchoPort, Ultrasonic2_EchoPin, GPIO_INPUT_PD);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2103      	movs	r1, #3
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f7fe fc77 	bl	80004b0 <GPIO_voidSetPinValue>
		break;
 8001bc2:	e01f      	b.n	8001c04 <HUltrasonic_voidInit+0xa8>
	case 3:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic3_TrigPort,Ultrasonic3_TrigPin,GPIO_OUTPUT_2M_PP);
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	2104      	movs	r1, #4
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7fe fad1 	bl	8000170 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic3_TrigPort, Ultrasonic3_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic3_EchoPort,Ultrasonic3_EchoPin,GPIO_INPUT_PU_PD);
 8001bce:	2208      	movs	r2, #8
 8001bd0:	2105      	movs	r1, #5
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f7fe facc 	bl	8000170 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic3_EchoPort, Ultrasonic3_EchoPin, GPIO_INPUT_PD);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2105      	movs	r1, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7fe fc67 	bl	80004b0 <GPIO_voidSetPinValue>
		break;
 8001be2:	e00f      	b.n	8001c04 <HUltrasonic_voidInit+0xa8>
	case 4:
		/*initialize Trig pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic4_TrigPort,Ultrasonic4_TrigPin,GPIO_OUTPUT_2M_PP);
 8001be4:	2202      	movs	r2, #2
 8001be6:	2107      	movs	r1, #7
 8001be8:	2001      	movs	r0, #1
 8001bea:	f7fe fac1 	bl	8000170 <GPIO_voidSetPinMode>
		//MGPIO_voidSetPinOutputType(Ultrasonic3_TrigPort, Ultrasonic3_TrigPin, GPIO_OTYPE_PUSHPULL);
		/*initialize Echo pin from GPIO*/
		GPIO_voidSetPinMode(Ultrasonic4_EchoPort,Ultrasonic4_EchoPin,GPIO_INPUT_PU_PD);
 8001bee:	2208      	movs	r2, #8
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7fe fabc 	bl	8000170 <GPIO_voidSetPinMode>
		GPIO_voidSetPinValue(Ultrasonic4_EchoPort, Ultrasonic4_EchoPin, GPIO_INPUT_PD);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2108      	movs	r1, #8
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f7fe fc57 	bl	80004b0 <GPIO_voidSetPinValue>
		break;
 8001c02:	bf00      	nop
	}
	/*initialize systick timer*/
	MSTK_voidInit() ;
 8001c04:	f7fe fe9c 	bl	8000940 <MSTK_voidInit>
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <ProcessingFun>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

u8 APP_G_u8DataFromUART;

u16 G_u8DataAfterProccing = 0 ;
u8 ProcessingFun (void)
{
<<<<<<< HEAD
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	/*Mapping data from UART*/
	switch (APP_G_u8DataFromUART)
 80020ac:	4bc1      	ldr	r3, [pc, #772]	; (80023b4 <ProcessingFun+0x30c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	3b31      	subs	r3, #49	; 0x31
 80020b2:	2b44      	cmp	r3, #68	; 0x44
 80020b4:	f200 80fc 	bhi.w	80022b0 <ProcessingFun+0x208>
 80020b8:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <ProcessingFun+0x18>)
 80020ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020be:	bf00      	nop
 80020c0:	08002251 	.word	0x08002251
 80020c4:	0800225f 	.word	0x0800225f
 80020c8:	0800226d 	.word	0x0800226d
 80020cc:	0800227b 	.word	0x0800227b
 80020d0:	08002289 	.word	0x08002289
 80020d4:	08002297 	.word	0x08002297
 80020d8:	080022a5 	.word	0x080022a5
 80020dc:	080022b1 	.word	0x080022b1
 80020e0:	080022b1 	.word	0x080022b1
 80020e4:	080022b1 	.word	0x080022b1
 80020e8:	080022b1 	.word	0x080022b1
 80020ec:	080022b1 	.word	0x080022b1
 80020f0:	080022b1 	.word	0x080022b1
 80020f4:	080022b1 	.word	0x080022b1
 80020f8:	080022b1 	.word	0x080022b1
 80020fc:	080022b1 	.word	0x080022b1
 8002100:	080022b1 	.word	0x080022b1
 8002104:	08002219 	.word	0x08002219
 8002108:	080022b1 	.word	0x080022b1
 800210c:	080022b1 	.word	0x080022b1
 8002110:	080022b1 	.word	0x080022b1
 8002114:	080021d5 	.word	0x080021d5
 8002118:	08002243 	.word	0x08002243
 800211c:	080022b1 	.word	0x080022b1
 8002120:	080021ef 	.word	0x080021ef
 8002124:	0800220b 	.word	0x0800220b
 8002128:	080022b1 	.word	0x080022b1
 800212c:	08002235 	.word	0x08002235
 8002130:	080022b1 	.word	0x080022b1
 8002134:	080022b1 	.word	0x080022b1
 8002138:	080022b1 	.word	0x080022b1
 800213c:	080022b1 	.word	0x080022b1
 8002140:	080022b1 	.word	0x080022b1
 8002144:	080021fd 	.word	0x080021fd
 8002148:	080021e1 	.word	0x080021e1
 800214c:	080022b1 	.word	0x080022b1
 8002150:	08002227 	.word	0x08002227
 8002154:	080022b1 	.word	0x080022b1
 8002158:	080022b1 	.word	0x080022b1
 800215c:	080022b1 	.word	0x080022b1
 8002160:	080022b1 	.word	0x080022b1
 8002164:	080022b1 	.word	0x080022b1
 8002168:	080022b1 	.word	0x080022b1
 800216c:	080022b1 	.word	0x080022b1
 8002170:	080022b1 	.word	0x080022b1
 8002174:	080022b1 	.word	0x080022b1
 8002178:	080022b1 	.word	0x080022b1
 800217c:	080022b1 	.word	0x080022b1
 8002180:	080022b1 	.word	0x080022b1
 8002184:	08002219 	.word	0x08002219
 8002188:	080022b1 	.word	0x080022b1
 800218c:	080022b1 	.word	0x080022b1
 8002190:	080022b1 	.word	0x080022b1
 8002194:	080021d5 	.word	0x080021d5
 8002198:	08002243 	.word	0x08002243
 800219c:	080022b1 	.word	0x080022b1
 80021a0:	080021ef 	.word	0x080021ef
 80021a4:	0800220b 	.word	0x0800220b
 80021a8:	080022b1 	.word	0x080022b1
 80021ac:	08002235 	.word	0x08002235
 80021b0:	080022b1 	.word	0x080022b1
 80021b4:	080022b1 	.word	0x080022b1
 80021b8:	080022b1 	.word	0x080022b1
 80021bc:	080022b1 	.word	0x080022b1
 80021c0:	080022b1 	.word	0x080022b1
 80021c4:	080021fd 	.word	0x080021fd
 80021c8:	080021e1 	.word	0x080021e1
 80021cc:	080022b1 	.word	0x080022b1
 80021d0:	08002227 	.word	0x08002227
=======
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
	/*Mapping data from UART*/
	switch (G_u8DataFromUART)
 8001c14:	4bc1      	ldr	r3, [pc, #772]	@ (8001f1c <ProcessingFun+0x30c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	3b31      	subs	r3, #49	@ 0x31
 8001c1a:	2b44      	cmp	r3, #68	@ 0x44
 8001c1c:	f200 80fc 	bhi.w	8001e18 <ProcessingFun+0x208>
 8001c20:	a201      	add	r2, pc, #4	@ (adr r2, 8001c28 <ProcessingFun+0x18>)
 8001c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c26:	bf00      	nop
 8001c28:	08001db9 	.word	0x08001db9
 8001c2c:	08001dc7 	.word	0x08001dc7
 8001c30:	08001dd5 	.word	0x08001dd5
 8001c34:	08001de3 	.word	0x08001de3
 8001c38:	08001df1 	.word	0x08001df1
 8001c3c:	08001dff 	.word	0x08001dff
 8001c40:	08001e0d 	.word	0x08001e0d
 8001c44:	08001e19 	.word	0x08001e19
 8001c48:	08001e19 	.word	0x08001e19
 8001c4c:	08001e19 	.word	0x08001e19
 8001c50:	08001e19 	.word	0x08001e19
 8001c54:	08001e19 	.word	0x08001e19
 8001c58:	08001e19 	.word	0x08001e19
 8001c5c:	08001e19 	.word	0x08001e19
 8001c60:	08001e19 	.word	0x08001e19
 8001c64:	08001e19 	.word	0x08001e19
 8001c68:	08001e19 	.word	0x08001e19
 8001c6c:	08001d81 	.word	0x08001d81
 8001c70:	08001e19 	.word	0x08001e19
 8001c74:	08001e19 	.word	0x08001e19
 8001c78:	08001e19 	.word	0x08001e19
 8001c7c:	08001d3d 	.word	0x08001d3d
 8001c80:	08001dab 	.word	0x08001dab
 8001c84:	08001e19 	.word	0x08001e19
 8001c88:	08001d57 	.word	0x08001d57
 8001c8c:	08001d73 	.word	0x08001d73
 8001c90:	08001e19 	.word	0x08001e19
 8001c94:	08001d9d 	.word	0x08001d9d
 8001c98:	08001e19 	.word	0x08001e19
 8001c9c:	08001e19 	.word	0x08001e19
 8001ca0:	08001e19 	.word	0x08001e19
 8001ca4:	08001e19 	.word	0x08001e19
 8001ca8:	08001e19 	.word	0x08001e19
 8001cac:	08001d65 	.word	0x08001d65
 8001cb0:	08001d49 	.word	0x08001d49
 8001cb4:	08001e19 	.word	0x08001e19
 8001cb8:	08001d8f 	.word	0x08001d8f
 8001cbc:	08001e19 	.word	0x08001e19
 8001cc0:	08001e19 	.word	0x08001e19
 8001cc4:	08001e19 	.word	0x08001e19
 8001cc8:	08001e19 	.word	0x08001e19
 8001ccc:	08001e19 	.word	0x08001e19
 8001cd0:	08001e19 	.word	0x08001e19
 8001cd4:	08001e19 	.word	0x08001e19
 8001cd8:	08001e19 	.word	0x08001e19
 8001cdc:	08001e19 	.word	0x08001e19
 8001ce0:	08001e19 	.word	0x08001e19
 8001ce4:	08001e19 	.word	0x08001e19
 8001ce8:	08001e19 	.word	0x08001e19
 8001cec:	08001d81 	.word	0x08001d81
 8001cf0:	08001e19 	.word	0x08001e19
 8001cf4:	08001e19 	.word	0x08001e19
 8001cf8:	08001e19 	.word	0x08001e19
 8001cfc:	08001d3d 	.word	0x08001d3d
 8001d00:	08001dab 	.word	0x08001dab
 8001d04:	08001e19 	.word	0x08001e19
 8001d08:	08001d57 	.word	0x08001d57
 8001d0c:	08001d73 	.word	0x08001d73
 8001d10:	08001e19 	.word	0x08001e19
 8001d14:	08001d9d 	.word	0x08001d9d
 8001d18:	08001e19 	.word	0x08001e19
 8001d1c:	08001e19 	.word	0x08001e19
 8001d20:	08001e19 	.word	0x08001e19
 8001d24:	08001e19 	.word	0x08001e19
 8001d28:	08001e19 	.word	0x08001e19
 8001d2c:	08001d65 	.word	0x08001d65
 8001d30:	08001d49 	.word	0x08001d49
 8001d34:	08001e19 	.word	0x08001e19
 8001d38:	08001d8f 	.word	0x08001d8f
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
	{
	case 'F':
	case 'f':
		G_xMy_Data.Direction = Go ;
<<<<<<< HEAD
 80021d4:	4a78      	ldr	r2, [pc, #480]	; (80023b8 <ProcessingFun+0x310>)
 80021d6:	7813      	ldrb	r3, [r2, #0]
 80021d8:	f36f 0303 	bfc	r3, #0, #4
 80021dc:	7013      	strb	r3, [r2, #0]
		break;
 80021de:	e067      	b.n	80022b0 <ProcessingFun+0x208>
	case 'S':
	case 's':
		G_xMy_Data.Direction = Stop ;
 80021e0:	4a75      	ldr	r2, [pc, #468]	; (80023b8 <ProcessingFun+0x310>)
 80021e2:	7813      	ldrb	r3, [r2, #0]
 80021e4:	2108      	movs	r1, #8
 80021e6:	f361 0303 	bfi	r3, r1, #0, #4
 80021ea:	7013      	strb	r3, [r2, #0]
		break;
 80021ec:	e060      	b.n	80022b0 <ProcessingFun+0x208>
	case 'I':
	case 'i':
		G_xMy_Data.Direction = Forward_Right ;
 80021ee:	4a72      	ldr	r2, [pc, #456]	; (80023b8 <ProcessingFun+0x310>)
 80021f0:	7813      	ldrb	r3, [r2, #0]
 80021f2:	2104      	movs	r1, #4
 80021f4:	f361 0303 	bfi	r3, r1, #0, #4
 80021f8:	7013      	strb	r3, [r2, #0]
		break;
 80021fa:	e059      	b.n	80022b0 <ProcessingFun+0x208>
	case 'R':
	case 'r':
		G_xMy_Data.Direction = Right ;
 80021fc:	4a6e      	ldr	r2, [pc, #440]	; (80023b8 <ProcessingFun+0x310>)
 80021fe:	7813      	ldrb	r3, [r2, #0]
 8002200:	2102      	movs	r1, #2
 8002202:	f361 0303 	bfi	r3, r1, #0, #4
 8002206:	7013      	strb	r3, [r2, #0]
		break;
 8002208:	e052      	b.n	80022b0 <ProcessingFun+0x208>
	case 'J':
	case 'j':
		G_xMy_Data.Direction = Backward_Right ;
 800220a:	4a6b      	ldr	r2, [pc, #428]	; (80023b8 <ProcessingFun+0x310>)
 800220c:	7813      	ldrb	r3, [r2, #0]
 800220e:	2106      	movs	r1, #6
 8002210:	f361 0303 	bfi	r3, r1, #0, #4
 8002214:	7013      	strb	r3, [r2, #0]
		break;
 8002216:	e04b      	b.n	80022b0 <ProcessingFun+0x208>
	case 'B':
	case 'b':
		G_xMy_Data.Direction = Back ;
 8002218:	4a67      	ldr	r2, [pc, #412]	; (80023b8 <ProcessingFun+0x310>)
 800221a:	7813      	ldrb	r3, [r2, #0]
 800221c:	2101      	movs	r1, #1
 800221e:	f361 0303 	bfi	r3, r1, #0, #4
 8002222:	7013      	strb	r3, [r2, #0]
		break;
 8002224:	e044      	b.n	80022b0 <ProcessingFun+0x208>
	case 'U':
	case 'u':
		G_xMy_Data.Direction = Backward_Left ;
 8002226:	4a64      	ldr	r2, [pc, #400]	; (80023b8 <ProcessingFun+0x310>)
 8002228:	7813      	ldrb	r3, [r2, #0]
 800222a:	2107      	movs	r1, #7
 800222c:	f361 0303 	bfi	r3, r1, #0, #4
 8002230:	7013      	strb	r3, [r2, #0]
		break;
 8002232:	e03d      	b.n	80022b0 <ProcessingFun+0x208>
	case 'L':
	case 'l':
		G_xMy_Data.Direction = Left ;
 8002234:	4a60      	ldr	r2, [pc, #384]	; (80023b8 <ProcessingFun+0x310>)
 8002236:	7813      	ldrb	r3, [r2, #0]
 8002238:	2103      	movs	r1, #3
 800223a:	f361 0303 	bfi	r3, r1, #0, #4
 800223e:	7013      	strb	r3, [r2, #0]
		break;
 8002240:	e036      	b.n	80022b0 <ProcessingFun+0x208>
	case 'G':
	case 'g':
		G_xMy_Data.Direction = Forward_Left ;
 8002242:	4a5d      	ldr	r2, [pc, #372]	; (80023b8 <ProcessingFun+0x310>)
 8002244:	7813      	ldrb	r3, [r2, #0]
 8002246:	2105      	movs	r1, #5
 8002248:	f361 0303 	bfi	r3, r1, #0, #4
 800224c:	7013      	strb	r3, [r2, #0]
		break;
 800224e:	e02f      	b.n	80022b0 <ProcessingFun+0x208>
	case '1':
		G_xMy_Data.Speed = Speed1 ;
 8002250:	4a59      	ldr	r2, [pc, #356]	; (80023b8 <ProcessingFun+0x310>)
 8002252:	7813      	ldrb	r3, [r2, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	f361 1306 	bfi	r3, r1, #4, #3
 800225a:	7013      	strb	r3, [r2, #0]
		break;
 800225c:	e028      	b.n	80022b0 <ProcessingFun+0x208>
	case '2':
		G_xMy_Data.Speed = Speed2 ;
 800225e:	4a56      	ldr	r2, [pc, #344]	; (80023b8 <ProcessingFun+0x310>)
 8002260:	7813      	ldrb	r3, [r2, #0]
 8002262:	2102      	movs	r1, #2
 8002264:	f361 1306 	bfi	r3, r1, #4, #3
 8002268:	7013      	strb	r3, [r2, #0]
		break;
 800226a:	e021      	b.n	80022b0 <ProcessingFun+0x208>
	case '3':
		G_xMy_Data.Speed = Speed3 ;
 800226c:	4a52      	ldr	r2, [pc, #328]	; (80023b8 <ProcessingFun+0x310>)
 800226e:	7813      	ldrb	r3, [r2, #0]
 8002270:	2103      	movs	r1, #3
 8002272:	f361 1306 	bfi	r3, r1, #4, #3
 8002276:	7013      	strb	r3, [r2, #0]
		break;
 8002278:	e01a      	b.n	80022b0 <ProcessingFun+0x208>
	case '4':
		G_xMy_Data.Speed = Speed4 ;
 800227a:	4a4f      	ldr	r2, [pc, #316]	; (80023b8 <ProcessingFun+0x310>)
 800227c:	7813      	ldrb	r3, [r2, #0]
 800227e:	2104      	movs	r1, #4
 8002280:	f361 1306 	bfi	r3, r1, #4, #3
 8002284:	7013      	strb	r3, [r2, #0]
		break;
 8002286:	e013      	b.n	80022b0 <ProcessingFun+0x208>
	case '5':
		G_xMy_Data.Speed = Speed5 ;
 8002288:	4a4b      	ldr	r2, [pc, #300]	; (80023b8 <ProcessingFun+0x310>)
 800228a:	7813      	ldrb	r3, [r2, #0]
 800228c:	2105      	movs	r1, #5
 800228e:	f361 1306 	bfi	r3, r1, #4, #3
 8002292:	7013      	strb	r3, [r2, #0]
		break;
 8002294:	e00c      	b.n	80022b0 <ProcessingFun+0x208>
	case '6':
		G_xMy_Data.Speed = Speed6 ;
 8002296:	4a48      	ldr	r2, [pc, #288]	; (80023b8 <ProcessingFun+0x310>)
 8002298:	7813      	ldrb	r3, [r2, #0]
 800229a:	2106      	movs	r1, #6
 800229c:	f361 1306 	bfi	r3, r1, #4, #3
 80022a0:	7013      	strb	r3, [r2, #0]
		break;
 80022a2:	e005      	b.n	80022b0 <ProcessingFun+0x208>
	case '7':
		G_xMy_Data.Speed = Speed7 ;
 80022a4:	4a44      	ldr	r2, [pc, #272]	; (80023b8 <ProcessingFun+0x310>)
 80022a6:	7813      	ldrb	r3, [r2, #0]
 80022a8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80022ac:	7013      	strb	r3, [r2, #0]
		break;
 80022ae:	bf00      	nop
	}

	G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 80022b0:	4b42      	ldr	r3, [pc, #264]	; (80023bc <ProcessingFun+0x314>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	f023 030f 	bic.w	r3, r3, #15
 80022ba:	b21a      	sxth	r2, r3
 80022bc:	4b3e      	ldr	r3, [pc, #248]	; (80023b8 <ProcessingFun+0x310>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	b21b      	sxth	r3, r3
 80022c8:	4313      	orrs	r3, r2
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <ProcessingFun+0x314>)
 80022d0:	801a      	strh	r2, [r3, #0]
	G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
 80022d2:	4b3a      	ldr	r3, [pc, #232]	; (80023bc <ProcessingFun+0x314>)
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022dc:	b21a      	sxth	r2, r3
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <ProcessingFun+0x310>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	b21b      	sxth	r3, r3
 80022ec:	4313      	orrs	r3, r2
 80022ee:	b21b      	sxth	r3, r3
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	4b32      	ldr	r3, [pc, #200]	; (80023bc <ProcessingFun+0x314>)
 80022f4:	801a      	strh	r2, [r3, #0]

	if (G_xMy_Data.Direction == Go)
 80022f6:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <ProcessingFun+0x310>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d102      	bne.n	800230a <ProcessingFun+0x262>
		{
			//MSTK_voidSetBusyWait(1000) ;
			APP_voidGoTasks() ;
 8002304:	f000 f970 	bl	80025e8 <APP_voidGoTasks>
 8002308:	e04f      	b.n	80023aa <ProcessingFun+0x302>
		}
	else if (G_xMy_Data.Direction == Stop)
 800230a:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <ProcessingFun+0x310>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b08      	cmp	r3, #8
 8002316:	d102      	bne.n	800231e <ProcessingFun+0x276>
		{
			//MSTK_voidSetBusyWait(1000) ;
			APP_VoidStop();
 8002318:	f000 f92c 	bl	8002574 <APP_VoidStop>
 800231c:	e045      	b.n	80023aa <ProcessingFun+0x302>
		}
	else if (G_xMy_Data.Direction == Back)
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <ProcessingFun+0x310>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d102      	bne.n	8002332 <ProcessingFun+0x28a>
		{
			//MSTK_voidSetBusyWait(1000) ;
			APP_voidBackTasks () ;
 800232c:	f000 fa4a 	bl	80027c4 <APP_voidBackTasks>
 8002330:	e03b      	b.n	80023aa <ProcessingFun+0x302>
		}
	else if (G_xMy_Data.Direction == Backward_Right)
 8002332:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <ProcessingFun+0x310>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b06      	cmp	r3, #6
 800233e:	d102      	bne.n	8002346 <ProcessingFun+0x29e>
		{
			//MSTK_voidSetBusyWait(1000) ;
			APP_voidBackward_RightTasks () ;
 8002340:	f000 fb2e 	bl	80029a0 <APP_voidBackward_RightTasks>
 8002344:	e031      	b.n	80023aa <ProcessingFun+0x302>
		}
	else if (G_xMy_Data.Direction == Backward_Left)
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <ProcessingFun+0x310>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b07      	cmp	r3, #7
 8002352:	d102      	bne.n	800235a <ProcessingFun+0x2b2>
		{
			//MSTK_voidSetBusyWait(1000) ;
			APP_voidBackward_LEFTTasks () ;
 8002354:	f000 fc12 	bl	8002b7c <APP_voidBackward_LEFTTasks>
 8002358:	e027      	b.n	80023aa <ProcessingFun+0x302>
		}
	else if (G_xMy_Data.Direction == Right || G_xMy_Data.Direction == Left )
 800235a:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <ProcessingFun+0x310>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d006      	beq.n	8002376 <ProcessingFun+0x2ce>
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <ProcessingFun+0x310>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b03      	cmp	r3, #3
 8002374:	d102      	bne.n	800237c <ProcessingFun+0x2d4>
		{
			APP_voidRight_LeftTasks () ;
 8002376:	f000 fcef 	bl	8002d58 <APP_voidRight_LeftTasks>
 800237a:	e016      	b.n	80023aa <ProcessingFun+0x302>
		}
	else if (G_xMy_Data.Direction == Forward_Right)
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <ProcessingFun+0x310>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b04      	cmp	r3, #4
 8002388:	d102      	bne.n	8002390 <ProcessingFun+0x2e8>
		{
			//MSTK_voidSetBusyWait(1000) ;
			APP_voidForward_RightTasks() ;
 800238a:	f000 fceb 	bl	8002d64 <APP_voidForward_RightTasks>
 800238e:	e00c      	b.n	80023aa <ProcessingFun+0x302>
		}
	else if (G_xMy_Data.Direction == Forward_Left)
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <ProcessingFun+0x310>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b05      	cmp	r3, #5
 800239c:	d105      	bne.n	80023aa <ProcessingFun+0x302>
		{
			MSTK_voidSetBusyWait(1000) ;
 800239e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023a2:	f7fe fd1f 	bl	8000de4 <MSTK_voidSetBusyWait>
			APP_voidForward_LeftTasks() ;
 80023a6:	f000 fdcb 	bl	8002f40 <APP_voidForward_LeftTasks>
		}
	return G_u8DataAfterProccing ;
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <ProcessingFun+0x314>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b2db      	uxtb	r3, r3

}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	200001d8 	.word	0x200001d8
 80023b8:	200000f8 	.word	0x200000f8
 80023bc:	20000100 	.word	0x20000100

080023c0 <init_conf>:
=======
 8001d3c:	4a78      	ldr	r2, [pc, #480]	@ (8001f20 <ProcessingFun+0x310>)
 8001d3e:	7813      	ldrb	r3, [r2, #0]
 8001d40:	f36f 0303 	bfc	r3, #0, #4
 8001d44:	7013      	strb	r3, [r2, #0]
		break;
 8001d46:	e067      	b.n	8001e18 <ProcessingFun+0x208>
	case 'S':
	case 's':
		G_xMy_Data.Direction = Stop ;
 8001d48:	4a75      	ldr	r2, [pc, #468]	@ (8001f20 <ProcessingFun+0x310>)
 8001d4a:	7813      	ldrb	r3, [r2, #0]
 8001d4c:	2108      	movs	r1, #8
 8001d4e:	f361 0303 	bfi	r3, r1, #0, #4
 8001d52:	7013      	strb	r3, [r2, #0]
		break;
 8001d54:	e060      	b.n	8001e18 <ProcessingFun+0x208>
	case 'I':
	case 'i':
		G_xMy_Data.Direction = Forward_Right ;
 8001d56:	4a72      	ldr	r2, [pc, #456]	@ (8001f20 <ProcessingFun+0x310>)
 8001d58:	7813      	ldrb	r3, [r2, #0]
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	f361 0303 	bfi	r3, r1, #0, #4
 8001d60:	7013      	strb	r3, [r2, #0]
		break;
 8001d62:	e059      	b.n	8001e18 <ProcessingFun+0x208>
	case 'R':
	case 'r':
		G_xMy_Data.Direction = Right ;
 8001d64:	4a6e      	ldr	r2, [pc, #440]	@ (8001f20 <ProcessingFun+0x310>)
 8001d66:	7813      	ldrb	r3, [r2, #0]
 8001d68:	2102      	movs	r1, #2
 8001d6a:	f361 0303 	bfi	r3, r1, #0, #4
 8001d6e:	7013      	strb	r3, [r2, #0]
		break;
 8001d70:	e052      	b.n	8001e18 <ProcessingFun+0x208>
	case 'J':
	case 'j':
		G_xMy_Data.Direction = Backward_Right ;
 8001d72:	4a6b      	ldr	r2, [pc, #428]	@ (8001f20 <ProcessingFun+0x310>)
 8001d74:	7813      	ldrb	r3, [r2, #0]
 8001d76:	2106      	movs	r1, #6
 8001d78:	f361 0303 	bfi	r3, r1, #0, #4
 8001d7c:	7013      	strb	r3, [r2, #0]
		break;
 8001d7e:	e04b      	b.n	8001e18 <ProcessingFun+0x208>
	case 'B':
	case 'b':
		G_xMy_Data.Direction = Back ;
 8001d80:	4a67      	ldr	r2, [pc, #412]	@ (8001f20 <ProcessingFun+0x310>)
 8001d82:	7813      	ldrb	r3, [r2, #0]
 8001d84:	2101      	movs	r1, #1
 8001d86:	f361 0303 	bfi	r3, r1, #0, #4
 8001d8a:	7013      	strb	r3, [r2, #0]
		break;
 8001d8c:	e044      	b.n	8001e18 <ProcessingFun+0x208>
	case 'U':
	case 'u':
		G_xMy_Data.Direction = Backward_Left ;
 8001d8e:	4a64      	ldr	r2, [pc, #400]	@ (8001f20 <ProcessingFun+0x310>)
 8001d90:	7813      	ldrb	r3, [r2, #0]
 8001d92:	2107      	movs	r1, #7
 8001d94:	f361 0303 	bfi	r3, r1, #0, #4
 8001d98:	7013      	strb	r3, [r2, #0]
		break;
 8001d9a:	e03d      	b.n	8001e18 <ProcessingFun+0x208>
	case 'L':
	case 'l':
		G_xMy_Data.Direction = Left ;
 8001d9c:	4a60      	ldr	r2, [pc, #384]	@ (8001f20 <ProcessingFun+0x310>)
 8001d9e:	7813      	ldrb	r3, [r2, #0]
 8001da0:	2103      	movs	r1, #3
 8001da2:	f361 0303 	bfi	r3, r1, #0, #4
 8001da6:	7013      	strb	r3, [r2, #0]
		break;
 8001da8:	e036      	b.n	8001e18 <ProcessingFun+0x208>
	case 'G':
	case 'g':
		G_xMy_Data.Direction = Forward_Left ;
 8001daa:	4a5d      	ldr	r2, [pc, #372]	@ (8001f20 <ProcessingFun+0x310>)
 8001dac:	7813      	ldrb	r3, [r2, #0]
 8001dae:	2105      	movs	r1, #5
 8001db0:	f361 0303 	bfi	r3, r1, #0, #4
 8001db4:	7013      	strb	r3, [r2, #0]
		break;
 8001db6:	e02f      	b.n	8001e18 <ProcessingFun+0x208>
	case '1':
		G_xMy_Data.Speed = Speed1 ;
 8001db8:	4a59      	ldr	r2, [pc, #356]	@ (8001f20 <ProcessingFun+0x310>)
 8001dba:	7813      	ldrb	r3, [r2, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	f361 1306 	bfi	r3, r1, #4, #3
 8001dc2:	7013      	strb	r3, [r2, #0]
		break;
 8001dc4:	e028      	b.n	8001e18 <ProcessingFun+0x208>
	case '2':
		G_xMy_Data.Speed = Speed2 ;
 8001dc6:	4a56      	ldr	r2, [pc, #344]	@ (8001f20 <ProcessingFun+0x310>)
 8001dc8:	7813      	ldrb	r3, [r2, #0]
 8001dca:	2102      	movs	r1, #2
 8001dcc:	f361 1306 	bfi	r3, r1, #4, #3
 8001dd0:	7013      	strb	r3, [r2, #0]
		break;
 8001dd2:	e021      	b.n	8001e18 <ProcessingFun+0x208>
	case '3':
		G_xMy_Data.Speed = Speed3 ;
 8001dd4:	4a52      	ldr	r2, [pc, #328]	@ (8001f20 <ProcessingFun+0x310>)
 8001dd6:	7813      	ldrb	r3, [r2, #0]
 8001dd8:	2103      	movs	r1, #3
 8001dda:	f361 1306 	bfi	r3, r1, #4, #3
 8001dde:	7013      	strb	r3, [r2, #0]
		break;
 8001de0:	e01a      	b.n	8001e18 <ProcessingFun+0x208>
	case '4':
		G_xMy_Data.Speed = Speed4 ;
 8001de2:	4a4f      	ldr	r2, [pc, #316]	@ (8001f20 <ProcessingFun+0x310>)
 8001de4:	7813      	ldrb	r3, [r2, #0]
 8001de6:	2104      	movs	r1, #4
 8001de8:	f361 1306 	bfi	r3, r1, #4, #3
 8001dec:	7013      	strb	r3, [r2, #0]
		break;
 8001dee:	e013      	b.n	8001e18 <ProcessingFun+0x208>
	case '5':
		G_xMy_Data.Speed = Speed5 ;
 8001df0:	4a4b      	ldr	r2, [pc, #300]	@ (8001f20 <ProcessingFun+0x310>)
 8001df2:	7813      	ldrb	r3, [r2, #0]
 8001df4:	2105      	movs	r1, #5
 8001df6:	f361 1306 	bfi	r3, r1, #4, #3
 8001dfa:	7013      	strb	r3, [r2, #0]
		break;
 8001dfc:	e00c      	b.n	8001e18 <ProcessingFun+0x208>
	case '6':
		G_xMy_Data.Speed = Speed6 ;
 8001dfe:	4a48      	ldr	r2, [pc, #288]	@ (8001f20 <ProcessingFun+0x310>)
 8001e00:	7813      	ldrb	r3, [r2, #0]
 8001e02:	2106      	movs	r1, #6
 8001e04:	f361 1306 	bfi	r3, r1, #4, #3
 8001e08:	7013      	strb	r3, [r2, #0]
		break;
 8001e0a:	e005      	b.n	8001e18 <ProcessingFun+0x208>
	case '7':
		G_xMy_Data.Speed = Speed7 ;
 8001e0c:	4a44      	ldr	r2, [pc, #272]	@ (8001f20 <ProcessingFun+0x310>)
 8001e0e:	7813      	ldrb	r3, [r2, #0]
 8001e10:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001e14:	7013      	strb	r3, [r2, #0]
		break;
 8001e16:	bf00      	nop
	}

	G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8001e18:	4b42      	ldr	r3, [pc, #264]	@ (8001f24 <ProcessingFun+0x314>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	f023 030f 	bic.w	r3, r3, #15
 8001e22:	b21a      	sxth	r2, r3
 8001e24:	4b3e      	ldr	r3, [pc, #248]	@ (8001f20 <ProcessingFun+0x310>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	b21b      	sxth	r3, r3
 8001e30:	4313      	orrs	r3, r2
 8001e32:	b21b      	sxth	r3, r3
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	4b3b      	ldr	r3, [pc, #236]	@ (8001f24 <ProcessingFun+0x314>)
 8001e38:	801a      	strh	r2, [r3, #0]
	G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f24 <ProcessingFun+0x314>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b21b      	sxth	r3, r3
 8001e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e44:	b21a      	sxth	r2, r3
 8001e46:	4b36      	ldr	r3, [pc, #216]	@ (8001f20 <ProcessingFun+0x310>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	4313      	orrs	r3, r2
 8001e56:	b21b      	sxth	r3, r3
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	4b32      	ldr	r3, [pc, #200]	@ (8001f24 <ProcessingFun+0x314>)
 8001e5c:	801a      	strh	r2, [r3, #0]

	if (G_xMy_Data.Direction == Go)
 8001e5e:	4b30      	ldr	r3, [pc, #192]	@ (8001f20 <ProcessingFun+0x310>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <ProcessingFun+0x262>
		{
			//MSTK_voidSetBusyWait(1000) ;
			APP_voidGoTasks() ;
 8001e6c:	f000 f970 	bl	8002150 <APP_voidGoTasks>
 8001e70:	e04f      	b.n	8001f12 <ProcessingFun+0x302>
		}
	else if (G_xMy_Data.Direction == Stop)
 8001e72:	4b2b      	ldr	r3, [pc, #172]	@ (8001f20 <ProcessingFun+0x310>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d102      	bne.n	8001e86 <ProcessingFun+0x276>
		{
			//MSTK_voidSetBusyWait(1000) ;
			APP_VoidStop();
 8001e80:	f000 f92c 	bl	80020dc <APP_VoidStop>
 8001e84:	e045      	b.n	8001f12 <ProcessingFun+0x302>
		}
	else if (G_xMy_Data.Direction == Back)
 8001e86:	4b26      	ldr	r3, [pc, #152]	@ (8001f20 <ProcessingFun+0x310>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d102      	bne.n	8001e9a <ProcessingFun+0x28a>
		{
			//MSTK_voidSetBusyWait(1000) ;
			APP_voidBackTasks () ;
 8001e94:	f000 fa36 	bl	8002304 <APP_voidBackTasks>
 8001e98:	e03b      	b.n	8001f12 <ProcessingFun+0x302>
		}
	else if (G_xMy_Data.Direction == Backward_Right)
 8001e9a:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <ProcessingFun+0x310>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b06      	cmp	r3, #6
 8001ea6:	d102      	bne.n	8001eae <ProcessingFun+0x29e>
		{
			//MSTK_voidSetBusyWait(1000) ;
			APP_voidBackward_RightTasks () ;
 8001ea8:	f000 fb06 	bl	80024b8 <APP_voidBackward_RightTasks>
 8001eac:	e031      	b.n	8001f12 <ProcessingFun+0x302>
		}
	else if (G_xMy_Data.Direction == Backward_Left)
 8001eae:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <ProcessingFun+0x310>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b07      	cmp	r3, #7
 8001eba:	d102      	bne.n	8001ec2 <ProcessingFun+0x2b2>
		{
			//MSTK_voidSetBusyWait(1000) ;
			APP_voidBackward_LEFTTasks () ;
 8001ebc:	f000 fbd6 	bl	800266c <APP_voidBackward_LEFTTasks>
 8001ec0:	e027      	b.n	8001f12 <ProcessingFun+0x302>
		}
	else if (G_xMy_Data.Direction == Right || G_xMy_Data.Direction == Left )
 8001ec2:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <ProcessingFun+0x310>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d006      	beq.n	8001ede <ProcessingFun+0x2ce>
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <ProcessingFun+0x310>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d102      	bne.n	8001ee4 <ProcessingFun+0x2d4>
		{
			APP_voidRight_LeftTasks () ;
 8001ede:	f000 fc9f 	bl	8002820 <APP_voidRight_LeftTasks>
 8001ee2:	e016      	b.n	8001f12 <ProcessingFun+0x302>
		}
	else if (G_xMy_Data.Direction == Forward_Right)
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <ProcessingFun+0x310>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d102      	bne.n	8001ef8 <ProcessingFun+0x2e8>
		{
			//MSTK_voidSetBusyWait(1000) ;
			APP_voidForward_RightTasks() ;
 8001ef2:	f000 fc9b 	bl	800282c <APP_voidForward_RightTasks>
 8001ef6:	e00c      	b.n	8001f12 <ProcessingFun+0x302>
		}
	else if (G_xMy_Data.Direction == Forward_Left)
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <ProcessingFun+0x310>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b05      	cmp	r3, #5
 8001f04:	d105      	bne.n	8001f12 <ProcessingFun+0x302>
		{
			MSTK_voidSetBusyWait(1000) ;
 8001f06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f0a:	f7fe fd25 	bl	8000958 <MSTK_voidSetBusyWait>
			APP_voidForward_LeftTasks() ;
 8001f0e:	f000 fd67 	bl	80029e0 <APP_voidForward_LeftTasks>
		}
	return G_u8DataAfterProccing ;
 8001f12:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <ProcessingFun+0x314>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	b2db      	uxtb	r3, r3

}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000108 	.word	0x20000108
 8001f20:	20000100 	.word	0x20000100
 8001f24:	2000010a 	.word	0x2000010a

08001f28 <init_conf>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518


void init_conf()
{
<<<<<<< HEAD
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 80023c4:	f7fe fc4a 	bl	8000c5c <RCC_voidInitSysClock>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOA);
 80023c8:	2102      	movs	r1, #2
 80023ca:	2002      	movs	r0, #2
 80023cc:	f7fe fc78 	bl	8000cc0 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOB);
 80023d0:	2103      	movs	r1, #3
 80023d2:	2002      	movs	r0, #2
 80023d4:	f7fe fc74 	bl	8000cc0 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOC);
 80023d8:	2104      	movs	r1, #4
 80023da:	2002      	movs	r0, #2
 80023dc:	f7fe fc70 	bl	8000cc0 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,TIM1);
 80023e0:	210b      	movs	r1, #11
 80023e2:	2002      	movs	r0, #2
 80023e4:	f7fe fc6c 	bl	8000cc0 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,USART1);
 80023e8:	210e      	movs	r1, #14
 80023ea:	2002      	movs	r0, #2
 80023ec:	f7fe fc68 	bl	8000cc0 <RCC_voidEnablePeripheral>
	MSTK_voidInit();
 80023f0:	f7fe fcec 	bl	8000dcc <MSTK_voidInit>
	MOTOR_init(MOTOR_1);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f7fe fb6f 	bl	8000ad8 <MOTOR_init>
	MOTOR_init(MOTOR_2);
 80023fa:	2002      	movs	r0, #2
 80023fc:	f7fe fb6c 	bl	8000ad8 <MOTOR_init>
	HUltrasonic_voidInit(ULTR_1);
 8002400:	2001      	movs	r0, #1
 8002402:	f7ff fdf7 	bl	8001ff4 <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_2);
 8002406:	2002      	movs	r0, #2
 8002408:	f7ff fdf4 	bl	8001ff4 <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_3);
 800240c:	2003      	movs	r0, #3
 800240e:	f7ff fdf1 	bl	8001ff4 <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_4);
 8002412:	2004      	movs	r0, #4
 8002414:	f7ff fdee 	bl	8001ff4 <HUltrasonic_voidInit>
	MUART1_voidSetCallBack(&APP_GET_UART_Command);
 8002418:	4805      	ldr	r0, [pc, #20]	; (8002430 <init_conf+0x70>)
 800241a:	f7ff fdad 	bl	8001f78 <MUART1_voidSetCallBack>
	MUART_voidEnable(UART1);
 800241e:	4805      	ldr	r0, [pc, #20]	; (8002434 <init_conf+0x74>)
 8002420:	f7ff fd76 	bl	8001f10 <MUART_voidEnable>
	MUART_u8ReceiveByteASynch(UART1);
 8002424:	4803      	ldr	r0, [pc, #12]	; (8002434 <init_conf+0x74>)
 8002426:	f7ff fd83 	bl	8001f30 <MUART_u8ReceiveByteASynch>
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	0800311d 	.word	0x0800311d
 8002434:	40013800 	.word	0x40013800

08002438 <main>:
=======
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 8001f2c:	f7fe fc4e 	bl	80007cc <RCC_voidInitSysClock>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOA);
 8001f30:	2102      	movs	r1, #2
 8001f32:	2002      	movs	r0, #2
 8001f34:	f7fe fc7c 	bl	8000830 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOB);
 8001f38:	2103      	movs	r1, #3
 8001f3a:	2002      	movs	r0, #2
 8001f3c:	f7fe fc78 	bl	8000830 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,GPIOC);
 8001f40:	2104      	movs	r1, #4
 8001f42:	2002      	movs	r0, #2
 8001f44:	f7fe fc74 	bl	8000830 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,TIM1);
 8001f48:	210b      	movs	r1, #11
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	f7fe fc70 	bl	8000830 <RCC_voidEnablePeripheral>
	RCC_voidEnablePeripheral(RCC_APB2,USART1);
 8001f50:	210e      	movs	r1, #14
 8001f52:	2002      	movs	r0, #2
 8001f54:	f7fe fc6c 	bl	8000830 <RCC_voidEnablePeripheral>
	MSTK_voidInit();
 8001f58:	f7fe fcf2 	bl	8000940 <MSTK_voidInit>
	MOTOR_init(MOTOR_1);
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f7fe fb73 	bl	8000648 <MOTOR_init>
	MOTOR_init(MOTOR_2);
 8001f62:	2002      	movs	r0, #2
 8001f64:	f7fe fb70 	bl	8000648 <MOTOR_init>
	HUltrasonic_voidInit(ULTR_1);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f7ff fdf7 	bl	8001b5c <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_2);
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f7ff fdf4 	bl	8001b5c <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_3);
 8001f74:	2003      	movs	r0, #3
 8001f76:	f7ff fdf1 	bl	8001b5c <HUltrasonic_voidInit>
	HUltrasonic_voidInit(ULTR_4);
 8001f7a:	2004      	movs	r0, #4
 8001f7c:	f7ff fdee 	bl	8001b5c <HUltrasonic_voidInit>
	MUART1_voidSetCallBack(&APP_GET_UART_Command);
 8001f80:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <init_conf+0x70>)
 8001f82:	f7ff fdb9 	bl	8001af8 <MUART1_voidSetCallBack>
	MUART_voidEnable(UART1);
 8001f86:	4805      	ldr	r0, [pc, #20]	@ (8001f9c <init_conf+0x74>)
 8001f88:	f7ff fd7c 	bl	8001a84 <MUART_voidEnable>
	MUART_u8ReceiveByteSynchNonBlocking(UART1);
 8001f8c:	4803      	ldr	r0, [pc, #12]	@ (8001f9c <init_conf+0x74>)
 8001f8e:	f7ff fd89 	bl	8001aa4 <MUART_u8ReceiveByteSynchNonBlocking>
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	08002b95 	.word	0x08002b95
 8001f9c:	40013800 	.word	0x40013800

08001fa0 <main>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518


int main()
{
<<<<<<< HEAD
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
	u16  L_u16Speed = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	80fb      	strh	r3, [r7, #6]
	u8  L_u8Direction = 0 ;
 8002442:	2300      	movs	r3, #0
 8002444:	717b      	strb	r3, [r7, #5]
	u8  L_u8Flag = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	713b      	strb	r3, [r7, #4]

	init_conf();
 800244a:	f7ff ffb9 	bl	80023c0 <init_conf>
=======
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
	u16  L_u16Speed = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	80fb      	strh	r3, [r7, #6]
	u8  L_u8Direction = 0 ;
 8001faa:	2300      	movs	r3, #0
 8001fac:	717b      	strb	r3, [r7, #5]
	u8  L_u8Flag = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	713b      	strb	r3, [r7, #4]

	init_conf();
 8001fb2:	f7ff ffb9 	bl	8001f28 <init_conf>
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

	while(1)
	{
		ProcessingFun();
<<<<<<< HEAD
 800244e:	f7ff fe2b 	bl	80020a8 <ProcessingFun>

		/*Encoding recived data and take Direction (second 3bits)*/
		L_u8Direction = G_u8DataAfterProccing & 0x0f ;
 8002452:	4b46      	ldr	r3, [pc, #280]	; (800256c <main+0x134>)
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	717b      	strb	r3, [r7, #5]
		/*Encoding recived data and take Speed (first 4bits)*/
		L_u16Speed = (G_u8DataAfterProccing >> 4) & 0x07 ;
 800245e:	4b43      	ldr	r3, [pc, #268]	; (800256c <main+0x134>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	b29b      	uxth	r3, r3
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	80fb      	strh	r3, [r7, #6]
		/*Encoding recived data and take Flag (last bit)*/
		L_u8Flag = G_u8DataAfterProccing >> 7 ;
 800246c:	4b3f      	ldr	r3, [pc, #252]	; (800256c <main+0x134>)
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	09db      	lsrs	r3, r3, #7
 8002472:	b29b      	uxth	r3, r3
 8002474:	713b      	strb	r3, [r7, #4]

		if (L_u8Direction == Stop)
 8002476:	797b      	ldrb	r3, [r7, #5]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d106      	bne.n	800248a <main+0x52>

				{
					MOTOR_Stop(MOTOR_1) ;
 800247c:	2001      	movs	r0, #1
 800247e:	f7fe fbcb 	bl	8000c18 <MOTOR_Stop>
					MOTOR_Stop(MOTOR_2) ;
 8002482:	2002      	movs	r0, #2
 8002484:	f7fe fbc8 	bl	8000c18 <MOTOR_Stop>
 8002488:	e7e1      	b.n	800244e <main+0x16>
=======
 8001fb6:	f7ff fe2b 	bl	8001c10 <ProcessingFun>

		/*Encoding recived data and take Direction (second 3bits)*/
		L_u8Direction = G_u8DataAfterProccing & 0x0f ;
 8001fba:	4b46      	ldr	r3, [pc, #280]	@ (80020d4 <main+0x134>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	717b      	strb	r3, [r7, #5]
		/*Encoding recived data and take Speed (first 4bits)*/
		L_u16Speed = (G_u8DataAfterProccing >> 4) & 0x07 ;
 8001fc6:	4b43      	ldr	r3, [pc, #268]	@ (80020d4 <main+0x134>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	80fb      	strh	r3, [r7, #6]
		/*Encoding recived data and take Flag (last bit)*/
		L_u8Flag = G_u8DataAfterProccing >> 7 ;
 8001fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80020d4 <main+0x134>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	09db      	lsrs	r3, r3, #7
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	713b      	strb	r3, [r7, #4]

		if (L_u8Direction == Stop)
 8001fde:	797b      	ldrb	r3, [r7, #5]
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d106      	bne.n	8001ff2 <main+0x52>

				{
					MOTOR_Stop(MOTOR_1) ;
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7fe fbcf 	bl	8000788 <MOTOR_Stop>
					MOTOR_Stop(MOTOR_2) ;
 8001fea:	2002      	movs	r0, #2
 8001fec:	f7fe fbcc 	bl	8000788 <MOTOR_Stop>
 8001ff0:	e7e1      	b.n	8001fb6 <main+0x16>
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
					/*
					 * first speed  = 1 +  =
					 * second speed = 2 +  =
					 * third speed  = 3 +  =
					 */
					L_u16Speed = (0Xff<<G_xMy_Data.Speed) + 0xf0;
<<<<<<< HEAD
 800248a:	4b39      	ldr	r3, [pc, #228]	; (8002570 <main+0x138>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	23ff      	movs	r3, #255	; 0xff
 8002498:	4093      	lsls	r3, r2
 800249a:	b29b      	uxth	r3, r3
 800249c:	33f0      	adds	r3, #240	; 0xf0
 800249e:	80fb      	strh	r3, [r7, #6]

					if (L_u8Direction == Go)  //Forward direction
 80024a0:	797b      	ldrb	r3, [r7, #5]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10a      	bne.n	80024bc <main+0x84>
					{
						MOTOR_ClockWise(MOTOR_1 , L_u16Speed) ;
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	4619      	mov	r1, r3
 80024aa:	2001      	movs	r0, #1
 80024ac:	f7fe fb7c 	bl	8000ba8 <MOTOR_ClockWise>
						MOTOR_ClockWise(MOTOR_2 , L_u16Speed) ;
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	4619      	mov	r1, r3
 80024b4:	2002      	movs	r0, #2
 80024b6:	f7fe fb77 	bl	8000ba8 <MOTOR_ClockWise>
 80024ba:	e7c8      	b.n	800244e <main+0x16>
					}
					else if (L_u8Direction == Back)  //Backward direction
 80024bc:	797b      	ldrb	r3, [r7, #5]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d10a      	bne.n	80024d8 <main+0xa0>
					{
						MOTOR_CounterClockWise(MOTOR_1 , L_u16Speed) ;
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	4619      	mov	r1, r3
 80024c6:	2001      	movs	r0, #1
 80024c8:	f7fe fb34 	bl	8000b34 <MOTOR_CounterClockWise>
						MOTOR_CounterClockWise(MOTOR_2 , L_u16Speed) ;
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	4619      	mov	r1, r3
 80024d0:	2002      	movs	r0, #2
 80024d2:	f7fe fb2f 	bl	8000b34 <MOTOR_CounterClockWise>
 80024d6:	e7ba      	b.n	800244e <main+0x16>
					}
					else if (L_u8Direction == Right)  //Right direction
 80024d8:	797b      	ldrb	r3, [r7, #5]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d108      	bne.n	80024f0 <main+0xb8>
					{
						MOTOR_Stop(MOTOR_1) ;
 80024de:	2001      	movs	r0, #1
 80024e0:	f7fe fb9a 	bl	8000c18 <MOTOR_Stop>
						MOTOR_ClockWise(MOTOR_2 , L_u16Speed) ;
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	4619      	mov	r1, r3
 80024e8:	2002      	movs	r0, #2
 80024ea:	f7fe fb5d 	bl	8000ba8 <MOTOR_ClockWise>
 80024ee:	e7ae      	b.n	800244e <main+0x16>
					}
					else if (L_u8Direction == Left)  //Left direction
 80024f0:	797b      	ldrb	r3, [r7, #5]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d108      	bne.n	8002508 <main+0xd0>
					{
						MOTOR_ClockWise(MOTOR_1 , L_u16Speed) ;
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	4619      	mov	r1, r3
 80024fa:	2001      	movs	r0, #1
 80024fc:	f7fe fb54 	bl	8000ba8 <MOTOR_ClockWise>
						MOTOR_Stop(MOTOR_2) ;
 8002500:	2002      	movs	r0, #2
 8002502:	f7fe fb89 	bl	8000c18 <MOTOR_Stop>
 8002506:	e7a2      	b.n	800244e <main+0x16>
					}
					else if (L_u8Direction == Forward_Right)  //forward right
 8002508:	797b      	ldrb	r3, [r7, #5]
 800250a:	2b04      	cmp	r3, #4
 800250c:	d108      	bne.n	8002520 <main+0xe8>
					{
						MOTOR_ClockWise(MOTOR_1 , 0xa) ;
 800250e:	210a      	movs	r1, #10
 8002510:	2001      	movs	r0, #1
 8002512:	f7fe fb49 	bl	8000ba8 <MOTOR_ClockWise>
						MOTOR_ClockWise(MOTOR_2 , 0xc) ;
 8002516:	210c      	movs	r1, #12
 8002518:	2002      	movs	r0, #2
 800251a:	f7fe fb45 	bl	8000ba8 <MOTOR_ClockWise>
 800251e:	e796      	b.n	800244e <main+0x16>
					}
					else if (L_u8Direction == Forward_Left)  //forward left
 8002520:	797b      	ldrb	r3, [r7, #5]
 8002522:	2b05      	cmp	r3, #5
 8002524:	d108      	bne.n	8002538 <main+0x100>
					{
						MOTOR_ClockWise(MOTOR_1 , 0xa) ;
 8002526:	210a      	movs	r1, #10
 8002528:	2001      	movs	r0, #1
 800252a:	f7fe fb3d 	bl	8000ba8 <MOTOR_ClockWise>
						MOTOR_ClockWise(MOTOR_2 , 0xc) ;
 800252e:	210c      	movs	r1, #12
 8002530:	2002      	movs	r0, #2
 8002532:	f7fe fb39 	bl	8000ba8 <MOTOR_ClockWise>
 8002536:	e78a      	b.n	800244e <main+0x16>
					}
					else if (L_u8Direction == Backward_Right)  //backward right
 8002538:	797b      	ldrb	r3, [r7, #5]
 800253a:	2b06      	cmp	r3, #6
 800253c:	d108      	bne.n	8002550 <main+0x118>
					{
						MOTOR_CounterClockWise(MOTOR_1 , 0xa) ;
 800253e:	210a      	movs	r1, #10
 8002540:	2001      	movs	r0, #1
 8002542:	f7fe faf7 	bl	8000b34 <MOTOR_CounterClockWise>
						MOTOR_CounterClockWise(MOTOR_2 , 0xc) ;
 8002546:	210c      	movs	r1, #12
 8002548:	2002      	movs	r0, #2
 800254a:	f7fe faf3 	bl	8000b34 <MOTOR_CounterClockWise>
 800254e:	e77e      	b.n	800244e <main+0x16>
					}
					else if (L_u8Direction == Backward_Left)  //backward left
 8002550:	797b      	ldrb	r3, [r7, #5]
 8002552:	2b07      	cmp	r3, #7
 8002554:	f47f af7b 	bne.w	800244e <main+0x16>
					{
						MOTOR_CounterClockWise(MOTOR_1 , 0xa) ;
 8002558:	210a      	movs	r1, #10
 800255a:	2001      	movs	r0, #1
 800255c:	f7fe faea 	bl	8000b34 <MOTOR_CounterClockWise>
						MOTOR_CounterClockWise(MOTOR_2 , 0xc) ;
 8002560:	210c      	movs	r1, #12
 8002562:	2002      	movs	r0, #2
 8002564:	f7fe fae6 	bl	8000b34 <MOTOR_CounterClockWise>
		ProcessingFun();
 8002568:	e771      	b.n	800244e <main+0x16>
 800256a:	bf00      	nop
 800256c:	20000100 	.word	0x20000100
 8002570:	200000f8 	.word	0x200000f8

08002574 <APP_VoidStop>:
=======
 8001ff2:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <main+0x138>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	23ff      	movs	r3, #255	@ 0xff
 8002000:	4093      	lsls	r3, r2
 8002002:	b29b      	uxth	r3, r3
 8002004:	33f0      	adds	r3, #240	@ 0xf0
 8002006:	80fb      	strh	r3, [r7, #6]

					if (L_u8Direction == Go)  //Forward direction
 8002008:	797b      	ldrb	r3, [r7, #5]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10a      	bne.n	8002024 <main+0x84>
					{
						MOTOR_ClockWise(MOTOR_1 , L_u16Speed) ;
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	4619      	mov	r1, r3
 8002012:	2001      	movs	r0, #1
 8002014:	f7fe fb80 	bl	8000718 <MOTOR_ClockWise>
						MOTOR_ClockWise(MOTOR_2 , L_u16Speed) ;
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	4619      	mov	r1, r3
 800201c:	2002      	movs	r0, #2
 800201e:	f7fe fb7b 	bl	8000718 <MOTOR_ClockWise>
 8002022:	e7c8      	b.n	8001fb6 <main+0x16>
					}
					else if (L_u8Direction == Back)  //Backward direction
 8002024:	797b      	ldrb	r3, [r7, #5]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d10a      	bne.n	8002040 <main+0xa0>
					{
						MOTOR_CounterClockWise(MOTOR_1 , L_u16Speed) ;
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	4619      	mov	r1, r3
 800202e:	2001      	movs	r0, #1
 8002030:	f7fe fb38 	bl	80006a4 <MOTOR_CounterClockWise>
						MOTOR_CounterClockWise(MOTOR_2 , L_u16Speed) ;
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	4619      	mov	r1, r3
 8002038:	2002      	movs	r0, #2
 800203a:	f7fe fb33 	bl	80006a4 <MOTOR_CounterClockWise>
 800203e:	e7ba      	b.n	8001fb6 <main+0x16>
					}
					else if (L_u8Direction == Right)  //Right direction
 8002040:	797b      	ldrb	r3, [r7, #5]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d108      	bne.n	8002058 <main+0xb8>
					{
						MOTOR_Stop(MOTOR_1) ;
 8002046:	2001      	movs	r0, #1
 8002048:	f7fe fb9e 	bl	8000788 <MOTOR_Stop>
						MOTOR_ClockWise(MOTOR_2 , L_u16Speed) ;
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	4619      	mov	r1, r3
 8002050:	2002      	movs	r0, #2
 8002052:	f7fe fb61 	bl	8000718 <MOTOR_ClockWise>
 8002056:	e7ae      	b.n	8001fb6 <main+0x16>
					}
					else if (L_u8Direction == Left)  //Left direction
 8002058:	797b      	ldrb	r3, [r7, #5]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d108      	bne.n	8002070 <main+0xd0>
					{
						MOTOR_ClockWise(MOTOR_1 , L_u16Speed) ;
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	4619      	mov	r1, r3
 8002062:	2001      	movs	r0, #1
 8002064:	f7fe fb58 	bl	8000718 <MOTOR_ClockWise>
						MOTOR_Stop(MOTOR_2) ;
 8002068:	2002      	movs	r0, #2
 800206a:	f7fe fb8d 	bl	8000788 <MOTOR_Stop>
 800206e:	e7a2      	b.n	8001fb6 <main+0x16>
					}
					else if (L_u8Direction == Forward_Right)  //forward right
 8002070:	797b      	ldrb	r3, [r7, #5]
 8002072:	2b04      	cmp	r3, #4
 8002074:	d108      	bne.n	8002088 <main+0xe8>
					{
						MOTOR_ClockWise(MOTOR_1 , 0xa) ;
 8002076:	210a      	movs	r1, #10
 8002078:	2001      	movs	r0, #1
 800207a:	f7fe fb4d 	bl	8000718 <MOTOR_ClockWise>
						MOTOR_ClockWise(MOTOR_2 , 0xc) ;
 800207e:	210c      	movs	r1, #12
 8002080:	2002      	movs	r0, #2
 8002082:	f7fe fb49 	bl	8000718 <MOTOR_ClockWise>
 8002086:	e796      	b.n	8001fb6 <main+0x16>
					}
					else if (L_u8Direction == Forward_Left)  //forward left
 8002088:	797b      	ldrb	r3, [r7, #5]
 800208a:	2b05      	cmp	r3, #5
 800208c:	d108      	bne.n	80020a0 <main+0x100>
					{
						MOTOR_ClockWise(MOTOR_1 , 0xa) ;
 800208e:	210a      	movs	r1, #10
 8002090:	2001      	movs	r0, #1
 8002092:	f7fe fb41 	bl	8000718 <MOTOR_ClockWise>
						MOTOR_ClockWise(MOTOR_2 , 0xc) ;
 8002096:	210c      	movs	r1, #12
 8002098:	2002      	movs	r0, #2
 800209a:	f7fe fb3d 	bl	8000718 <MOTOR_ClockWise>
 800209e:	e78a      	b.n	8001fb6 <main+0x16>
					}
					else if (L_u8Direction == Backward_Right)  //backward right
 80020a0:	797b      	ldrb	r3, [r7, #5]
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d108      	bne.n	80020b8 <main+0x118>
					{
						MOTOR_CounterClockWise(MOTOR_1 , 0xa) ;
 80020a6:	210a      	movs	r1, #10
 80020a8:	2001      	movs	r0, #1
 80020aa:	f7fe fafb 	bl	80006a4 <MOTOR_CounterClockWise>
						MOTOR_CounterClockWise(MOTOR_2 , 0xc) ;
 80020ae:	210c      	movs	r1, #12
 80020b0:	2002      	movs	r0, #2
 80020b2:	f7fe faf7 	bl	80006a4 <MOTOR_CounterClockWise>
 80020b6:	e77e      	b.n	8001fb6 <main+0x16>
					}
					else if (L_u8Direction == Backward_Left)  //backward left
 80020b8:	797b      	ldrb	r3, [r7, #5]
 80020ba:	2b07      	cmp	r3, #7
 80020bc:	f47f af7b 	bne.w	8001fb6 <main+0x16>
					{
						MOTOR_CounterClockWise(MOTOR_1 , 0xa) ;
 80020c0:	210a      	movs	r1, #10
 80020c2:	2001      	movs	r0, #1
 80020c4:	f7fe faee 	bl	80006a4 <MOTOR_CounterClockWise>
						MOTOR_CounterClockWise(MOTOR_2 , 0xc) ;
 80020c8:	210c      	movs	r1, #12
 80020ca:	2002      	movs	r0, #2
 80020cc:	f7fe faea 	bl	80006a4 <MOTOR_CounterClockWise>
		ProcessingFun();
 80020d0:	e771      	b.n	8001fb6 <main+0x16>
 80020d2:	bf00      	nop
 80020d4:	2000010a 	.word	0x2000010a
 80020d8:	20000100 	.word	0x20000100

080020dc <APP_VoidStop>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
	G_xNear_Distance.Distance_Left = HUltrasonic_f32CalcDistance(ULTR_1);
}


void APP_VoidStop()
{
<<<<<<< HEAD
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
	//direction = stop
	SET_BIT(G_u8DataAfterProccing , 0) ;
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <APP_VoidStop+0x70>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <APP_VoidStop+0x70>)
 8002584:	801a      	strh	r2, [r3, #0]
	SET_BIT(G_u8DataAfterProccing , 1) ;
 8002586:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <APP_VoidStop+0x70>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	f043 0302 	orr.w	r3, r3, #2
 800258e:	b29a      	uxth	r2, r3
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <APP_VoidStop+0x70>)
 8002592:	801a      	strh	r2, [r3, #0]
	SET_BIT(G_u8DataAfterProccing , 2) ;
 8002594:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <APP_VoidStop+0x70>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	b29a      	uxth	r2, r3
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <APP_VoidStop+0x70>)
 80025a0:	801a      	strh	r2, [r3, #0]
	CLR_BIT(G_u8DataAfterProccing , 3) ;
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <APP_VoidStop+0x70>)
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	f023 0308 	bic.w	r3, r3, #8
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <APP_VoidStop+0x70>)
 80025ae:	801a      	strh	r2, [r3, #0]
	/*flag = 3*/
	SET_BIT(G_u8DataAfterProccing , 6) ;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <APP_VoidStop+0x70>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <APP_VoidStop+0x70>)
 80025bc:	801a      	strh	r2, [r3, #0]
	SET_BIT(G_u8DataAfterProccing , 7) ;
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <APP_VoidStop+0x70>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <APP_VoidStop+0x70>)
 80025ca:	801a      	strh	r2, [r3, #0]
	/*stop car + alarm*/
	G_u8DataAfterProccing = G_u8DataAfterProccing & 0xFF8F ;
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <APP_VoidStop+0x70>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <APP_VoidStop+0x70>)
 80025d8:	801a      	strh	r2, [r3, #0]


}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000100 	.word	0x20000100

080025e8 <APP_voidGoTasks>:

void APP_voidGoTasks ()
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Forword  <= SO_SHORT_DISTANCE) // stop car
 80025ec:	4b6f      	ldr	r3, [pc, #444]	; (80027ac <APP_voidGoTasks+0x1c4>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fd fefd 	bl	80003f0 <__aeabi_i2d>
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	4b6d      	ldr	r3, [pc, #436]	; (80027b0 <APP_voidGoTasks+0x1c8>)
 80025fc:	f7fd ffcc 	bl	8000598 <__aeabi_dcmple>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d031      	beq.n	800266a <APP_voidGoTasks+0x82>
		{
		   //direction = stop
		    SET_BIT(G_u8DataAfterProccing , 0) ;
 8002606:	4b6b      	ldr	r3, [pc, #428]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	4b68      	ldr	r3, [pc, #416]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002612:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 1) ;
 8002614:	4b67      	ldr	r3, [pc, #412]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	b29a      	uxth	r2, r3
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002620:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 2) ;
 8002622:	4b64      	ldr	r3, [pc, #400]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	f043 0304 	orr.w	r3, r3, #4
 800262a:	b29a      	uxth	r2, r3
 800262c:	4b61      	ldr	r3, [pc, #388]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 800262e:	801a      	strh	r2, [r3, #0]
		    CLR_BIT(G_u8DataAfterProccing , 3) ;
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	f023 0308 	bic.w	r3, r3, #8
 8002638:	b29a      	uxth	r2, r3
 800263a:	4b5e      	ldr	r3, [pc, #376]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 800263c:	801a      	strh	r2, [r3, #0]
		   /*flag = 3*/
			SET_BIT(G_u8DataAfterProccing , 6) ;
 800263e:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002646:	b29a      	uxth	r2, r3
 8002648:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 800264a:	801a      	strh	r2, [r3, #0]
			SET_BIT(G_u8DataAfterProccing , 7) ;
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002654:	b29a      	uxth	r2, r3
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002658:	801a      	strh	r2, [r3, #0]
			/*stop car + alarm*/
			G_u8DataAfterProccing = G_u8DataAfterProccing & 0xFF8F ;
 800265a:	4b56      	ldr	r3, [pc, #344]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002662:	b29a      	uxth	r2, r3
 8002664:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002666:	801a      	strh	r2, [r3, #0]
=======
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
	//direction = stop
	SET_BIT(G_u8DataAfterProccing , 0) ;
 80020e0:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <APP_VoidStop+0x70>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	4b18      	ldr	r3, [pc, #96]	@ (800214c <APP_VoidStop+0x70>)
 80020ec:	801a      	strh	r2, [r3, #0]
	SET_BIT(G_u8DataAfterProccing , 1) ;
 80020ee:	4b17      	ldr	r3, [pc, #92]	@ (800214c <APP_VoidStop+0x70>)
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <APP_VoidStop+0x70>)
 80020fa:	801a      	strh	r2, [r3, #0]
	SET_BIT(G_u8DataAfterProccing , 2) ;
 80020fc:	4b13      	ldr	r3, [pc, #76]	@ (800214c <APP_VoidStop+0x70>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	b29a      	uxth	r2, r3
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <APP_VoidStop+0x70>)
 8002108:	801a      	strh	r2, [r3, #0]
	CLR_BIT(G_u8DataAfterProccing , 3) ;
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <APP_VoidStop+0x70>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	f023 0308 	bic.w	r3, r3, #8
 8002112:	b29a      	uxth	r2, r3
 8002114:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <APP_VoidStop+0x70>)
 8002116:	801a      	strh	r2, [r3, #0]
	/*flag = 3*/
	SET_BIT(G_u8DataAfterProccing , 6) ;
 8002118:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <APP_VoidStop+0x70>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002120:	b29a      	uxth	r2, r3
 8002122:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <APP_VoidStop+0x70>)
 8002124:	801a      	strh	r2, [r3, #0]
	SET_BIT(G_u8DataAfterProccing , 7) ;
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <APP_VoidStop+0x70>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800212e:	b29a      	uxth	r2, r3
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <APP_VoidStop+0x70>)
 8002132:	801a      	strh	r2, [r3, #0]
	/*stop car + alarm*/
	G_u8DataAfterProccing = G_u8DataAfterProccing & 0xFF8F ;
 8002134:	4b05      	ldr	r3, [pc, #20]	@ (800214c <APP_VoidStop+0x70>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800213c:	b29a      	uxth	r2, r3
 800213e:	4b03      	ldr	r3, [pc, #12]	@ (800214c <APP_VoidStop+0x70>)
 8002140:	801a      	strh	r2, [r3, #0]


}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	2000010a 	.word	0x2000010a

08002150 <APP_voidGoTasks>:

void APP_voidGoTasks ()
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Forword  <= SO_SHORT_DISTANCE) // stop car
 8002154:	4b67      	ldr	r3, [pc, #412]	@ (80022f4 <APP_voidGoTasks+0x1a4>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b0a      	cmp	r3, #10
 800215a:	d831      	bhi.n	80021c0 <APP_voidGoTasks+0x70>
		{
		   //direction = stop
		    SET_BIT(G_u8DataAfterProccing , 0) ;
 800215c:	4b66      	ldr	r3, [pc, #408]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	4b64      	ldr	r3, [pc, #400]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 8002168:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 1) ;
 800216a:	4b63      	ldr	r3, [pc, #396]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	f043 0302 	orr.w	r3, r3, #2
 8002172:	b29a      	uxth	r2, r3
 8002174:	4b60      	ldr	r3, [pc, #384]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 8002176:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 2) ;
 8002178:	4b5f      	ldr	r3, [pc, #380]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	b29a      	uxth	r2, r3
 8002182:	4b5d      	ldr	r3, [pc, #372]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 8002184:	801a      	strh	r2, [r3, #0]
		    CLR_BIT(G_u8DataAfterProccing , 3) ;
 8002186:	4b5c      	ldr	r3, [pc, #368]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	f023 0308 	bic.w	r3, r3, #8
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b59      	ldr	r3, [pc, #356]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 8002192:	801a      	strh	r2, [r3, #0]
		   /*flag = 3*/
			SET_BIT(G_u8DataAfterProccing , 6) ;
 8002194:	4b58      	ldr	r3, [pc, #352]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800219c:	b29a      	uxth	r2, r3
 800219e:	4b56      	ldr	r3, [pc, #344]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80021a0:	801a      	strh	r2, [r3, #0]
			SET_BIT(G_u8DataAfterProccing , 7) ;
 80021a2:	4b55      	ldr	r3, [pc, #340]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	4b52      	ldr	r3, [pc, #328]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80021ae:	801a      	strh	r2, [r3, #0]
			/*stop car + alarm*/
			G_u8DataAfterProccing = G_u8DataAfterProccing & 0xFF8F ;
 80021b0:	4b51      	ldr	r3, [pc, #324]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	4b4f      	ldr	r3, [pc, #316]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80021bc:	801a      	strh	r2, [r3, #0]
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
			if (speed_control_outomatic == Automatic_ON)
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
			else
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
		}
}
<<<<<<< HEAD
 8002668:	e09d      	b.n	80027a6 <APP_voidGoTasks+0x1be>
	else if (G_xNear_Distance.Distance_Forword <= UN_SAFE_DISTANCE) //Un Safed Distance
 800266a:	4b50      	ldr	r3, [pc, #320]	; (80027ac <APP_voidGoTasks+0x1c4>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd febe 	bl	80003f0 <__aeabi_i2d>
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	4b4f      	ldr	r3, [pc, #316]	; (80027b8 <APP_voidGoTasks+0x1d0>)
 800267a:	f7fd ff8d 	bl	8000598 <__aeabi_dcmple>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d06a      	beq.n	800275a <APP_voidGoTasks+0x172>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002684:	4b4d      	ldr	r3, [pc, #308]	; (80027bc <APP_voidGoTasks+0x1d4>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	4b4b      	ldr	r3, [pc, #300]	; (80027c0 <APP_voidGoTasks+0x1d8>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	dc31      	bgt.n	80026fc <APP_voidGoTasks+0x114>
					SET_BIT(G_u8DataAfterProccing , 6) ;
 8002698:	4b46      	ldr	r3, [pc, #280]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	4b44      	ldr	r3, [pc, #272]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 80026a4:	801a      	strh	r2, [r3, #0]
					CLR_BIT(G_u8DataAfterProccing , 7) ;
 80026a6:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 80026b2:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b21b      	sxth	r3, r3
 80026ba:	f023 030f 	bic.w	r3, r3, #15
 80026be:	b21a      	sxth	r2, r3
 80026c0:	4b3e      	ldr	r3, [pc, #248]	; (80027bc <APP_voidGoTasks+0x1d4>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	b21b      	sxth	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	4b38      	ldr	r3, [pc, #224]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 80026d4:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	b21b      	sxth	r3, r3
 80026dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e0:	b21a      	sxth	r2, r3
 80026e2:	4b36      	ldr	r3, [pc, #216]	; (80027bc <APP_voidGoTasks+0x1d4>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	4313      	orrs	r3, r2
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 80026f8:	801a      	strh	r2, [r3, #0]
}
 80026fa:	e054      	b.n	80027a6 <APP_voidGoTasks+0x1be>
					CLR_BIT(G_u8DataAfterProccing , 6) ;
 80026fc:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002704:	b29a      	uxth	r2, r3
 8002706:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002708:	801a      	strh	r2, [r3, #0]
					SET_BIT(G_u8DataAfterProccing , 7) ;
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002712:	b29a      	uxth	r2, r3
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002716:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002718:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	b21b      	sxth	r3, r3
 800271e:	f023 030f 	bic.w	r3, r3, #15
 8002722:	b21a      	sxth	r2, r3
 8002724:	4b25      	ldr	r3, [pc, #148]	; (80027bc <APP_voidGoTasks+0x1d4>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800272c:	b2db      	uxtb	r3, r3
 800272e:	b21b      	sxth	r3, r3
 8002730:	4313      	orrs	r3, r2
 8002732:	b21b      	sxth	r3, r3
 8002734:	b29a      	uxth	r2, r3
 8002736:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002738:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_u8_LimetedSpeed << 4)) ;
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	b21b      	sxth	r3, r3
 8002740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002744:	b21a      	sxth	r2, r3
 8002746:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <APP_voidGoTasks+0x1d8>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	b21b      	sxth	r3, r3
 800274e:	4313      	orrs	r3, r2
 8002750:	b21b      	sxth	r3, r3
 8002752:	b29a      	uxth	r2, r3
 8002754:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002756:	801a      	strh	r2, [r3, #0]
}
 8002758:	e025      	b.n	80027a6 <APP_voidGoTasks+0x1be>
			CLR_BIT(G_u8DataAfterProccing , 6) ;
 800275a:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002762:	b29a      	uxth	r2, r3
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002766:	801a      	strh	r2, [r3, #0]
			CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002770:	b29a      	uxth	r2, r3
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002774:	801a      	strh	r2, [r3, #0]
			G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b21b      	sxth	r3, r3
 800277c:	f023 030f 	bic.w	r3, r3, #15
 8002780:	b21a      	sxth	r2, r3
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <APP_voidGoTasks+0x1d4>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800278a:	b2db      	uxtb	r3, r3
 800278c:	b21b      	sxth	r3, r3
 800278e:	4313      	orrs	r3, r2
 8002790:	b21b      	sxth	r3, r3
 8002792:	b29a      	uxth	r2, r3
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 8002796:	801a      	strh	r2, [r3, #0]
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <APP_voidGoTasks+0x1cc>)
 80027a4:	801a      	strh	r2, [r3, #0]
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200000fc 	.word	0x200000fc
 80027b0:	40240000 	.word	0x40240000
 80027b4:	20000100 	.word	0x20000100
 80027b8:	40340000 	.word	0x40340000
 80027bc:	200000f8 	.word	0x200000f8
 80027c0:	200000ca 	.word	0x200000ca

080027c4 <APP_voidBackTasks>:
void APP_voidBackTasks ()
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Back  <= SO_SHORT_DISTANCE) // stop car
 80027c8:	4b6f      	ldr	r3, [pc, #444]	; (8002988 <APP_voidBackTasks+0x1c4>)
 80027ca:	785b      	ldrb	r3, [r3, #1]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd fe0f 	bl	80003f0 <__aeabi_i2d>
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	4b6d      	ldr	r3, [pc, #436]	; (800298c <APP_voidBackTasks+0x1c8>)
 80027d8:	f7fd fede 	bl	8000598 <__aeabi_dcmple>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d031      	beq.n	8002846 <APP_voidBackTasks+0x82>
		{
		   //direction = stop
		    SET_BIT(G_u8DataAfterProccing , 0) ;
 80027e2:	4b6b      	ldr	r3, [pc, #428]	; (8002990 <APP_voidBackTasks+0x1cc>)
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	4b68      	ldr	r3, [pc, #416]	; (8002990 <APP_voidBackTasks+0x1cc>)
 80027ee:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 1) ;
 80027f0:	4b67      	ldr	r3, [pc, #412]	; (8002990 <APP_voidBackTasks+0x1cc>)
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	4b65      	ldr	r3, [pc, #404]	; (8002990 <APP_voidBackTasks+0x1cc>)
 80027fc:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 2) ;
 80027fe:	4b64      	ldr	r3, [pc, #400]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	f043 0304 	orr.w	r3, r3, #4
 8002806:	b29a      	uxth	r2, r3
 8002808:	4b61      	ldr	r3, [pc, #388]	; (8002990 <APP_voidBackTasks+0x1cc>)
 800280a:	801a      	strh	r2, [r3, #0]
		    CLR_BIT(G_u8DataAfterProccing , 3) ;
 800280c:	4b60      	ldr	r3, [pc, #384]	; (8002990 <APP_voidBackTasks+0x1cc>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	f023 0308 	bic.w	r3, r3, #8
 8002814:	b29a      	uxth	r2, r3
 8002816:	4b5e      	ldr	r3, [pc, #376]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002818:	801a      	strh	r2, [r3, #0]
		   /*flag = 3*/
			SET_BIT(G_u8DataAfterProccing , 6) ;
 800281a:	4b5d      	ldr	r3, [pc, #372]	; (8002990 <APP_voidBackTasks+0x1cc>)
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002822:	b29a      	uxth	r2, r3
 8002824:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002826:	801a      	strh	r2, [r3, #0]
			SET_BIT(G_u8DataAfterProccing , 7) ;
 8002828:	4b59      	ldr	r3, [pc, #356]	; (8002990 <APP_voidBackTasks+0x1cc>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002830:	b29a      	uxth	r2, r3
 8002832:	4b57      	ldr	r3, [pc, #348]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002834:	801a      	strh	r2, [r3, #0]
			/*stop car + alarm*/
			G_u8DataAfterProccing = G_u8DataAfterProccing & 0xFF8F ;
 8002836:	4b56      	ldr	r3, [pc, #344]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b53      	ldr	r3, [pc, #332]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002842:	801a      	strh	r2, [r3, #0]
=======
 80021be:	e094      	b.n	80022ea <APP_voidGoTasks+0x19a>
	else if (G_xNear_Distance.Distance_Forword <= UN_SAFE_DISTANCE) //Un Safed Distance
 80021c0:	4b4c      	ldr	r3, [pc, #304]	@ (80022f4 <APP_voidGoTasks+0x1a4>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b14      	cmp	r3, #20
 80021c6:	d86a      	bhi.n	800229e <APP_voidGoTasks+0x14e>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 80021c8:	4b4c      	ldr	r3, [pc, #304]	@ (80022fc <APP_voidGoTasks+0x1ac>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002300 <APP_voidGoTasks+0x1b0>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	dc31      	bgt.n	8002240 <APP_voidGoTasks+0xf0>
					SET_BIT(G_u8DataAfterProccing , 6) ;
 80021dc:	4b46      	ldr	r3, [pc, #280]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	4b44      	ldr	r3, [pc, #272]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80021e8:	801a      	strh	r2, [r3, #0]
					CLR_BIT(G_u8DataAfterProccing , 7) ;
 80021ea:	4b43      	ldr	r3, [pc, #268]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b40      	ldr	r3, [pc, #256]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80021f6:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 80021f8:	4b3f      	ldr	r3, [pc, #252]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	f023 030f 	bic.w	r3, r3, #15
 8002202:	b21a      	sxth	r2, r3
 8002204:	4b3d      	ldr	r3, [pc, #244]	@ (80022fc <APP_voidGoTasks+0x1ac>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800220c:	b2db      	uxtb	r3, r3
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b21b      	sxth	r3, r3
 8002214:	b29a      	uxth	r2, r3
 8002216:	4b38      	ldr	r3, [pc, #224]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 8002218:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
 800221a:	4b37      	ldr	r3, [pc, #220]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	b21b      	sxth	r3, r3
 8002220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002224:	b21a      	sxth	r2, r3
 8002226:	4b35      	ldr	r3, [pc, #212]	@ (80022fc <APP_voidGoTasks+0x1ac>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	b21b      	sxth	r3, r3
 8002234:	4313      	orrs	r3, r2
 8002236:	b21b      	sxth	r3, r3
 8002238:	b29a      	uxth	r2, r3
 800223a:	4b2f      	ldr	r3, [pc, #188]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 800223c:	801a      	strh	r2, [r3, #0]
}
 800223e:	e054      	b.n	80022ea <APP_voidGoTasks+0x19a>
					CLR_BIT(G_u8DataAfterProccing , 6) ;
 8002240:	4b2d      	ldr	r3, [pc, #180]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002248:	b29a      	uxth	r2, r3
 800224a:	4b2b      	ldr	r3, [pc, #172]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 800224c:	801a      	strh	r2, [r3, #0]
					SET_BIT(G_u8DataAfterProccing , 7) ;
 800224e:	4b2a      	ldr	r3, [pc, #168]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002256:	b29a      	uxth	r2, r3
 8002258:	4b27      	ldr	r3, [pc, #156]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 800225a:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 800225c:	4b26      	ldr	r3, [pc, #152]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b21b      	sxth	r3, r3
 8002262:	f023 030f 	bic.w	r3, r3, #15
 8002266:	b21a      	sxth	r2, r3
 8002268:	4b24      	ldr	r3, [pc, #144]	@ (80022fc <APP_voidGoTasks+0x1ac>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002270:	b2db      	uxtb	r3, r3
 8002272:	b21b      	sxth	r3, r3
 8002274:	4313      	orrs	r3, r2
 8002276:	b21b      	sxth	r3, r3
 8002278:	b29a      	uxth	r2, r3
 800227a:	4b1f      	ldr	r3, [pc, #124]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 800227c:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_u8_LimetedSpeed << 4)) ;
 800227e:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b21b      	sxth	r3, r3
 8002284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002288:	b21a      	sxth	r2, r3
 800228a:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <APP_voidGoTasks+0x1b0>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	b21b      	sxth	r3, r3
 8002292:	4313      	orrs	r3, r2
 8002294:	b21b      	sxth	r3, r3
 8002296:	b29a      	uxth	r2, r3
 8002298:	4b17      	ldr	r3, [pc, #92]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 800229a:	801a      	strh	r2, [r3, #0]
}
 800229c:	e025      	b.n	80022ea <APP_voidGoTasks+0x19a>
			CLR_BIT(G_u8DataAfterProccing , 6) ;
 800229e:	4b16      	ldr	r3, [pc, #88]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	4b13      	ldr	r3, [pc, #76]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80022aa:	801a      	strh	r2, [r3, #0]
			CLR_BIT(G_u8DataAfterProccing , 7) ;
 80022ac:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80022b8:	801a      	strh	r2, [r3, #0]
			G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 80022ba:	4b0f      	ldr	r3, [pc, #60]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	b21b      	sxth	r3, r3
 80022c0:	f023 030f 	bic.w	r3, r3, #15
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	4b0d      	ldr	r3, [pc, #52]	@ (80022fc <APP_voidGoTasks+0x1ac>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80022da:	801a      	strh	r2, [r3, #0]
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
 80022dc:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	4b04      	ldr	r3, [pc, #16]	@ (80022f8 <APP_voidGoTasks+0x1a8>)
 80022e8:	801a      	strh	r2, [r3, #0]
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000104 	.word	0x20000104
 80022f8:	2000010a 	.word	0x2000010a
 80022fc:	20000100 	.word	0x20000100
 8002300:	200000ca 	.word	0x200000ca

08002304 <APP_voidBackTasks>:
void APP_voidBackTasks ()
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Back  <= SO_SHORT_DISTANCE) // stop car
 8002308:	4b67      	ldr	r3, [pc, #412]	@ (80024a8 <APP_voidBackTasks+0x1a4>)
 800230a:	785b      	ldrb	r3, [r3, #1]
 800230c:	2b0a      	cmp	r3, #10
 800230e:	d831      	bhi.n	8002374 <APP_voidBackTasks+0x70>
		{
		   //direction = stop
		    SET_BIT(G_u8DataAfterProccing , 0) ;
 8002310:	4b66      	ldr	r3, [pc, #408]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	4b64      	ldr	r3, [pc, #400]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 800231c:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 1) ;
 800231e:	4b63      	ldr	r3, [pc, #396]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	f043 0302 	orr.w	r3, r3, #2
 8002326:	b29a      	uxth	r2, r3
 8002328:	4b60      	ldr	r3, [pc, #384]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 800232a:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 2) ;
 800232c:	4b5f      	ldr	r3, [pc, #380]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	b29a      	uxth	r2, r3
 8002336:	4b5d      	ldr	r3, [pc, #372]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002338:	801a      	strh	r2, [r3, #0]
		    CLR_BIT(G_u8DataAfterProccing , 3) ;
 800233a:	4b5c      	ldr	r3, [pc, #368]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	f023 0308 	bic.w	r3, r3, #8
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b59      	ldr	r3, [pc, #356]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002346:	801a      	strh	r2, [r3, #0]
		   /*flag = 3*/
			SET_BIT(G_u8DataAfterProccing , 6) ;
 8002348:	4b58      	ldr	r3, [pc, #352]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002350:	b29a      	uxth	r2, r3
 8002352:	4b56      	ldr	r3, [pc, #344]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002354:	801a      	strh	r2, [r3, #0]
			SET_BIT(G_u8DataAfterProccing , 7) ;
 8002356:	4b55      	ldr	r3, [pc, #340]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800235e:	b29a      	uxth	r2, r3
 8002360:	4b52      	ldr	r3, [pc, #328]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002362:	801a      	strh	r2, [r3, #0]
			/*stop car + alarm*/
			G_u8DataAfterProccing = G_u8DataAfterProccing & 0xFF8F ;
 8002364:	4b51      	ldr	r3, [pc, #324]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800236c:	b29a      	uxth	r2, r3
 800236e:	4b4f      	ldr	r3, [pc, #316]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002370:	801a      	strh	r2, [r3, #0]
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
			if (speed_control_outomatic == Automatic_ON)
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
			else
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
		}
}
<<<<<<< HEAD
 8002844:	e09d      	b.n	8002982 <APP_voidBackTasks+0x1be>
	else if (G_xNear_Distance.Distance_Back <= UN_SAFE_DISTANCE) //Un Safed Distance
 8002846:	4b50      	ldr	r3, [pc, #320]	; (8002988 <APP_voidBackTasks+0x1c4>)
 8002848:	785b      	ldrb	r3, [r3, #1]
 800284a:	4618      	mov	r0, r3
 800284c:	f7fd fdd0 	bl	80003f0 <__aeabi_i2d>
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	4b4f      	ldr	r3, [pc, #316]	; (8002994 <APP_voidBackTasks+0x1d0>)
 8002856:	f7fd fe9f 	bl	8000598 <__aeabi_dcmple>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d06a      	beq.n	8002936 <APP_voidBackTasks+0x172>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002860:	4b4d      	ldr	r3, [pc, #308]	; (8002998 <APP_voidBackTasks+0x1d4>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	4b4b      	ldr	r3, [pc, #300]	; (800299c <APP_voidBackTasks+0x1d8>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	dc31      	bgt.n	80028d8 <APP_voidBackTasks+0x114>
					SET_BIT(G_u8DataAfterProccing , 6) ;
 8002874:	4b46      	ldr	r3, [pc, #280]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800287c:	b29a      	uxth	r2, r3
 800287e:	4b44      	ldr	r3, [pc, #272]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002880:	801a      	strh	r2, [r3, #0]
					CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002882:	4b43      	ldr	r3, [pc, #268]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800288a:	b29a      	uxth	r2, r3
 800288c:	4b40      	ldr	r3, [pc, #256]	; (8002990 <APP_voidBackTasks+0x1cc>)
 800288e:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002890:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b21b      	sxth	r3, r3
 8002896:	f023 030f 	bic.w	r3, r3, #15
 800289a:	b21a      	sxth	r2, r3
 800289c:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <APP_voidBackTasks+0x1d4>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	4313      	orrs	r3, r2
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	4b38      	ldr	r3, [pc, #224]	; (8002990 <APP_voidBackTasks+0x1cc>)
 80028b0:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <APP_voidBackTasks+0x1cc>)
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028bc:	b21a      	sxth	r2, r3
 80028be:	4b36      	ldr	r3, [pc, #216]	; (8002998 <APP_voidBackTasks+0x1d4>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	4313      	orrs	r3, r2
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	4b2f      	ldr	r3, [pc, #188]	; (8002990 <APP_voidBackTasks+0x1cc>)
 80028d4:	801a      	strh	r2, [r3, #0]
}
 80028d6:	e054      	b.n	8002982 <APP_voidBackTasks+0x1be>
					CLR_BIT(G_u8DataAfterProccing , 6) ;
 80028d8:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <APP_voidBackTasks+0x1cc>)
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <APP_voidBackTasks+0x1cc>)
 80028e4:	801a      	strh	r2, [r3, #0]
					SET_BIT(G_u8DataAfterProccing , 7) ;
 80028e6:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <APP_voidBackTasks+0x1cc>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b27      	ldr	r3, [pc, #156]	; (8002990 <APP_voidBackTasks+0x1cc>)
 80028f2:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 80028f4:	4b26      	ldr	r3, [pc, #152]	; (8002990 <APP_voidBackTasks+0x1cc>)
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	b21b      	sxth	r3, r3
 80028fa:	f023 030f 	bic.w	r3, r3, #15
 80028fe:	b21a      	sxth	r2, r3
 8002900:	4b25      	ldr	r3, [pc, #148]	; (8002998 <APP_voidBackTasks+0x1d4>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002908:	b2db      	uxtb	r3, r3
 800290a:	b21b      	sxth	r3, r3
 800290c:	4313      	orrs	r3, r2
 800290e:	b21b      	sxth	r3, r3
 8002910:	b29a      	uxth	r2, r3
 8002912:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002914:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_u8_LimetedSpeed << 4)) ;
 8002916:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b21b      	sxth	r3, r3
 800291c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002920:	b21a      	sxth	r2, r3
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <APP_voidBackTasks+0x1d8>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	b21b      	sxth	r3, r3
 800292a:	4313      	orrs	r3, r2
 800292c:	b21b      	sxth	r3, r3
 800292e:	b29a      	uxth	r2, r3
 8002930:	4b17      	ldr	r3, [pc, #92]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002932:	801a      	strh	r2, [r3, #0]
}
 8002934:	e025      	b.n	8002982 <APP_voidBackTasks+0x1be>
			CLR_BIT(G_u8DataAfterProccing , 6) ;
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800293e:	b29a      	uxth	r2, r3
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002942:	801a      	strh	r2, [r3, #0]
			CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800294c:	b29a      	uxth	r2, r3
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002950:	801a      	strh	r2, [r3, #0]
			G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b21b      	sxth	r3, r3
 8002958:	f023 030f 	bic.w	r3, r3, #15
 800295c:	b21a      	sxth	r2, r3
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <APP_voidBackTasks+0x1d4>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002966:	b2db      	uxtb	r3, r3
 8002968:	b21b      	sxth	r3, r3
 800296a:	4313      	orrs	r3, r2
 800296c:	b21b      	sxth	r3, r3
 800296e:	b29a      	uxth	r2, r3
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002972:	801a      	strh	r2, [r3, #0]
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800297c:	b29a      	uxth	r2, r3
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <APP_voidBackTasks+0x1cc>)
 8002980:	801a      	strh	r2, [r3, #0]
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200000fc 	.word	0x200000fc
 800298c:	40240000 	.word	0x40240000
 8002990:	20000100 	.word	0x20000100
 8002994:	40340000 	.word	0x40340000
 8002998:	200000f8 	.word	0x200000f8
 800299c:	200000ca 	.word	0x200000ca

080029a0 <APP_voidBackward_RightTasks>:
void APP_voidBackward_RightTasks ()
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Left  <= SO_SHORT_DISTANCE) // stop car
 80029a4:	4b6f      	ldr	r3, [pc, #444]	; (8002b64 <APP_voidBackward_RightTasks+0x1c4>)
 80029a6:	789b      	ldrb	r3, [r3, #2]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fd21 	bl	80003f0 <__aeabi_i2d>
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	4b6d      	ldr	r3, [pc, #436]	; (8002b68 <APP_voidBackward_RightTasks+0x1c8>)
 80029b4:	f7fd fdf0 	bl	8000598 <__aeabi_dcmple>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d031      	beq.n	8002a22 <APP_voidBackward_RightTasks+0x82>
		{
		   //direction = stop
		    SET_BIT(G_u8DataAfterProccing , 0) ;
 80029be:	4b6b      	ldr	r3, [pc, #428]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	4b68      	ldr	r3, [pc, #416]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 80029ca:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 1) ;
 80029cc:	4b67      	ldr	r3, [pc, #412]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	4b65      	ldr	r3, [pc, #404]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 80029d8:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 2) ;
 80029da:	4b64      	ldr	r3, [pc, #400]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	4b61      	ldr	r3, [pc, #388]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 80029e6:	801a      	strh	r2, [r3, #0]
		    CLR_BIT(G_u8DataAfterProccing , 3) ;
 80029e8:	4b60      	ldr	r3, [pc, #384]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	f023 0308 	bic.w	r3, r3, #8
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	4b5e      	ldr	r3, [pc, #376]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 80029f4:	801a      	strh	r2, [r3, #0]
		   /*flag = 3*/
			SET_BIT(G_u8DataAfterProccing , 6) ;
 80029f6:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	4b5a      	ldr	r3, [pc, #360]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002a02:	801a      	strh	r2, [r3, #0]
			SET_BIT(G_u8DataAfterProccing , 7) ;
 8002a04:	4b59      	ldr	r3, [pc, #356]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	4b57      	ldr	r3, [pc, #348]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002a10:	801a      	strh	r2, [r3, #0]
			/*stop car + alarm*/
			G_u8DataAfterProccing = G_u8DataAfterProccing & 0xFF8F ;
 8002a12:	4b56      	ldr	r3, [pc, #344]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002a1e:	801a      	strh	r2, [r3, #0]
			if (speed_control_outomatic == Automatic_ON)
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
			else
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
		}
}
 8002a20:	e09d      	b.n	8002b5e <APP_voidBackward_RightTasks+0x1be>
	else if (G_xNear_Distance.Distance_Left <= UN_SAFE_DISTANCE) //Un Safed Distance
 8002a22:	4b50      	ldr	r3, [pc, #320]	; (8002b64 <APP_voidBackward_RightTasks+0x1c4>)
 8002a24:	789b      	ldrb	r3, [r3, #2]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fce2 	bl	80003f0 <__aeabi_i2d>
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	4b4f      	ldr	r3, [pc, #316]	; (8002b70 <APP_voidBackward_RightTasks+0x1d0>)
 8002a32:	f7fd fdb1 	bl	8000598 <__aeabi_dcmple>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d06a      	beq.n	8002b12 <APP_voidBackward_RightTasks+0x172>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002a3c:	4b4d      	ldr	r3, [pc, #308]	; (8002b74 <APP_voidBackward_RightTasks+0x1d4>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b4b      	ldr	r3, [pc, #300]	; (8002b78 <APP_voidBackward_RightTasks+0x1d8>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	dc31      	bgt.n	8002ab4 <APP_voidBackward_RightTasks+0x114>
					SET_BIT(G_u8DataAfterProccing , 6) ;
 8002a50:	4b46      	ldr	r3, [pc, #280]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	4b44      	ldr	r3, [pc, #272]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002a5c:	801a      	strh	r2, [r3, #0]
					CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002a5e:	4b43      	ldr	r3, [pc, #268]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	4b40      	ldr	r3, [pc, #256]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002a6a:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002a6c:	4b3f      	ldr	r3, [pc, #252]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b21b      	sxth	r3, r3
 8002a72:	f023 030f 	bic.w	r3, r3, #15
 8002a76:	b21a      	sxth	r2, r3
 8002a78:	4b3e      	ldr	r3, [pc, #248]	; (8002b74 <APP_voidBackward_RightTasks+0x1d4>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	b21b      	sxth	r3, r3
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b21b      	sxth	r3, r3
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002a8c:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
 8002a8e:	4b37      	ldr	r3, [pc, #220]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b21b      	sxth	r3, r3
 8002a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a98:	b21a      	sxth	r2, r3
 8002a9a:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <APP_voidBackward_RightTasks+0x1d4>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	b21b      	sxth	r3, r3
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	b21b      	sxth	r3, r3
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	4b2f      	ldr	r3, [pc, #188]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002ab0:	801a      	strh	r2, [r3, #0]
}
 8002ab2:	e054      	b.n	8002b5e <APP_voidBackward_RightTasks+0x1be>
					CLR_BIT(G_u8DataAfterProccing , 6) ;
 8002ab4:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	4b2b      	ldr	r3, [pc, #172]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002ac0:	801a      	strh	r2, [r3, #0]
					SET_BIT(G_u8DataAfterProccing , 7) ;
 8002ac2:	4b2a      	ldr	r3, [pc, #168]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002ace:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002ad0:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	b21b      	sxth	r3, r3
 8002ad6:	f023 030f 	bic.w	r3, r3, #15
 8002ada:	b21a      	sxth	r2, r3
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <APP_voidBackward_RightTasks+0x1d4>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	b21b      	sxth	r3, r3
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	b21b      	sxth	r3, r3
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	4b1f      	ldr	r3, [pc, #124]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002af0:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_u8_LimetedSpeed << 4)) ;
 8002af2:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afc:	b21a      	sxth	r2, r3
 8002afe:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <APP_voidBackward_RightTasks+0x1d8>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	4313      	orrs	r3, r2
 8002b08:	b21b      	sxth	r3, r3
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002b0e:	801a      	strh	r2, [r3, #0]
}
 8002b10:	e025      	b.n	8002b5e <APP_voidBackward_RightTasks+0x1be>
			CLR_BIT(G_u8DataAfterProccing , 6) ;
 8002b12:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002b1e:	801a      	strh	r2, [r3, #0]
			CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002b2c:	801a      	strh	r2, [r3, #0]
			G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002b2e:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	b21b      	sxth	r3, r3
 8002b34:	f023 030f 	bic.w	r3, r3, #15
 8002b38:	b21a      	sxth	r2, r3
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <APP_voidBackward_RightTasks+0x1d4>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	b21b      	sxth	r3, r3
 8002b46:	4313      	orrs	r3, r2
 8002b48:	b21b      	sxth	r3, r3
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002b4e:	801a      	strh	r2, [r3, #0]
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <APP_voidBackward_RightTasks+0x1cc>)
 8002b5c:	801a      	strh	r2, [r3, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	200000fc 	.word	0x200000fc
 8002b68:	40240000 	.word	0x40240000
 8002b6c:	20000100 	.word	0x20000100
 8002b70:	40340000 	.word	0x40340000
 8002b74:	200000f8 	.word	0x200000f8
 8002b78:	200000ca 	.word	0x200000ca

08002b7c <APP_voidBackward_LEFTTasks>:
void APP_voidBackward_LEFTTasks ()
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Right  <= SO_SHORT_DISTANCE) // stop car
 8002b80:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <APP_voidBackward_LEFTTasks+0x1c4>)
 8002b82:	78db      	ldrb	r3, [r3, #3]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fc33 	bl	80003f0 <__aeabi_i2d>
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	4b6d      	ldr	r3, [pc, #436]	; (8002d44 <APP_voidBackward_LEFTTasks+0x1c8>)
 8002b90:	f7fd fd02 	bl	8000598 <__aeabi_dcmple>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d031      	beq.n	8002bfe <APP_voidBackward_LEFTTasks+0x82>
		{
		   //direction = stop
		    SET_BIT(G_u8DataAfterProccing , 0) ;
 8002b9a:	4b6b      	ldr	r3, [pc, #428]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	4b68      	ldr	r3, [pc, #416]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002ba6:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 1) ;
 8002ba8:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	4b65      	ldr	r3, [pc, #404]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002bb4:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 2) ;
 8002bb6:	4b64      	ldr	r3, [pc, #400]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	f043 0304 	orr.w	r3, r3, #4
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002bc2:	801a      	strh	r2, [r3, #0]
		    CLR_BIT(G_u8DataAfterProccing , 3) ;
 8002bc4:	4b60      	ldr	r3, [pc, #384]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	f023 0308 	bic.w	r3, r3, #8
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	4b5e      	ldr	r3, [pc, #376]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002bd0:	801a      	strh	r2, [r3, #0]
		   /*flag = 3*/
			SET_BIT(G_u8DataAfterProccing , 6) ;
 8002bd2:	4b5d      	ldr	r3, [pc, #372]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	4b5a      	ldr	r3, [pc, #360]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002bde:	801a      	strh	r2, [r3, #0]
			SET_BIT(G_u8DataAfterProccing , 7) ;
 8002be0:	4b59      	ldr	r3, [pc, #356]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	4b57      	ldr	r3, [pc, #348]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002bec:	801a      	strh	r2, [r3, #0]
			/*stop car + alarm*/
			G_u8DataAfterProccing = G_u8DataAfterProccing & 0xFF8F ;
 8002bee:	4b56      	ldr	r3, [pc, #344]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	4b53      	ldr	r3, [pc, #332]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002bfa:	801a      	strh	r2, [r3, #0]
=======
 8002372:	e094      	b.n	800249e <APP_voidBackTasks+0x19a>
	else if (G_xNear_Distance.Distance_Back <= UN_SAFE_DISTANCE) //Un Safed Distance
 8002374:	4b4c      	ldr	r3, [pc, #304]	@ (80024a8 <APP_voidBackTasks+0x1a4>)
 8002376:	785b      	ldrb	r3, [r3, #1]
 8002378:	2b14      	cmp	r3, #20
 800237a:	d86a      	bhi.n	8002452 <APP_voidBackTasks+0x14e>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 800237c:	4b4c      	ldr	r3, [pc, #304]	@ (80024b0 <APP_voidBackTasks+0x1ac>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	4b4a      	ldr	r3, [pc, #296]	@ (80024b4 <APP_voidBackTasks+0x1b0>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	dc31      	bgt.n	80023f4 <APP_voidBackTasks+0xf0>
					SET_BIT(G_u8DataAfterProccing , 6) ;
 8002390:	4b46      	ldr	r3, [pc, #280]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002398:	b29a      	uxth	r2, r3
 800239a:	4b44      	ldr	r3, [pc, #272]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 800239c:	801a      	strh	r2, [r3, #0]
					CLR_BIT(G_u8DataAfterProccing , 7) ;
 800239e:	4b43      	ldr	r3, [pc, #268]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	4b40      	ldr	r3, [pc, #256]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 80023aa:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 80023ac:	4b3f      	ldr	r3, [pc, #252]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	f023 030f 	bic.w	r3, r3, #15
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	4b3d      	ldr	r3, [pc, #244]	@ (80024b0 <APP_voidBackTasks+0x1ac>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	b21b      	sxth	r3, r3
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	4b38      	ldr	r3, [pc, #224]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 80023cc:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
 80023ce:	4b37      	ldr	r3, [pc, #220]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023d8:	b21a      	sxth	r2, r3
 80023da:	4b35      	ldr	r3, [pc, #212]	@ (80024b0 <APP_voidBackTasks+0x1ac>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	4313      	orrs	r3, r2
 80023ea:	b21b      	sxth	r3, r3
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	4b2f      	ldr	r3, [pc, #188]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 80023f0:	801a      	strh	r2, [r3, #0]
}
 80023f2:	e054      	b.n	800249e <APP_voidBackTasks+0x19a>
					CLR_BIT(G_u8DataAfterProccing , 6) ;
 80023f4:	4b2d      	ldr	r3, [pc, #180]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	4b2b      	ldr	r3, [pc, #172]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002400:	801a      	strh	r2, [r3, #0]
					SET_BIT(G_u8DataAfterProccing , 7) ;
 8002402:	4b2a      	ldr	r3, [pc, #168]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800240a:	b29a      	uxth	r2, r3
 800240c:	4b27      	ldr	r3, [pc, #156]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 800240e:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002410:	4b26      	ldr	r3, [pc, #152]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b21b      	sxth	r3, r3
 8002416:	f023 030f 	bic.w	r3, r3, #15
 800241a:	b21a      	sxth	r2, r3
 800241c:	4b24      	ldr	r3, [pc, #144]	@ (80024b0 <APP_voidBackTasks+0x1ac>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002424:	b2db      	uxtb	r3, r3
 8002426:	b21b      	sxth	r3, r3
 8002428:	4313      	orrs	r3, r2
 800242a:	b21b      	sxth	r3, r3
 800242c:	b29a      	uxth	r2, r3
 800242e:	4b1f      	ldr	r3, [pc, #124]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002430:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_u8_LimetedSpeed << 4)) ;
 8002432:	4b1e      	ldr	r3, [pc, #120]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b21b      	sxth	r3, r3
 8002438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800243c:	b21a      	sxth	r2, r3
 800243e:	4b1d      	ldr	r3, [pc, #116]	@ (80024b4 <APP_voidBackTasks+0x1b0>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	b21b      	sxth	r3, r3
 8002446:	4313      	orrs	r3, r2
 8002448:	b21b      	sxth	r3, r3
 800244a:	b29a      	uxth	r2, r3
 800244c:	4b17      	ldr	r3, [pc, #92]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 800244e:	801a      	strh	r2, [r3, #0]
}
 8002450:	e025      	b.n	800249e <APP_voidBackTasks+0x19a>
			CLR_BIT(G_u8DataAfterProccing , 6) ;
 8002452:	4b16      	ldr	r3, [pc, #88]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800245a:	b29a      	uxth	r2, r3
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 800245e:	801a      	strh	r2, [r3, #0]
			CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002460:	4b12      	ldr	r3, [pc, #72]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002468:	b29a      	uxth	r2, r3
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 800246c:	801a      	strh	r2, [r3, #0]
			G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 800246e:	4b0f      	ldr	r3, [pc, #60]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b21b      	sxth	r3, r3
 8002474:	f023 030f 	bic.w	r3, r3, #15
 8002478:	b21a      	sxth	r2, r3
 800247a:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <APP_voidBackTasks+0x1ac>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002482:	b2db      	uxtb	r3, r3
 8002484:	b21b      	sxth	r3, r3
 8002486:	4313      	orrs	r3, r2
 8002488:	b21b      	sxth	r3, r3
 800248a:	b29a      	uxth	r2, r3
 800248c:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 800248e:	801a      	strh	r2, [r3, #0]
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
 8002490:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002498:	b29a      	uxth	r2, r3
 800249a:	4b04      	ldr	r3, [pc, #16]	@ (80024ac <APP_voidBackTasks+0x1a8>)
 800249c:	801a      	strh	r2, [r3, #0]
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000104 	.word	0x20000104
 80024ac:	2000010a 	.word	0x2000010a
 80024b0:	20000100 	.word	0x20000100
 80024b4:	200000ca 	.word	0x200000ca

080024b8 <APP_voidBackward_RightTasks>:
void APP_voidBackward_RightTasks ()
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Left  <= SO_SHORT_DISTANCE) // stop car
 80024bc:	4b67      	ldr	r3, [pc, #412]	@ (800265c <APP_voidBackward_RightTasks+0x1a4>)
 80024be:	789b      	ldrb	r3, [r3, #2]
 80024c0:	2b0a      	cmp	r3, #10
 80024c2:	d831      	bhi.n	8002528 <APP_voidBackward_RightTasks+0x70>
		{
		   //direction = stop
		    SET_BIT(G_u8DataAfterProccing , 0) ;
 80024c4:	4b66      	ldr	r3, [pc, #408]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	4b64      	ldr	r3, [pc, #400]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80024d0:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 1) ;
 80024d2:	4b63      	ldr	r3, [pc, #396]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	f043 0302 	orr.w	r3, r3, #2
 80024da:	b29a      	uxth	r2, r3
 80024dc:	4b60      	ldr	r3, [pc, #384]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80024de:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 2) ;
 80024e0:	4b5f      	ldr	r3, [pc, #380]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80024ec:	801a      	strh	r2, [r3, #0]
		    CLR_BIT(G_u8DataAfterProccing , 3) ;
 80024ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	f023 0308 	bic.w	r3, r3, #8
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	4b59      	ldr	r3, [pc, #356]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80024fa:	801a      	strh	r2, [r3, #0]
		   /*flag = 3*/
			SET_BIT(G_u8DataAfterProccing , 6) ;
 80024fc:	4b58      	ldr	r3, [pc, #352]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002504:	b29a      	uxth	r2, r3
 8002506:	4b56      	ldr	r3, [pc, #344]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002508:	801a      	strh	r2, [r3, #0]
			SET_BIT(G_u8DataAfterProccing , 7) ;
 800250a:	4b55      	ldr	r3, [pc, #340]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002512:	b29a      	uxth	r2, r3
 8002514:	4b52      	ldr	r3, [pc, #328]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002516:	801a      	strh	r2, [r3, #0]
			/*stop car + alarm*/
			G_u8DataAfterProccing = G_u8DataAfterProccing & 0xFF8F ;
 8002518:	4b51      	ldr	r3, [pc, #324]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002520:	b29a      	uxth	r2, r3
 8002522:	4b4f      	ldr	r3, [pc, #316]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002524:	801a      	strh	r2, [r3, #0]
			if (speed_control_outomatic == Automatic_ON)
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
			else
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
		}
}
 8002526:	e094      	b.n	8002652 <APP_voidBackward_RightTasks+0x19a>
	else if (G_xNear_Distance.Distance_Left <= UN_SAFE_DISTANCE) //Un Safed Distance
 8002528:	4b4c      	ldr	r3, [pc, #304]	@ (800265c <APP_voidBackward_RightTasks+0x1a4>)
 800252a:	789b      	ldrb	r3, [r3, #2]
 800252c:	2b14      	cmp	r3, #20
 800252e:	d86a      	bhi.n	8002606 <APP_voidBackward_RightTasks+0x14e>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002530:	4b4c      	ldr	r3, [pc, #304]	@ (8002664 <APP_voidBackward_RightTasks+0x1ac>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	4b4a      	ldr	r3, [pc, #296]	@ (8002668 <APP_voidBackward_RightTasks+0x1b0>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	dc31      	bgt.n	80025a8 <APP_voidBackward_RightTasks+0xf0>
					SET_BIT(G_u8DataAfterProccing , 6) ;
 8002544:	4b46      	ldr	r3, [pc, #280]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800254c:	b29a      	uxth	r2, r3
 800254e:	4b44      	ldr	r3, [pc, #272]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002550:	801a      	strh	r2, [r3, #0]
					CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002552:	4b43      	ldr	r3, [pc, #268]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800255a:	b29a      	uxth	r2, r3
 800255c:	4b40      	ldr	r3, [pc, #256]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 800255e:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002560:	4b3f      	ldr	r3, [pc, #252]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b21b      	sxth	r3, r3
 8002566:	f023 030f 	bic.w	r3, r3, #15
 800256a:	b21a      	sxth	r2, r3
 800256c:	4b3d      	ldr	r3, [pc, #244]	@ (8002664 <APP_voidBackward_RightTasks+0x1ac>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002574:	b2db      	uxtb	r3, r3
 8002576:	b21b      	sxth	r3, r3
 8002578:	4313      	orrs	r3, r2
 800257a:	b21b      	sxth	r3, r3
 800257c:	b29a      	uxth	r2, r3
 800257e:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002580:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
 8002582:	4b37      	ldr	r3, [pc, #220]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	b21b      	sxth	r3, r3
 8002588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800258c:	b21a      	sxth	r2, r3
 800258e:	4b35      	ldr	r3, [pc, #212]	@ (8002664 <APP_voidBackward_RightTasks+0x1ac>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	b21b      	sxth	r3, r3
 800259c:	4313      	orrs	r3, r2
 800259e:	b21b      	sxth	r3, r3
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80025a4:	801a      	strh	r2, [r3, #0]
}
 80025a6:	e054      	b.n	8002652 <APP_voidBackward_RightTasks+0x19a>
					CLR_BIT(G_u8DataAfterProccing , 6) ;
 80025a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80025b4:	801a      	strh	r2, [r3, #0]
					SET_BIT(G_u8DataAfterProccing , 7) ;
 80025b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025be:	b29a      	uxth	r2, r3
 80025c0:	4b27      	ldr	r3, [pc, #156]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80025c2:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 80025c4:	4b26      	ldr	r3, [pc, #152]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	b21b      	sxth	r3, r3
 80025ca:	f023 030f 	bic.w	r3, r3, #15
 80025ce:	b21a      	sxth	r2, r3
 80025d0:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <APP_voidBackward_RightTasks+0x1ac>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	b21b      	sxth	r3, r3
 80025dc:	4313      	orrs	r3, r2
 80025de:	b21b      	sxth	r3, r3
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80025e4:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_u8_LimetedSpeed << 4)) ;
 80025e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	b21b      	sxth	r3, r3
 80025ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <APP_voidBackward_RightTasks+0x1b0>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	4313      	orrs	r3, r2
 80025fc:	b21b      	sxth	r3, r3
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b17      	ldr	r3, [pc, #92]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002602:	801a      	strh	r2, [r3, #0]
}
 8002604:	e025      	b.n	8002652 <APP_voidBackward_RightTasks+0x19a>
			CLR_BIT(G_u8DataAfterProccing , 6) ;
 8002606:	4b16      	ldr	r3, [pc, #88]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800260e:	b29a      	uxth	r2, r3
 8002610:	4b13      	ldr	r3, [pc, #76]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002612:	801a      	strh	r2, [r3, #0]
			CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002614:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800261c:	b29a      	uxth	r2, r3
 800261e:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002620:	801a      	strh	r2, [r3, #0]
			G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002622:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	b21b      	sxth	r3, r3
 8002628:	f023 030f 	bic.w	r3, r3, #15
 800262c:	b21a      	sxth	r2, r3
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <APP_voidBackward_RightTasks+0x1ac>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002636:	b2db      	uxtb	r3, r3
 8002638:	b21b      	sxth	r3, r3
 800263a:	4313      	orrs	r3, r2
 800263c:	b21b      	sxth	r3, r3
 800263e:	b29a      	uxth	r2, r3
 8002640:	4b07      	ldr	r3, [pc, #28]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002642:	801a      	strh	r2, [r3, #0]
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
 8002644:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <APP_voidBackward_RightTasks+0x1a8>)
 8002650:	801a      	strh	r2, [r3, #0]
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000104 	.word	0x20000104
 8002660:	2000010a 	.word	0x2000010a
 8002664:	20000100 	.word	0x20000100
 8002668:	200000ca 	.word	0x200000ca

0800266c <APP_voidBackward_LEFTTasks>:
void APP_voidBackward_LEFTTasks ()
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Right  <= SO_SHORT_DISTANCE) // stop car
 8002670:	4b67      	ldr	r3, [pc, #412]	@ (8002810 <APP_voidBackward_LEFTTasks+0x1a4>)
 8002672:	78db      	ldrb	r3, [r3, #3]
 8002674:	2b0a      	cmp	r3, #10
 8002676:	d831      	bhi.n	80026dc <APP_voidBackward_LEFTTasks+0x70>
		{
		   //direction = stop
		    SET_BIT(G_u8DataAfterProccing , 0) ;
 8002678:	4b66      	ldr	r3, [pc, #408]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	4b64      	ldr	r3, [pc, #400]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002684:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 1) ;
 8002686:	4b63      	ldr	r3, [pc, #396]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	f043 0302 	orr.w	r3, r3, #2
 800268e:	b29a      	uxth	r2, r3
 8002690:	4b60      	ldr	r3, [pc, #384]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002692:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 2) ;
 8002694:	4b5f      	ldr	r3, [pc, #380]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	b29a      	uxth	r2, r3
 800269e:	4b5d      	ldr	r3, [pc, #372]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80026a0:	801a      	strh	r2, [r3, #0]
		    CLR_BIT(G_u8DataAfterProccing , 3) ;
 80026a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	f023 0308 	bic.w	r3, r3, #8
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	4b59      	ldr	r3, [pc, #356]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80026ae:	801a      	strh	r2, [r3, #0]
		   /*flag = 3*/
			SET_BIT(G_u8DataAfterProccing , 6) ;
 80026b0:	4b58      	ldr	r3, [pc, #352]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	4b56      	ldr	r3, [pc, #344]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80026bc:	801a      	strh	r2, [r3, #0]
			SET_BIT(G_u8DataAfterProccing , 7) ;
 80026be:	4b55      	ldr	r3, [pc, #340]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	4b52      	ldr	r3, [pc, #328]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80026ca:	801a      	strh	r2, [r3, #0]
			/*stop car + alarm*/
			G_u8DataAfterProccing = G_u8DataAfterProccing & 0xFF8F ;
 80026cc:	4b51      	ldr	r3, [pc, #324]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	4b4f      	ldr	r3, [pc, #316]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80026d8:	801a      	strh	r2, [r3, #0]
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
			if (speed_control_outomatic == Automatic_ON)
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
			else
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
		}
}
<<<<<<< HEAD
 8002bfc:	e09d      	b.n	8002d3a <APP_voidBackward_LEFTTasks+0x1be>
	else if (G_xNear_Distance.Distance_Right <= UN_SAFE_DISTANCE) //Un Safed Distance
 8002bfe:	4b50      	ldr	r3, [pc, #320]	; (8002d40 <APP_voidBackward_LEFTTasks+0x1c4>)
 8002c00:	78db      	ldrb	r3, [r3, #3]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fbf4 	bl	80003f0 <__aeabi_i2d>
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	4b4f      	ldr	r3, [pc, #316]	; (8002d4c <APP_voidBackward_LEFTTasks+0x1d0>)
 8002c0e:	f7fd fcc3 	bl	8000598 <__aeabi_dcmple>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d06a      	beq.n	8002cee <APP_voidBackward_LEFTTasks+0x172>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002c18:	4b4d      	ldr	r3, [pc, #308]	; (8002d50 <APP_voidBackward_LEFTTasks+0x1d4>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b4b      	ldr	r3, [pc, #300]	; (8002d54 <APP_voidBackward_LEFTTasks+0x1d8>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	dc31      	bgt.n	8002c90 <APP_voidBackward_LEFTTasks+0x114>
					SET_BIT(G_u8DataAfterProccing , 6) ;
 8002c2c:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	4b44      	ldr	r3, [pc, #272]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002c38:	801a      	strh	r2, [r3, #0]
					CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002c3a:	4b43      	ldr	r3, [pc, #268]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002c46:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002c48:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	b21b      	sxth	r3, r3
 8002c4e:	f023 030f 	bic.w	r3, r3, #15
 8002c52:	b21a      	sxth	r2, r3
 8002c54:	4b3e      	ldr	r3, [pc, #248]	; (8002d50 <APP_voidBackward_LEFTTasks+0x1d4>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	b21b      	sxth	r3, r3
 8002c60:	4313      	orrs	r3, r2
 8002c62:	b21b      	sxth	r3, r3
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002c68:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
 8002c6a:	4b37      	ldr	r3, [pc, #220]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	b21b      	sxth	r3, r3
 8002c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c74:	b21a      	sxth	r2, r3
 8002c76:	4b36      	ldr	r3, [pc, #216]	; (8002d50 <APP_voidBackward_LEFTTasks+0x1d4>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	b21b      	sxth	r3, r3
 8002c84:	4313      	orrs	r3, r2
 8002c86:	b21b      	sxth	r3, r3
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002c8c:	801a      	strh	r2, [r3, #0]
}
 8002c8e:	e054      	b.n	8002d3a <APP_voidBackward_LEFTTasks+0x1be>
					CLR_BIT(G_u8DataAfterProccing , 6) ;
 8002c90:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002c9c:	801a      	strh	r2, [r3, #0]
					SET_BIT(G_u8DataAfterProccing , 7) ;
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002caa:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002cac:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	b21b      	sxth	r3, r3
 8002cb2:	f023 030f 	bic.w	r3, r3, #15
 8002cb6:	b21a      	sxth	r2, r3
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <APP_voidBackward_LEFTTasks+0x1d4>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	b21b      	sxth	r3, r3
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002ccc:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_u8_LimetedSpeed << 4)) ;
 8002cce:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	b21b      	sxth	r3, r3
 8002cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd8:	b21a      	sxth	r2, r3
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <APP_voidBackward_LEFTTasks+0x1d8>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002cea:	801a      	strh	r2, [r3, #0]
}
 8002cec:	e025      	b.n	8002d3a <APP_voidBackward_LEFTTasks+0x1be>
			CLR_BIT(G_u8DataAfterProccing , 6) ;
 8002cee:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002cfa:	801a      	strh	r2, [r3, #0]
			CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002d08:	801a      	strh	r2, [r3, #0]
			G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002d0a:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b21b      	sxth	r3, r3
 8002d10:	f023 030f 	bic.w	r3, r3, #15
 8002d14:	b21a      	sxth	r2, r3
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <APP_voidBackward_LEFTTasks+0x1d4>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	b21b      	sxth	r3, r3
 8002d22:	4313      	orrs	r3, r2
 8002d24:	b21b      	sxth	r3, r3
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002d2a:	801a      	strh	r2, [r3, #0]
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <APP_voidBackward_LEFTTasks+0x1cc>)
 8002d38:	801a      	strh	r2, [r3, #0]
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	200000fc 	.word	0x200000fc
 8002d44:	40240000 	.word	0x40240000
 8002d48:	20000100 	.word	0x20000100
 8002d4c:	40340000 	.word	0x40340000
 8002d50:	200000f8 	.word	0x200000f8
 8002d54:	200000ca 	.word	0x200000ca

08002d58 <APP_voidRight_LeftTasks>:
void APP_voidRight_LeftTasks ()
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0

}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <APP_voidForward_RightTasks>:
void APP_voidForward_RightTasks ()
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Right  <= SO_SHORT_DISTANCE) // stop car
 8002d68:	4b6f      	ldr	r3, [pc, #444]	; (8002f28 <APP_voidForward_RightTasks+0x1c4>)
 8002d6a:	78db      	ldrb	r3, [r3, #3]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fb3f 	bl	80003f0 <__aeabi_i2d>
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	4b6d      	ldr	r3, [pc, #436]	; (8002f2c <APP_voidForward_RightTasks+0x1c8>)
 8002d78:	f7fd fc0e 	bl	8000598 <__aeabi_dcmple>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d031      	beq.n	8002de6 <APP_voidForward_RightTasks+0x82>
		{
		   //direction = stop
		    SET_BIT(G_u8DataAfterProccing , 0) ;
 8002d82:	4b6b      	ldr	r3, [pc, #428]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	4b68      	ldr	r3, [pc, #416]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002d8e:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 1) ;
 8002d90:	4b67      	ldr	r3, [pc, #412]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002d9c:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 2) ;
 8002d9e:	4b64      	ldr	r3, [pc, #400]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	4b61      	ldr	r3, [pc, #388]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002daa:	801a      	strh	r2, [r3, #0]
		    CLR_BIT(G_u8DataAfterProccing , 3) ;
 8002dac:	4b60      	ldr	r3, [pc, #384]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	f023 0308 	bic.w	r3, r3, #8
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	4b5e      	ldr	r3, [pc, #376]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002db8:	801a      	strh	r2, [r3, #0]
		   /*flag = 3*/
			SET_BIT(G_u8DataAfterProccing , 6) ;
 8002dba:	4b5d      	ldr	r3, [pc, #372]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	4b5a      	ldr	r3, [pc, #360]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002dc6:	801a      	strh	r2, [r3, #0]
			SET_BIT(G_u8DataAfterProccing , 7) ;
 8002dc8:	4b59      	ldr	r3, [pc, #356]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	4b57      	ldr	r3, [pc, #348]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002dd4:	801a      	strh	r2, [r3, #0]
			/*stop car + alarm*/
			G_u8DataAfterProccing = G_u8DataAfterProccing & 0xFF8F ;
 8002dd6:	4b56      	ldr	r3, [pc, #344]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	4b53      	ldr	r3, [pc, #332]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002de2:	801a      	strh	r2, [r3, #0]
=======
 80026da:	e094      	b.n	8002806 <APP_voidBackward_LEFTTasks+0x19a>
	else if (G_xNear_Distance.Distance_Right <= UN_SAFE_DISTANCE) //Un Safed Distance
 80026dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002810 <APP_voidBackward_LEFTTasks+0x1a4>)
 80026de:	78db      	ldrb	r3, [r3, #3]
 80026e0:	2b14      	cmp	r3, #20
 80026e2:	d86a      	bhi.n	80027ba <APP_voidBackward_LEFTTasks+0x14e>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 80026e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002818 <APP_voidBackward_LEFTTasks+0x1ac>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	4b4a      	ldr	r3, [pc, #296]	@ (800281c <APP_voidBackward_LEFTTasks+0x1b0>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dc31      	bgt.n	800275c <APP_voidBackward_LEFTTasks+0xf0>
					SET_BIT(G_u8DataAfterProccing , 6) ;
 80026f8:	4b46      	ldr	r3, [pc, #280]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002700:	b29a      	uxth	r2, r3
 8002702:	4b44      	ldr	r3, [pc, #272]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002704:	801a      	strh	r2, [r3, #0]
					CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002706:	4b43      	ldr	r3, [pc, #268]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800270e:	b29a      	uxth	r2, r3
 8002710:	4b40      	ldr	r3, [pc, #256]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002712:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002714:	4b3f      	ldr	r3, [pc, #252]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	b21b      	sxth	r3, r3
 800271a:	f023 030f 	bic.w	r3, r3, #15
 800271e:	b21a      	sxth	r2, r3
 8002720:	4b3d      	ldr	r3, [pc, #244]	@ (8002818 <APP_voidBackward_LEFTTasks+0x1ac>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002728:	b2db      	uxtb	r3, r3
 800272a:	b21b      	sxth	r3, r3
 800272c:	4313      	orrs	r3, r2
 800272e:	b21b      	sxth	r3, r3
 8002730:	b29a      	uxth	r2, r3
 8002732:	4b38      	ldr	r3, [pc, #224]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002734:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
 8002736:	4b37      	ldr	r3, [pc, #220]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b21b      	sxth	r3, r3
 800273c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002740:	b21a      	sxth	r2, r3
 8002742:	4b35      	ldr	r3, [pc, #212]	@ (8002818 <APP_voidBackward_LEFTTasks+0x1ac>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	b21b      	sxth	r3, r3
 8002750:	4313      	orrs	r3, r2
 8002752:	b21b      	sxth	r3, r3
 8002754:	b29a      	uxth	r2, r3
 8002756:	4b2f      	ldr	r3, [pc, #188]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002758:	801a      	strh	r2, [r3, #0]
}
 800275a:	e054      	b.n	8002806 <APP_voidBackward_LEFTTasks+0x19a>
					CLR_BIT(G_u8DataAfterProccing , 6) ;
 800275c:	4b2d      	ldr	r3, [pc, #180]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002764:	b29a      	uxth	r2, r3
 8002766:	4b2b      	ldr	r3, [pc, #172]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002768:	801a      	strh	r2, [r3, #0]
					SET_BIT(G_u8DataAfterProccing , 7) ;
 800276a:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002772:	b29a      	uxth	r2, r3
 8002774:	4b27      	ldr	r3, [pc, #156]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002776:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002778:	4b26      	ldr	r3, [pc, #152]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	b21b      	sxth	r3, r3
 800277e:	f023 030f 	bic.w	r3, r3, #15
 8002782:	b21a      	sxth	r2, r3
 8002784:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <APP_voidBackward_LEFTTasks+0x1ac>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800278c:	b2db      	uxtb	r3, r3
 800278e:	b21b      	sxth	r3, r3
 8002790:	4313      	orrs	r3, r2
 8002792:	b21b      	sxth	r3, r3
 8002794:	b29a      	uxth	r2, r3
 8002796:	4b1f      	ldr	r3, [pc, #124]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002798:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_u8_LimetedSpeed << 4)) ;
 800279a:	4b1e      	ldr	r3, [pc, #120]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b21b      	sxth	r3, r3
 80027a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027a4:	b21a      	sxth	r2, r3
 80027a6:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <APP_voidBackward_LEFTTasks+0x1b0>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	b21b      	sxth	r3, r3
 80027ae:	4313      	orrs	r3, r2
 80027b0:	b21b      	sxth	r3, r3
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	4b17      	ldr	r3, [pc, #92]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80027b6:	801a      	strh	r2, [r3, #0]
}
 80027b8:	e025      	b.n	8002806 <APP_voidBackward_LEFTTasks+0x19a>
			CLR_BIT(G_u8DataAfterProccing , 6) ;
 80027ba:	4b16      	ldr	r3, [pc, #88]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	4b13      	ldr	r3, [pc, #76]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80027c6:	801a      	strh	r2, [r3, #0]
			CLR_BIT(G_u8DataAfterProccing , 7) ;
 80027c8:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80027d4:	801a      	strh	r2, [r3, #0]
			G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 80027d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b21b      	sxth	r3, r3
 80027dc:	f023 030f 	bic.w	r3, r3, #15
 80027e0:	b21a      	sxth	r2, r3
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <APP_voidBackward_LEFTTasks+0x1ac>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	b21b      	sxth	r3, r3
 80027ee:	4313      	orrs	r3, r2
 80027f0:	b21b      	sxth	r3, r3
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	4b07      	ldr	r3, [pc, #28]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80027f6:	801a      	strh	r2, [r3, #0]
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002800:	b29a      	uxth	r2, r3
 8002802:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <APP_voidBackward_LEFTTasks+0x1a8>)
 8002804:	801a      	strh	r2, [r3, #0]
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000104 	.word	0x20000104
 8002814:	2000010a 	.word	0x2000010a
 8002818:	20000100 	.word	0x20000100
 800281c:	200000ca 	.word	0x200000ca

08002820 <APP_voidRight_LeftTasks>:
void APP_voidRight_LeftTasks ()
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0

}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <APP_voidForward_RightTasks>:
void APP_voidForward_RightTasks ()
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Right  <= SO_SHORT_DISTANCE) // stop car
 8002830:	4b67      	ldr	r3, [pc, #412]	@ (80029d0 <APP_voidForward_RightTasks+0x1a4>)
 8002832:	78db      	ldrb	r3, [r3, #3]
 8002834:	2b0a      	cmp	r3, #10
 8002836:	d831      	bhi.n	800289c <APP_voidForward_RightTasks+0x70>
		{
		   //direction = stop
		    SET_BIT(G_u8DataAfterProccing , 0) ;
 8002838:	4b66      	ldr	r3, [pc, #408]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	4b64      	ldr	r3, [pc, #400]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002844:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 1) ;
 8002846:	4b63      	ldr	r3, [pc, #396]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	f043 0302 	orr.w	r3, r3, #2
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b60      	ldr	r3, [pc, #384]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002852:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 2) ;
 8002854:	4b5f      	ldr	r3, [pc, #380]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	b29a      	uxth	r2, r3
 800285e:	4b5d      	ldr	r3, [pc, #372]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002860:	801a      	strh	r2, [r3, #0]
		    CLR_BIT(G_u8DataAfterProccing , 3) ;
 8002862:	4b5c      	ldr	r3, [pc, #368]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	f023 0308 	bic.w	r3, r3, #8
 800286a:	b29a      	uxth	r2, r3
 800286c:	4b59      	ldr	r3, [pc, #356]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 800286e:	801a      	strh	r2, [r3, #0]
		   /*flag = 3*/
			SET_BIT(G_u8DataAfterProccing , 6) ;
 8002870:	4b58      	ldr	r3, [pc, #352]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002878:	b29a      	uxth	r2, r3
 800287a:	4b56      	ldr	r3, [pc, #344]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 800287c:	801a      	strh	r2, [r3, #0]
			SET_BIT(G_u8DataAfterProccing , 7) ;
 800287e:	4b55      	ldr	r3, [pc, #340]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002886:	b29a      	uxth	r2, r3
 8002888:	4b52      	ldr	r3, [pc, #328]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 800288a:	801a      	strh	r2, [r3, #0]
			/*stop car + alarm*/
			G_u8DataAfterProccing = G_u8DataAfterProccing & 0xFF8F ;
 800288c:	4b51      	ldr	r3, [pc, #324]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002894:	b29a      	uxth	r2, r3
 8002896:	4b4f      	ldr	r3, [pc, #316]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002898:	801a      	strh	r2, [r3, #0]
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
			if (speed_control_outomatic == Automatic_ON)
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
			else
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
		}
}
<<<<<<< HEAD
 8002de4:	e09d      	b.n	8002f22 <APP_voidForward_RightTasks+0x1be>
	else if (G_xNear_Distance.Distance_Right <= UN_SAFE_DISTANCE) //Un Safed Distance
 8002de6:	4b50      	ldr	r3, [pc, #320]	; (8002f28 <APP_voidForward_RightTasks+0x1c4>)
 8002de8:	78db      	ldrb	r3, [r3, #3]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fb00 	bl	80003f0 <__aeabi_i2d>
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	4b4f      	ldr	r3, [pc, #316]	; (8002f34 <APP_voidForward_RightTasks+0x1d0>)
 8002df6:	f7fd fbcf 	bl	8000598 <__aeabi_dcmple>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d06a      	beq.n	8002ed6 <APP_voidForward_RightTasks+0x172>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002e00:	4b4d      	ldr	r3, [pc, #308]	; (8002f38 <APP_voidForward_RightTasks+0x1d4>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b4b      	ldr	r3, [pc, #300]	; (8002f3c <APP_voidForward_RightTasks+0x1d8>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	dc31      	bgt.n	8002e78 <APP_voidForward_RightTasks+0x114>
					SET_BIT(G_u8DataAfterProccing , 6) ;
 8002e14:	4b46      	ldr	r3, [pc, #280]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	4b44      	ldr	r3, [pc, #272]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002e20:	801a      	strh	r2, [r3, #0]
					CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002e22:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4b40      	ldr	r3, [pc, #256]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002e2e:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002e30:	4b3f      	ldr	r3, [pc, #252]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	b21b      	sxth	r3, r3
 8002e36:	f023 030f 	bic.w	r3, r3, #15
 8002e3a:	b21a      	sxth	r2, r3
 8002e3c:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <APP_voidForward_RightTasks+0x1d4>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	b21b      	sxth	r3, r3
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	b21b      	sxth	r3, r3
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	4b38      	ldr	r3, [pc, #224]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002e50:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
 8002e52:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	b21b      	sxth	r3, r3
 8002e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5c:	b21a      	sxth	r2, r3
 8002e5e:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <APP_voidForward_RightTasks+0x1d4>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002e74:	801a      	strh	r2, [r3, #0]
}
 8002e76:	e054      	b.n	8002f22 <APP_voidForward_RightTasks+0x1be>
					CLR_BIT(G_u8DataAfterProccing , 6) ;
 8002e78:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002e84:	801a      	strh	r2, [r3, #0]
					SET_BIT(G_u8DataAfterProccing , 7) ;
 8002e86:	4b2a      	ldr	r3, [pc, #168]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002e92:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002e94:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	b21b      	sxth	r3, r3
 8002e9a:	f023 030f 	bic.w	r3, r3, #15
 8002e9e:	b21a      	sxth	r2, r3
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <APP_voidForward_RightTasks+0x1d4>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	b21b      	sxth	r3, r3
 8002eac:	4313      	orrs	r3, r2
 8002eae:	b21b      	sxth	r3, r3
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002eb4:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_u8_LimetedSpeed << 4)) ;
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec0:	b21a      	sxth	r2, r3
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <APP_voidForward_RightTasks+0x1d8>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	b21b      	sxth	r3, r3
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	b21b      	sxth	r3, r3
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002ed2:	801a      	strh	r2, [r3, #0]
}
 8002ed4:	e025      	b.n	8002f22 <APP_voidForward_RightTasks+0x1be>
			CLR_BIT(G_u8DataAfterProccing , 6) ;
 8002ed6:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002ee2:	801a      	strh	r2, [r3, #0]
			CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002ef0:	801a      	strh	r2, [r3, #0]
			G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b21b      	sxth	r3, r3
 8002ef8:	f023 030f 	bic.w	r3, r3, #15
 8002efc:	b21a      	sxth	r2, r3
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <APP_voidForward_RightTasks+0x1d4>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	b21b      	sxth	r3, r3
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	b21b      	sxth	r3, r3
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002f12:	801a      	strh	r2, [r3, #0]
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <APP_voidForward_RightTasks+0x1cc>)
 8002f20:	801a      	strh	r2, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200000fc 	.word	0x200000fc
 8002f2c:	40240000 	.word	0x40240000
 8002f30:	20000100 	.word	0x20000100
 8002f34:	40340000 	.word	0x40340000
 8002f38:	200000f8 	.word	0x200000f8
 8002f3c:	200000ca 	.word	0x200000ca

08002f40 <APP_voidForward_LeftTasks>:
void APP_voidForward_LeftTasks ()
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Left  <= SO_SHORT_DISTANCE) // stop car
 8002f44:	4b6f      	ldr	r3, [pc, #444]	; (8003104 <APP_voidForward_LeftTasks+0x1c4>)
 8002f46:	789b      	ldrb	r3, [r3, #2]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd fa51 	bl	80003f0 <__aeabi_i2d>
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	4b6d      	ldr	r3, [pc, #436]	; (8003108 <APP_voidForward_LeftTasks+0x1c8>)
 8002f54:	f7fd fb20 	bl	8000598 <__aeabi_dcmple>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d031      	beq.n	8002fc2 <APP_voidForward_LeftTasks+0x82>
		{
		   //direction = stop
		    SET_BIT(G_u8DataAfterProccing , 0) ;
 8002f5e:	4b6b      	ldr	r3, [pc, #428]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	4b68      	ldr	r3, [pc, #416]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002f6a:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 1) ;
 8002f6c:	4b67      	ldr	r3, [pc, #412]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	4b65      	ldr	r3, [pc, #404]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002f78:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 2) ;
 8002f7a:	4b64      	ldr	r3, [pc, #400]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	f043 0304 	orr.w	r3, r3, #4
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	4b61      	ldr	r3, [pc, #388]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002f86:	801a      	strh	r2, [r3, #0]
		    CLR_BIT(G_u8DataAfterProccing , 3) ;
 8002f88:	4b60      	ldr	r3, [pc, #384]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	f023 0308 	bic.w	r3, r3, #8
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	4b5e      	ldr	r3, [pc, #376]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002f94:	801a      	strh	r2, [r3, #0]
		   /*flag = 3*/
			SET_BIT(G_u8DataAfterProccing , 6) ;
 8002f96:	4b5d      	ldr	r3, [pc, #372]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	4b5a      	ldr	r3, [pc, #360]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002fa2:	801a      	strh	r2, [r3, #0]
			SET_BIT(G_u8DataAfterProccing , 7) ;
 8002fa4:	4b59      	ldr	r3, [pc, #356]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	4b57      	ldr	r3, [pc, #348]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002fb0:	801a      	strh	r2, [r3, #0]
			/*stop car + alarm*/
			G_u8DataAfterProccing = G_u8DataAfterProccing & 0xFF8F ;
 8002fb2:	4b56      	ldr	r3, [pc, #344]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	4b53      	ldr	r3, [pc, #332]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002fbe:	801a      	strh	r2, [r3, #0]
=======
 800289a:	e094      	b.n	80029c6 <APP_voidForward_RightTasks+0x19a>
	else if (G_xNear_Distance.Distance_Right <= UN_SAFE_DISTANCE) //Un Safed Distance
 800289c:	4b4c      	ldr	r3, [pc, #304]	@ (80029d0 <APP_voidForward_RightTasks+0x1a4>)
 800289e:	78db      	ldrb	r3, [r3, #3]
 80028a0:	2b14      	cmp	r3, #20
 80028a2:	d86a      	bhi.n	800297a <APP_voidForward_RightTasks+0x14e>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 80028a4:	4b4c      	ldr	r3, [pc, #304]	@ (80029d8 <APP_voidForward_RightTasks+0x1ac>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b4a      	ldr	r3, [pc, #296]	@ (80029dc <APP_voidForward_RightTasks+0x1b0>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	dc31      	bgt.n	800291c <APP_voidForward_RightTasks+0xf0>
					SET_BIT(G_u8DataAfterProccing , 6) ;
 80028b8:	4b46      	ldr	r3, [pc, #280]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	4b44      	ldr	r3, [pc, #272]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 80028c4:	801a      	strh	r2, [r3, #0]
					CLR_BIT(G_u8DataAfterProccing , 7) ;
 80028c6:	4b43      	ldr	r3, [pc, #268]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	4b40      	ldr	r3, [pc, #256]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 80028d2:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 80028d4:	4b3f      	ldr	r3, [pc, #252]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b21b      	sxth	r3, r3
 80028da:	f023 030f 	bic.w	r3, r3, #15
 80028de:	b21a      	sxth	r2, r3
 80028e0:	4b3d      	ldr	r3, [pc, #244]	@ (80029d8 <APP_voidForward_RightTasks+0x1ac>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	4313      	orrs	r3, r2
 80028ee:	b21b      	sxth	r3, r3
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	4b38      	ldr	r3, [pc, #224]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 80028f4:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
 80028f6:	4b37      	ldr	r3, [pc, #220]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b21b      	sxth	r3, r3
 80028fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002900:	b21a      	sxth	r2, r3
 8002902:	4b35      	ldr	r3, [pc, #212]	@ (80029d8 <APP_voidForward_RightTasks+0x1ac>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	b21b      	sxth	r3, r3
 8002910:	4313      	orrs	r3, r2
 8002912:	b21b      	sxth	r3, r3
 8002914:	b29a      	uxth	r2, r3
 8002916:	4b2f      	ldr	r3, [pc, #188]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002918:	801a      	strh	r2, [r3, #0]
}
 800291a:	e054      	b.n	80029c6 <APP_voidForward_RightTasks+0x19a>
					CLR_BIT(G_u8DataAfterProccing , 6) ;
 800291c:	4b2d      	ldr	r3, [pc, #180]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002924:	b29a      	uxth	r2, r3
 8002926:	4b2b      	ldr	r3, [pc, #172]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002928:	801a      	strh	r2, [r3, #0]
					SET_BIT(G_u8DataAfterProccing , 7) ;
 800292a:	4b2a      	ldr	r3, [pc, #168]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002932:	b29a      	uxth	r2, r3
 8002934:	4b27      	ldr	r3, [pc, #156]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002936:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002938:	4b26      	ldr	r3, [pc, #152]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	b21b      	sxth	r3, r3
 800293e:	f023 030f 	bic.w	r3, r3, #15
 8002942:	b21a      	sxth	r2, r3
 8002944:	4b24      	ldr	r3, [pc, #144]	@ (80029d8 <APP_voidForward_RightTasks+0x1ac>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800294c:	b2db      	uxtb	r3, r3
 800294e:	b21b      	sxth	r3, r3
 8002950:	4313      	orrs	r3, r2
 8002952:	b21b      	sxth	r3, r3
 8002954:	b29a      	uxth	r2, r3
 8002956:	4b1f      	ldr	r3, [pc, #124]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002958:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_u8_LimetedSpeed << 4)) ;
 800295a:	4b1e      	ldr	r3, [pc, #120]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	b21b      	sxth	r3, r3
 8002960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002964:	b21a      	sxth	r2, r3
 8002966:	4b1d      	ldr	r3, [pc, #116]	@ (80029dc <APP_voidForward_RightTasks+0x1b0>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	b21b      	sxth	r3, r3
 800296e:	4313      	orrs	r3, r2
 8002970:	b21b      	sxth	r3, r3
 8002972:	b29a      	uxth	r2, r3
 8002974:	4b17      	ldr	r3, [pc, #92]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002976:	801a      	strh	r2, [r3, #0]
}
 8002978:	e025      	b.n	80029c6 <APP_voidForward_RightTasks+0x19a>
			CLR_BIT(G_u8DataAfterProccing , 6) ;
 800297a:	4b16      	ldr	r3, [pc, #88]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002982:	b29a      	uxth	r2, r3
 8002984:	4b13      	ldr	r3, [pc, #76]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002986:	801a      	strh	r2, [r3, #0]
			CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002988:	4b12      	ldr	r3, [pc, #72]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002990:	b29a      	uxth	r2, r3
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002994:	801a      	strh	r2, [r3, #0]
			G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002996:	4b0f      	ldr	r3, [pc, #60]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	b21b      	sxth	r3, r3
 800299c:	f023 030f 	bic.w	r3, r3, #15
 80029a0:	b21a      	sxth	r2, r3
 80029a2:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <APP_voidForward_RightTasks+0x1ac>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	b21b      	sxth	r3, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b07      	ldr	r3, [pc, #28]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 80029b6:	801a      	strh	r2, [r3, #0]
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
 80029b8:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	4b04      	ldr	r3, [pc, #16]	@ (80029d4 <APP_voidForward_RightTasks+0x1a8>)
 80029c4:	801a      	strh	r2, [r3, #0]
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000104 	.word	0x20000104
 80029d4:	2000010a 	.word	0x2000010a
 80029d8:	20000100 	.word	0x20000100
 80029dc:	200000ca 	.word	0x200000ca

080029e0 <APP_voidForward_LeftTasks>:
void APP_voidForward_LeftTasks ()
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
	if (G_xNear_Distance.Distance_Left  <= SO_SHORT_DISTANCE) // stop car
 80029e4:	4b67      	ldr	r3, [pc, #412]	@ (8002b84 <APP_voidForward_LeftTasks+0x1a4>)
 80029e6:	789b      	ldrb	r3, [r3, #2]
 80029e8:	2b0a      	cmp	r3, #10
 80029ea:	d831      	bhi.n	8002a50 <APP_voidForward_LeftTasks+0x70>
		{
		   //direction = stop
		    SET_BIT(G_u8DataAfterProccing , 0) ;
 80029ec:	4b66      	ldr	r3, [pc, #408]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	4b64      	ldr	r3, [pc, #400]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 80029f8:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 1) ;
 80029fa:	4b63      	ldr	r3, [pc, #396]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	f043 0302 	orr.w	r3, r3, #2
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	4b60      	ldr	r3, [pc, #384]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a06:	801a      	strh	r2, [r3, #0]
		    SET_BIT(G_u8DataAfterProccing , 2) ;
 8002a08:	4b5f      	ldr	r3, [pc, #380]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	4b5d      	ldr	r3, [pc, #372]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a14:	801a      	strh	r2, [r3, #0]
		    CLR_BIT(G_u8DataAfterProccing , 3) ;
 8002a16:	4b5c      	ldr	r3, [pc, #368]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	f023 0308 	bic.w	r3, r3, #8
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	4b59      	ldr	r3, [pc, #356]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a22:	801a      	strh	r2, [r3, #0]
		   /*flag = 3*/
			SET_BIT(G_u8DataAfterProccing , 6) ;
 8002a24:	4b58      	ldr	r3, [pc, #352]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	4b56      	ldr	r3, [pc, #344]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a30:	801a      	strh	r2, [r3, #0]
			SET_BIT(G_u8DataAfterProccing , 7) ;
 8002a32:	4b55      	ldr	r3, [pc, #340]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	4b52      	ldr	r3, [pc, #328]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a3e:	801a      	strh	r2, [r3, #0]
			/*stop car + alarm*/
			G_u8DataAfterProccing = G_u8DataAfterProccing & 0xFF8F ;
 8002a40:	4b51      	ldr	r3, [pc, #324]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	4b4f      	ldr	r3, [pc, #316]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a4c:	801a      	strh	r2, [r3, #0]
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
			if (speed_control_outomatic == Automatic_ON)
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
			else
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
		}
}
<<<<<<< HEAD
 8002fc0:	e09d      	b.n	80030fe <APP_voidForward_LeftTasks+0x1be>
	else if (G_xNear_Distance.Distance_Left <= UN_SAFE_DISTANCE) //Un Safed Distance
 8002fc2:	4b50      	ldr	r3, [pc, #320]	; (8003104 <APP_voidForward_LeftTasks+0x1c4>)
 8002fc4:	789b      	ldrb	r3, [r3, #2]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd fa12 	bl	80003f0 <__aeabi_i2d>
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	4b4f      	ldr	r3, [pc, #316]	; (8003110 <APP_voidForward_LeftTasks+0x1d0>)
 8002fd2:	f7fd fae1 	bl	8000598 <__aeabi_dcmple>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d06a      	beq.n	80030b2 <APP_voidForward_LeftTasks+0x172>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002fdc:	4b4d      	ldr	r3, [pc, #308]	; (8003114 <APP_voidForward_LeftTasks+0x1d4>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b4b      	ldr	r3, [pc, #300]	; (8003118 <APP_voidForward_LeftTasks+0x1d8>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	dc31      	bgt.n	8003054 <APP_voidForward_LeftTasks+0x114>
					SET_BIT(G_u8DataAfterProccing , 6) ;
 8002ff0:	4b46      	ldr	r3, [pc, #280]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	4b44      	ldr	r3, [pc, #272]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8002ffc:	801a      	strh	r2, [r3, #0]
					CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002ffe:	4b43      	ldr	r3, [pc, #268]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003006:	b29a      	uxth	r2, r3
 8003008:	4b40      	ldr	r3, [pc, #256]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 800300a:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 800300c:	4b3f      	ldr	r3, [pc, #252]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b21b      	sxth	r3, r3
 8003012:	f023 030f 	bic.w	r3, r3, #15
 8003016:	b21a      	sxth	r2, r3
 8003018:	4b3e      	ldr	r3, [pc, #248]	; (8003114 <APP_voidForward_LeftTasks+0x1d4>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003020:	b2db      	uxtb	r3, r3
 8003022:	b21b      	sxth	r3, r3
 8003024:	4313      	orrs	r3, r2
 8003026:	b21b      	sxth	r3, r3
 8003028:	b29a      	uxth	r2, r3
 800302a:	4b38      	ldr	r3, [pc, #224]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 800302c:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b21b      	sxth	r3, r3
 8003034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003038:	b21a      	sxth	r2, r3
 800303a:	4b36      	ldr	r3, [pc, #216]	; (8003114 <APP_voidForward_LeftTasks+0x1d4>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	b21b      	sxth	r3, r3
 8003048:	4313      	orrs	r3, r2
 800304a:	b21b      	sxth	r3, r3
 800304c:	b29a      	uxth	r2, r3
 800304e:	4b2f      	ldr	r3, [pc, #188]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8003050:	801a      	strh	r2, [r3, #0]
}
 8003052:	e054      	b.n	80030fe <APP_voidForward_LeftTasks+0x1be>
					CLR_BIT(G_u8DataAfterProccing , 6) ;
 8003054:	4b2d      	ldr	r3, [pc, #180]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800305c:	b29a      	uxth	r2, r3
 800305e:	4b2b      	ldr	r3, [pc, #172]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8003060:	801a      	strh	r2, [r3, #0]
					SET_BIT(G_u8DataAfterProccing , 7) ;
 8003062:	4b2a      	ldr	r3, [pc, #168]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306a:	b29a      	uxth	r2, r3
 800306c:	4b27      	ldr	r3, [pc, #156]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 800306e:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8003070:	4b26      	ldr	r3, [pc, #152]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	b21b      	sxth	r3, r3
 8003076:	f023 030f 	bic.w	r3, r3, #15
 800307a:	b21a      	sxth	r2, r3
 800307c:	4b25      	ldr	r3, [pc, #148]	; (8003114 <APP_voidForward_LeftTasks+0x1d4>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003084:	b2db      	uxtb	r3, r3
 8003086:	b21b      	sxth	r3, r3
 8003088:	4313      	orrs	r3, r2
 800308a:	b21b      	sxth	r3, r3
 800308c:	b29a      	uxth	r2, r3
 800308e:	4b1f      	ldr	r3, [pc, #124]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8003090:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_u8_LimetedSpeed << 4)) ;
 8003092:	4b1e      	ldr	r3, [pc, #120]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b21b      	sxth	r3, r3
 8003098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309c:	b21a      	sxth	r2, r3
 800309e:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <APP_voidForward_LeftTasks+0x1d8>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	b21b      	sxth	r3, r3
 80030a6:	4313      	orrs	r3, r2
 80030a8:	b21b      	sxth	r3, r3
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	4b17      	ldr	r3, [pc, #92]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 80030ae:	801a      	strh	r2, [r3, #0]
}
 80030b0:	e025      	b.n	80030fe <APP_voidForward_LeftTasks+0x1be>
			CLR_BIT(G_u8DataAfterProccing , 6) ;
 80030b2:	4b16      	ldr	r3, [pc, #88]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	4b13      	ldr	r3, [pc, #76]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 80030be:	801a      	strh	r2, [r3, #0]
			CLR_BIT(G_u8DataAfterProccing , 7) ;
 80030c0:	4b12      	ldr	r3, [pc, #72]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 80030cc:	801a      	strh	r2, [r3, #0]
			G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	b21b      	sxth	r3, r3
 80030d4:	f023 030f 	bic.w	r3, r3, #15
 80030d8:	b21a      	sxth	r2, r3
 80030da:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <APP_voidForward_LeftTasks+0x1d4>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b21b      	sxth	r3, r3
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	4b07      	ldr	r3, [pc, #28]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 80030ee:	801a      	strh	r2, [r3, #0]
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	4b04      	ldr	r3, [pc, #16]	; (800310c <APP_voidForward_LeftTasks+0x1cc>)
 80030fc:	801a      	strh	r2, [r3, #0]
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200000fc 	.word	0x200000fc
 8003108:	40240000 	.word	0x40240000
 800310c:	20000100 	.word	0x20000100
 8003110:	40340000 	.word	0x40340000
 8003114:	200000f8 	.word	0x200000f8
 8003118:	200000ca 	.word	0x200000ca

0800311c <APP_GET_UART_Command>:
=======
 8002a4e:	e094      	b.n	8002b7a <APP_voidForward_LeftTasks+0x19a>
	else if (G_xNear_Distance.Distance_Left <= UN_SAFE_DISTANCE) //Un Safed Distance
 8002a50:	4b4c      	ldr	r3, [pc, #304]	@ (8002b84 <APP_voidForward_LeftTasks+0x1a4>)
 8002a52:	789b      	ldrb	r3, [r3, #2]
 8002a54:	2b14      	cmp	r3, #20
 8002a56:	d86a      	bhi.n	8002b2e <APP_voidForward_LeftTasks+0x14e>
				if (G_xMy_Data.Speed <= G_u8_LimetedSpeed)
 8002a58:	4b4c      	ldr	r3, [pc, #304]	@ (8002b8c <APP_voidForward_LeftTasks+0x1ac>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	4b4a      	ldr	r3, [pc, #296]	@ (8002b90 <APP_voidForward_LeftTasks+0x1b0>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	dc31      	bgt.n	8002ad0 <APP_voidForward_LeftTasks+0xf0>
					SET_BIT(G_u8DataAfterProccing , 6) ;
 8002a6c:	4b46      	ldr	r3, [pc, #280]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	4b44      	ldr	r3, [pc, #272]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a78:	801a      	strh	r2, [r3, #0]
					CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002a7a:	4b43      	ldr	r3, [pc, #268]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	4b40      	ldr	r3, [pc, #256]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a86:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002a88:	4b3f      	ldr	r3, [pc, #252]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	b21b      	sxth	r3, r3
 8002a8e:	f023 030f 	bic.w	r3, r3, #15
 8002a92:	b21a      	sxth	r2, r3
 8002a94:	4b3d      	ldr	r3, [pc, #244]	@ (8002b8c <APP_voidForward_LeftTasks+0x1ac>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	b21b      	sxth	r3, r3
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	b21b      	sxth	r3, r3
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	4b38      	ldr	r3, [pc, #224]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002aa8:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_xMy_Data.Speed << 4)) ;
 8002aaa:	4b37      	ldr	r3, [pc, #220]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b21b      	sxth	r3, r3
 8002ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ab4:	b21a      	sxth	r2, r3
 8002ab6:	4b35      	ldr	r3, [pc, #212]	@ (8002b8c <APP_voidForward_LeftTasks+0x1ac>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	b21b      	sxth	r3, r3
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	b21b      	sxth	r3, r3
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	4b2f      	ldr	r3, [pc, #188]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002acc:	801a      	strh	r2, [r3, #0]
}
 8002ace:	e054      	b.n	8002b7a <APP_voidForward_LeftTasks+0x19a>
					CLR_BIT(G_u8DataAfterProccing , 6) ;
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	4b2b      	ldr	r3, [pc, #172]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002adc:	801a      	strh	r2, [r3, #0]
					SET_BIT(G_u8DataAfterProccing , 7) ;
 8002ade:	4b2a      	ldr	r3, [pc, #168]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	4b27      	ldr	r3, [pc, #156]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002aea:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002aec:	4b26      	ldr	r3, [pc, #152]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b21b      	sxth	r3, r3
 8002af2:	f023 030f 	bic.w	r3, r3, #15
 8002af6:	b21a      	sxth	r2, r3
 8002af8:	4b24      	ldr	r3, [pc, #144]	@ (8002b8c <APP_voidForward_LeftTasks+0x1ac>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	b21b      	sxth	r3, r3
 8002b04:	4313      	orrs	r3, r2
 8002b06:	b21b      	sxth	r3, r3
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002b0c:	801a      	strh	r2, [r3, #0]
					G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (G_u8_LimetedSpeed << 4)) ;
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b21b      	sxth	r3, r3
 8002b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b18:	b21a      	sxth	r2, r3
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b90 <APP_voidForward_LeftTasks+0x1b0>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	b21b      	sxth	r3, r3
 8002b22:	4313      	orrs	r3, r2
 8002b24:	b21b      	sxth	r3, r3
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002b2a:	801a      	strh	r2, [r3, #0]
}
 8002b2c:	e025      	b.n	8002b7a <APP_voidForward_LeftTasks+0x19a>
			CLR_BIT(G_u8DataAfterProccing , 6) ;
 8002b2e:	4b16      	ldr	r3, [pc, #88]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	4b13      	ldr	r3, [pc, #76]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002b3a:	801a      	strh	r2, [r3, #0]
			CLR_BIT(G_u8DataAfterProccing , 7) ;
 8002b3c:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002b48:	801a      	strh	r2, [r3, #0]
			G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFFF0)) | G_xMy_Data.Direction) ;
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b21b      	sxth	r3, r3
 8002b50:	f023 030f 	bic.w	r3, r3, #15
 8002b54:	b21a      	sxth	r2, r3
 8002b56:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <APP_voidForward_LeftTasks+0x1ac>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	b21b      	sxth	r3, r3
 8002b62:	4313      	orrs	r3, r2
 8002b64:	b21b      	sxth	r3, r3
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b07      	ldr	r3, [pc, #28]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002b6a:	801a      	strh	r2, [r3, #0]
				G_u8DataAfterProccing = ((G_u8DataAfterProccing & (0xFF8F)) | (max_speed << 4)) ;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	4b04      	ldr	r3, [pc, #16]	@ (8002b88 <APP_voidForward_LeftTasks+0x1a8>)
 8002b78:	801a      	strh	r2, [r3, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000104 	.word	0x20000104
 8002b88:	2000010a 	.word	0x2000010a
 8002b8c:	20000100 	.word	0x20000100
 8002b90:	200000ca 	.word	0x200000ca

08002b94 <APP_GET_UART_Command>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518


}

void APP_GET_UART_Command()
{
<<<<<<< HEAD
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
	APP_G_u8DataFromUART = MUART_u8ReadDataRegister(UART1);
 8003120:	4804      	ldr	r0, [pc, #16]	; (8003134 <APP_GET_UART_Command+0x18>)
 8003122:	f7fe ff1d 	bl	8001f60 <MUART_u8ReadDataRegister>
 8003126:	4603      	mov	r3, r0
 8003128:	461a      	mov	r2, r3
 800312a:	4b03      	ldr	r3, [pc, #12]	; (8003138 <APP_GET_UART_Command+0x1c>)
 800312c:	701a      	strb	r2, [r3, #0]
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40013800 	.word	0x40013800
 8003138:	200001d8 	.word	0x200001d8

0800313c <NMI_Handler>:
=======
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0

}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <NMI_Handler>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
=======
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
<<<<<<< HEAD
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <HardFault_Handler>:
=======
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HardFault_Handler>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
=======
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800314c:	e7fe      	b.n	800314c <HardFault_Handler+0x4>

0800314e <MemManage_Handler>:
=======
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <HardFault_Handler+0x4>

08002bb4 <MemManage_Handler>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0
=======
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8003152:	e7fe      	b.n	8003152 <MemManage_Handler+0x4>

08003154 <BusFault_Handler>:
=======
 8002bb8:	bf00      	nop
 8002bba:	e7fd      	b.n	8002bb8 <MemManage_Handler+0x4>

08002bbc <BusFault_Handler>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
=======
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8003158:	e7fe      	b.n	8003158 <BusFault_Handler+0x4>

0800315a <UsageFault_Handler>:
=======
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <BusFault_Handler+0x4>

08002bc4 <UsageFault_Handler>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
=======
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800315e:	e7fe      	b.n	800315e <UsageFault_Handler+0x4>

08003160 <SVC_Handler>:
=======
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <UsageFault_Handler+0x4>

08002bcc <SVC_Handler>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
=======
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <DebugMon_Handler>:
=======
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <DebugMon_Handler>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
=======
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <PendSV_Handler>:
=======
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <PendSV_Handler>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
=======
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <SystemInit>:
=======
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <SystemInit>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
=======
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <Reset_Handler>:
=======
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <Reset_Handler>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
<<<<<<< HEAD
 8003190:	480c      	ldr	r0, [pc, #48]	; (80031c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003192:	490d      	ldr	r1, [pc, #52]	; (80031c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003194:	4a0d      	ldr	r2, [pc, #52]	; (80031cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003198:	e002      	b.n	80031a0 <LoopCopyDataInit>

0800319a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800319a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800319c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800319e:	3304      	adds	r3, #4

080031a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031a4:	d3f9      	bcc.n	800319a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031a6:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031a8:	4c0a      	ldr	r4, [pc, #40]	; (80031d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031ac:	e001      	b.n	80031b2 <LoopFillZerobss>

080031ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031b0:	3204      	adds	r2, #4

080031b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031b4:	d3fb      	bcc.n	80031ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031b6:	f7ff ffe5 	bl	8003184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ba:	f000 f80f 	bl	80031dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031be:	f7ff f93b 	bl	8002438 <main>
  bx lr
 80031c2:	4770      	bx	lr
  ldr r0, =_sdata
 80031c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031c8:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80031cc:	08003244 	.word	0x08003244
  ldr r2, =_sbss
 80031d0:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80031d4:	200001dc 	.word	0x200001dc

080031d8 <ADC1_2_IRQHandler>:
=======
 8002bfc:	480c      	ldr	r0, [pc, #48]	@ (8002c30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bfe:	490d      	ldr	r1, [pc, #52]	@ (8002c34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c00:	4a0d      	ldr	r2, [pc, #52]	@ (8002c38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c04:	e002      	b.n	8002c0c <LoopCopyDataInit>

08002c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0a:	3304      	adds	r3, #4

08002c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c10:	d3f9      	bcc.n	8002c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c12:	4a0a      	ldr	r2, [pc, #40]	@ (8002c3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c14:	4c0a      	ldr	r4, [pc, #40]	@ (8002c40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c18:	e001      	b.n	8002c1e <LoopFillZerobss>

08002c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c1c:	3204      	adds	r2, #4

08002c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c20:	d3fb      	bcc.n	8002c1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c22:	f7ff ffe5 	bl	8002bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c26:	f000 f80f 	bl	8002c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c2a:	f7ff f9b9 	bl	8001fa0 <main>
  bx lr
 8002c2e:	4770      	bx	lr
  ldr r0, =_sdata
 8002c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c34:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002c38:	08002cb0 	.word	0x08002cb0
  ldr r2, =_sbss
 8002c3c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8002c40:	2000010c 	.word	0x2000010c

08002c44 <ADC1_2_IRQHandler>:
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 80031d8:	e7fe      	b.n	80031d8 <ADC1_2_IRQHandler>
	...

080031dc <__libc_init_array>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	2500      	movs	r5, #0
 80031e0:	4e0c      	ldr	r6, [pc, #48]	; (8003214 <__libc_init_array+0x38>)
 80031e2:	4c0d      	ldr	r4, [pc, #52]	; (8003218 <__libc_init_array+0x3c>)
 80031e4:	1ba4      	subs	r4, r4, r6
 80031e6:	10a4      	asrs	r4, r4, #2
 80031e8:	42a5      	cmp	r5, r4
 80031ea:	d109      	bne.n	8003200 <__libc_init_array+0x24>
 80031ec:	f000 f81a 	bl	8003224 <_init>
 80031f0:	2500      	movs	r5, #0
 80031f2:	4e0a      	ldr	r6, [pc, #40]	; (800321c <__libc_init_array+0x40>)
 80031f4:	4c0a      	ldr	r4, [pc, #40]	; (8003220 <__libc_init_array+0x44>)
 80031f6:	1ba4      	subs	r4, r4, r6
 80031f8:	10a4      	asrs	r4, r4, #2
 80031fa:	42a5      	cmp	r5, r4
 80031fc:	d105      	bne.n	800320a <__libc_init_array+0x2e>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003204:	4798      	blx	r3
 8003206:	3501      	adds	r5, #1
 8003208:	e7ee      	b.n	80031e8 <__libc_init_array+0xc>
 800320a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800320e:	4798      	blx	r3
 8003210:	3501      	adds	r5, #1
 8003212:	e7f2      	b.n	80031fa <__libc_init_array+0x1e>
 8003214:	0800323c 	.word	0x0800323c
 8003218:	0800323c 	.word	0x0800323c
 800321c:	0800323c 	.word	0x0800323c
 8003220:	08003240 	.word	0x08003240

08003224 <_init>:
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	bf00      	nop
 8003228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322a:	bc08      	pop	{r3}
 800322c:	469e      	mov	lr, r3
 800322e:	4770      	bx	lr

08003230 <_fini>:
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003232:	bf00      	nop
 8003234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003236:	bc08      	pop	{r3}
 8003238:	469e      	mov	lr, r3
 800323a:	4770      	bx	lr
=======
 8002c44:	e7fe      	b.n	8002c44 <ADC1_2_IRQHandler>
	...

08002c48 <__libc_init_array>:
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	2600      	movs	r6, #0
 8002c4c:	4d0c      	ldr	r5, [pc, #48]	@ (8002c80 <__libc_init_array+0x38>)
 8002c4e:	4c0d      	ldr	r4, [pc, #52]	@ (8002c84 <__libc_init_array+0x3c>)
 8002c50:	1b64      	subs	r4, r4, r5
 8002c52:	10a4      	asrs	r4, r4, #2
 8002c54:	42a6      	cmp	r6, r4
 8002c56:	d109      	bne.n	8002c6c <__libc_init_array+0x24>
 8002c58:	f000 f81a 	bl	8002c90 <_init>
 8002c5c:	2600      	movs	r6, #0
 8002c5e:	4d0a      	ldr	r5, [pc, #40]	@ (8002c88 <__libc_init_array+0x40>)
 8002c60:	4c0a      	ldr	r4, [pc, #40]	@ (8002c8c <__libc_init_array+0x44>)
 8002c62:	1b64      	subs	r4, r4, r5
 8002c64:	10a4      	asrs	r4, r4, #2
 8002c66:	42a6      	cmp	r6, r4
 8002c68:	d105      	bne.n	8002c76 <__libc_init_array+0x2e>
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}
 8002c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c70:	4798      	blx	r3
 8002c72:	3601      	adds	r6, #1
 8002c74:	e7ee      	b.n	8002c54 <__libc_init_array+0xc>
 8002c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7a:	4798      	blx	r3
 8002c7c:	3601      	adds	r6, #1
 8002c7e:	e7f2      	b.n	8002c66 <__libc_init_array+0x1e>
 8002c80:	08002ca8 	.word	0x08002ca8
 8002c84:	08002ca8 	.word	0x08002ca8
 8002c88:	08002ca8 	.word	0x08002ca8
 8002c8c:	08002cac 	.word	0x08002cac

08002c90 <_init>:
 8002c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c92:	bf00      	nop
 8002c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c96:	bc08      	pop	{r3}
 8002c98:	469e      	mov	lr, r3
 8002c9a:	4770      	bx	lr

08002c9c <_fini>:
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	bf00      	nop
 8002ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca2:	bc08      	pop	{r3}
 8002ca4:	469e      	mov	lr, r3
 8002ca6:	4770      	bx	lr
>>>>>>> a3f83467b01eb27b85baadafb2473b7ffbc4c518
